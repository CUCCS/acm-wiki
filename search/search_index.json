{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to CUC ACM-Wiki\uff01 \u00b6 \u84dd\u6865\u676f\u53ca\u6821\u5185\u6bd4\u8d5b\u8bad\u7ec3\u5e73\u53f0\uff1a CUC ACM OJ \u56fe\u7247\u6765\u6e90\uff1a\u5fae\u4fe1\u8868\u60c5 - \u5b3f\u6656 - \u8ba1\u5c0f\u9e21 Contents \u00b6 2021\u6691\u671f\u96c6\u8bad C\u8bed\u8a00\u57fa\u7840 \u57fa\u7840\u7b97\u6cd5 STL \u56fe\u8bba DP \u641c\u7d22 \u6570\u8bba \u6570\u636e\u7ed3\u6784 \u5982\u4f55\u53c2\u4e0e\u672c\u9879\u76ee","title":"\u4e3b\u9875"},{"location":"#welcome-to-cuc-acm-wiki","text":"\u84dd\u6865\u676f\u53ca\u6821\u5185\u6bd4\u8d5b\u8bad\u7ec3\u5e73\u53f0\uff1a CUC ACM OJ \u56fe\u7247\u6765\u6e90\uff1a\u5fae\u4fe1\u8868\u60c5 - \u5b3f\u6656 - \u8ba1\u5c0f\u9e21","title":"Welcome to CUC ACM-Wiki\uff01"},{"location":"#contents","text":"2021\u6691\u671f\u96c6\u8bad C\u8bed\u8a00\u57fa\u7840 \u57fa\u7840\u7b97\u6cd5 STL \u56fe\u8bba DP \u641c\u7d22 \u6570\u8bba \u6570\u636e\u7ed3\u6784 \u5982\u4f55\u53c2\u4e0e\u672c\u9879\u76ee","title":"Contents"},{"location":"FAQ/","text":"F.A.Q \u00b6 \u8fd9\u4e2a\u7f51\u7ad9\u662f\u5e72\u4ec0\u4e48\u7528\u7684\uff1f \u00b6 \u5b66\u4e60\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u76f8\u5173\u5185\u5bb9 \u53d1\u5e03\u4e2d\u56fd\u4f20\u5a92\u5927\u5b66ACM\u96c6\u8bad\u961f\u76f8\u5173\u5b89\u6392 \u4e3a\u4ec0\u4e48\u663e\u793a\u6211\u63d0\u4ea4\u5931\u8d25\u4e86\uff1f \u00b6 Travis\u53ea\u5bf9 master \u5206\u652f\u8fdb\u884c\u7f51\u9875\u6e32\u67d3\uff0c\u53ea\u8981\u4ed3\u5e93\u6536\u5230\u60a8\u7684PR\u5c31\u53ef\u4ee5\u4e86\u3002 \u5bf9\u63d0\u4ea4\u7684\u6587\u6863\u6709\u8981\u6c42\u5417\uff1f \u00b6 \u9996\u5148\u8981\u4fdd\u8bc1\u5185\u5bb9\u53d1\u6b63\u786e\u6027\u548c\u4e25\u8c28\u6027\u3002\u5176\u6b21\u6211\u4eec\u5e0c\u671b\u60a8\u53ef\u4ee5\u591a\u4e00\u4e9b\u8bb2\u89e3\u548c\u56fe\u793a\uff0c\u5c3d\u91cf\u4fbf\u4e8e\u5176\u4ed6\u4eba\u7406\u89e3\u3002\u76ee\u524d\u53ea\u63a5\u53d7markdown\u6587\u4ef6\u3002 \u76ee\u524d\u7684\u5185\u5bb9\u597d\u5c11\u554a... \u00b6 \u662f\u7684\uff0c\u76ee\u524d\u7f51\u7ad9\u8fdc\u8fdc\u79f0\u4e0d\u4e0a\u662f\u4e00\u4e2a\u5408\u683c\u7684 Wiki\u3002\u5f53\u524d\u7684\u5185\u5bb9\u4e5f\u6bd4\u8f83\u57fa\u7840\u3002\u6240\u4ee5\u5728\u8fd9\u91cc\u8fdb\u884c\u5f81\u7a3f\u548c\u62db\u52df\uff0c\u5e0c\u671b\u53ef\u4ee5\u9047\u5230\u6709\u540c\u6837\u60f3\u6cd5\u7684\u670b\u53cb\uff0c\u6211\u4eec\u4e00\u8d77\u628a\u8fd9\u4e2a\u7f51\u7ad9\u5b8c\u5584\u8d77\u6765\u3002\u6211\u4eec\u671f\u5f85\u60a8\u7684PR\u3002","title":"F.A.Q"},{"location":"FAQ/#faq","text":"","title":"F.A.Q"},{"location":"FAQ/#_1","text":"\u5b66\u4e60\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u76f8\u5173\u5185\u5bb9 \u53d1\u5e03\u4e2d\u56fd\u4f20\u5a92\u5927\u5b66ACM\u96c6\u8bad\u961f\u76f8\u5173\u5b89\u6392","title":"\u8fd9\u4e2a\u7f51\u7ad9\u662f\u5e72\u4ec0\u4e48\u7528\u7684\uff1f"},{"location":"FAQ/#_2","text":"Travis\u53ea\u5bf9 master \u5206\u652f\u8fdb\u884c\u7f51\u9875\u6e32\u67d3\uff0c\u53ea\u8981\u4ed3\u5e93\u6536\u5230\u60a8\u7684PR\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u4e3a\u4ec0\u4e48\u663e\u793a\u6211\u63d0\u4ea4\u5931\u8d25\u4e86\uff1f"},{"location":"FAQ/#_3","text":"\u9996\u5148\u8981\u4fdd\u8bc1\u5185\u5bb9\u53d1\u6b63\u786e\u6027\u548c\u4e25\u8c28\u6027\u3002\u5176\u6b21\u6211\u4eec\u5e0c\u671b\u60a8\u53ef\u4ee5\u591a\u4e00\u4e9b\u8bb2\u89e3\u548c\u56fe\u793a\uff0c\u5c3d\u91cf\u4fbf\u4e8e\u5176\u4ed6\u4eba\u7406\u89e3\u3002\u76ee\u524d\u53ea\u63a5\u53d7markdown\u6587\u4ef6\u3002","title":"\u5bf9\u63d0\u4ea4\u7684\u6587\u6863\u6709\u8981\u6c42\u5417\uff1f"},{"location":"FAQ/#_4","text":"\u662f\u7684\uff0c\u76ee\u524d\u7f51\u7ad9\u8fdc\u8fdc\u79f0\u4e0d\u4e0a\u662f\u4e00\u4e2a\u5408\u683c\u7684 Wiki\u3002\u5f53\u524d\u7684\u5185\u5bb9\u4e5f\u6bd4\u8f83\u57fa\u7840\u3002\u6240\u4ee5\u5728\u8fd9\u91cc\u8fdb\u884c\u5f81\u7a3f\u548c\u62db\u52df\uff0c\u5e0c\u671b\u53ef\u4ee5\u9047\u5230\u6709\u540c\u6837\u60f3\u6cd5\u7684\u670b\u53cb\uff0c\u6211\u4eec\u4e00\u8d77\u628a\u8fd9\u4e2a\u7f51\u7ad9\u5b8c\u5584\u8d77\u6765\u3002\u6211\u4eec\u671f\u5f85\u60a8\u7684PR\u3002","title":"\u76ee\u524d\u7684\u5185\u5bb9\u597d\u5c11\u554a..."},{"location":"intro/","text":"\u7f51\u7ad9\u5efa\u8bbe \u00b6 \u7f51\u7ad9\u4eff\u7167 OI-Wiki \u57fa\u4e8e mkdocs \u8bbe\u8ba1\uff0c\u7528\u4e8e\u5b66\u4e60\u7b97\u6cd5\u7ade\u8d5b\u76f8\u5173\u7684\u5185\u5bb9\u3002\u652f\u6301 markdown \u548c LaTeX \u8bed\u6cd5\u3002 \u672c\u9879\u76ee\u6258\u7ba1\u5728GitHub\u7684 repo \u4e2d\uff0c\u7531Travis\u81ea\u52a8\u90e8\u7f72\u3002 master \u5206\u652f\u4e0b\u4e3a\u76f8\u5173\u6587\u6863\uff0c gh-page \u5206\u652f\u4e0b\u4e3a\u7f51\u9875\u3002 \u79fb\u52a8\u7aef \u00b6 \u624b\u673a\u79fb\u52a8\u7aef\u76ee\u5f55\u6811\u5728\u5de6\u4e0a\u89d2\uff0c\u4e5f\u53ef\u5728\u53f3\u4e0b\u89d2\u7ffb\u9875\u3002 \u5982\u4f55\u53c2\u4e0e \u00b6 \u5982\u679c\u60a8\u6709\u610f\u5411\u53c2\u4e0e\u8d21\u732e\uff0c\u5e76\u5728\u4ed3\u5e93 master \u5206\u652f /docs \u76ee\u5f55\u4e0b\u6dfb\u52a0 markdown\u6587\u4ef6\uff0c\u5e76\u5728 mkdocs.yml \u6587\u4ef6\u5185\u5bb9\u91cc\u589e\u52a0\u76f8\u5e94\u7684\u9875\u9762\u3002\u7136\u540e pull request \u5c31\u53ef\u4ee5\u4e86\u3002\u8bf7\u5728 commit message \u5927\u81f4\u8bf4\u660e\u8fdb\u884c\u4e86\u54ea\u4e9b\u64cd\u4f5c\u3002 \u6587\u6863\u5b58\u50a8\u683c\u5f0f \u00b6 \u6587\u4ef6\u540d\u8bf7\u52a1\u5fc5\u90fd\u5c0f\u5199\uff0c\u4ee5 - \u5206\u5272\uff0c\u5982 file-name \u3002 \u8bf7\u52a1\u5fc5\u786e\u4fdd\u60a8\u7684\u6587\u6863\u4e2d\u5f15\u7528\u7684 \u5916\u94fe \u56fe\u7247\u5df2\u7ecf\u5168\u90e8\u8f6c\u5b58\u5230\u4e86 \u672c\u5e93\u5185 \u5bf9\u5e94\u7684 img \u6587\u4ef6\u5939\u4e2d\uff0c\u5efa\u8bae\u5904\u7406\u6210 MD \u6587\u6863\u540d\u79f0 + \u7f16\u53f7 \u7684\u5f62\u5f0f\uff1b\uff08\u5373\u683c\u5f0f\u4e3a ![\u63cf\u8ff0\u4fe1\u606f](img/example-1.jpg) \uff09\u3002 \u8054\u7cfb\u65b9\u5f0f \u00b6 Issue","title":"\u5173\u4e8e\u672c\u9879\u76ee"},{"location":"intro/#_1","text":"\u7f51\u7ad9\u4eff\u7167 OI-Wiki \u57fa\u4e8e mkdocs \u8bbe\u8ba1\uff0c\u7528\u4e8e\u5b66\u4e60\u7b97\u6cd5\u7ade\u8d5b\u76f8\u5173\u7684\u5185\u5bb9\u3002\u652f\u6301 markdown \u548c LaTeX \u8bed\u6cd5\u3002 \u672c\u9879\u76ee\u6258\u7ba1\u5728GitHub\u7684 repo \u4e2d\uff0c\u7531Travis\u81ea\u52a8\u90e8\u7f72\u3002 master \u5206\u652f\u4e0b\u4e3a\u76f8\u5173\u6587\u6863\uff0c gh-page \u5206\u652f\u4e0b\u4e3a\u7f51\u9875\u3002","title":"\u7f51\u7ad9\u5efa\u8bbe"},{"location":"intro/#_2","text":"\u624b\u673a\u79fb\u52a8\u7aef\u76ee\u5f55\u6811\u5728\u5de6\u4e0a\u89d2\uff0c\u4e5f\u53ef\u5728\u53f3\u4e0b\u89d2\u7ffb\u9875\u3002","title":"\u79fb\u52a8\u7aef"},{"location":"intro/#_3","text":"\u5982\u679c\u60a8\u6709\u610f\u5411\u53c2\u4e0e\u8d21\u732e\uff0c\u5e76\u5728\u4ed3\u5e93 master \u5206\u652f /docs \u76ee\u5f55\u4e0b\u6dfb\u52a0 markdown\u6587\u4ef6\uff0c\u5e76\u5728 mkdocs.yml \u6587\u4ef6\u5185\u5bb9\u91cc\u589e\u52a0\u76f8\u5e94\u7684\u9875\u9762\u3002\u7136\u540e pull request \u5c31\u53ef\u4ee5\u4e86\u3002\u8bf7\u5728 commit message \u5927\u81f4\u8bf4\u660e\u8fdb\u884c\u4e86\u54ea\u4e9b\u64cd\u4f5c\u3002","title":"\u5982\u4f55\u53c2\u4e0e"},{"location":"intro/#_4","text":"\u6587\u4ef6\u540d\u8bf7\u52a1\u5fc5\u90fd\u5c0f\u5199\uff0c\u4ee5 - \u5206\u5272\uff0c\u5982 file-name \u3002 \u8bf7\u52a1\u5fc5\u786e\u4fdd\u60a8\u7684\u6587\u6863\u4e2d\u5f15\u7528\u7684 \u5916\u94fe \u56fe\u7247\u5df2\u7ecf\u5168\u90e8\u8f6c\u5b58\u5230\u4e86 \u672c\u5e93\u5185 \u5bf9\u5e94\u7684 img \u6587\u4ef6\u5939\u4e2d\uff0c\u5efa\u8bae\u5904\u7406\u6210 MD \u6587\u6863\u540d\u79f0 + \u7f16\u53f7 \u7684\u5f62\u5f0f\uff1b\uff08\u5373\u683c\u5f0f\u4e3a ![\u63cf\u8ff0\u4fe1\u606f](img/example-1.jpg) \uff09\u3002","title":"\u6587\u6863\u5b58\u50a8\u683c\u5f0f"},{"location":"intro/#_5","text":"Issue","title":"\u8054\u7cfb\u65b9\u5f0f"},{"location":"STL/bitset/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a cuccenter \uff0c YanhuiJessica \uff0c LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u7528\u9014 \u00b6 \u7c7b\u4f3c\u6570\u7ec4\u7684\u7ed3\u6784\uff0c\u5b83\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u53ea\u80fd\u662f\uff10\u6216\uff11\uff0c\u6bcf\u4e2a\u5143\u7d20\u4ec5\u7528\uff11bit\u7a7a\u95f4\u3002\u7528\u5b83\u5b58\u50a8\u6570\u636e\u56de\u6bd4\u7528\u6570\u7ec4\u7701\u7a7a\u95f4\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <bitset> \u57fa\u672c\u64cd\u4f5c \u00b6 \u5b9a\u4e49 \u00b6 1 bitset < length > name ; \u5373\u5b9a\u4e49\u6709length\u4f4d\u7684bitset\u3002 \u5143\u7d20\u8bbf\u95ee \u00b6 \u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee\u67d0\u4e00\u4f4d \u00b6 \u5de6\u8fb9\u4f4d\u4f4e\u4f4d\uff0c\u53f3\u8fb9\u4e3a\u9ad8\u4f4d\u3002 1 2 3 4 5 6 7 8 #include <iostream> #include <bitset> using namespace std ; int main () { bitset < 8 > bit ( 25 ); cout << bit [ 0 ] << endl ; } \u8f93\u51fa 1 1 \u76f4\u63a5\u8f93\u51fa\u5168\u90e8\u4f4d\u6570 \u00b6 1 2 3 4 5 6 7 8 #include <iostream> #include <bitset> using namespace std ; int main () { bitset < 8 > bit ( 25 ); cout << bit << endl ; } \u8f93\u51fa\uff1a 1 00011001 \u6784\u9020\u51fd\u6570 \u00b6 \u6784\u9020\u51fd\u6570 \u4f5c\u7528 bitset< length > bit \u65e0\u53c2\u6784\u9020\u51fd\u6570\uff0c\u9ed8\u8ba4\u5168\u4e3a0 bitset< length > bit(string) \u5c06string\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\uff0c\u8981\u6c42string\u5fc5\u987b\u753101\u6784\u6210\uff0c\u957f\u5ea6\u4e0d\u8db3\u5b9a\u4e49\u957f\u5ea6\u65f6\uff0c\u6309\u7167\u653e\u5728\u4f4e\u4f4d bitset< length > bit( char[] ) \u540c\u4e0a bitset< length > bit(val) \u5c06val\u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u653e\u5728bitset\u4e2d \u5e38\u7528\u51fd\u6570 \u00b6 \u51fd\u6570 \u4f5c\u7528 bit.size() \u8fd4\u56de\u5927\u5c0f\uff08\u4f4d\u6570\uff09 bit.count() \u8fd4\u56de1\u7684\u4e2a\u6570 bit.any() \u8fd4\u56de\u662f\u5426\u67091 bit.none() \u8fd4\u56de\u662f\u5426\u6ca1\u67091 bit.set() \u5168\u90fd\u53d8\u62101 bit.set(p) \u5c06\u7b2c\u4f4d\u7f6ep\u53d8\u62101 bit.set(p, x) \u5c06\u4f4d\u7f6ep\u53d8\u6210x bit.reset() \u5168\u90fd\u53d8\u62100 bit.reset(p) \u5c06\u4f4d\u7f6ep\u53d8\u62100 bit.flip() \u5168\u90fd\u53d6\u53cd bit.flip(p) \u5c06\u4f4d\u7f6ep\u53d6\u53cd bit.to_ulong() \u8fd4\u56de\u5b83\u8f6c\u6362\u4e3aunsigned long\u7684\u7ed3\u679c\uff0c\u5982\u679c\u8d85\u51fa\u8303\u56f4\u5219\u62a5\u9519 bit.to_ullong() \u8fd4\u56de\u5b83\u8f6c\u6362\u4e3aunsigned long long\u7684\u7ed3\u679c\uff0c\u5982\u679c\u8d85\u51fa\u8303\u56f4\u5219\u62a5\u9519 bit.to_string() \u8fd4\u56de\u5b83\u8f6c\u6362\u4e3astring\u7684\u7ed3\u679c \u5e38\u89c1\u4f7f\u7528\u60c5\u51b5 \u00b6 \u4e8c\u8fdb\u5236\u76f8\u5173\u64cd\u4f5c \u8282\u7701\u7a7a\u95f4","title":"Bitset"},{"location":"STL/bitset/#_1","text":"\u7c7b\u4f3c\u6570\u7ec4\u7684\u7ed3\u6784\uff0c\u5b83\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u53ea\u80fd\u662f\uff10\u6216\uff11\uff0c\u6bcf\u4e2a\u5143\u7d20\u4ec5\u7528\uff11bit\u7a7a\u95f4\u3002\u7528\u5b83\u5b58\u50a8\u6570\u636e\u56de\u6bd4\u7528\u6570\u7ec4\u7701\u7a7a\u95f4\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <bitset>","title":"\u7528\u9014"},{"location":"STL/bitset/#_2","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"STL/bitset/#_3","text":"1 bitset < length > name ; \u5373\u5b9a\u4e49\u6709length\u4f4d\u7684bitset\u3002","title":"\u5b9a\u4e49"},{"location":"STL/bitset/#_4","text":"","title":"\u5143\u7d20\u8bbf\u95ee"},{"location":"STL/bitset/#_5","text":"\u5de6\u8fb9\u4f4d\u4f4e\u4f4d\uff0c\u53f3\u8fb9\u4e3a\u9ad8\u4f4d\u3002 1 2 3 4 5 6 7 8 #include <iostream> #include <bitset> using namespace std ; int main () { bitset < 8 > bit ( 25 ); cout << bit [ 0 ] << endl ; } \u8f93\u51fa 1 1","title":"\u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee\u67d0\u4e00\u4f4d"},{"location":"STL/bitset/#_6","text":"1 2 3 4 5 6 7 8 #include <iostream> #include <bitset> using namespace std ; int main () { bitset < 8 > bit ( 25 ); cout << bit << endl ; } \u8f93\u51fa\uff1a 1 00011001","title":"\u76f4\u63a5\u8f93\u51fa\u5168\u90e8\u4f4d\u6570"},{"location":"STL/bitset/#_7","text":"\u6784\u9020\u51fd\u6570 \u4f5c\u7528 bitset< length > bit \u65e0\u53c2\u6784\u9020\u51fd\u6570\uff0c\u9ed8\u8ba4\u5168\u4e3a0 bitset< length > bit(string) \u5c06string\u8f6c\u6362\u6210\u4e8c\u8fdb\u5236\uff0c\u8981\u6c42string\u5fc5\u987b\u753101\u6784\u6210\uff0c\u957f\u5ea6\u4e0d\u8db3\u5b9a\u4e49\u957f\u5ea6\u65f6\uff0c\u6309\u7167\u653e\u5728\u4f4e\u4f4d bitset< length > bit( char[] ) \u540c\u4e0a bitset< length > bit(val) \u5c06val\u8f6c\u5316\u6210\u4e8c\u8fdb\u5236\u653e\u5728bitset\u4e2d","title":"\u6784\u9020\u51fd\u6570"},{"location":"STL/bitset/#_8","text":"\u51fd\u6570 \u4f5c\u7528 bit.size() \u8fd4\u56de\u5927\u5c0f\uff08\u4f4d\u6570\uff09 bit.count() \u8fd4\u56de1\u7684\u4e2a\u6570 bit.any() \u8fd4\u56de\u662f\u5426\u67091 bit.none() \u8fd4\u56de\u662f\u5426\u6ca1\u67091 bit.set() \u5168\u90fd\u53d8\u62101 bit.set(p) \u5c06\u7b2c\u4f4d\u7f6ep\u53d8\u62101 bit.set(p, x) \u5c06\u4f4d\u7f6ep\u53d8\u6210x bit.reset() \u5168\u90fd\u53d8\u62100 bit.reset(p) \u5c06\u4f4d\u7f6ep\u53d8\u62100 bit.flip() \u5168\u90fd\u53d6\u53cd bit.flip(p) \u5c06\u4f4d\u7f6ep\u53d6\u53cd bit.to_ulong() \u8fd4\u56de\u5b83\u8f6c\u6362\u4e3aunsigned long\u7684\u7ed3\u679c\uff0c\u5982\u679c\u8d85\u51fa\u8303\u56f4\u5219\u62a5\u9519 bit.to_ullong() \u8fd4\u56de\u5b83\u8f6c\u6362\u4e3aunsigned long long\u7684\u7ed3\u679c\uff0c\u5982\u679c\u8d85\u51fa\u8303\u56f4\u5219\u62a5\u9519 bit.to_string() \u8fd4\u56de\u5b83\u8f6c\u6362\u4e3astring\u7684\u7ed3\u679c","title":"\u5e38\u7528\u51fd\u6570"},{"location":"STL/bitset/#_9","text":"\u4e8c\u8fdb\u5236\u76f8\u5173\u64cd\u4f5c \u8282\u7701\u7a7a\u95f4","title":"\u5e38\u89c1\u4f7f\u7528\u60c5\u51b5"},{"location":"STL/introduction/","text":"\u4ec0\u4e48\u662fSTL\uff1f \u00b6 STL\uff08Standard Template Library\uff09\uff0c\u5373\u6807\u51c6\u6a21\u677f\u5e93\uff0c\u662f\u4e00\u4e2a\u5177\u6709\u5de5\u4e1a\u5f3a\u5ea6\u7684\uff0c\u9ad8\u6548\u7684C++\u7a0b\u5e8f\u5e93\u3002 STL \u501f\u52a9\u6a21\u677f\u5b9e\u73b0\u4e86\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\u53ca\u5176\u7b97\u6cd5\uff0c\u5e76\u4e14\u505a\u5230\u4e86\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u5206\u79bb\u3002 STL\u5305\u62ec\u5bb9\u5668\uff08Container\uff09 \u8fed\u4ee3\u5668\uff08Iterator\uff09 \u7b97\u6cd5\uff08Algorithm\uff09 \u4eff\u51fd\u6570\uff08Functor\uff09 \u9002\u914d\u5668\uff08Adaptor\uff09 \u5206\u914d\u5668\uff08Allocator\uff09\u516d\u5927\u7ec4\u4ef6\uff0c\u5728\u7b97\u6cd5\u7ade\u8d5b\u91cc\u6709\u5e7f\u6cdb\u7684\u5e94\u7528\u3002 STL\u90e8\u5206\u7684\u8d21\u732e\u8005 \u00b6 cuccenter \uff0c YanhuiJessica \uff0c LyuLumos","title":"STL\u7b80\u4ecb"},{"location":"STL/introduction/#stl","text":"STL\uff08Standard Template Library\uff09\uff0c\u5373\u6807\u51c6\u6a21\u677f\u5e93\uff0c\u662f\u4e00\u4e2a\u5177\u6709\u5de5\u4e1a\u5f3a\u5ea6\u7684\uff0c\u9ad8\u6548\u7684C++\u7a0b\u5e8f\u5e93\u3002 STL \u501f\u52a9\u6a21\u677f\u5b9e\u73b0\u4e86\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\u53ca\u5176\u7b97\u6cd5\uff0c\u5e76\u4e14\u505a\u5230\u4e86\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u5206\u79bb\u3002 STL\u5305\u62ec\u5bb9\u5668\uff08Container\uff09 \u8fed\u4ee3\u5668\uff08Iterator\uff09 \u7b97\u6cd5\uff08Algorithm\uff09 \u4eff\u51fd\u6570\uff08Functor\uff09 \u9002\u914d\u5668\uff08Adaptor\uff09 \u5206\u914d\u5668\uff08Allocator\uff09\u516d\u5927\u7ec4\u4ef6\uff0c\u5728\u7b97\u6cd5\u7ade\u8d5b\u91cc\u6709\u5e7f\u6cdb\u7684\u5e94\u7528\u3002","title":"\u4ec0\u4e48\u662fSTL\uff1f"},{"location":"STL/introduction/#stl_1","text":"cuccenter \uff0c YanhuiJessica \uff0c LyuLumos","title":"STL\u90e8\u5206\u7684\u8d21\u732e\u8005"},{"location":"STL/list/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a cuccenter \uff0c YanhuiJessica \uff0c LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u7528\u9014 \u00b6 \u5c31\u662f\u94fe\u8868\uff0c\u5f53\u9700\u8981\u5feb\u901f O(1) O(1) \u7684\u65f6\u95f4\u63d2\u5165\u6216\u8005\u5220\u9664\u65f6\u9700\u8981\u4f7f\u7528\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <list> \u57fa\u672c\u64cd\u4f5c \u00b6 \u5b9a\u4e49 \u00b6 1 list < type > name ; \u8bbf\u95ee\u5143\u7d20 \u00b6 \u4ec5\u80fd\u4f7f\u7528\u8fed\u4ee3\u5668\u8bbf\u95ee \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> #include <list> using namespace std ; int main () { list < int > l ; l . push_back ( 1 ); auto it = l . begin (); cout << * it << endl ; } \u8f93\u51fa: 1 1 \u5e38\u7528\u51fd\u6570 \u00b6 \u51fd\u6570 \u542b\u4e49 l.begin() \u8fd4\u56de\u94fe\u8868\u9996\u5730\u5740 l.end() \u8fd4\u56de\u94fe\u8868\u5c3e\u5730\u5740 l.front() \u8fd4\u56de\u9996\u5143\u7d20 l.back() \u8fd4\u56de\u5c3e\u5143\u7d20 l.push_back(elem) \u63d2\u5165\u5143\u7d20\u5230\u94fe\u8868\u5c3e\u90e8 l.push_front(elem) \u63d2\u5165\u5143\u7d20\u5230\u94fe\u8868\u5934\u90e8 l.empty() \u5224\u65ad\u94fe\u8868\u662f\u5426\u4e3a\u7a7a l.insert(it, val1, val2)) \u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20 l.resize(n) \u8c03\u6574\u94fe\u8868\u5927\u5c0f\u4e3an\uff0c\u8d85\u51fan\u5220\u9664\uff0c\u5c11\u4e8en\u88650 l.clear() \u6e05\u9664 l.assign(len, val) \u66ff\u6362\u6240\u6709\u5143\u7d20 l.assign(l2.begin(), l2.end()) \u66ff\u6362\u6240\u6709\u5143\u7d20\u4e3a\u94fe\u8868l2 l.swap(l2) \u4ea4\u6362\u94fe\u8868 l.merge(l2) \u5408\u5e76\u4e24\u4e2a \u6709\u5e8f \u94fe\u8868\u4e2d\u7684\u5143\u7d20\uff0c\u8c03\u7528\u540el2\u4e3a\u7a7a\uff0c\u53ef\u7528greater () l.erase(it) \u5220\u9664\uff08\u533a\u57df\u4e2d\u7684\uff09\u5143\u7d20 l.remove(val) \u5220\u9664\u503c\u4e3aval \u7684\u5143\u7d20 \u5e38\u89c1\u4f7f\u7528\u60c5\u51b5 \u00b6 \u9700\u8981\u5feb\u901f\u63d2\u5165\u5220\u9664\u3002 \u8282\u7701\u5b58\u50a8\u7a7a\u95f4 \u6a21\u62df\u53cc\u7aef\u961f\u5217 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u63d2\u5165\u5220\u9664 O(1) O(1) \u67e5\u627e O(n) O(n) \uff0c n n \u4e3a\u94fe\u8868\u957f\u5ea6","title":"List"},{"location":"STL/list/#_1","text":"\u5c31\u662f\u94fe\u8868\uff0c\u5f53\u9700\u8981\u5feb\u901f O(1) O(1) \u7684\u65f6\u95f4\u63d2\u5165\u6216\u8005\u5220\u9664\u65f6\u9700\u8981\u4f7f\u7528\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <list>","title":"\u7528\u9014"},{"location":"STL/list/#_2","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"STL/list/#_3","text":"1 list < type > name ;","title":"\u5b9a\u4e49"},{"location":"STL/list/#_4","text":"","title":"\u8bbf\u95ee\u5143\u7d20"},{"location":"STL/list/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 #include <iostream> #include <list> using namespace std ; int main () { list < int > l ; l . push_back ( 1 ); auto it = l . begin (); cout << * it << endl ; } \u8f93\u51fa: 1 1","title":"\u4ec5\u80fd\u4f7f\u7528\u8fed\u4ee3\u5668\u8bbf\u95ee"},{"location":"STL/list/#_6","text":"\u51fd\u6570 \u542b\u4e49 l.begin() \u8fd4\u56de\u94fe\u8868\u9996\u5730\u5740 l.end() \u8fd4\u56de\u94fe\u8868\u5c3e\u5730\u5740 l.front() \u8fd4\u56de\u9996\u5143\u7d20 l.back() \u8fd4\u56de\u5c3e\u5143\u7d20 l.push_back(elem) \u63d2\u5165\u5143\u7d20\u5230\u94fe\u8868\u5c3e\u90e8 l.push_front(elem) \u63d2\u5165\u5143\u7d20\u5230\u94fe\u8868\u5934\u90e8 l.empty() \u5224\u65ad\u94fe\u8868\u662f\u5426\u4e3a\u7a7a l.insert(it, val1, val2)) \u5728\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20 l.resize(n) \u8c03\u6574\u94fe\u8868\u5927\u5c0f\u4e3an\uff0c\u8d85\u51fan\u5220\u9664\uff0c\u5c11\u4e8en\u88650 l.clear() \u6e05\u9664 l.assign(len, val) \u66ff\u6362\u6240\u6709\u5143\u7d20 l.assign(l2.begin(), l2.end()) \u66ff\u6362\u6240\u6709\u5143\u7d20\u4e3a\u94fe\u8868l2 l.swap(l2) \u4ea4\u6362\u94fe\u8868 l.merge(l2) \u5408\u5e76\u4e24\u4e2a \u6709\u5e8f \u94fe\u8868\u4e2d\u7684\u5143\u7d20\uff0c\u8c03\u7528\u540el2\u4e3a\u7a7a\uff0c\u53ef\u7528greater () l.erase(it) \u5220\u9664\uff08\u533a\u57df\u4e2d\u7684\uff09\u5143\u7d20 l.remove(val) \u5220\u9664\u503c\u4e3aval \u7684\u5143\u7d20","title":"\u5e38\u7528\u51fd\u6570"},{"location":"STL/list/#_7","text":"\u9700\u8981\u5feb\u901f\u63d2\u5165\u5220\u9664\u3002 \u8282\u7701\u5b58\u50a8\u7a7a\u95f4 \u6a21\u62df\u53cc\u7aef\u961f\u5217","title":"\u5e38\u89c1\u4f7f\u7528\u60c5\u51b5"},{"location":"STL/list/#_8","text":"\u63d2\u5165\u5220\u9664 O(1) O(1) \u67e5\u627e O(n) O(n) \uff0c n n \u4e3a\u94fe\u8868\u957f\u5ea6","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"STL/map/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a cuccenter \uff0c YanhuiJessica \uff0c LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u7528\u9014 \u00b6 map\u7ffb\u8bd1\u4e3a\u6620\u5c04\u3002\u5b9e\u9645\u4e0a\u6570\u7ec4\u4e5f\u76f8\u5f53\u4e8e\u6620\u5c04\uff0c\u5982double a[100]\uff0c\u5219\u662f\u5efa\u7acb100\u4e2a\u4eceint\u5230double\u7684\u6620\u5c04\u3002\u4f46\u662f\u6570\u7ec4\u5982\u679c\u8981\u5b9e\u73b0\u4ece\u5b57\u7b26\u4e32\u5230int\u7684\u6620\u5c04\uff0c\u6216\u8005\u5b9e\u73b0\u4ece\u4e00\u4e2a\u7ed3\u6784\u4f53\u5230\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u6620\u5c04\u5219\u5c31\u4e0d\u90a3\u4e48\u65b9\u4fbf\u4e86\u3002\u800cmap\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u60c5\u51b5\u800c\u4ea7\u751f\u7684\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <map> \u57fa\u672c\u64cd\u4f5c \u00b6 \u5b9a\u4e49 \u00b6 1 map < type1 , type2 > name ; map\u53ef\u4ee5\u5b9e\u73b0\u4ece\u4efb\u610f\u57fa\u672c\u7c7b\u578b\u5230\u4efb\u610f\u57fa\u672c\u7c7b\u578b\u3002 \u4f46\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u5982\u679ctype1\u8981\u4f7f\u7528\u5b57\u7b26\u4e32\u7684\u8bdd\uff0c\u5219\u5fc5\u987b\u4f7f\u7528string\u800c\u4e0d\u80fd\u4f7f\u7528char\u6570\u7ec4\uff0c\u56e0\u4e3a\u6570\u7ec4\u4e0d\u80fd\u4f5c\u4e3a\u952e\u3002\u4f46\u662ftype2\u5219\u53ef\u4ee5\u662f\u6570\u7ec4\u3002 \u5143\u7d20\u8bbf\u95ee \u00b6 \u901a\u8fc7\u952e\u8bbf\u95ee \u00b6 \u901a\u8fc7\u4e4b\u524d\u63d2\u5165\u5143\u7d20\u65f6\u5019\u7684\u952e\u6765\u8bbf\u95ee\u76f8\u5e94\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 #include <bits/stdc++.h> using namespace std ; int main () { map < string , int > age ; age [ \"\u5f20\u4e09\" ] = 12 ; age [ \"\u5c0f\u738b\" ] = 23 ; cout << age [ \"\u5c0f\u738b\" ] << endl ; } \u8f93\u51fa: 1 23 \u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee \u00b6 \u8fed\u4ee3\u5668\u5b9a\u4e49 1 map < type1 , type2 >:: iterator iterator_name ; \u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528auto\u81ea\u52a8\u63a8\u65ad\u7c7b\u578b\u3002 map\u7684\u8fed\u4ee3\u5668\u65e2\u53ef\u4ee5\u4f7f\u7528iterator -> first\u7684\u65b9\u5f0f\u8bbf\u95ee\u952e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7iterator -> second\u7684\u65b9\u5f0f\u8bbf\u95ee\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <bits/stdc++.h> using namespace std ; int main () { map < string , int > age ; age [ \"San Zhang\" ] = 12 ; age [ \"Wang Xiao\" ] = 23 ; age [ \"Ann Xia\" ] = 128 ; for ( map < string , int >:: iterator it = age . begin (); it != age . end (); ++ it ) cout << it -> first << \" \" << it -> second << endl ; } \u8f93\u51fa: 1 2 3 Ann Xia 128 San Zhang 12 Wang Xiao 23 \u53d1\u73b0\u8f93\u51fa\u7684\u987a\u5e8f\u548c\u8f93\u5165\u987a\u5e8f\u4e0d\u4e00\u6837\u3002\u5176\u5b9emap\u662f\u81ea\u52a8\u6309\u7167\u5b57\u5178\u5e8f\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u7684\u6392\u5e8f\u3002\u4e8b\u5b9e\u4e0a\uff0cmap\u662f\u5c06type1\u76f8\u5e94\u7684\u5927\u5c0f\u6bd4\u8f83\u89c4\u5219\u6765\u8fdb\u884c\u6392\u5e8f\u3002\u90a3\u4e48\u53ef\u4ee5\u63a8\u77e5\uff0c\u5982\u679c\u662f\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u91cd\u8f7d < \u53f7\u4e4b\u540e\u624d\u53ef\u4ee5\u4f7f\u7528map\u3002 \u4f7f\u7528auto\u904d\u5386 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; void Print ( map < string , int > & mp ) { for ( auto & i : mp ) cout << \"Key = \" << i . first << \", Value = \" << i . second << endl ; } int main () { map < string , int > age ; age [ \"San Zhang\" ] = 12 ; age [ \"Wang Xiao\" ] = 23 ; Print ( age ); } \u8f93\u51fa\uff1a 1 2 Key = San Zhang , Value = 12 Key = Wang Xiao , Value = 23 \u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0auto\u548c\u8fed\u4ee3\u5668\u6709\u4e9b\u8bb8\u4e0d\u540c\uff0c\u5728auto\u4e2d\u8bbf\u95ee\u5143\u7d20\u4f7f\u7528\u7684 \".\" \u800c\u5728\u8fed\u4ee3\u5176\u4e2d\u662f\u7528\u7684 -> \u3002\u8fd9\u662f\u56e0\u4e3aauto\u8fd4\u56de\u7684\u662f\u5143\u7d20\u672c\u8eab\uff0c\u800c\u8fed\u4ee3\u5668\u76f8\u5f53\u4e8e\u6307\u9488\u3002\u5c31\u50cf\u662f\u7ed3\u6784\u4f53\uff0c\u4f7f\u7528auto\u8fd4\u56de\u7684\u662f\u7ed3\u6784\u4f53\u7684\u5143\u7d20\uff0c\u800c\u8fed\u4ee3\u5668\u8fd4\u56de\u7684\u662f\u6307\u5411\u5143\u7d20\u7684\u6307\u9488\u3002 \u5e38\u7528\u51fd\u6570 \u00b6 \u7528\u6cd5 \u542b\u4e49 mp[key] = x \u5229\u7528\u6570\u7ec4\u65b9\u5f0f\u63d2\u5165\u6570\u636e\uff0ckey\u662f\u952e\uff0cx\u662f\u503c mp.at(key) = x \u5229\u7528at\u6267\u884c\u63d2\u5165\u64cd\u4f5c mp.insert(make_pair(key,x)) \u5229\u7528insert\u63d2\u5165pair(\u952e\uff0c\u503c)\u6570\u636e mp.emplace(make_pair(key,x)) \u5728\u6620\u5c04\u4e2d\u4e0d\u5b58\u5728\u4e3b\u952ekey\u65f6\u6267\u884c\u63d2\u5165\u64cd\u4f5c mp.size() \u8fd4\u56demp\u7684\u5927\u5c0f mp.count(key) multimap\u4e2d\u8fd4\u56de\u952e\u4e3akey\u7684\u5143\u7d20\u5b58\u5728\u7684\u6620\u5c04\u6570\u3002map\u4e2d\u5b58\u5728key\u8fd4\u56de1\uff0c\u4e0d\u5b58\u5728\u8fd4\u56de0 mp.erase(it) \u6839\u636e\u8fed\u4ee3\u5668\u5220\u9664\u5143\u7d20 mp.erase(key) \u6839\u636e\u952e\u5220\u9664\u5143\u7d20 mp.clear() \u6e05\u7a7a\u6620\u5c04 mp.empty() \u5224\u65ad\u6620\u5c04\u662f\u5426\u4e3a\u7a7a mp.find(key) \u6839\u636e\u952ekey\u67e5\u627e\u5143\u7d20\uff0c\u627e\u5230\u4ee5\u540e\u8fd4\u56de\u8fed\u4ee3\u5668,\u4e0d\u5b58\u5728\u8fd4\u56deend mp.rbegin() \u8fd4\u56de\u53cd\u5411\u8fed\u4ee3\u5668 mp.rend() \u8fd4\u56de\u53cd\u5411\u8fed\u4ee3\u5668 mp.swap(mp2) \u5c06mp\u548cmp2\u8fdb\u884c\u4ea4\u6362 mp.lower_bound(key) \u8fd4\u56demap\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8ekey\u7684\u8fed\u4ee3\u5668\u6307\u9488 mp.upper_bound(key) \u8fd4\u56demap\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8ekey\u7684\u8fed\u4ee3\u5668\u6307\u9488 map\u7684\u952e\u503c\u5bf9\u662f\u552f\u4e00\u7684\uff0c\u5982\u679c\u5982\u679c\u51fa\u73b0\u91cd\u590d\u7684\u952e\uff0c\u90a3\u4e48\u540e\u6765\u8005\u5c45\u4e0a\uff0c\u540e\u6765\u7684\u952e\u503c\u5bf9\u4f1a\u66ff\u6362\u4e4b\u524d\u7684\u3002 \u5e38\u89c1\u4f7f\u7528\u60c5\u51b5 \u00b6 \u5b57\u7b26\u4e32\uff0c\u7ed3\u6784\u4f53\u4e0e\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u7684\u6620\u5c04 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <bits/stdc++.h> using namespace std ; struct A { int a , b ; bool operator < ( const A & b ) const { return a == b . a ? ( a < b . b ) : ( a < b . a ); } }; int main () { map < A , int > mp ; mp [{ 1 , 2 }] = 3 ; mp [{ -1 , 4 }] = 1 ; cout << mp . begin () -> first . a << endl ; } \u53ef\u4ee5\u770b\u5230\uff0cmap\u6309\u7167\u91cd\u8f7d\u7684\u89c4\u5219\u81ea\u52a8\u8fdb\u884c\u4e86\u6392\u5e8f\u3002 \u53ef\u4ee5\u5f53\u4f5cbool\u6570\u7ec4\u7528 \u00b6 \u4f8b\u5982\uff1a 1 map < string , bool > age ; \u8fd9\u6837\u5c31\u53ef\u4ee5\u5224\u65ad\u67d0\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u51fa\u73b0\u8fc7\u3002 \u53ef\u4ee5\u5b9e\u73b0\u79bb\u6563\u5316 \u00b6 \u79bb\u6563\u5316\u5c31\u662f\u8bf4\uff0c\u5c06\u4e00\u4e9b\u6d6e\u70b9\u503c\uff0c\u901a\u8fc7\u4e00\u4e2a\u6620\u5c04\u64cd\u4f5c\uff0c\u4f7f\u4ed6\u4eec\u7684\u503c\u6620\u5c04\u6210\u6574\u6570\uff0c\u4f46\u76f8\u5bf9\u5927\u5c0f\u4e0d\u53d8\u3002 \u79bb\u6563\u5316\u540c\u6837\u4e5f\u53ef\u4ee5\uff0c\u5c06\u6570\u636e\u8303\u56f4\u8f83\u5927\u4f46\u662f\u4e2a\u6570\u6bd4\u8f83\u5c0f\u7684\u5e8f\u5217\u6620\u5c04\u6210\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5c0f\u7684\u5e8f\u5217\u3002 \u4ee5\u4e0a\u4e24\u70b9\u5728\u7ebf\u6bb5\u6811\u4e2d\u4f53\u73b0\u6bd4\u8f83\u660e\u663e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <bits/stdc++.h> using namespace std ; int main () { map < double , int > mp ; double a [] = { 1.1 , 1.1 , -10023 , 123123 , 12.23124 }; for ( auto & i : a ) mp . emplace ( make_pair ( i , 1 ) ); int order = 0 ; for ( auto & i : mp ) i . second = order ++ ; for ( auto i : a ) cout << \"before = \" << i << \", after = \" << mp [ i ] << endl ; } \u8f93\u51fa: 1 2 3 4 5 before = 1.1 , after = 1 before = 1.1 , after = 1 before = -10023 , after = 0 before = 123123 , after = 3 before = 12.2312 , after = 2 \u53ef\u89c1a\u6570\u7ec4\u4e2d\u7684\u6570\u5b9e\u73b0\u4e86\u79bb\u6563\u5316\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u63d2\u5165\u3001\u67e5\u627e\u3001\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(logn) O(logn) , n n \u662fmap\u7684\u5927\u5c0f\u3002 multimap \u00b6 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <map> \u4e0emap\u7684\u533a\u522b \u00b6 map\u7684\u952e\u503c\u5bf9\u552f\u4e00\uff0c\u800cmulti_map\u4e0d\u552f\u4e00\u3002 multimap\u4e0d\u80fd\u901a\u8fc7\u952e\u8bbf\u95ee\u5143\u7d20\uff0c\u56e0\u4e3a\u952e\u503c\u5bf9\u4e0d\u552f\u4e00([],at\u7b49\u5747\u4e0d\u53ef\u4ee5)\uff1b\u53ea\u80fd\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee\u3002 multimap\u4e0d\u80fd\u4f7f\u7528mp[key] = value\u7684\u5f62\u5f0f\u6dfb\u52a0\u5143\u7d20\uff0c\u53ea\u80fd\u4f7f\u7528insert() unordered_map \u00b6 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <unordered_map> \u4e0emap\u7684\u533a\u522b \u00b6 map\u4f1a\u81ea\u52a8\u6392\u5e8f\uff0cunordered_map\u4e0d\u4f1a map\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\uff0c\u800cunordered_map\u4f7f\u7528\u6563\u5217\u3002 unordered_map\u5e73\u5747\u641c\u7d22\u63d2\u5165\u590d\u6742\u5ea6\u4e3a O(1) O(1) ,\u5373\u4e0d\u9700\u8981\u6392\u5e8f\u65f6\uff0c\u4f7f\u7528unordered_map\u4f1a\u5feb\u4e00\u4e9b\u3002","title":"Map"},{"location":"STL/map/#_1","text":"map\u7ffb\u8bd1\u4e3a\u6620\u5c04\u3002\u5b9e\u9645\u4e0a\u6570\u7ec4\u4e5f\u76f8\u5f53\u4e8e\u6620\u5c04\uff0c\u5982double a[100]\uff0c\u5219\u662f\u5efa\u7acb100\u4e2a\u4eceint\u5230double\u7684\u6620\u5c04\u3002\u4f46\u662f\u6570\u7ec4\u5982\u679c\u8981\u5b9e\u73b0\u4ece\u5b57\u7b26\u4e32\u5230int\u7684\u6620\u5c04\uff0c\u6216\u8005\u5b9e\u73b0\u4ece\u4e00\u4e2a\u7ed3\u6784\u4f53\u5230\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u6620\u5c04\u5219\u5c31\u4e0d\u90a3\u4e48\u65b9\u4fbf\u4e86\u3002\u800cmap\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u60c5\u51b5\u800c\u4ea7\u751f\u7684\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <map>","title":"\u7528\u9014"},{"location":"STL/map/#_2","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"STL/map/#_3","text":"1 map < type1 , type2 > name ; map\u53ef\u4ee5\u5b9e\u73b0\u4ece\u4efb\u610f\u57fa\u672c\u7c7b\u578b\u5230\u4efb\u610f\u57fa\u672c\u7c7b\u578b\u3002 \u4f46\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u5982\u679ctype1\u8981\u4f7f\u7528\u5b57\u7b26\u4e32\u7684\u8bdd\uff0c\u5219\u5fc5\u987b\u4f7f\u7528string\u800c\u4e0d\u80fd\u4f7f\u7528char\u6570\u7ec4\uff0c\u56e0\u4e3a\u6570\u7ec4\u4e0d\u80fd\u4f5c\u4e3a\u952e\u3002\u4f46\u662ftype2\u5219\u53ef\u4ee5\u662f\u6570\u7ec4\u3002","title":"\u5b9a\u4e49"},{"location":"STL/map/#_4","text":"","title":"\u5143\u7d20\u8bbf\u95ee"},{"location":"STL/map/#_5","text":"\u901a\u8fc7\u4e4b\u524d\u63d2\u5165\u5143\u7d20\u65f6\u5019\u7684\u952e\u6765\u8bbf\u95ee\u76f8\u5e94\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 #include <bits/stdc++.h> using namespace std ; int main () { map < string , int > age ; age [ \"\u5f20\u4e09\" ] = 12 ; age [ \"\u5c0f\u738b\" ] = 23 ; cout << age [ \"\u5c0f\u738b\" ] << endl ; } \u8f93\u51fa: 1 23","title":"\u901a\u8fc7\u952e\u8bbf\u95ee"},{"location":"STL/map/#_6","text":"\u8fed\u4ee3\u5668\u5b9a\u4e49 1 map < type1 , type2 >:: iterator iterator_name ; \u5f53\u7136\u4e5f\u53ef\u4ee5\u4f7f\u7528auto\u81ea\u52a8\u63a8\u65ad\u7c7b\u578b\u3002 map\u7684\u8fed\u4ee3\u5668\u65e2\u53ef\u4ee5\u4f7f\u7528iterator -> first\u7684\u65b9\u5f0f\u8bbf\u95ee\u952e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7iterator -> second\u7684\u65b9\u5f0f\u8bbf\u95ee\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <bits/stdc++.h> using namespace std ; int main () { map < string , int > age ; age [ \"San Zhang\" ] = 12 ; age [ \"Wang Xiao\" ] = 23 ; age [ \"Ann Xia\" ] = 128 ; for ( map < string , int >:: iterator it = age . begin (); it != age . end (); ++ it ) cout << it -> first << \" \" << it -> second << endl ; } \u8f93\u51fa: 1 2 3 Ann Xia 128 San Zhang 12 Wang Xiao 23 \u53d1\u73b0\u8f93\u51fa\u7684\u987a\u5e8f\u548c\u8f93\u5165\u987a\u5e8f\u4e0d\u4e00\u6837\u3002\u5176\u5b9emap\u662f\u81ea\u52a8\u6309\u7167\u5b57\u5178\u5e8f\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u7684\u6392\u5e8f\u3002\u4e8b\u5b9e\u4e0a\uff0cmap\u662f\u5c06type1\u76f8\u5e94\u7684\u5927\u5c0f\u6bd4\u8f83\u89c4\u5219\u6765\u8fdb\u884c\u6392\u5e8f\u3002\u90a3\u4e48\u53ef\u4ee5\u63a8\u77e5\uff0c\u5982\u679c\u662f\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u91cd\u8f7d < \u53f7\u4e4b\u540e\u624d\u53ef\u4ee5\u4f7f\u7528map\u3002","title":"\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee"},{"location":"STL/map/#auto","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; void Print ( map < string , int > & mp ) { for ( auto & i : mp ) cout << \"Key = \" << i . first << \", Value = \" << i . second << endl ; } int main () { map < string , int > age ; age [ \"San Zhang\" ] = 12 ; age [ \"Wang Xiao\" ] = 23 ; Print ( age ); } \u8f93\u51fa\uff1a 1 2 Key = San Zhang , Value = 12 Key = Wang Xiao , Value = 23 \u8fd9\u91cc\u53ef\u4ee5\u53d1\u73b0auto\u548c\u8fed\u4ee3\u5668\u6709\u4e9b\u8bb8\u4e0d\u540c\uff0c\u5728auto\u4e2d\u8bbf\u95ee\u5143\u7d20\u4f7f\u7528\u7684 \".\" \u800c\u5728\u8fed\u4ee3\u5176\u4e2d\u662f\u7528\u7684 -> \u3002\u8fd9\u662f\u56e0\u4e3aauto\u8fd4\u56de\u7684\u662f\u5143\u7d20\u672c\u8eab\uff0c\u800c\u8fed\u4ee3\u5668\u76f8\u5f53\u4e8e\u6307\u9488\u3002\u5c31\u50cf\u662f\u7ed3\u6784\u4f53\uff0c\u4f7f\u7528auto\u8fd4\u56de\u7684\u662f\u7ed3\u6784\u4f53\u7684\u5143\u7d20\uff0c\u800c\u8fed\u4ee3\u5668\u8fd4\u56de\u7684\u662f\u6307\u5411\u5143\u7d20\u7684\u6307\u9488\u3002","title":"\u4f7f\u7528auto\u904d\u5386"},{"location":"STL/map/#_7","text":"\u7528\u6cd5 \u542b\u4e49 mp[key] = x \u5229\u7528\u6570\u7ec4\u65b9\u5f0f\u63d2\u5165\u6570\u636e\uff0ckey\u662f\u952e\uff0cx\u662f\u503c mp.at(key) = x \u5229\u7528at\u6267\u884c\u63d2\u5165\u64cd\u4f5c mp.insert(make_pair(key,x)) \u5229\u7528insert\u63d2\u5165pair(\u952e\uff0c\u503c)\u6570\u636e mp.emplace(make_pair(key,x)) \u5728\u6620\u5c04\u4e2d\u4e0d\u5b58\u5728\u4e3b\u952ekey\u65f6\u6267\u884c\u63d2\u5165\u64cd\u4f5c mp.size() \u8fd4\u56demp\u7684\u5927\u5c0f mp.count(key) multimap\u4e2d\u8fd4\u56de\u952e\u4e3akey\u7684\u5143\u7d20\u5b58\u5728\u7684\u6620\u5c04\u6570\u3002map\u4e2d\u5b58\u5728key\u8fd4\u56de1\uff0c\u4e0d\u5b58\u5728\u8fd4\u56de0 mp.erase(it) \u6839\u636e\u8fed\u4ee3\u5668\u5220\u9664\u5143\u7d20 mp.erase(key) \u6839\u636e\u952e\u5220\u9664\u5143\u7d20 mp.clear() \u6e05\u7a7a\u6620\u5c04 mp.empty() \u5224\u65ad\u6620\u5c04\u662f\u5426\u4e3a\u7a7a mp.find(key) \u6839\u636e\u952ekey\u67e5\u627e\u5143\u7d20\uff0c\u627e\u5230\u4ee5\u540e\u8fd4\u56de\u8fed\u4ee3\u5668,\u4e0d\u5b58\u5728\u8fd4\u56deend mp.rbegin() \u8fd4\u56de\u53cd\u5411\u8fed\u4ee3\u5668 mp.rend() \u8fd4\u56de\u53cd\u5411\u8fed\u4ee3\u5668 mp.swap(mp2) \u5c06mp\u548cmp2\u8fdb\u884c\u4ea4\u6362 mp.lower_bound(key) \u8fd4\u56demap\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8ekey\u7684\u8fed\u4ee3\u5668\u6307\u9488 mp.upper_bound(key) \u8fd4\u56demap\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8ekey\u7684\u8fed\u4ee3\u5668\u6307\u9488 map\u7684\u952e\u503c\u5bf9\u662f\u552f\u4e00\u7684\uff0c\u5982\u679c\u5982\u679c\u51fa\u73b0\u91cd\u590d\u7684\u952e\uff0c\u90a3\u4e48\u540e\u6765\u8005\u5c45\u4e0a\uff0c\u540e\u6765\u7684\u952e\u503c\u5bf9\u4f1a\u66ff\u6362\u4e4b\u524d\u7684\u3002","title":"\u5e38\u7528\u51fd\u6570"},{"location":"STL/map/#_8","text":"","title":"\u5e38\u89c1\u4f7f\u7528\u60c5\u51b5"},{"location":"STL/map/#_9","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <bits/stdc++.h> using namespace std ; struct A { int a , b ; bool operator < ( const A & b ) const { return a == b . a ? ( a < b . b ) : ( a < b . a ); } }; int main () { map < A , int > mp ; mp [{ 1 , 2 }] = 3 ; mp [{ -1 , 4 }] = 1 ; cout << mp . begin () -> first . a << endl ; } \u53ef\u4ee5\u770b\u5230\uff0cmap\u6309\u7167\u91cd\u8f7d\u7684\u89c4\u5219\u81ea\u52a8\u8fdb\u884c\u4e86\u6392\u5e8f\u3002","title":"\u5b57\u7b26\u4e32\uff0c\u7ed3\u6784\u4f53\u4e0e\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u7684\u6620\u5c04"},{"location":"STL/map/#bool","text":"\u4f8b\u5982\uff1a 1 map < string , bool > age ; \u8fd9\u6837\u5c31\u53ef\u4ee5\u5224\u65ad\u67d0\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u51fa\u73b0\u8fc7\u3002","title":"\u53ef\u4ee5\u5f53\u4f5cbool\u6570\u7ec4\u7528"},{"location":"STL/map/#_10","text":"\u79bb\u6563\u5316\u5c31\u662f\u8bf4\uff0c\u5c06\u4e00\u4e9b\u6d6e\u70b9\u503c\uff0c\u901a\u8fc7\u4e00\u4e2a\u6620\u5c04\u64cd\u4f5c\uff0c\u4f7f\u4ed6\u4eec\u7684\u503c\u6620\u5c04\u6210\u6574\u6570\uff0c\u4f46\u76f8\u5bf9\u5927\u5c0f\u4e0d\u53d8\u3002 \u79bb\u6563\u5316\u540c\u6837\u4e5f\u53ef\u4ee5\uff0c\u5c06\u6570\u636e\u8303\u56f4\u8f83\u5927\u4f46\u662f\u4e2a\u6570\u6bd4\u8f83\u5c0f\u7684\u5e8f\u5217\u6620\u5c04\u6210\u6570\u636e\u8303\u56f4\u6bd4\u8f83\u5c0f\u7684\u5e8f\u5217\u3002 \u4ee5\u4e0a\u4e24\u70b9\u5728\u7ebf\u6bb5\u6811\u4e2d\u4f53\u73b0\u6bd4\u8f83\u660e\u663e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <bits/stdc++.h> using namespace std ; int main () { map < double , int > mp ; double a [] = { 1.1 , 1.1 , -10023 , 123123 , 12.23124 }; for ( auto & i : a ) mp . emplace ( make_pair ( i , 1 ) ); int order = 0 ; for ( auto & i : mp ) i . second = order ++ ; for ( auto i : a ) cout << \"before = \" << i << \", after = \" << mp [ i ] << endl ; } \u8f93\u51fa: 1 2 3 4 5 before = 1.1 , after = 1 before = 1.1 , after = 1 before = -10023 , after = 0 before = 123123 , after = 3 before = 12.2312 , after = 2 \u53ef\u89c1a\u6570\u7ec4\u4e2d\u7684\u6570\u5b9e\u73b0\u4e86\u79bb\u6563\u5316\u3002","title":"\u53ef\u4ee5\u5b9e\u73b0\u79bb\u6563\u5316"},{"location":"STL/map/#_11","text":"\u63d2\u5165\u3001\u67e5\u627e\u3001\u5220\u9664\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(logn) O(logn) , n n \u662fmap\u7684\u5927\u5c0f\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"STL/map/#multimap","text":"\u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <map>","title":"multimap"},{"location":"STL/map/#map","text":"map\u7684\u952e\u503c\u5bf9\u552f\u4e00\uff0c\u800cmulti_map\u4e0d\u552f\u4e00\u3002 multimap\u4e0d\u80fd\u901a\u8fc7\u952e\u8bbf\u95ee\u5143\u7d20\uff0c\u56e0\u4e3a\u952e\u503c\u5bf9\u4e0d\u552f\u4e00([],at\u7b49\u5747\u4e0d\u53ef\u4ee5)\uff1b\u53ea\u80fd\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee\u3002 multimap\u4e0d\u80fd\u4f7f\u7528mp[key] = value\u7684\u5f62\u5f0f\u6dfb\u52a0\u5143\u7d20\uff0c\u53ea\u80fd\u4f7f\u7528insert()","title":"\u4e0emap\u7684\u533a\u522b"},{"location":"STL/map/#unordered_map","text":"\u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <unordered_map>","title":"unordered_map"},{"location":"STL/map/#map_1","text":"map\u4f1a\u81ea\u52a8\u6392\u5e8f\uff0cunordered_map\u4e0d\u4f1a map\u7528\u7ea2\u9ed1\u6811\u5b9e\u73b0\uff0c\u800cunordered_map\u4f7f\u7528\u6563\u5217\u3002 unordered_map\u5e73\u5747\u641c\u7d22\u63d2\u5165\u590d\u6742\u5ea6\u4e3a O(1) O(1) ,\u5373\u4e0d\u9700\u8981\u6392\u5e8f\u65f6\uff0c\u4f7f\u7528unordered_map\u4f1a\u5feb\u4e00\u4e9b\u3002","title":"\u4e0emap\u7684\u533a\u522b"},{"location":"STL/queue/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a cuccenter \uff0c YanhuiJessica \uff0c LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 queue \u00b6 \u7528\u9014 \u00b6 \u662f\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e0estack\u6b63\u597d\u76f8\u53cd\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <queue> \u57fa\u672c\u64cd\u4f5c \u00b6 \u5b9a\u4e49 \u00b6 1 queue < type > name ; \u5143\u7d20\u8bbf\u95ee \u00b6 queue\u7684\u8bbf\u95ee\u6bd4\u8f83\u7279\u6b8a\uff0cqueue\u6ca1\u6709\u8fed\u4ee3\u5668\uff0c\u6bcf\u6b21\u53ea\u80fd\u8bbf\u95ee\u961f\u9996\u5143\u7d20\uff0c\u5373\u4f7f\u7528front()\u51fd\u6570\u3002 \u5982\u679c\u8981\u904d\u5386\u5219\u9700\u8981\u50cf\u8fd9\u6837\u4f7f\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> #include <queue> using namespace std ; int main () { queue < int > q ; q . push ( 1 ); q . push ( 2 ); q . push ( 3 ); while ( ! q . empty () ) { cout << q . front () << \" \" ; q . pop (); } } \u5e38\u7528\u51fd\u6570 \u00b6 \u51fd\u6570 \u4f5c\u7528 q.push() \u5165\u961f q.pop() \u51fa\u961f q.front() \u8fd4\u56de\u9996\u5143\u7d20 q.back() \u8fd4\u56de\u672b\u5143\u7d20 q.size() \u8f93\u51fa\u73b0\u6709\u5143\u7d20\u7684\u4e2a\u6570 q.empty() \u961f\u5217\u4e3a\u7a7a\u8fd4\u56de1\uff0c\u53cd\u4e4b\u8fd4\u56de0 \u5e38\u89c1\u4f7f\u7528\u60c5\u51b5 \u00b6 bfs \u00b6 \u5047\u8bbe\u4ee5\u90bb\u63a5\u8868\u7684\u5f62\u5f0f\u5b58\u56fe\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <iostream> #include <queue> using namespace std ; const int maxn = 1E5 ; bool vis [ maxn ]; vector < int > G [ maxn ]; void BFS () { int s ; queue < int > q ; q . push ( s ); while ( ! q . empty () ) { int ft = q . front (); vis [ ft ] = 1 ; q . pop (); for ( auto to : G [ ft ] ) if ( ! vis [ to ] ) q . push ( to ); } } \u6700\u539f\u59cb\u7684Bellman-Fold \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 struct node { int to ; long long val ; node ( int to = 0 , long long val = 0 ) : to ( to ), val ( val ) {} }; vector < node > G [ maxn ]; long long dis [ maxn ]; bool inq [ maxn ]; void SPFA ( int s ) { memset ( inq , 0 , sizeof ( inq ) ); for ( int i = 1 ; i < maxn ; ++ i ) dis [ i ] = 1E18 ; dis [ s ] = 0 , inq [ s ] = 1 ; queue < int > q ; q . push ( s ); while ( ! q . empty () ) { int x = q . front (); q . pop (); inq [ x ] = 0 ; //\u8fd9\u91cc\u548c\u5806\u4f18\u5316\u7684\u533a\u522b\u5c31\u663e\u73b0\u51fa\u6765\u4e86\uff0c\u5806\u4f18\u5316\u7248\u672c\u53ea\u4f1a\u5165\u961f\u4e00\u6b21\uff0c\u800cSPFA\u5219\u4e0d\u662f for ( auto to : G [ x ] ) { if ( dis [ to . to ] > dis [ x ] + to . val ) { dis [ to . to ] = dis [ x ] + to . val ; if ( ! inq [ to . to ] ) q . push ( to . to ), inq [ to . to ] = 1 ; } } } } \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 push\u548cpop\u5747\u4e3a O(1) O(1) priority_queue \u00b6 \u7528\u9014 \u00b6 \u4fdd\u8bc1\u961f\u9996\u5143\u7d20\u4f18\u5148\u7ea7\u6700\u5927\uff0c\u76f8\u5f53\u4e8e\u5927\u6839\u5806\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <queue> \u5e38\u89c1\u64cd\u4f5c \u00b6 \u5b9a\u4e49 \u00b6 1 priority_queue < type > name ; \u5e38\u7528\u51fd\u6570 \u00b6 \u57fa\u672c\u4e0equeue\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7priority_queue\u59cb\u7ec8\u4fdd\u8bc1\u961f\u9996\u5143\u7d20\u4f18\u5148\u7ea7\u6700\u5927\uff0c\u800c\u4e0d\u662f\u5148\u8fdb\u5148\u51fa\u3002 \u961f\u9996\u5143\u7d20\u9700\u8981\u4f7f\u7528top()\u800c\u4e0d\u662ffront() \u4f18\u5148\u7ea7\u7684\u8bbe\u7f6e \u00b6 \u540cmap\u7c7b\u4f3c\uff0c\u9700\u8981\u91cd\u8f7d < \u53f7\u3002 \u4f46\u662f\uff0c\u6392\u5e8f\u7ed3\u679c\u65f6\u76f8\u53cd\u7684\uff0c\u56e0\u4e3a\u4ed6\u662f\u6309\u7167\u4f18\u5148\u7ea7\u6765\u7684\uff0c\u6240\u4ee5\u8d8a\u5927\u7684\u6570\uff0c\u4f18\u5148\u7ea7\u8d8a\u5927\uff0c\u4f1a\u6392\u5728\u524d\u8fb9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <iostream> #include <queue> using namespace std ; struct pet { string species ; int price ; bool operator < ( const pet & b ) const { return price < b . price ; } }; int main () { priority_queue < pet > q ; q . push ({ \"cat\" , 100 } ); q . push ({ \"dog\" , 50 } ); q . push ({ \"Tarjan\" , 10000 } ); while ( ! q . empty () ) { cout << q . top (). species << endl ; q . pop (); } } \u8f93\u51fa: 1 2 3 Tarjan cat dog \u800c\u5982\u679c\u65f6int\u7b49\u57fa\u672c\u7c7b\u578b\u9700\u8981\u8bbe\u7f6e\u8d8a\u5c0f\u7684\u6570\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u5219\u9700\u8981\u6dfb\u52a0 1 #include <functional> \u5e76\u7528\u5982\u4e0b\u5b9a\u4e49\u65b9\u5f0f: 1 priority_queue < int , vector < int > , greater < int > > q ; \u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> #include <queue> #include <functional> using namespace std ; int main () { priority_queue < int , vector < int > , greater < int > > q ; q . push ( 2 ); q . push ( 50 ); q . push ( 1 ); while ( ! q . empty () ) { cout << q . top () << endl ; q . pop (); } } \u8f93\u51fa: 1 2 3 1 2 50 \u5e38\u89c1\u4f7f\u7528\u60c5\u51b5 \u00b6 \u5806\u4f18\u5316\u7684Dijkstra\u548cBellman-Fold \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 struct edge { int pos , val ; edge ( int pos = 0 , int val = 0 ) : pos ( pos ), val ( val ) {} bool operator < ( const edge & e ) const { return val > e . val ; } }; vector < edge > G [ maxn ]; int dis [ maxn ]; bool vis [ maxn ]; void Dijkstra ( int s ) { memset ( dis , 0x3f , sizeof ( dis ) ); priority_queue < edge > q ; dis [ s ] = 0 ; q . push ({ s , dis [ s ]}); while ( ! q . empty () ) { auto tp = q . top ( ); q . pop ( ); if ( vis [ tp . pos ] ) continue ; inq [ tp . pos ] = 1 ; for ( auto v : G [ tp . pos ] ) { if ( dis [ v . pos ] > dis [ tp . pos ] + v . val ) { dis [ v . pos ] = dis [ tp . pos ] + v . val ; q . push ( { v . pos , dis [ v . pos ]} ); } } } } \u4e00\u4e9b\u9700\u8981\u8d2a\u5fc3\u7684\u60c5\u51b5 \u00b6","title":"Queue"},{"location":"STL/queue/#queue","text":"","title":"queue"},{"location":"STL/queue/#_1","text":"\u662f\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e0estack\u6b63\u597d\u76f8\u53cd\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <queue>","title":"\u7528\u9014"},{"location":"STL/queue/#_2","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"STL/queue/#_3","text":"1 queue < type > name ;","title":"\u5b9a\u4e49"},{"location":"STL/queue/#_4","text":"queue\u7684\u8bbf\u95ee\u6bd4\u8f83\u7279\u6b8a\uff0cqueue\u6ca1\u6709\u8fed\u4ee3\u5668\uff0c\u6bcf\u6b21\u53ea\u80fd\u8bbf\u95ee\u961f\u9996\u5143\u7d20\uff0c\u5373\u4f7f\u7528front()\u51fd\u6570\u3002 \u5982\u679c\u8981\u904d\u5386\u5219\u9700\u8981\u50cf\u8fd9\u6837\u4f7f\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> #include <queue> using namespace std ; int main () { queue < int > q ; q . push ( 1 ); q . push ( 2 ); q . push ( 3 ); while ( ! q . empty () ) { cout << q . front () << \" \" ; q . pop (); } }","title":"\u5143\u7d20\u8bbf\u95ee"},{"location":"STL/queue/#_5","text":"\u51fd\u6570 \u4f5c\u7528 q.push() \u5165\u961f q.pop() \u51fa\u961f q.front() \u8fd4\u56de\u9996\u5143\u7d20 q.back() \u8fd4\u56de\u672b\u5143\u7d20 q.size() \u8f93\u51fa\u73b0\u6709\u5143\u7d20\u7684\u4e2a\u6570 q.empty() \u961f\u5217\u4e3a\u7a7a\u8fd4\u56de1\uff0c\u53cd\u4e4b\u8fd4\u56de0","title":"\u5e38\u7528\u51fd\u6570"},{"location":"STL/queue/#_6","text":"","title":"\u5e38\u89c1\u4f7f\u7528\u60c5\u51b5"},{"location":"STL/queue/#bfs","text":"\u5047\u8bbe\u4ee5\u90bb\u63a5\u8868\u7684\u5f62\u5f0f\u5b58\u56fe\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <iostream> #include <queue> using namespace std ; const int maxn = 1E5 ; bool vis [ maxn ]; vector < int > G [ maxn ]; void BFS () { int s ; queue < int > q ; q . push ( s ); while ( ! q . empty () ) { int ft = q . front (); vis [ ft ] = 1 ; q . pop (); for ( auto to : G [ ft ] ) if ( ! vis [ to ] ) q . push ( to ); } }","title":"bfs"},{"location":"STL/queue/#bellman-fold","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 struct node { int to ; long long val ; node ( int to = 0 , long long val = 0 ) : to ( to ), val ( val ) {} }; vector < node > G [ maxn ]; long long dis [ maxn ]; bool inq [ maxn ]; void SPFA ( int s ) { memset ( inq , 0 , sizeof ( inq ) ); for ( int i = 1 ; i < maxn ; ++ i ) dis [ i ] = 1E18 ; dis [ s ] = 0 , inq [ s ] = 1 ; queue < int > q ; q . push ( s ); while ( ! q . empty () ) { int x = q . front (); q . pop (); inq [ x ] = 0 ; //\u8fd9\u91cc\u548c\u5806\u4f18\u5316\u7684\u533a\u522b\u5c31\u663e\u73b0\u51fa\u6765\u4e86\uff0c\u5806\u4f18\u5316\u7248\u672c\u53ea\u4f1a\u5165\u961f\u4e00\u6b21\uff0c\u800cSPFA\u5219\u4e0d\u662f for ( auto to : G [ x ] ) { if ( dis [ to . to ] > dis [ x ] + to . val ) { dis [ to . to ] = dis [ x ] + to . val ; if ( ! inq [ to . to ] ) q . push ( to . to ), inq [ to . to ] = 1 ; } } } }","title":"\u6700\u539f\u59cb\u7684Bellman-Fold"},{"location":"STL/queue/#_7","text":"push\u548cpop\u5747\u4e3a O(1) O(1)","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"STL/queue/#priority_queue","text":"","title":"priority_queue"},{"location":"STL/queue/#_8","text":"\u4fdd\u8bc1\u961f\u9996\u5143\u7d20\u4f18\u5148\u7ea7\u6700\u5927\uff0c\u76f8\u5f53\u4e8e\u5927\u6839\u5806\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <queue>","title":"\u7528\u9014"},{"location":"STL/queue/#_9","text":"","title":"\u5e38\u89c1\u64cd\u4f5c"},{"location":"STL/queue/#_10","text":"1 priority_queue < type > name ;","title":"\u5b9a\u4e49"},{"location":"STL/queue/#_11","text":"\u57fa\u672c\u4e0equeue\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7priority_queue\u59cb\u7ec8\u4fdd\u8bc1\u961f\u9996\u5143\u7d20\u4f18\u5148\u7ea7\u6700\u5927\uff0c\u800c\u4e0d\u662f\u5148\u8fdb\u5148\u51fa\u3002 \u961f\u9996\u5143\u7d20\u9700\u8981\u4f7f\u7528top()\u800c\u4e0d\u662ffront()","title":"\u5e38\u7528\u51fd\u6570"},{"location":"STL/queue/#_12","text":"\u540cmap\u7c7b\u4f3c\uff0c\u9700\u8981\u91cd\u8f7d < \u53f7\u3002 \u4f46\u662f\uff0c\u6392\u5e8f\u7ed3\u679c\u65f6\u76f8\u53cd\u7684\uff0c\u56e0\u4e3a\u4ed6\u662f\u6309\u7167\u4f18\u5148\u7ea7\u6765\u7684\uff0c\u6240\u4ee5\u8d8a\u5927\u7684\u6570\uff0c\u4f18\u5148\u7ea7\u8d8a\u5927\uff0c\u4f1a\u6392\u5728\u524d\u8fb9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <iostream> #include <queue> using namespace std ; struct pet { string species ; int price ; bool operator < ( const pet & b ) const { return price < b . price ; } }; int main () { priority_queue < pet > q ; q . push ({ \"cat\" , 100 } ); q . push ({ \"dog\" , 50 } ); q . push ({ \"Tarjan\" , 10000 } ); while ( ! q . empty () ) { cout << q . top (). species << endl ; q . pop (); } } \u8f93\u51fa: 1 2 3 Tarjan cat dog \u800c\u5982\u679c\u65f6int\u7b49\u57fa\u672c\u7c7b\u578b\u9700\u8981\u8bbe\u7f6e\u8d8a\u5c0f\u7684\u6570\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u5219\u9700\u8981\u6dfb\u52a0 1 #include <functional> \u5e76\u7528\u5982\u4e0b\u5b9a\u4e49\u65b9\u5f0f: 1 priority_queue < int , vector < int > , greater < int > > q ; \u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include <iostream> #include <queue> #include <functional> using namespace std ; int main () { priority_queue < int , vector < int > , greater < int > > q ; q . push ( 2 ); q . push ( 50 ); q . push ( 1 ); while ( ! q . empty () ) { cout << q . top () << endl ; q . pop (); } } \u8f93\u51fa: 1 2 3 1 2 50","title":"\u4f18\u5148\u7ea7\u7684\u8bbe\u7f6e"},{"location":"STL/queue/#_13","text":"","title":"\u5e38\u89c1\u4f7f\u7528\u60c5\u51b5"},{"location":"STL/queue/#dijkstrabellman-fold","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 struct edge { int pos , val ; edge ( int pos = 0 , int val = 0 ) : pos ( pos ), val ( val ) {} bool operator < ( const edge & e ) const { return val > e . val ; } }; vector < edge > G [ maxn ]; int dis [ maxn ]; bool vis [ maxn ]; void Dijkstra ( int s ) { memset ( dis , 0x3f , sizeof ( dis ) ); priority_queue < edge > q ; dis [ s ] = 0 ; q . push ({ s , dis [ s ]}); while ( ! q . empty () ) { auto tp = q . top ( ); q . pop ( ); if ( vis [ tp . pos ] ) continue ; inq [ tp . pos ] = 1 ; for ( auto v : G [ tp . pos ] ) { if ( dis [ v . pos ] > dis [ tp . pos ] + v . val ) { dis [ v . pos ] = dis [ tp . pos ] + v . val ; q . push ( { v . pos , dis [ v . pos ]} ); } } } }","title":"\u5806\u4f18\u5316\u7684Dijkstra\u548cBellman-Fold"},{"location":"STL/queue/#_14","text":"","title":"\u4e00\u4e9b\u9700\u8981\u8d2a\u5fc3\u7684\u60c5\u51b5"},{"location":"STL/set/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a cuccenter \uff0c YanhuiJessica \uff0c LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u7528\u9014 \u00b6 set\u8bd1\u4f5c\u96c6\u5408\uff0cset\u53ef\u4ee5\u5b9e\u73b0\u5185\u90e8\u5143\u7d20\u81ea\u52a8\u6392\u5e8f\u5e76\u81ea\u52a8\u53bb\u91cd\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <set> \u57fa\u672c\u64cd\u4f5c \u00b6 \u5b9a\u4e49 \u00b6 1 set < type > name ; \u540cmap\u4e00\u6837\uff0c\u56e0\u4e3a\u4ed6\u4f1a\u81ea\u52a8\u6392\u5e8f\uff0c\u6240\u4ee5\u7c7b\u578b\u4e3a\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7684\u65f6\u5019\u9700\u8981\u91cd\u8f7d < \u3002 \u8bbf\u95ee\u5143\u7d20 \u00b6 \u53ea\u80fd\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee\uff01\uff01 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <bits/stdc++.h> using namespace std ; int main () { set < int > s ; s . insert ( 1 ); s . insert ( 2 ); s . insert ( 1 ); auto it = s . begin (); cout << * ( ++ it ) << \" \" << * ( -- it ) << endl ; } \u8f93\u51fa: 1 2 1 \u901a\u8fc7\u8fed\u4ee3\u5668\u6216auto\u904d\u5386 \u00b6 1 2 3 4 5 6 7 8 9 10 11 #include <bits/stdc++.h> using namespace std ; int main () { set < int > s ; s . insert ( 1 ); s . insert ( 2 ); s . insert ( 1 ); for ( auto i : s ) cout << i << endl ; } \u5e38\u7528\u51fd\u6570 \u00b6 \u51fd\u6570 \u542b\u4e49 s.begin() \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.end() \u8fd4\u56de\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.clear() \u6e05\u9664\u6240\u6709\u5143\u7d20 s.empty() \u5982\u679c\u96c6\u5408\u4e3a\u7a7a\uff0c\u8fd4\u56detrue s.count(val) \u8fd4\u56de\u503c\u4e3aval\u7684\u5143\u7d20\u7684\u4e2a\u6570 s.erase(val) \u5220\u9664\u96c6\u5408\u4e2d \u6240\u6709 \u503c\u4e3aval\u7684\u5143\u7d20 s.erase(it) \u5220\u9664\u96c6\u5408\u4e2d\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20 s.erase(first,last) \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5b50\u96c6[first, last) s.equal_range(val) \u8fd4\u56de\u6709\u5e8f/\u5347\u5e8f\u96c6\u5408\u4e2dval\u5143\u7d20\u7b2c\u4e00\u6b21\u548c\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e s.find() \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u88ab\u67e5\u627e\u5230\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.insert(val) \u5728\u96c6\u5408\u4e2d\u63d2\u5165\u503c\u4e3aval\u7684\u5143\u7d20 s.max_size() \u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c s.rbegin() \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.rend() \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.size() \u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee s.swap(s2) \u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf s.upper_bound(val) \u8fd4\u56de\u5927\u4e8eval\u503c\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.lower_bound(val) \u8fd4\u56de\u6307\u5411\u5927\u4e8e\uff08\u6216\u7b49\u4e8e\uff09val\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 \u6ce8\u610f\u4f7f\u7528\u5185\u7f6e\u7684lower_bound()\u51fd\u6570\u4f1a\u6bd4algorithm\u4e2d\u7684lower_bound()\u51fd\u6570\u5feb\uff0c\u56e0\u4e3a\u540e\u8005\u4f1a\u91cd\u5efa\u4e00\u904dset\u3002 \u5e38\u89c1\u4f7f\u7528\u60c5\u51b5 \u00b6 \u53bb\u91cd\uff0c\u6392\u5e8f \u4e5f\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u79bb\u6563\u5316 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u63d2\u5165\u5220\u9664\u67e5\u627e\u90fd\u662f O(logn) O(logn) , n n \u4e3aset\u5927\u5c0f\u3002 multiset \u00b6 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <set> \u4e0eset\u7684\u533a\u522b \u00b6 \u53ef\u4ee5\u51fa\u73b0\u91cd\u590d\u5143\u7d20\uff0c\u80fd\u7528\u6765\u5728\u4fdd\u6301\u539f\u5e8f\u5217\u65f6\u949f\u4fdd\u6301\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u5feb\u901f\u63d2\u5165\u548c\u5feb\u901f\u67e5\u627e\u3002 unordered_set \u00b6 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <unordered_set> \u4e0eset\u7684\u533a\u522b \u00b6 \u4f7f\u7528\u6563\u5217\u5b9e\u73b0\uff0c\u4e0d\u53ef\u4ee5\u6392\u5e8f\uff0c\u4ec5\u80fd\u7528\u6765\u53bb\u91cd\u3002 \u5747\u644a\u590d\u6742\u5ea6 O(1) O(1)","title":"Set"},{"location":"STL/set/#_1","text":"set\u8bd1\u4f5c\u96c6\u5408\uff0cset\u53ef\u4ee5\u5b9e\u73b0\u5185\u90e8\u5143\u7d20\u81ea\u52a8\u6392\u5e8f\u5e76\u81ea\u52a8\u53bb\u91cd\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <set>","title":"\u7528\u9014"},{"location":"STL/set/#_2","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"STL/set/#_3","text":"1 set < type > name ; \u540cmap\u4e00\u6837\uff0c\u56e0\u4e3a\u4ed6\u4f1a\u81ea\u52a8\u6392\u5e8f\uff0c\u6240\u4ee5\u7c7b\u578b\u4e3a\u81ea\u5b9a\u4e49\u7ed3\u6784\u4f53\u7684\u65f6\u5019\u9700\u8981\u91cd\u8f7d < \u3002","title":"\u5b9a\u4e49"},{"location":"STL/set/#_4","text":"","title":"\u8bbf\u95ee\u5143\u7d20"},{"location":"STL/set/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 #include <bits/stdc++.h> using namespace std ; int main () { set < int > s ; s . insert ( 1 ); s . insert ( 2 ); s . insert ( 1 ); auto it = s . begin (); cout << * ( ++ it ) << \" \" << * ( -- it ) << endl ; } \u8f93\u51fa: 1 2 1","title":"\u53ea\u80fd\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee\uff01\uff01"},{"location":"STL/set/#auto","text":"1 2 3 4 5 6 7 8 9 10 11 #include <bits/stdc++.h> using namespace std ; int main () { set < int > s ; s . insert ( 1 ); s . insert ( 2 ); s . insert ( 1 ); for ( auto i : s ) cout << i << endl ; }","title":"\u901a\u8fc7\u8fed\u4ee3\u5668\u6216auto\u904d\u5386"},{"location":"STL/set/#_6","text":"\u51fd\u6570 \u542b\u4e49 s.begin() \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.end() \u8fd4\u56de\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.clear() \u6e05\u9664\u6240\u6709\u5143\u7d20 s.empty() \u5982\u679c\u96c6\u5408\u4e3a\u7a7a\uff0c\u8fd4\u56detrue s.count(val) \u8fd4\u56de\u503c\u4e3aval\u7684\u5143\u7d20\u7684\u4e2a\u6570 s.erase(val) \u5220\u9664\u96c6\u5408\u4e2d \u6240\u6709 \u503c\u4e3aval\u7684\u5143\u7d20 s.erase(it) \u5220\u9664\u96c6\u5408\u4e2d\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20 s.erase(first,last) \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5b50\u96c6[first, last) s.equal_range(val) \u8fd4\u56de\u6709\u5e8f/\u5347\u5e8f\u96c6\u5408\u4e2dval\u5143\u7d20\u7b2c\u4e00\u6b21\u548c\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e s.find() \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u88ab\u67e5\u627e\u5230\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.insert(val) \u5728\u96c6\u5408\u4e2d\u63d2\u5165\u503c\u4e3aval\u7684\u5143\u7d20 s.max_size() \u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c s.rbegin() \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.rend() \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668 s.size() \u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee s.swap(s2) \u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf s.upper_bound(val) \u8fd4\u56de\u5927\u4e8eval\u503c\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s.lower_bound(val) \u8fd4\u56de\u6307\u5411\u5927\u4e8e\uff08\u6216\u7b49\u4e8e\uff09val\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 \u6ce8\u610f\u4f7f\u7528\u5185\u7f6e\u7684lower_bound()\u51fd\u6570\u4f1a\u6bd4algorithm\u4e2d\u7684lower_bound()\u51fd\u6570\u5feb\uff0c\u56e0\u4e3a\u540e\u8005\u4f1a\u91cd\u5efa\u4e00\u904dset\u3002","title":"\u5e38\u7528\u51fd\u6570"},{"location":"STL/set/#_7","text":"\u53bb\u91cd\uff0c\u6392\u5e8f \u4e5f\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u79bb\u6563\u5316","title":"\u5e38\u89c1\u4f7f\u7528\u60c5\u51b5"},{"location":"STL/set/#_8","text":"\u63d2\u5165\u5220\u9664\u67e5\u627e\u90fd\u662f O(logn) O(logn) , n n \u4e3aset\u5927\u5c0f\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"STL/set/#multiset","text":"\u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <set>","title":"multiset"},{"location":"STL/set/#set","text":"\u53ef\u4ee5\u51fa\u73b0\u91cd\u590d\u5143\u7d20\uff0c\u80fd\u7528\u6765\u5728\u4fdd\u6301\u539f\u5e8f\u5217\u65f6\u949f\u4fdd\u6301\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u5feb\u901f\u63d2\u5165\u548c\u5feb\u901f\u67e5\u627e\u3002","title":"\u4e0eset\u7684\u533a\u522b"},{"location":"STL/set/#unordered_set","text":"\u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <unordered_set>","title":"unordered_set"},{"location":"STL/set/#set_1","text":"\u4f7f\u7528\u6563\u5217\u5b9e\u73b0\uff0c\u4e0d\u53ef\u4ee5\u6392\u5e8f\uff0c\u4ec5\u80fd\u7528\u6765\u53bb\u91cd\u3002 \u5747\u644a\u590d\u6742\u5ea6 O(1) O(1)","title":"\u4e0eset\u7684\u533a\u522b"},{"location":"STL/vector/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a cuccenter \uff0c YanhuiJessica \uff0c LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u7528\u9014 \u00b6 vector\u53ef\u4ee5\u7406\u89e3\u6210\u53ef\u4ee5\u53d8\u957f\u7684\u6570\u7ec4\uff1b\u4e5f\u5c31\u662f\u6570\u7ec4\u7684\u957f\u5ea6\u662f\u53ef\u4ee5\u52a8\u6001\u53d8\u5316\u7684\u3002 vector\u5e38\u7528\u4e8e\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u5927\u5c0f\u4e0d\u786e\u5b9a\uff0c\u7528\u666e\u901a\u6570\u7ec4\u5b58\u50a8\u4f1a\u8d85\u5185\u5b58\u7684\u60c5\u51b5\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <vector> \u57fa\u672c\u64cd\u4f5c \u00b6 \u5b9a\u4e49 \u00b6 1 vector < type > name ; type\u53ef\u4ee5\u662f\u4efb\u4f55\u6570\u636e\u7c7b\u578b(int\uff0cstruct\uff0cclass...),\u751a\u81f3\u53ef\u4ee5\u662fSTL\u3002 \u4f8b\u5982\uff0c\u5b9a\u4e49\u4e00\u4e2a\u53ef\u4ee5\u4fdd\u5b58int\u7c7b\u578b\u7684vector\u7684vector: 1 vector < vector < int > > v ; \u8fd9\u4e2a\u65f6\u5019\uff0cvector\u5c31\u76f8\u5f53\u4e8e\u4e24\u4e2a\u7ef4\u5ea6\u90fd\u53ef\u4ee5\u53d8\u5316\u7684\u6570\u7ec4\u3002 \u5143\u7d20\u8bbf\u95ee \u00b6 \u4f7f\u7528\u4e0b\u6807 \u00b6 \u548c\u666e\u901a\u6570\u7ec4\u4e00\u6837\uff0c\u5047\u8bbe\u6709\u4e00\u4e2avector\u53d8\u91cf\u540d\u4e3av\uff0c\u90a3\u4e48\u8bbf\u95ee\u4f7f\u7528v[i]\u5c31\u53ef\u4ee5\u8bbf\u95eev\u79cd\u7b2ci\u4e2a\u5143\u7d20\u3002 \u6ce8\u610f\u8fd9\u91cc\u4e0b\u6807\u7684\u8303\u56f4\u662f 0 - v.size() - 1 \uff0c\u5176\u4e2dsize()\u51fd\u6570\u662f\u8fd4\u56deSTL\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002 1 2 3 4 5 6 7 8 9 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( int i = 0 ; i < v . size (); ++ i ) cout << v [ i ] << endl ; } \u8f93\u51fa\uff1a 1 2 3 4 1 2 4 5 \u4f7f\u7528\u8fed\u4ee3\u5668 \u00b6 \u8fed\u4ee3\u5668\u53ef\u4ee5\u7c7b\u6bd4\u6210\u6307\u9488\uff0c\u5b9a\u4e49\u4e3a 1 STL < typename >:: iterator iterator_name ; \u5176\u4e2dSTL\u662f\u6240\u7528STL\u7684\u540d\u79f0\uff0c\u5982vector\uff0c\u4ee5\u53ca\u540e\u9762\u8981\u4ecb\u7ecd\u5230\u7684map\uff0cset\u7b49\u3002 \u5982\u5b9a\u4e49\u4e00\u4e2avector \u7c7b\u578b\u7684\u8fed\u4ee3\u5668\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\uff1a 1 vector < int >:: iterator it ; \u4f7f\u7528\u8fed\u4ee3\u5668\u6765\u904d\u5386\u5143\u7d20\uff1a 1 2 3 4 5 6 7 8 9 10 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( vector < int >:: iterator it = v . begin (); it != v . end (); ++ it ) cout << * it << endl ; } \u8f93\u51fa\uff1a 1 2 3 4 1 2 4 5 \u8fd9\u79cd\u5199\u6cd5\u4e0e\u4e0b\u9762\u8fd9\u79cd\u5199\u6cd5\u7b49\u4ef7: 1 2 3 4 5 6 7 8 9 10 11 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; vector < int >:: iterator it = v . begin (); for ( int i = 0 ; i < v . size (); ++ i ) cout << * ( it + i ) << endl ; } \u53ef\u4ee5\u770b\u5230: * v[i]\u4e0e*(it + i)\u4f5c\u7528\u76f8\u540c * \u8fed\u4ee3\u5668\u5b9e\u73b0\u4e86\u81ea\u589e\u548c\u81ea\u51cf\u7684\u64cd\u4f5c\uff0c\u4e0e\u6307\u9488\u7c7b\u4f3c\u3002 * begin()\u51fd\u6570\u8fd4\u56de\u9996\u5143\u7d20\u8fed\u4ee3\u5668\uff0cend()\u8fd4\u56de\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u8fed\u4ee3\u5668\u800c\u4e0d\u662f\u9996\u5143\u7d20\uff0c\u5de6\u95ed\u53f3\u5f00\uff0c\u5176\u5b9e\u540e\u9762\u6709\u5f88\u591a\u51fd\u6570\u90fd\u662f\u6309\u7167\u5de6\u95ed\u53f3\u5f00\u7684\u65b9\u5f0f\u6765\u5b9a\u4e49\u7684\u3002 \u6ce8\u610f\uff1a * \u8fed\u4ee3\u5668\u7684\u7c7b\u578b\u5fc5\u987b\u548c\u5b9a\u4e49\u7684\u7c7b\u578b\u4e00\u81f4\uff0c\u5373\u6211\u4e0d\u80fd\u7528vector< double >\u7c7b\u578b\u7684\u8fed\u4ee3\u5668\u8bbf\u95eevector< int >\u578b\u7684vector * \u53ea\u6709vector\u548cstring\u624d\u80fd\u4f7f\u7528it+i\u8fd9\u79cd\u5199\u6cd5 \u5f53\u7136\u8fed\u4ee3\u5668\u9700\u8981\u5199\u8fd9\u4e48\u957f\uff0c\u4e0d\u592a\u65b9\u4fbf\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 auto \u6539\u5199\u4e0a\u8ff0\u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto it = v . begin (); it != v . end (); ++ it ) cout << * it << endl ; } \u4f7f\u7528auto\u904d\u5386 \u00b6 \u5982\u679c\u4ec5\u4ec5\u9700\u8981\u904d\u5386\u6240\u6709\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\uff1a 1 2 3 4 5 6 7 8 9 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( int i : v ) cout << i << endl ; } \u6216\u8005\u66f4\u7b80\u5355\u4e00\u70b9\uff0c\u4f7f\u7528auto\uff1a 1 2 3 4 5 int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto i : v ) cout << i << endl ; } \u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u5982\u679c\u9700\u8981\u4fee\u6539\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u9700\u8981\u8fd9\u6837\u5199: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto & i : v ) { cout << i << \" \" ; i = i + 1 ; } cout << endl ; for ( auto i : v ) cout << i << \" \" ; } \u8f93\u51fa\uff1a 1 2 1 2 4 5 2 3 5 6 \u800c\u5982\u679c\u4e0d\u4f7f\u7528\u5f15\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto i : v ) { cout << i << \" \" ; i = i + 1 ; } cout << endl ; for ( auto i : v ) cout << i << \" \" ; } \u5219\u4f1a\u8f93\u51fa\uff1a 1 2 1 2 4 5 1 2 4 5 \u539f\u56e0\u662f\u5982\u679c\u4e0d\u9002\u7528\u5f15\u7528\uff0c\u76f8\u5f53\u4e8e\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5efa\u7acb\u4e86\u4e00\u4e2a\u62f7\u8d1d\uff0c\u800c\u5f15\u7528\u5219\u662f\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5efa\u7acb\u4e00\u4e2a\u5f15\u7528\uff0c\u5f53\u7136\u53ef\u4ee5\u4fee\u6539\u771f\u6b63\u7684\u503c\u3002 \u5e38\u7528\u51fd\u6570 \u00b6 push_back()\u4e0epop_back() \u00b6 push_back()\u6545\u540d\u601d\u610f\uff0c\u5c31\u662f\u518d\u5f53\u524dvector\u7684\u540e\u8fb9\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u800cpop_back()\u5c31\u662f\u518dvector\u540e\u8fb9\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ); Print ( v ); v . pop_back (); Print ( v ); } \u8f93\u51fa: 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 3 , elements = [ 1 2 3 ] clear()\u4e0eempty() \u00b6 clear()\u7528\u4e8e\u6e05\u7a7aSTL\uff0cempty()\u662f\u7528\u4e8e\u5224\u65adSTL\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\u8fd4\u56de1\uff0c\u5426\u5219\u8fd4\u56de0\uff1b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ); Print ( v ); v . clear (); Print ( v ); } \u8f93\u51fa: 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 0 , elements = [ ] clear()\u7684\u529f\u80fd\u8fd9\u79cd\u5199\u6cd5\u4e0e\u4ee5\u4e0b\u5199\u6cd5\u76f8\u540c: 1 while ( ! v . empty () ) v . pop_back (); insert() \u00b6 insert()\u6709\u4e09\u79cd\u5f62\u5f0f\uff1a \u51fd\u6570 \u4f5c\u7528 v.insert(it, val) \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165\u65b0\u5143\u7d20val v.insert(it, n, x) \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165n\u4e2ax v.insert(it, first, last) \u5c06\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\u63d2\u5165\u5230\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u9762 \u4e3e\u51e0\u4e2a\u4f8b\u5b50: \u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v , v1 ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ), v1 . push_back ( i + 100 ); Print ( v ); auto it = v . begin () + 1 ; v . insert ( it , 1E9 ); Print ( v ); } \u8f93\u51fa\uff1a 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 5 , elements = [ 1 1000000000 2 3 4 ] \u63d2\u5165\u5e8f\u5217\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ); Print ( v ); auto it = v . begin () + 1 ; v . insert ( v . begin (), it , it + 2 ); Print ( v ); } \u8f93\u51fa: 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 6 , elements = [ 2 3 1 2 3 4 ] \u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6vector\u7684\u8fed\u4ee3\u5668\uff0c\u4e0d\u8fc7\u7c7b\u578b\u8981\u4e00\u81f4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v , v1 ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ), v1 . push_back ( i + 100 ); Print ( v ); auto it = v1 . begin () + 1 ; v . insert ( v . begin (), it , it + 2 ); Print ( v ); } \u7ed3\u679c\uff1a 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 6 , elements = [ 102 103 1 2 3 4 ] erase() \u00b6 erase()\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a \u51fd\u6570 \u4f5c\u7528 v.erase(it) \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5411\u7684\u5143\u7d20 v.erase(first, last) \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last) \u4f8b\u5982: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v , v1 ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ), v1 . push_back ( i + 100 ); Print ( v ); auto it = v . begin () + 1 ; v . erase ( it ); Print ( v ); } \u7ed3\u679c\uff1a 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 3 , elements = [ 1 3 4 ] \u5e38\u89c1\u4f7f\u7528\u60c5\u51b5 \u00b6 \u7528\u90bb\u63a5\u8868\u7684\u5f62\u5f0f\u5b58\u50a8\u56fe \u00b6 \u4f8b\u5982\u7528\u4ee5\u4e0b\u5f62\u5f0f\u7ed9\u51fa\u4e00\u4e2a\u56fe\uff1a n n m m a_1 a_1 b_1 b_1 c_1 c_1 \\vdots \\vdots a_m a_m b_m b_m c_m c_m \u5176\u4e2dn\u662f\u8282\u70b9\u6570\uff0cm\u662f\u8fb9\u6570\uff0c\u4e0b\u9762\u6709m\u884c\uff0c\u8868\u793a\u4ece a_i a_i \u5230 b_i b_i \u6709\u4e00\u6761\u6743\u503c\u4e3a c_i c_i \u7684\u8fb9\u3002 \u5047\u8bben,m\u5f88\u5927\uff0c1E5\u5de6\u53f3\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u6765\u5b58\u50a8\uff0c\u800c\u662f\u7528vector\u5219\u53ef\u4ee5\u529e\u5f97\u5230\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; const int maxn = 1E5 + 5 ; struct edge { int to , weight ; }; vector < edge > v [ maxn ]; int main () { int n , m ; cin >> n >> m ; while ( m -- ) { int a , b , c ; cin >> a >> b >> c ; v [ a ]. push_back ( { b , c } ); } } \u5b58\u50a8\u8f93\u5165\u4e2a\u6570\u4e0d\u5b9a\u7684\u6570\u636e \u00b6 \u5982\u8f93\u5165\u8bb8\u591a\u5b57\u7b26\u4e32\uff0c\u76f4\u5230\u9047\u5230end\u65f6\u505c\u6b62\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528vector\u5c06\u8fd9\u4e9b\u6570\u636e\u4fdd\u5b58\u8d77\u6765: 1 2 3 4 5 6 7 8 9 10 11 #include <bits/stdc++.h> using namespace std ; int main () { string tmp ; vector < string > v ; while ( cin >> tmp , tmp != \"end\" ) v . push_back ( tmp ); } \u6a21\u62dfstack(vector\u901f\u5ea6\u6bd4stack\u8981\u5feb) \u00b6 stack\u662f\u4e00\u79cd\u540e\u8fdb\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5728\u5b9e\u73b0Tarjan\u6216\u8005\u9012\u5f52\u65f6\u4f1a\u7ecf\u5e38\u7528\u5230\u3002\u56e0\u4e3avector\u901f\u5ea6\u8981\u6bd4\u771f\u6b63\u7684stack\u8981\u5feb\uff0c\u6240\u6709\u5e38\u5e38\u4f7f\u7528vector\u6765\u6a21\u62dfstack\u3002 \u5982stack\u7684push()\u53ef\u4ee5\u7528vector\u7684push_back()\uff0c\u800cpop()\u5219\u53ef\u4ee5\u7528pop_back()\uff1b \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u5728vector\u540e\u63d2\u5165\u548c\u5220\u9664\u3001\u4ee5\u53ca\u5143\u7d20\u8bbf\u95ee\u662f O(1) O(1) \u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u65f6 O(k) O(k) \uff0ck\u662f\u63d2\u5165\u4f4d\u7f6e\u4e4b\u540e\u7684\u5143\u7d20\u4e2a\u6570\u3002","title":"Vector"},{"location":"STL/vector/#_1","text":"vector\u53ef\u4ee5\u7406\u89e3\u6210\u53ef\u4ee5\u53d8\u957f\u7684\u6570\u7ec4\uff1b\u4e5f\u5c31\u662f\u6570\u7ec4\u7684\u957f\u5ea6\u662f\u53ef\u4ee5\u52a8\u6001\u53d8\u5316\u7684\u3002 vector\u5e38\u7528\u4e8e\u9700\u8981\u5b58\u50a8\u5185\u5bb9\u5927\u5c0f\u4e0d\u786e\u5b9a\uff0c\u7528\u666e\u901a\u6570\u7ec4\u5b58\u50a8\u4f1a\u8d85\u5185\u5b58\u7684\u60c5\u51b5\u3002 \u4f7f\u7528\u9700\u6dfb\u52a0 1 #include <vector>","title":"\u7528\u9014"},{"location":"STL/vector/#_2","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"STL/vector/#_3","text":"1 vector < type > name ; type\u53ef\u4ee5\u662f\u4efb\u4f55\u6570\u636e\u7c7b\u578b(int\uff0cstruct\uff0cclass...),\u751a\u81f3\u53ef\u4ee5\u662fSTL\u3002 \u4f8b\u5982\uff0c\u5b9a\u4e49\u4e00\u4e2a\u53ef\u4ee5\u4fdd\u5b58int\u7c7b\u578b\u7684vector\u7684vector: 1 vector < vector < int > > v ; \u8fd9\u4e2a\u65f6\u5019\uff0cvector\u5c31\u76f8\u5f53\u4e8e\u4e24\u4e2a\u7ef4\u5ea6\u90fd\u53ef\u4ee5\u53d8\u5316\u7684\u6570\u7ec4\u3002","title":"\u5b9a\u4e49"},{"location":"STL/vector/#_4","text":"","title":"\u5143\u7d20\u8bbf\u95ee"},{"location":"STL/vector/#_5","text":"\u548c\u666e\u901a\u6570\u7ec4\u4e00\u6837\uff0c\u5047\u8bbe\u6709\u4e00\u4e2avector\u53d8\u91cf\u540d\u4e3av\uff0c\u90a3\u4e48\u8bbf\u95ee\u4f7f\u7528v[i]\u5c31\u53ef\u4ee5\u8bbf\u95eev\u79cd\u7b2ci\u4e2a\u5143\u7d20\u3002 \u6ce8\u610f\u8fd9\u91cc\u4e0b\u6807\u7684\u8303\u56f4\u662f 0 - v.size() - 1 \uff0c\u5176\u4e2dsize()\u51fd\u6570\u662f\u8fd4\u56deSTL\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002 1 2 3 4 5 6 7 8 9 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( int i = 0 ; i < v . size (); ++ i ) cout << v [ i ] << endl ; } \u8f93\u51fa\uff1a 1 2 3 4 1 2 4 5","title":"\u4f7f\u7528\u4e0b\u6807"},{"location":"STL/vector/#_6","text":"\u8fed\u4ee3\u5668\u53ef\u4ee5\u7c7b\u6bd4\u6210\u6307\u9488\uff0c\u5b9a\u4e49\u4e3a 1 STL < typename >:: iterator iterator_name ; \u5176\u4e2dSTL\u662f\u6240\u7528STL\u7684\u540d\u79f0\uff0c\u5982vector\uff0c\u4ee5\u53ca\u540e\u9762\u8981\u4ecb\u7ecd\u5230\u7684map\uff0cset\u7b49\u3002 \u5982\u5b9a\u4e49\u4e00\u4e2avector \u7c7b\u578b\u7684\u8fed\u4ee3\u5668\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u8bed\u53e5\uff1a 1 vector < int >:: iterator it ; \u4f7f\u7528\u8fed\u4ee3\u5668\u6765\u904d\u5386\u5143\u7d20\uff1a 1 2 3 4 5 6 7 8 9 10 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( vector < int >:: iterator it = v . begin (); it != v . end (); ++ it ) cout << * it << endl ; } \u8f93\u51fa\uff1a 1 2 3 4 1 2 4 5 \u8fd9\u79cd\u5199\u6cd5\u4e0e\u4e0b\u9762\u8fd9\u79cd\u5199\u6cd5\u7b49\u4ef7: 1 2 3 4 5 6 7 8 9 10 11 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; vector < int >:: iterator it = v . begin (); for ( int i = 0 ; i < v . size (); ++ i ) cout << * ( it + i ) << endl ; } \u53ef\u4ee5\u770b\u5230: * v[i]\u4e0e*(it + i)\u4f5c\u7528\u76f8\u540c * \u8fed\u4ee3\u5668\u5b9e\u73b0\u4e86\u81ea\u589e\u548c\u81ea\u51cf\u7684\u64cd\u4f5c\uff0c\u4e0e\u6307\u9488\u7c7b\u4f3c\u3002 * begin()\u51fd\u6570\u8fd4\u56de\u9996\u5143\u7d20\u8fed\u4ee3\u5668\uff0cend()\u8fd4\u56de\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u8fed\u4ee3\u5668\u800c\u4e0d\u662f\u9996\u5143\u7d20\uff0c\u5de6\u95ed\u53f3\u5f00\uff0c\u5176\u5b9e\u540e\u9762\u6709\u5f88\u591a\u51fd\u6570\u90fd\u662f\u6309\u7167\u5de6\u95ed\u53f3\u5f00\u7684\u65b9\u5f0f\u6765\u5b9a\u4e49\u7684\u3002 \u6ce8\u610f\uff1a * \u8fed\u4ee3\u5668\u7684\u7c7b\u578b\u5fc5\u987b\u548c\u5b9a\u4e49\u7684\u7c7b\u578b\u4e00\u81f4\uff0c\u5373\u6211\u4e0d\u80fd\u7528vector< double >\u7c7b\u578b\u7684\u8fed\u4ee3\u5668\u8bbf\u95eevector< int >\u578b\u7684vector * \u53ea\u6709vector\u548cstring\u624d\u80fd\u4f7f\u7528it+i\u8fd9\u79cd\u5199\u6cd5 \u5f53\u7136\u8fed\u4ee3\u5668\u9700\u8981\u5199\u8fd9\u4e48\u957f\uff0c\u4e0d\u592a\u65b9\u4fbf\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 auto \u6539\u5199\u4e0a\u8ff0\u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto it = v . begin (); it != v . end (); ++ it ) cout << * it << endl ; }","title":"\u4f7f\u7528\u8fed\u4ee3\u5668"},{"location":"STL/vector/#auto","text":"\u5982\u679c\u4ec5\u4ec5\u9700\u8981\u904d\u5386\u6240\u6709\u5143\u7d20\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\uff1a 1 2 3 4 5 6 7 8 9 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( int i : v ) cout << i << endl ; } \u6216\u8005\u66f4\u7b80\u5355\u4e00\u70b9\uff0c\u4f7f\u7528auto\uff1a 1 2 3 4 5 int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto i : v ) cout << i << endl ; } \u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0c\u5982\u679c\u9700\u8981\u4fee\u6539\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u9700\u8981\u8fd9\u6837\u5199: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto & i : v ) { cout << i << \" \" ; i = i + 1 ; } cout << endl ; for ( auto i : v ) cout << i << \" \" ; } \u8f93\u51fa\uff1a 1 2 1 2 4 5 2 3 5 6 \u800c\u5982\u679c\u4e0d\u4f7f\u7528\u5f15\u7528\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; int main () { vector < int > v = { 1 , 2 , 4 , 5 }; for ( auto i : v ) { cout << i << \" \" ; i = i + 1 ; } cout << endl ; for ( auto i : v ) cout << i << \" \" ; } \u5219\u4f1a\u8f93\u51fa\uff1a 1 2 1 2 4 5 1 2 4 5 \u539f\u56e0\u662f\u5982\u679c\u4e0d\u9002\u7528\u5f15\u7528\uff0c\u76f8\u5f53\u4e8e\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5efa\u7acb\u4e86\u4e00\u4e2a\u62f7\u8d1d\uff0c\u800c\u5f15\u7528\u5219\u662f\u5bf9\u5176\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u5efa\u7acb\u4e00\u4e2a\u5f15\u7528\uff0c\u5f53\u7136\u53ef\u4ee5\u4fee\u6539\u771f\u6b63\u7684\u503c\u3002","title":"\u4f7f\u7528auto\u904d\u5386"},{"location":"STL/vector/#_7","text":"","title":"\u5e38\u7528\u51fd\u6570"},{"location":"STL/vector/#push_backpop_back","text":"push_back()\u6545\u540d\u601d\u610f\uff0c\u5c31\u662f\u518d\u5f53\u524dvector\u7684\u540e\u8fb9\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u800cpop_back()\u5c31\u662f\u518dvector\u540e\u8fb9\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ); Print ( v ); v . pop_back (); Print ( v ); } \u8f93\u51fa: 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 3 , elements = [ 1 2 3 ]","title":"push_back()\u4e0epop_back()"},{"location":"STL/vector/#clearempty","text":"clear()\u7528\u4e8e\u6e05\u7a7aSTL\uff0cempty()\u662f\u7528\u4e8e\u5224\u65adSTL\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\u8fd4\u56de1\uff0c\u5426\u5219\u8fd4\u56de0\uff1b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ); Print ( v ); v . clear (); Print ( v ); } \u8f93\u51fa: 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 0 , elements = [ ] clear()\u7684\u529f\u80fd\u8fd9\u79cd\u5199\u6cd5\u4e0e\u4ee5\u4e0b\u5199\u6cd5\u76f8\u540c: 1 while ( ! v . empty () ) v . pop_back ();","title":"clear()\u4e0eempty()"},{"location":"STL/vector/#insert","text":"insert()\u6709\u4e09\u79cd\u5f62\u5f0f\uff1a \u51fd\u6570 \u4f5c\u7528 v.insert(it, val) \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165\u65b0\u5143\u7d20val v.insert(it, n, x) \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165n\u4e2ax v.insert(it, first, last) \u5c06\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\u63d2\u5165\u5230\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u9762 \u4e3e\u51e0\u4e2a\u4f8b\u5b50: \u63d2\u5165\u4e00\u4e2a\u5143\u7d20\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v , v1 ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ), v1 . push_back ( i + 100 ); Print ( v ); auto it = v . begin () + 1 ; v . insert ( it , 1E9 ); Print ( v ); } \u8f93\u51fa\uff1a 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 5 , elements = [ 1 1000000000 2 3 4 ] \u63d2\u5165\u5e8f\u5217\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ); Print ( v ); auto it = v . begin () + 1 ; v . insert ( v . begin (), it , it + 2 ); Print ( v ); } \u8f93\u51fa: 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 6 , elements = [ 2 3 1 2 3 4 ] \u5f53\u7136\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6vector\u7684\u8fed\u4ee3\u5668\uff0c\u4e0d\u8fc7\u7c7b\u578b\u8981\u4e00\u81f4\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v , v1 ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ), v1 . push_back ( i + 100 ); Print ( v ); auto it = v1 . begin () + 1 ; v . insert ( v . begin (), it , it + 2 ); Print ( v ); } \u7ed3\u679c\uff1a 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 6 , elements = [ 102 103 1 2 3 4 ]","title":"insert()"},{"location":"STL/vector/#erase","text":"erase()\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a \u51fd\u6570 \u4f5c\u7528 v.erase(it) \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5411\u7684\u5143\u7d20 v.erase(first, last) \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last) \u4f8b\u5982: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <bits/stdc++.h> using namespace std ; void Print ( vector < int > & v ) { cout << \"size = \" << v . size () << \", elements = [ \" ; for ( auto i : v ) cout << i << \" \" ; cout << \"]\" << endl ; } int main () { vector < int > v , v1 ; for ( int i = 1 ; i < 5 ; ++ i ) v . push_back ( i ), v1 . push_back ( i + 100 ); Print ( v ); auto it = v . begin () + 1 ; v . erase ( it ); Print ( v ); } \u7ed3\u679c\uff1a 1 2 size = 4 , elements = [ 1 2 3 4 ] size = 3 , elements = [ 1 3 4 ]","title":"erase()"},{"location":"STL/vector/#_8","text":"","title":"\u5e38\u89c1\u4f7f\u7528\u60c5\u51b5"},{"location":"STL/vector/#_9","text":"\u4f8b\u5982\u7528\u4ee5\u4e0b\u5f62\u5f0f\u7ed9\u51fa\u4e00\u4e2a\u56fe\uff1a n n m m a_1 a_1 b_1 b_1 c_1 c_1 \\vdots \\vdots a_m a_m b_m b_m c_m c_m \u5176\u4e2dn\u662f\u8282\u70b9\u6570\uff0cm\u662f\u8fb9\u6570\uff0c\u4e0b\u9762\u6709m\u884c\uff0c\u8868\u793a\u4ece a_i a_i \u5230 b_i b_i \u6709\u4e00\u6761\u6743\u503c\u4e3a c_i c_i \u7684\u8fb9\u3002 \u5047\u8bben,m\u5f88\u5927\uff0c1E5\u5de6\u53f3\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u4f7f\u7528\u90bb\u63a5\u77e9\u9635\u6765\u5b58\u50a8\uff0c\u800c\u662f\u7528vector\u5219\u53ef\u4ee5\u529e\u5f97\u5230\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <bits/stdc++.h> using namespace std ; const int maxn = 1E5 + 5 ; struct edge { int to , weight ; }; vector < edge > v [ maxn ]; int main () { int n , m ; cin >> n >> m ; while ( m -- ) { int a , b , c ; cin >> a >> b >> c ; v [ a ]. push_back ( { b , c } ); } }","title":"\u7528\u90bb\u63a5\u8868\u7684\u5f62\u5f0f\u5b58\u50a8\u56fe"},{"location":"STL/vector/#_10","text":"\u5982\u8f93\u5165\u8bb8\u591a\u5b57\u7b26\u4e32\uff0c\u76f4\u5230\u9047\u5230end\u65f6\u505c\u6b62\uff0c\u90a3\u4e48\u53ef\u4ee5\u4f7f\u7528vector\u5c06\u8fd9\u4e9b\u6570\u636e\u4fdd\u5b58\u8d77\u6765: 1 2 3 4 5 6 7 8 9 10 11 #include <bits/stdc++.h> using namespace std ; int main () { string tmp ; vector < string > v ; while ( cin >> tmp , tmp != \"end\" ) v . push_back ( tmp ); }","title":"\u5b58\u50a8\u8f93\u5165\u4e2a\u6570\u4e0d\u5b9a\u7684\u6570\u636e"},{"location":"STL/vector/#stackvectorstack","text":"stack\u662f\u4e00\u79cd\u540e\u8fdb\u5148\u51fa\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5728\u5b9e\u73b0Tarjan\u6216\u8005\u9012\u5f52\u65f6\u4f1a\u7ecf\u5e38\u7528\u5230\u3002\u56e0\u4e3avector\u901f\u5ea6\u8981\u6bd4\u771f\u6b63\u7684stack\u8981\u5feb\uff0c\u6240\u6709\u5e38\u5e38\u4f7f\u7528vector\u6765\u6a21\u62dfstack\u3002 \u5982stack\u7684push()\u53ef\u4ee5\u7528vector\u7684push_back()\uff0c\u800cpop()\u5219\u53ef\u4ee5\u7528pop_back()\uff1b","title":"\u6a21\u62dfstack(vector\u901f\u5ea6\u6bd4stack\u8981\u5feb)"},{"location":"STL/vector/#_11","text":"\u5728vector\u540e\u63d2\u5165\u548c\u5220\u9664\u3001\u4ee5\u53ca\u5143\u7d20\u8bbf\u95ee\u662f O(1) O(1) \u5728\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u65f6 O(k) O(k) \uff0ck\u662f\u63d2\u5165\u4f4d\u7f6e\u4e4b\u540e\u7684\u5143\u7d20\u4e2a\u6570\u3002","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"basic-algorithm/adding-doubling/","text":"\u500d\u589e \u00b6 Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a freshman_lcx \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u500d\u589e\u601d\u60f3 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u6570\u5217A\uff0c\u7136\u540e\u8fdb\u884c\u82e5\u5e72\u6b21\u8be2\u95ee\uff0c\u6bcf\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570T\uff0c\u6c42\u51fa\u6700\u5927\u7684 k \uff0c \\sum_{i=1}^k {A[i]}\\leq T \\sum_{i=1}^k {A[i]}\\leq T \u3002 \u4f60\u7684\u7b97\u6cd5\u5fc5\u987b\u662f\u5728\u7ebf\u7684\uff0c\u5047\u8bbe 0 \\leq T \\leq \\sum_{i=1}^k {A[i]} 0 \\leq T \\leq \\sum_{i=1}^k {A[i]} \u3002 \u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u8fd9\u6837\u4e00\u79cd\u500d\u589e\u7b97\u6cd5\uff1a \u5148\u82b1\u8d39O(N)\u7684\u65f6\u95f4\u9884\u5904\u7406\u51fa\u524d\u7f00\u548c\u6570\u7ec4S 1\u3001\u4ee4 p=1\uff0ck=0\uff0csum=0; 2\u3001\u6bd4\u8f83\u201cA\u6570\u7ec4\u4e2d k \u4e4b\u540e\u7684 p \u4e2a\u6570\u7684\u548c\u52a0\u4e0asum\u201d\u4e0e T \u7684\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c sum+S[k+p]-S[k]<=T \uff0c\u5219\u4ee4 sum+=S[k+p]-S[k] , k+=p , p*=2 , \u5373\u7d2f\u52a0\u4e0a\u8fd9p\u4e2a\u6570\u7684\u548c\uff0c\u7136\u540e\u628a p \u7684\u8de8\u5ea6\u589e\u957f\u4e00\u500d\u3002\u5982\u679c sum+S[k+p]-S[k]>T,\u5219\u4ee4 p/=2\u3002 3\u3001\u91cd\u590d\u4e0a\u4e00\u6b65\uff0c\u76f4\u5230 p \u7684\u503c\u53d8\u4e3a 0 \uff0c\u6b64\u65f6 k \u5c31\u662f\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int n , A [ maxn ], T , S [ maxn ]; int main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> A [ i ]; S [ i ] = A [ i ] + S [ i -1 ]; } while ( cin >> T ) { int p = 1 , k = 0 , sum = 0 ; while ( p != 0 ) { if ( sum + S [ k + p ] - S [ k ] <= T ) { sum += S [ k + p ] - S [ k ]; k += p ; p *= 2 ; } else p /= 2 ; } cout << k << endl ; } return 0 ; } \u500d\u589e\u7684\u5e94\u7528 \u00b6 \u6700\u8fd1\u516c\u5171\u7956\u5148(lca) \u5229\u7528\u4e8c\u8fdb\u5236\u7684\u601d\u60f3\uff0c\u60f3\u529e\u6cd5\u4f7f\u4e00\u6b65\u4e00\u6b65\u5411\u4e0a\u641c\u7d22\u53d8\u6210\u4ee5 2^{k} 2^{k} \u7684\u5411\u4e0a\u8df3\u3002\u6240\u4ee5\u5b9a\u4e49\u4e00\u4e2af[][]\u6570\u7ec4\uff0c\u4f7ff[j][i]\u8868\u793a\u8282\u70b9i\u7684 2^{j} 2^{j} \u500d\u7956\u5148\u3002 \u5feb\u901f\u5e42 \u7ed9\u51fax\uff0cy\uff0cp\uff0c\u6c42 x^{y} x^{y} %p\uff0c\u5982\u679cx,y\u7684\u6570\u636e\u5f88\u5927\u7684\u8bdd\uff0cO(n)\u7684\u7b97\u6cd5\u4f1a\u8d85\u65f6\uff0c\u90a3\u4e48\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u7528\u500d\u589e\u7684\u65b9\u6cd5\u51cf\u5c11\u8fd0\u7b97\u6b21\u6570 \u5148\u6c42\u51fa x^{1} x^{1} x^{2} x^{2} x^{4} x^{4} x^{8} x^{8} .....(\u4e0d\u8fc7\u51e0\u5341\u6b21\u8fd0\u7b97) \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2ay, x^{y} x^{y} \u90fd\u53ef\u4ee5\u7531\u4e0a\u9762\u7684\u9879\u505a\u4e58\u79ef\u5f97\u5230\uff08\u4e5f\u4e0d\u8fc7\u662f\u51e0\u5341\u6b21\u8fd0\u7b97\uff09 \u8fd9\u6837\u5c31\u5927\u5927\u51cf\u5c11\u4e86\u8fd0\u7b97\u6b21\u6570 RMQ\u6c42\u533a\u95f4\u6700\u503c\u95ee\u9898 \u7ed9\u51fan\u4e2a\u6570\u7ec4\u6210\u7684\u6570\u5217\uff0cq\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fax\uff0cy\u95eex~y\u4e4b\u95f4\u7684\u6700\u5c0f\u503c\u662f\u591a\u5c11\uff1f \u5982\u679c\u76f4\u63a5\u66b4\u529b\u7684\u8bdd\u590d\u6742\u5ea6O(n*q) RMQ\u7b97\u6cd5\u4e5f\u662f\u7528\u5230\u4e86\u500d\u589e\u7684\u65b9\u6cd5 f(i,1)\u8868\u793a\u4ece\u7b2ci\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5f80\u540e1\u4e2a\u6570\u7684\u6700\u5c0f\u503c f(i,2)\u8868\u793a\u4ece\u7b2ci\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5f80\u540e2\u4e2a\u6570\u7684\u6700\u5c0f\u503c f(i,3)\u8868\u793a\u4ece\u7b2ci\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5f80\u540e4\u4e2a\u6570\u7684\u6700\u5c0f\u503c \u5219\u9012\u63a8\u5f0f\u5373\u4e3af(i,k)=min(f(i,k-1),f(i+ 2^{k-2} 2^{k-2} ,k-1)) \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n*logn+q) O(n*logn+q)","title":"\u500d\u589e"},{"location":"basic-algorithm/adding-doubling/#_1","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a freshman_lcx \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002","title":"\u500d\u589e"},{"location":"basic-algorithm/adding-doubling/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3aN\u7684\u6570\u5217A\uff0c\u7136\u540e\u8fdb\u884c\u82e5\u5e72\u6b21\u8be2\u95ee\uff0c\u6bcf\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570T\uff0c\u6c42\u51fa\u6700\u5927\u7684 k \uff0c \\sum_{i=1}^k {A[i]}\\leq T \\sum_{i=1}^k {A[i]}\\leq T \u3002 \u4f60\u7684\u7b97\u6cd5\u5fc5\u987b\u662f\u5728\u7ebf\u7684\uff0c\u5047\u8bbe 0 \\leq T \\leq \\sum_{i=1}^k {A[i]} 0 \\leq T \\leq \\sum_{i=1}^k {A[i]} \u3002 \u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u8fd9\u6837\u4e00\u79cd\u500d\u589e\u7b97\u6cd5\uff1a \u5148\u82b1\u8d39O(N)\u7684\u65f6\u95f4\u9884\u5904\u7406\u51fa\u524d\u7f00\u548c\u6570\u7ec4S 1\u3001\u4ee4 p=1\uff0ck=0\uff0csum=0; 2\u3001\u6bd4\u8f83\u201cA\u6570\u7ec4\u4e2d k \u4e4b\u540e\u7684 p \u4e2a\u6570\u7684\u548c\u52a0\u4e0asum\u201d\u4e0e T \u7684\u5173\u7cfb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c sum+S[k+p]-S[k]<=T \uff0c\u5219\u4ee4 sum+=S[k+p]-S[k] , k+=p , p*=2 , \u5373\u7d2f\u52a0\u4e0a\u8fd9p\u4e2a\u6570\u7684\u548c\uff0c\u7136\u540e\u628a p \u7684\u8de8\u5ea6\u589e\u957f\u4e00\u500d\u3002\u5982\u679c sum+S[k+p]-S[k]>T,\u5219\u4ee4 p/=2\u3002 3\u3001\u91cd\u590d\u4e0a\u4e00\u6b65\uff0c\u76f4\u5230 p \u7684\u503c\u53d8\u4e3a 0 \uff0c\u6b64\u65f6 k \u5c31\u662f\u7b54\u6848\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int n , A [ maxn ], T , S [ maxn ]; int main () { cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) { cin >> A [ i ]; S [ i ] = A [ i ] + S [ i -1 ]; } while ( cin >> T ) { int p = 1 , k = 0 , sum = 0 ; while ( p != 0 ) { if ( sum + S [ k + p ] - S [ k ] <= T ) { sum += S [ k + p ] - S [ k ]; k += p ; p *= 2 ; } else p /= 2 ; } cout << k << endl ; } return 0 ; }","title":"\u500d\u589e\u601d\u60f3"},{"location":"basic-algorithm/adding-doubling/#_3","text":"\u6700\u8fd1\u516c\u5171\u7956\u5148(lca) \u5229\u7528\u4e8c\u8fdb\u5236\u7684\u601d\u60f3\uff0c\u60f3\u529e\u6cd5\u4f7f\u4e00\u6b65\u4e00\u6b65\u5411\u4e0a\u641c\u7d22\u53d8\u6210\u4ee5 2^{k} 2^{k} \u7684\u5411\u4e0a\u8df3\u3002\u6240\u4ee5\u5b9a\u4e49\u4e00\u4e2af[][]\u6570\u7ec4\uff0c\u4f7ff[j][i]\u8868\u793a\u8282\u70b9i\u7684 2^{j} 2^{j} \u500d\u7956\u5148\u3002 \u5feb\u901f\u5e42 \u7ed9\u51fax\uff0cy\uff0cp\uff0c\u6c42 x^{y} x^{y} %p\uff0c\u5982\u679cx,y\u7684\u6570\u636e\u5f88\u5927\u7684\u8bdd\uff0cO(n)\u7684\u7b97\u6cd5\u4f1a\u8d85\u65f6\uff0c\u90a3\u4e48\u8fd9\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u7528\u500d\u589e\u7684\u65b9\u6cd5\u51cf\u5c11\u8fd0\u7b97\u6b21\u6570 \u5148\u6c42\u51fa x^{1} x^{1} x^{2} x^{2} x^{4} x^{4} x^{8} x^{8} .....(\u4e0d\u8fc7\u51e0\u5341\u6b21\u8fd0\u7b97) \u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2ay, x^{y} x^{y} \u90fd\u53ef\u4ee5\u7531\u4e0a\u9762\u7684\u9879\u505a\u4e58\u79ef\u5f97\u5230\uff08\u4e5f\u4e0d\u8fc7\u662f\u51e0\u5341\u6b21\u8fd0\u7b97\uff09 \u8fd9\u6837\u5c31\u5927\u5927\u51cf\u5c11\u4e86\u8fd0\u7b97\u6b21\u6570 RMQ\u6c42\u533a\u95f4\u6700\u503c\u95ee\u9898 \u7ed9\u51fan\u4e2a\u6570\u7ec4\u6210\u7684\u6570\u5217\uff0cq\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fax\uff0cy\u95eex~y\u4e4b\u95f4\u7684\u6700\u5c0f\u503c\u662f\u591a\u5c11\uff1f \u5982\u679c\u76f4\u63a5\u66b4\u529b\u7684\u8bdd\u590d\u6742\u5ea6O(n*q) RMQ\u7b97\u6cd5\u4e5f\u662f\u7528\u5230\u4e86\u500d\u589e\u7684\u65b9\u6cd5 f(i,1)\u8868\u793a\u4ece\u7b2ci\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5f80\u540e1\u4e2a\u6570\u7684\u6700\u5c0f\u503c f(i,2)\u8868\u793a\u4ece\u7b2ci\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5f80\u540e2\u4e2a\u6570\u7684\u6700\u5c0f\u503c f(i,3)\u8868\u793a\u4ece\u7b2ci\u4e2a\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5f80\u540e4\u4e2a\u6570\u7684\u6700\u5c0f\u503c \u5219\u9012\u63a8\u5f0f\u5373\u4e3af(i,k)=min(f(i,k-1),f(i+ 2^{k-2} 2^{k-2} ,k-1)) \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n*logn+q) O(n*logn+q)","title":"\u500d\u589e\u7684\u5e94\u7528"},{"location":"basic-algorithm/binary-research/","text":"\u4e8c\u5206 \u00b6 Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a freshman_lcx \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u6574\u6570\u96c6\u5408\u4e0a\u7684\u4e8c\u5206 \u00b6 \u5728\u5355\u8c03\u9012\u589e\u5e8f\u5217a\u4e2d\u67e5\u627e \\geq \\geq x \u7684\u6570\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u6570 1 2 3 4 5 6 7 8 while ( l < r ) { int mid = ( l + r ) >> 1 ; if ( a [ mid ] >= x ) r = mid ; else l = mid + 1 ; } \u5728\u5355\u8c03\u9012\u589e\u5e8f\u5217a\u4e2d\u67e5\u627e \\leq \\leq x \u7684\u6570\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u6570 1 2 3 4 5 6 7 8 while ( l < r ) { int mid = ( l + r + 1 ) >> 1 ; if ( a [ mid ] <= x ) l = mid ; else r = mid -1 ; } \u5b9e\u6570\u57df\u4e0a\u7684\u4e8c\u5206 \u00b6 \u786e\u5b9a\u597d\u6240\u9700\u7684\u7cbe\u5ea6eps\uff0c\u4ee5 l+eps<r \u4e3a\u5faa\u73af\u6761\u4ef6\u6bcf\u6b21\u6839\u636e\u5728 mid \u4e0a\u7684\u5224\u5b9a\u9009\u62e9 r=mid \u6216 l=mid\u5373\u53ef\u3002\u4e00\u822c\u9700\u8981\u4fdd\u7559 k \u4f4d\u5c0f\u6570\u65f6\uff0c\u5219\u53d6 eps=10^{-(k+2)} eps=10^{-(k+2)} 1 2 3 4 5 while ( l + eps < r ) { double mid = ( l + r ) / 2 ; if ( check ( mid )) r = mid ; else l = mid ; } \u6709\u65f6\u7cbe\u5ea6\u4e0d\u5bb9\u6613\u786e\u5b9a\u6216\u8868\u793a\uff0c\u5c31\u5e72\u8106\u91c7\u7528\u5faa\u73af\u56fa\u5b9a\u6b21\u6570\u7684\u4e8c\u5206\u65b9\u6cd5\uff0c\u4e5f\u662f\u4e00\u79cd\u76f8\u5f53\u4e0d\u9519\u7684\u7b56\u7565\u3002\u8fd9\u79cd\u65b9\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u7684\u7cbe\u5ea6\u901a\u5e38\u6bd4\u8bbe\u7f6eeps\u66f4\u9ad8\u3002 1 2 3 4 5 for ( int i = 0 ; i < 100 ; i ++ ) { double mid = ( l + r ) / 2 ; if ( check ( mid )) r = mid ; else l = mid ; } \u4e8c\u5206\u7b54\u6848\u8f6c\u5316\u4e3a\u5224\u5b9a \u00b6 \u628a\u6c42\u6700\u4f18\u89e3\u7684\u95ee\u9898\uff0c\u8f6c\u5316\u4e3a\u7ed9\u5b9a\u4e00\u4e2a\u503cmid\uff0c\u5224\u5b9a\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u53ef\u884c\u65b9\u6848\u8bc4\u5206\u8fbe\u5230mid\u7684\u95ee\u9898\u3002 \u6709N\u672c\u4e66\u6392\u6210\u4e00\u884c\uff0c\u5df2\u77e5\u7b2ci\u672c\u4e66\u7684\u539a\u5ea6\u662fAi\u3002\u628a\u4ed6\u4eec\u5206\u6210\u8fde\u7eed\u7684M\u7ec4\uff0c\u4f7fT\u6700\u5c0f\u5316\uff0c\u5176\u4e2dT\u8868\u793a\u539a\u5ea6\u4e4b\u548c\u6700\u5927\u7684\u4e00\u7ec4\u7684\u539a\u5ea6\u3002 \u9898\u76ee\u4e2d\u63cf\u8ff0\u4e2d\u51fa\u73b0\u4e86\u7c7b\u4f3c\u4e8e\u201c\u6700\u5927\u503c\u6700\u5c0f\u201d\u7684\u542b\u4e49\uff0c\u8fd9\u662f\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u53ef\u7528\u4e8c\u5206\u8f6c\u5316\u4e3a\u5224\u5b9a\u7684\u6700\u5e38\u89c1\u3001\u6700\u5178\u578b\u7684\u7279\u5f81\u4e4b\u4e00\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 bool check ( int size ) { int group = 1 , rest = size ; for ( int i = 1 ; i <= n ; i ++ ) { if ( rest > a [ i ]) rest -= a [ i ]; else group ++ , rest = size - a [ i ]; } return group <= m ; } int main () { int l = 0 , r = sum_of_ai ; while ( l < r ) { int mid = ( l + r ) / 2 ; if ( check ( mid )) r = mid ; else l = mid + 1 ; } cout << l << endl ; } \u4e24\u4e2a\u5e38\u7528\u7684\u51fd\u6570 \u00b6 lower_bound( ) \u548c upper_bound( ) \u90fd\u662f\u5229\u7528\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u6cd5\u5728\u4e00\u4e2a\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u4e2d\u8fdb\u884c\u67e5\u627e\u7684\u3002 \u5728\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c lower_bound(begin,end,num) \uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 upper_bound( begin,end,num) \uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 \u5728\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c\u91cd\u8f7d lower_bound() \u548c upper_bound() lower_bound( begin,end,num,greater<type>() ) :\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 upper_bound( begin,end,num,greater<type>() ) :\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002","title":"\u4e8c\u5206"},{"location":"basic-algorithm/binary-research/#_1","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a freshman_lcx \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002","title":"\u4e8c\u5206"},{"location":"basic-algorithm/binary-research/#_2","text":"\u5728\u5355\u8c03\u9012\u589e\u5e8f\u5217a\u4e2d\u67e5\u627e \\geq \\geq x \u7684\u6570\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u6570 1 2 3 4 5 6 7 8 while ( l < r ) { int mid = ( l + r ) >> 1 ; if ( a [ mid ] >= x ) r = mid ; else l = mid + 1 ; } \u5728\u5355\u8c03\u9012\u589e\u5e8f\u5217a\u4e2d\u67e5\u627e \\leq \\leq x \u7684\u6570\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u6570 1 2 3 4 5 6 7 8 while ( l < r ) { int mid = ( l + r + 1 ) >> 1 ; if ( a [ mid ] <= x ) l = mid ; else r = mid -1 ; }","title":"\u6574\u6570\u96c6\u5408\u4e0a\u7684\u4e8c\u5206"},{"location":"basic-algorithm/binary-research/#_3","text":"\u786e\u5b9a\u597d\u6240\u9700\u7684\u7cbe\u5ea6eps\uff0c\u4ee5 l+eps<r \u4e3a\u5faa\u73af\u6761\u4ef6\u6bcf\u6b21\u6839\u636e\u5728 mid \u4e0a\u7684\u5224\u5b9a\u9009\u62e9 r=mid \u6216 l=mid\u5373\u53ef\u3002\u4e00\u822c\u9700\u8981\u4fdd\u7559 k \u4f4d\u5c0f\u6570\u65f6\uff0c\u5219\u53d6 eps=10^{-(k+2)} eps=10^{-(k+2)} 1 2 3 4 5 while ( l + eps < r ) { double mid = ( l + r ) / 2 ; if ( check ( mid )) r = mid ; else l = mid ; } \u6709\u65f6\u7cbe\u5ea6\u4e0d\u5bb9\u6613\u786e\u5b9a\u6216\u8868\u793a\uff0c\u5c31\u5e72\u8106\u91c7\u7528\u5faa\u73af\u56fa\u5b9a\u6b21\u6570\u7684\u4e8c\u5206\u65b9\u6cd5\uff0c\u4e5f\u662f\u4e00\u79cd\u76f8\u5f53\u4e0d\u9519\u7684\u7b56\u7565\u3002\u8fd9\u79cd\u65b9\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u7684\u7cbe\u5ea6\u901a\u5e38\u6bd4\u8bbe\u7f6eeps\u66f4\u9ad8\u3002 1 2 3 4 5 for ( int i = 0 ; i < 100 ; i ++ ) { double mid = ( l + r ) / 2 ; if ( check ( mid )) r = mid ; else l = mid ; }","title":"\u5b9e\u6570\u57df\u4e0a\u7684\u4e8c\u5206"},{"location":"basic-algorithm/binary-research/#_4","text":"\u628a\u6c42\u6700\u4f18\u89e3\u7684\u95ee\u9898\uff0c\u8f6c\u5316\u4e3a\u7ed9\u5b9a\u4e00\u4e2a\u503cmid\uff0c\u5224\u5b9a\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u53ef\u884c\u65b9\u6848\u8bc4\u5206\u8fbe\u5230mid\u7684\u95ee\u9898\u3002 \u6709N\u672c\u4e66\u6392\u6210\u4e00\u884c\uff0c\u5df2\u77e5\u7b2ci\u672c\u4e66\u7684\u539a\u5ea6\u662fAi\u3002\u628a\u4ed6\u4eec\u5206\u6210\u8fde\u7eed\u7684M\u7ec4\uff0c\u4f7fT\u6700\u5c0f\u5316\uff0c\u5176\u4e2dT\u8868\u793a\u539a\u5ea6\u4e4b\u548c\u6700\u5927\u7684\u4e00\u7ec4\u7684\u539a\u5ea6\u3002 \u9898\u76ee\u4e2d\u63cf\u8ff0\u4e2d\u51fa\u73b0\u4e86\u7c7b\u4f3c\u4e8e\u201c\u6700\u5927\u503c\u6700\u5c0f\u201d\u7684\u542b\u4e49\uff0c\u8fd9\u662f\u7b54\u6848\u5177\u6709\u5355\u8c03\u6027\uff0c\u53ef\u7528\u4e8c\u5206\u8f6c\u5316\u4e3a\u5224\u5b9a\u7684\u6700\u5e38\u89c1\u3001\u6700\u5178\u578b\u7684\u7279\u5f81\u4e4b\u4e00\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 bool check ( int size ) { int group = 1 , rest = size ; for ( int i = 1 ; i <= n ; i ++ ) { if ( rest > a [ i ]) rest -= a [ i ]; else group ++ , rest = size - a [ i ]; } return group <= m ; } int main () { int l = 0 , r = sum_of_ai ; while ( l < r ) { int mid = ( l + r ) / 2 ; if ( check ( mid )) r = mid ; else l = mid + 1 ; } cout << l << endl ; }","title":"\u4e8c\u5206\u7b54\u6848\u8f6c\u5316\u4e3a\u5224\u5b9a"},{"location":"basic-algorithm/binary-research/#_5","text":"lower_bound( ) \u548c upper_bound( ) \u90fd\u662f\u5229\u7528\u4e8c\u5206\u67e5\u627e\u7684\u65b9\u6cd5\u5728\u4e00\u4e2a\u6392\u597d\u5e8f\u7684\u6570\u7ec4\u4e2d\u8fdb\u884c\u67e5\u627e\u7684\u3002 \u5728\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c lower_bound(begin,end,num) \uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 upper_bound( begin,end,num) \uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 \u5728\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c\u91cd\u8f7d lower_bound() \u548c upper_bound() lower_bound( begin,end,num,greater<type>() ) :\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 upper_bound( begin,end,num,greater<type>() ) :\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002","title":"\u4e24\u4e2a\u5e38\u7528\u7684\u51fd\u6570"},{"location":"basic-algorithm/sort/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a rachelwo \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u5192\u6ce1\u6392\u5e8f \u00b6 \u57fa\u672c\u601d\u60f3 \u00b6 \u5192\u6ce1\u6392\u5e8f\uff08Bubble Sort\uff09\u4e5f\u662f\u4e00\u79cd\u7b80\u5355\u76f4\u89c2\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u5b83\u91cd\u590d\u5730\u8d70\u8bbf\u8fc7\u8981\u6392\u5e8f\u7684\u6570\u5217\uff0c\u4e00\u6b21\u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u4ed6\u4eec\u7684\u987a\u5e8f\u9519\u8bef\u5c31\u628a\u4ed6\u4eec\u4ea4\u6362\u8fc7\u6765\u3002\u8d70\u8bbf\u6570\u5217\u7684\u5de5\u4f5c\u662f\u91cd\u590d\u5730\u8fdb\u884c\u76f4\u5230\u6ca1\u6709\u518d\u9700\u8981\u4ea4\u6362\uff0c\u4e5f\u5c31\u662f\u8bf4\u8be5\u6570\u5217\u5df2\u7ecf\u6392\u5e8f\u5b8c\u6210\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u540d\u5b57\u7531\u6765\u662f\u56e0\u4e3a\u8d8a\u5c0f\u7684\u5143\u7d20\u4f1a\u7ecf\u7531\u4ea4\u6362\u6162\u6162\"\u6d6e\"\u5230\u6570\u5217\u7684\u9876\u7aef\u3002 \u52a8\u56fe \u00b6 \u6f14\u793a \u7b97\u6cd5\u5206\u6790 \u00b6 \u6700\u597d\u60c5\u51b5\uff1a\u5df2\u7ecf\u6709\u5e8f \u6700\u574f\u60c5\u51b5\uff1a\u5f85\u6392\u5e8f\u8bb0\u5f55\u6309\u5173\u952e\u5b57\u7684\u9006\u5e8f\u8fdb\u884c\u6392\u5217\uff0c\u6b64\u65f6\uff0c\u6bcf\u4e00\u8d9f\u5192\u6ce1\u6392\u5e8f\u9700\u8fdb\u884c i i \u6b21\u6bd4\u8f83\uff0c 3i 3i \u6b21\u79fb\u52a8\u3002\u7ecf\u8fc7 n\u22121 n\u22121 \u8d9f\u5192\u6ce1\u6392\u5e8f\u540e\uff0c\u603b\u7684\u6bd4\u8f83\u6b21\u6570\u4e3a \\sum _{i=1}^{n} i=\\frac {n(n\u22121)}{2} \\sum _{i=1}^{n} i=\\frac {n(n\u22121)}{2} \u6b21, \u603b\u7684\u79fb\u52a8\u6b21\u6570\u4e3a \\frac{3n(n\u22121)}{2} \\frac{3n(n\u22121)}{2} \u6b21\uff0c\u56e0\u6b64\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^{2}) O(n^{2}) \u9009\u62e9\u6392\u5e8f \u00b6 \u57fa\u672c\u601d\u60f3 \u00b6 \u9996\u5148\u5728\u672a\u6392\u5e8f\u5e8f\u5217\u4e2d\u627e\u5230\u6700\u5c0f\uff08\u5927\uff09\u5143\u7d20\uff0c\u5b58\u653e\u5230\u6392\u5e8f\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u518d\u4ece\u5269\u4f59\u672a\u6392\u5e8f\u5143\u7d20\u4e2d\u7ee7\u7eed\u5bfb\u627e\u6700\u5c0f\uff08\u5927\uff09\u5143\u7d20\uff0c\u7136\u540e\u653e\u5230\u5df2\u6392\u5e8f\u5e8f\u5217\u7684\u672b\u5c3e\u3002 \u91cd\u590d\u7b2c\u4e8c\u6b65\uff0c\u76f4\u5230\u6240\u6709\u5143\u7d20\u5747\u6392\u5e8f\u5b8c\u6bd5\u3002 \u52a8\u56fe \u00b6 \u6f14\u793a \u7b97\u6cd5\u5206\u6790 \u00b6 \u4efb\u4f55\u5e8f\u5217\uff08\u4e0d\u7ba1\u662f\u5426\u6709\u5e8f\uff09\u90fd\u662f O(n^{2}) O(n^{2}) \u4ee3\u7801\u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void selection_sort ( int arr [], int len ) { int i , j ; for ( i = 0 ; i < len - 1 ; i ++ ) { int min = i ; for ( j = i + 1 ; j < len ; j ++ ) //\u8d70\u8bbf\u672a\u6392\u5e8f\u7684\u5143\u7d20 if ( arr [ j ] < arr [ min ]) //\u627e\u5230\u76ee\u524d\u6700\u5c0f\u503c min = j ; //\u8bb0\u5f55\u6700\u5c0f\u503c int temp = arr [ min ]; arr [ min ] = arr [ i ] arr [ i ] = temp ; //\u4ea4\u6362 } } \u63d2\u5165\u6392\u5e8f \u00b6 \u57fa\u672c\u601d\u60f3 \u00b6 \u628a\u5143\u7d20\u63d2\u5165\u5230\u6709\u5e8f\u5e8f\u5217\u7684\u5408\u9002\u4f4d\u7f6e \u52a8\u56fe \u00b6 \u6f14\u793a \u7b97\u6cd5\u5206\u6790 \u00b6 \u590d\u6742\u5ea6\uff1a O(n^{2}) O(n^{2}) \u4ee3\u7801\u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 void insertion_sort ( int arr [], int len ){ int i , j , key ; for ( i = 1 ; i < len ; i ++ ){ key = arr [ i ]; j = i -1 ; while (( j >= 0 ) && ( arr [ j ] > key )) { arr [ j + 1 ] = arr [ j ]; j -- ; } arr [ j + 1 ] = key ; } } \u5feb\u901f\u6392\u5e8f \u00b6 \u7b97\u6cd5\u601d\u60f3 \u00b6 \u4ece\u6570\u5217\u4e2d\u6311\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u79f0\u4e3a \"\u57fa\u51c6\"\uff08pivot\uff09; \u91cd\u65b0\u6392\u5e8f\u6570\u5217\uff0c\u6240\u6709\u5143\u7d20\u6bd4\u57fa\u51c6\u503c\u5c0f\u7684\u6446\u653e\u5728\u57fa\u51c6\u524d\u9762\uff0c\u6240\u6709\u5143\u7d20\u6bd4\u57fa\u51c6\u503c\u5927\u7684\u6446\u5728\u57fa\u51c6\u7684\u540e\u9762\uff08\u76f8\u540c\u7684\u6570\u53ef\u4ee5\u5230\u4efb\u4e00\u8fb9\uff09\u3002\u5728\u8fd9\u4e2a\u5206\u533a\u9000\u51fa\u4e4b\u540e\uff0c\u8be5\u57fa\u51c6\u5c31\u5904\u4e8e\u6570\u5217\u7684\u4e2d\u95f4\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u79f0\u4e3a\u5206\u533a\uff08partition\uff09\u64cd\u4f5c\uff1b \u9012\u5f52\u5730\uff08recursive\uff09\u628a\u5c0f\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u6570\u5217\u548c\u5927\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u6570\u5217\u6392\u5e8f\uff1b \u52a8\u56fe \u00b6 \u6f14\u793a \u7b97\u6cd5\u5206\u6790 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(nlogn) O(nlogn) \u4ee3\u7801\u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 int a [ maxn ]; int b [ maxn ]; void quick_sort ( int l , int r ) { if ( r - l <= 0 ) return ; int now = a [ l ]; int p = l , q = r ; for ( int i = l + 1 ; i <= r ; i ++ ){ if ( a [ i ] <= now ) b [ p ++ ] = a [ i ]; else b [ q -- ] = a [ i ]; } b [ p ] = now ; for ( int i = l ; i <= r ; i ++ ){ a [ i ] = b [ i ]; } quick_sort ( l , p - 1 ); quick_sort ( p + 1 , r ); } \u5f52\u5e76\u6392\u5e8f \u00b6 \u7b97\u6cd5\u601d\u60f3 \u00b6 \u5c06\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u6709\u5e8f\u8868\u5408\u5e76\u6210\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u8868\u3002 \u52a8\u56fe \u00b6 \u6f14\u793a \u7b97\u6cd5\u5206\u6790 \u00b6 \u9012\u5f52\u6df1\u5ea6 \uff1a log(n) log(n) \u6bcf\u5c42 \uff1a n n \u590d\u6742\u5ea6 \uff1a O(nlogn) O(nlogn) \u4ee3\u7801\u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int a [ maxn ]; int b [ maxn ]; void merge_sort ( int l , int r ) { if ( r - l <= 0 ) return ; int mid = ( l + r ) >> 1 ; int p = l , q = mid + 1 ; int pos = l ; merge_sort ( l , mid ); merge_sort ( mid + 1 , r ); while ( p <= mid || q <= r ) { if ( q > r || ( p <= mid && a [ p ] < a [ q ])){ b [ pos ++ ] = a [ p ++ ]; } else { b [ pos ++ ] = a [ q ++ ]; } } for ( int i = l ; i <= r ; i ++ ){ a [ i ] = b [ i ]; } } * \u5f15\u5165\u9006\u5e8f\u5bf9 sort\u51fd\u6570 \u00b6 \u53c2\u6570\u548c\u7528\u6cd5\uff1a sort\u51fd\u6570\u6709\u4e09\u4e2a\u53c2\u6570 1 sort ( first , last , cmp ); \u5176\u4e2d\uff0cfirst\u662f\u5143\u7d20\u7684\u8d77\u59cb\u5730\u5740\uff0clast\u662f\u7ed3\u675f\u5730\u5740\uff0ccmp\u662f\u6392\u5e8f\u7684\u65b9\u5f0f\u3002\u5bf9[first\uff0clast)\uff08\u4e00\u5b9a\u8981\u6ce8\u610f\u8fd9\u91cc\u7684\u533a\u95f4\u662f\u5de6\u95ed\u53c8\u5f00\uff09\u533a\u95f4\u5185\u6570\u636e\u6839\u636ecmp\u7684\u65b9\u5f0f\u8fdb\u884c\u6392\u5e8f\u3002\u4e5f\u53ef\u4ee5\u4e0d\u5199\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u6b64\u65f6\u6309\u9ed8\u8ba4\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\u3002 \u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 1 2 3 4 5 6 bool cmp ( int a , int b ) { return b < a ; } sort ( a , a + n , cmp ); //\u964d\u5e8f \u91cd\u8f7d\u8fd0\u7b97\u7b26 1 2 3 4 5 6 7 bool operator < ( const Student & s1 , const Student & s2 ) { if ( s1 . age == s2 . age ) return s1 . name < s2 . name ; //\u5e74\u9f84\u76f8\u540c\u65f6\uff0c\u6309\u59d3\u540d\u5c0f\u5230\u5927\u6392 else return s1 . age > s2 . age ; //\u4ece\u5e74\u9f84\u5927\u5230\u5c0f\u6392\u5e8f } sort ( a , a + n ); //\u7528\u4e8e\u7ed3\u6784\u4f53\u6392\u5e8f \u58f0\u660e\u6bd4\u8f83\u7c7b 1 2 3 4 5 6 7 8 9 10 11 struct cmp { bool operator () ( const Student & s1 , const Student & s2 ) { if ( s1 . age == s2 . age ) return s1 . name < s2 . name ; else eturn s1 . age < s2 . age ; } }; sort ( a , a + n , cmp ());","title":"\u6392\u5e8f"},{"location":"basic-algorithm/sort/#_1","text":"","title":"\u5192\u6ce1\u6392\u5e8f"},{"location":"basic-algorithm/sort/#_2","text":"\u5192\u6ce1\u6392\u5e8f\uff08Bubble Sort\uff09\u4e5f\u662f\u4e00\u79cd\u7b80\u5355\u76f4\u89c2\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u5b83\u91cd\u590d\u5730\u8d70\u8bbf\u8fc7\u8981\u6392\u5e8f\u7684\u6570\u5217\uff0c\u4e00\u6b21\u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u4ed6\u4eec\u7684\u987a\u5e8f\u9519\u8bef\u5c31\u628a\u4ed6\u4eec\u4ea4\u6362\u8fc7\u6765\u3002\u8d70\u8bbf\u6570\u5217\u7684\u5de5\u4f5c\u662f\u91cd\u590d\u5730\u8fdb\u884c\u76f4\u5230\u6ca1\u6709\u518d\u9700\u8981\u4ea4\u6362\uff0c\u4e5f\u5c31\u662f\u8bf4\u8be5\u6570\u5217\u5df2\u7ecf\u6392\u5e8f\u5b8c\u6210\u3002\u8fd9\u4e2a\u7b97\u6cd5\u7684\u540d\u5b57\u7531\u6765\u662f\u56e0\u4e3a\u8d8a\u5c0f\u7684\u5143\u7d20\u4f1a\u7ecf\u7531\u4ea4\u6362\u6162\u6162\"\u6d6e\"\u5230\u6570\u5217\u7684\u9876\u7aef\u3002","title":"\u57fa\u672c\u601d\u60f3"},{"location":"basic-algorithm/sort/#_3","text":"\u6f14\u793a","title":"\u52a8\u56fe"},{"location":"basic-algorithm/sort/#_4","text":"\u6700\u597d\u60c5\u51b5\uff1a\u5df2\u7ecf\u6709\u5e8f \u6700\u574f\u60c5\u51b5\uff1a\u5f85\u6392\u5e8f\u8bb0\u5f55\u6309\u5173\u952e\u5b57\u7684\u9006\u5e8f\u8fdb\u884c\u6392\u5217\uff0c\u6b64\u65f6\uff0c\u6bcf\u4e00\u8d9f\u5192\u6ce1\u6392\u5e8f\u9700\u8fdb\u884c i i \u6b21\u6bd4\u8f83\uff0c 3i 3i \u6b21\u79fb\u52a8\u3002\u7ecf\u8fc7 n\u22121 n\u22121 \u8d9f\u5192\u6ce1\u6392\u5e8f\u540e\uff0c\u603b\u7684\u6bd4\u8f83\u6b21\u6570\u4e3a \\sum _{i=1}^{n} i=\\frac {n(n\u22121)}{2} \\sum _{i=1}^{n} i=\\frac {n(n\u22121)}{2} \u6b21, \u603b\u7684\u79fb\u52a8\u6b21\u6570\u4e3a \\frac{3n(n\u22121)}{2} \\frac{3n(n\u22121)}{2} \u6b21\uff0c\u56e0\u6b64\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n^{2}) O(n^{2})","title":"\u7b97\u6cd5\u5206\u6790"},{"location":"basic-algorithm/sort/#_5","text":"","title":"\u9009\u62e9\u6392\u5e8f"},{"location":"basic-algorithm/sort/#_6","text":"\u9996\u5148\u5728\u672a\u6392\u5e8f\u5e8f\u5217\u4e2d\u627e\u5230\u6700\u5c0f\uff08\u5927\uff09\u5143\u7d20\uff0c\u5b58\u653e\u5230\u6392\u5e8f\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u518d\u4ece\u5269\u4f59\u672a\u6392\u5e8f\u5143\u7d20\u4e2d\u7ee7\u7eed\u5bfb\u627e\u6700\u5c0f\uff08\u5927\uff09\u5143\u7d20\uff0c\u7136\u540e\u653e\u5230\u5df2\u6392\u5e8f\u5e8f\u5217\u7684\u672b\u5c3e\u3002 \u91cd\u590d\u7b2c\u4e8c\u6b65\uff0c\u76f4\u5230\u6240\u6709\u5143\u7d20\u5747\u6392\u5e8f\u5b8c\u6bd5\u3002","title":"\u57fa\u672c\u601d\u60f3"},{"location":"basic-algorithm/sort/#_7","text":"\u6f14\u793a","title":"\u52a8\u56fe"},{"location":"basic-algorithm/sort/#_8","text":"\u4efb\u4f55\u5e8f\u5217\uff08\u4e0d\u7ba1\u662f\u5426\u6709\u5e8f\uff09\u90fd\u662f O(n^{2}) O(n^{2})","title":"\u7b97\u6cd5\u5206\u6790"},{"location":"basic-algorithm/sort/#_9","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void selection_sort ( int arr [], int len ) { int i , j ; for ( i = 0 ; i < len - 1 ; i ++ ) { int min = i ; for ( j = i + 1 ; j < len ; j ++ ) //\u8d70\u8bbf\u672a\u6392\u5e8f\u7684\u5143\u7d20 if ( arr [ j ] < arr [ min ]) //\u627e\u5230\u76ee\u524d\u6700\u5c0f\u503c min = j ; //\u8bb0\u5f55\u6700\u5c0f\u503c int temp = arr [ min ]; arr [ min ] = arr [ i ] arr [ i ] = temp ; //\u4ea4\u6362 } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"basic-algorithm/sort/#_10","text":"","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"basic-algorithm/sort/#_11","text":"\u628a\u5143\u7d20\u63d2\u5165\u5230\u6709\u5e8f\u5e8f\u5217\u7684\u5408\u9002\u4f4d\u7f6e","title":"\u57fa\u672c\u601d\u60f3"},{"location":"basic-algorithm/sort/#_12","text":"\u6f14\u793a","title":"\u52a8\u56fe"},{"location":"basic-algorithm/sort/#_13","text":"\u590d\u6742\u5ea6\uff1a O(n^{2}) O(n^{2})","title":"\u7b97\u6cd5\u5206\u6790"},{"location":"basic-algorithm/sort/#_14","text":"1 2 3 4 5 6 7 8 9 10 11 12 void insertion_sort ( int arr [], int len ){ int i , j , key ; for ( i = 1 ; i < len ; i ++ ){ key = arr [ i ]; j = i -1 ; while (( j >= 0 ) && ( arr [ j ] > key )) { arr [ j + 1 ] = arr [ j ]; j -- ; } arr [ j + 1 ] = key ; } }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"basic-algorithm/sort/#_15","text":"","title":"\u5feb\u901f\u6392\u5e8f"},{"location":"basic-algorithm/sort/#_16","text":"\u4ece\u6570\u5217\u4e2d\u6311\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u79f0\u4e3a \"\u57fa\u51c6\"\uff08pivot\uff09; \u91cd\u65b0\u6392\u5e8f\u6570\u5217\uff0c\u6240\u6709\u5143\u7d20\u6bd4\u57fa\u51c6\u503c\u5c0f\u7684\u6446\u653e\u5728\u57fa\u51c6\u524d\u9762\uff0c\u6240\u6709\u5143\u7d20\u6bd4\u57fa\u51c6\u503c\u5927\u7684\u6446\u5728\u57fa\u51c6\u7684\u540e\u9762\uff08\u76f8\u540c\u7684\u6570\u53ef\u4ee5\u5230\u4efb\u4e00\u8fb9\uff09\u3002\u5728\u8fd9\u4e2a\u5206\u533a\u9000\u51fa\u4e4b\u540e\uff0c\u8be5\u57fa\u51c6\u5c31\u5904\u4e8e\u6570\u5217\u7684\u4e2d\u95f4\u4f4d\u7f6e\u3002\u8fd9\u4e2a\u79f0\u4e3a\u5206\u533a\uff08partition\uff09\u64cd\u4f5c\uff1b \u9012\u5f52\u5730\uff08recursive\uff09\u628a\u5c0f\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u6570\u5217\u548c\u5927\u4e8e\u57fa\u51c6\u503c\u5143\u7d20\u7684\u5b50\u6570\u5217\u6392\u5e8f\uff1b","title":"\u7b97\u6cd5\u601d\u60f3"},{"location":"basic-algorithm/sort/#_17","text":"\u6f14\u793a","title":"\u52a8\u56fe"},{"location":"basic-algorithm/sort/#_18","text":"\u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(nlogn) O(nlogn)","title":"\u7b97\u6cd5\u5206\u6790"},{"location":"basic-algorithm/sort/#_19","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 int a [ maxn ]; int b [ maxn ]; void quick_sort ( int l , int r ) { if ( r - l <= 0 ) return ; int now = a [ l ]; int p = l , q = r ; for ( int i = l + 1 ; i <= r ; i ++ ){ if ( a [ i ] <= now ) b [ p ++ ] = a [ i ]; else b [ q -- ] = a [ i ]; } b [ p ] = now ; for ( int i = l ; i <= r ; i ++ ){ a [ i ] = b [ i ]; } quick_sort ( l , p - 1 ); quick_sort ( p + 1 , r ); }","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"basic-algorithm/sort/#_20","text":"","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"basic-algorithm/sort/#_21","text":"\u5c06\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u6709\u5e8f\u8868\u5408\u5e76\u6210\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u8868\u3002","title":"\u7b97\u6cd5\u601d\u60f3"},{"location":"basic-algorithm/sort/#_22","text":"\u6f14\u793a","title":"\u52a8\u56fe"},{"location":"basic-algorithm/sort/#_23","text":"\u9012\u5f52\u6df1\u5ea6 \uff1a log(n) log(n) \u6bcf\u5c42 \uff1a n n \u590d\u6742\u5ea6 \uff1a O(nlogn) O(nlogn)","title":"\u7b97\u6cd5\u5206\u6790"},{"location":"basic-algorithm/sort/#_24","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 int a [ maxn ]; int b [ maxn ]; void merge_sort ( int l , int r ) { if ( r - l <= 0 ) return ; int mid = ( l + r ) >> 1 ; int p = l , q = mid + 1 ; int pos = l ; merge_sort ( l , mid ); merge_sort ( mid + 1 , r ); while ( p <= mid || q <= r ) { if ( q > r || ( p <= mid && a [ p ] < a [ q ])){ b [ pos ++ ] = a [ p ++ ]; } else { b [ pos ++ ] = a [ q ++ ]; } } for ( int i = l ; i <= r ; i ++ ){ a [ i ] = b [ i ]; } } * \u5f15\u5165\u9006\u5e8f\u5bf9","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"basic-algorithm/sort/#sort","text":"\u53c2\u6570\u548c\u7528\u6cd5\uff1a sort\u51fd\u6570\u6709\u4e09\u4e2a\u53c2\u6570 1 sort ( first , last , cmp ); \u5176\u4e2d\uff0cfirst\u662f\u5143\u7d20\u7684\u8d77\u59cb\u5730\u5740\uff0clast\u662f\u7ed3\u675f\u5730\u5740\uff0ccmp\u662f\u6392\u5e8f\u7684\u65b9\u5f0f\u3002\u5bf9[first\uff0clast)\uff08\u4e00\u5b9a\u8981\u6ce8\u610f\u8fd9\u91cc\u7684\u533a\u95f4\u662f\u5de6\u95ed\u53c8\u5f00\uff09\u533a\u95f4\u5185\u6570\u636e\u6839\u636ecmp\u7684\u65b9\u5f0f\u8fdb\u884c\u6392\u5e8f\u3002\u4e5f\u53ef\u4ee5\u4e0d\u5199\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u6b64\u65f6\u6309\u9ed8\u8ba4\u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u8fdb\u884c\u6392\u5e8f\u3002 \u81ea\u5b9a\u4e49\u6392\u5e8f\u89c4\u5219 1 2 3 4 5 6 bool cmp ( int a , int b ) { return b < a ; } sort ( a , a + n , cmp ); //\u964d\u5e8f \u91cd\u8f7d\u8fd0\u7b97\u7b26 1 2 3 4 5 6 7 bool operator < ( const Student & s1 , const Student & s2 ) { if ( s1 . age == s2 . age ) return s1 . name < s2 . name ; //\u5e74\u9f84\u76f8\u540c\u65f6\uff0c\u6309\u59d3\u540d\u5c0f\u5230\u5927\u6392 else return s1 . age > s2 . age ; //\u4ece\u5e74\u9f84\u5927\u5230\u5c0f\u6392\u5e8f } sort ( a , a + n ); //\u7528\u4e8e\u7ed3\u6784\u4f53\u6392\u5e8f \u58f0\u660e\u6bd4\u8f83\u7c7b 1 2 3 4 5 6 7 8 9 10 11 struct cmp { bool operator () ( const Student & s1 , const Student & s2 ) { if ( s1 . age == s2 . age ) return s1 . name < s2 . name ; else eturn s1 . age < s2 . age ; } }; sort ( a , a + n , cmp ());","title":"sort\u51fd\u6570"},{"location":"basic-algorithm/time/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a \u6c34\u4e4b\u5e61\u7c73\u62c9 \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u6211\u4eec\u4e3a\u4ec0\u4e48\u9700\u8981\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u73b0\u4ee3\u8ba1\u7b97\u673a\u6bcf\u79d2\u53ef\u4ee5\u5904\u7406\u6570\u4ebf\u4e43\u81f3\u66f4\u591a\u6b21\u57fa\u672c\u8fd0\u7b97\uff0c\u56e0\u6b64\u6211\u4eec\u5904\u7406\u7684\u6570\u636e\u89c4\u6a21\u901a\u5e38\u5f88\u5927\u3002\u4f46\u5982\u679c\u8ba1\u7b97\u7684\u91cf\u5f88\u5927\uff0c\u90a3\u4e48\u8ba1\u7b97\u91cf\u53ef\u80fd\u4f1a\u662f\u4e2a\u5929\u6587\u6570\u5b57\uff0c\u90a3\u4e48\u5373\u4fbf\u662f\u8d85\u7ea7\u8ba1\u7b97\u673a\uff0c\u4e5f\u9700\u8981\u8017\u8d39\u6781\u5927\u7684\u65f6\u95f4\u53bb\u89e3\u51b3\u3002 \u6bd4\u5982\uff0c\u5047\u8bbe\u6570\u636e\u91cf\u4e3a n n (\u53ef\u4ee5\u7406\u89e3\u4e3a\u6709 n n \u4e2a\u6570\u9700\u8981\u8fdb\u884c\u5904\u7406)\uff0c\u7b97\u6cd5 A A \u7684\u8ba1\u7b97\u91cf\u4e3a 2^n 2^n \uff0c\u800c\u7b97\u6cd5 B B \u7684\u6240\u9700\u8ba1\u7b97\u91cf\u4e3a n^2 n^2 \u3002\u5047\u8bbe\u8d85\u7ea7\u8ba1\u7b97\u673a\u6bcf\u79d2\u53ef\u8fdb\u884c 10^{12} 10^{12} \u6b21\u8ba1\u7b97\u3002\u5982\u679c n\\le 80 n\\le 80 \uff0c\u90a3\u4e48\u8ba1\u7b97\u673a\u90fd\u53ef\u4ee5\u5728\u6781\u77ed\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa\u7ed3\u679c\uff0c\u4f46\u5982\u679c n n \u5f88\u5927\uff0c\u6bd4\u5982 n = 10^5 n = 10^5 \uff0c\u90a3\u4e48\u663e\u7136\uff0c\u8ba1\u7b97\u673a\u65e0\u6cd5\u5728\u77ed\u65f6\u5185\u8ba1\u7b97\u5b8c\u7b97\u6cd5 A A \u3002 \u5982\u4f55\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6 \u00b6 \u9996\u5148\u6211\u4eec\u9700\u8981\u4e86\u89e3\u51e0\u4e2a\u6982\u5ff5 \u57fa\u672c\u64cd\u4f5c\u6570, T(n),O(n) T(n),O(n) \u57fa\u672c\u64cd\u4f5c\u6570 \u00b6 \u5728\u666e\u901a\u7684\u8ba1\u7b97\u673a\u4e0a\uff0c\u52a0\u51cf\u4e58\u9664\u3001\u8bbf\u95ee\u53d8\u91cf\uff08\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf\uff09\u3001\u7ed9\u53d8\u91cf\u8d4b\u503c\u7b49\u90fd\u53ef\u4ee5\u770b\u4f5c\u57fa\u672c\u64cd\u4f5c\u3002 \u6bd4\u5982: 1 2 3 4 5 int x , y ; scanf ( \"%d%d\" , & x \uff0c & y ); int z = x - y ; if ( z == 0 ) printf ( \"233 \\n \" ); \u51fd\u6570 T T \u00b6 \u5f53\u6570\u636e\u89c4\u6a21\u4e3a n n \u65f6, T(n) T(n) \u8868\u793a\u7b97\u6cd5\u6240\u9700\u7684\u8ba1\u7b97\u91cf \u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c \u57fa\u672c\u64cd\u4f5c\u7b97\u4f5c\u4e00\u6b21\u8fd0\u7b97 \u6bd4\u5982\u8fd9\u4e2a\u7a0b\u5e8f\uff1a 1 2 3 4 5 int ans = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { ans += i ; printf ( \"%d \" , ans ); } \u5728\u5355\u6b21\u5faa\u73af\u4e2d\uff0c\u6267\u884c\u4e86\u56db\u6b21\u4e2a\u57fa\u672c\u64cd\u4f5c: 1 2 3 4 ans += i ; printf ( \"%d \" , ans ); ++ i if ( i <= n ) \u4e00\u5171\u5faa\u73af\u4e86 n n \u6b21\uff0c\u90a3\u4e48 T(n) = 4 * n \u51c6\u786e\u7684\u8bf4\uff0c\u8fd8\u6709\u8fd9\u4e09\u4e2a\u5730\u65b9\u6ca1\u6709\u8ba1\u7b97 1 2 3 int i = 1 ; ++ i ; //\u5f53i=100\u65f6 if ( i <= n ) //\u5f53i=101\u65f6 \u6240\u4ee5\uff0c\u6700\u7ec8\u7ed3\u679c\u5e94\u8be5\u662f T(n) = 4 * n + 3 T(n) = 4 * n + 3 \u6e10\u8fdb\u7b26\u53f7 O O \u00b6 \u5b9a\u4e49 :\u5bf9\u4e8e\u4e24\u4e2a\u51fd\u6570, f(n),g(n) f(n),g(n) \u8bbe f(n) = O(g(n)) f(n) = O(g(n)) \uff0c\u5219\u6709: \\exists c \\in R^*, n_0 \\in N^* \\exists c \\in R^*, n_0 \\in N^* \uff0c\u4f7f\u5f97 \\forall n \\ge n_0 \\forall n \\ge n_0 ,\u6709 0 \\le f(n) \\le c * g(n) 0 \\le f(n) \\le c * g(n) \u3002 \u4eba\u8bdd\u7248\u672c \u5f53 n n \u5f88\u5927\u7684\u65f6\u5019\uff0c f(n) f(n) \u59cb\u7ec8\u5c0f\u4e8e\u7b49\u4e8e g(n) g(n) \u4e58\u4e0a\u4e00\u4e2a\u5e38\u6570 c c \u3002 \u5982\u4f55\u8ba1\u7b97 O O \u00b6 \u5bf9\u4e8e T(n) = 4 * n + 3 T(n) = 4 * n + 3 ,\u90a3\u4e48 O(T(n)) = n O(T(n)) = n \u4e3a\u4ec0\u4e48\u5462\uff1f \u56e0\u4e3a n \\ge 1\u65f6 n \\ge 1\u65f6 \uff0c 4 * n + 3 <= 5 * n 4 * n + 3 <= 5 * n \u6b64\u65f6\uff0c c = 5, n_0 = 1 c = 5, n_0 = 1 \u90a3\u4e48\u5bf9\u4e8e T(n) = 3*n^2 + 100 * n + 114514 T(n) = 3*n^2 + 100 * n + 114514 \uff0c O(T(n)) O(T(n)) \u662f\u591a\u5c11\u5462\uff1f \u5b9e\u9645\u4e0a\u5bf9\u4e8e T(n) = 3*n^2 + 100 * n + 114514 T(n) = 3*n^2 + 100 * n + 114514 O(T(n)) = n^2 O(T(n)) = n^2 \u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u5f53 n n \u8db3\u591f\u5927\u7684\u65f6\u5019\uff0c n^2 n^2 \u7684\u589e\u957f\u901f\u5ea6\u4f1a\u8fdc\u8d85 100 * n 100 * n \uff0c\u5176\u5927\u5c0f\u4e5f\u4f1a\u8fdc\u8d85 114514 114514 ,\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230 n^2 n^2 \u7684\u4e0a\u9650\u5373\u53ef\uff0c\u6b64\u65f6\u90a3\u4e48\u663e\u7136 4 * n ^ 2 4 * n ^ 2 \u53ef\u4ee5\u6ee1\u8db3\u3002(\u5f53\u7136 3.01 * n ^ 2 3.01 * n ^ 2 \u4e5f\u53ef\u4ee5\uff0c\u53ea\u8981 n n \u8db3\u591f\u5927) \u7efc\u4e0a\uff0c\u53ea\u8981\u6211\u4eec\u77e5\u9053 T(n) T(n) \u7684\u8868\u8fbe\u5f0f\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u627e\u5230\u5b83\u5728\u6570\u636e\u8303\u56f4\u4e3a n n \u65f6,\u589e\u957f\u6700\u5feb\u7684\u4e00\u9879\u5373\u53ef\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u4e5f\u4e0d\u9700\u8981\u5b8c\u6574\u7684\u6c42\u51fa T(n) T(n) \uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u6ce8\u5b83\u589e\u957f\u901f\u5ea6\u6700\u5927\u7684\u90a3\u4e00\u9879\u3002 \u6240\u8c13\u7684 O() O() \u5c31\u662f\u6211\u4eec\u5e73\u65f6\u6240\u8bf4 \u65f6\u95f4\u590d\u6742\u5ea6 \u3002 \u6bd4\u5982\u5f53 n <= 10^5 n <= 10^5 \u65f6\uff0c \u5bf9\u4e8e T(n) = 100 * n^2 + 114514 * n + n! + log_2(n) T(n) = 100 * n^2 + 114514 * n + n! + log_2(n) \u90a3\u4e48\u663e\u7136\u6709: O(T(n)) = n! O(T(n)) = n! \u8bb0\u4e3a O(n!) O(n!) \u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\u65f6\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282 \u00b6 \u90a3\u4e48\u5b83\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u90fd\u662f O(n) O(n) \uff0c \u4f46\u662f\u8fd9\u4e24\u4e2a\u7b97\u6cd5\u5728\u8fd0\u884c\u65f6\uff0c\u6240\u6d88\u8017\u65f6\u95f4\u80af\u5b9a\u6709\u5f88\u5927\u533a\u522b\uff0c\u56e0\u4e3a\u5728 T(n) T(n) \u7684\u8868\u8fbe\u5f0f\u4e2d\uff0c\u7b97\u6cd5 A A \u4e2d n n \u7684\u524d\u9762\u4e58\u4e0a\u4e86\u4e00\u4e2a\u5f88\u5927\u7684\u5e38\u6570,\u5b83\u7684\u5927\u5c0f\u751a\u81f3\u5927\u4e8e\u4e86 n n \u7684\u8303\u56f4\uff0c\u6240\u4ee5\u6b64\u65f6\uff0c\u867d\u7136\u5b83\u662f\u4e2a\u5e38\u6570\uff0c\u4f46\u5b83\u5bf9\u8ba1\u7b97\u91cf\u7684\u5927\u5c0f\u5f71\u54cd\u662f\u5341\u5206\u663e\u8457\u7684\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5b83\u7684\u5f71\u54cd\u3002 O\u7684\u5b9a\u4e49\u662f O\u7684\u5b9a\u4e49\u662f : \\exists c \\in R^*, n_0 \\in N^* \\exists c \\in R^*, n_0 \\in N^* \uff0c\u4f7f\u5f97 \\forall n \\ge n_0 \\forall n \\ge n_0 ,\u6709 0 \\le f(n) \\le c * g(n) 0 \\le f(n) \\le c * g(n) \u3002 \u8fd9\u4e2a c c \u5176\u5b9e\u5c31\u662f\u6211\u4eec\u521a\u624d\u8bf4\u7684\u5e38\u6570\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u57fa\u672c\u64cd\u4f5c\u5bf9\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5f71\u54cd\u6211\u4eec\u662f\u53ef\u4ee5\u4e0d\u8003\u8651\u7684\uff0c\u9664\u975e\u6211\u4eec\u5728\u4e00\u4e2a\u5faa\u73af\uff0c\u6216\u8005\u9012\u5f52\u4e2d\uff0c\u52a0\u5165\u4e86\u5f88\u591a\u6b21\u7684\u8fd0\u7b97\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u53ea\u8981 c \\le 50 c \\le 50 \uff0c\u90a3\u4e48\u901a\u5e38\u6765\u8bf4,\u95ee\u9898\u4e0d\u5927(\u66f4\u4e25\u8c28\u7684\u6765\u8bf4\uff0c\u8981\u6839\u636e n n \u7684\u8303\u56f4)\u3002 \u901a\u8fc7\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u5224\u65ad\u51fa\u6211\u4eec\u7a0b\u5e8f\u662f\u5426\u53ef\u4ee5\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u8fd0\u884c\u5b8c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6bd4\u8d5b\u7684\u8bc4\u6d4b\u59ec\u4e00\u79d2\u80fd\u6267\u884c 5 * 10 ^ 8 5 * 10 ^ 8 \u6b21\u5de6\u53f3\u7684\u8fd0\u7b97\uff0c\u7cbe\u786e\u6570\u503c\u901a\u5e38\u65e0\u4ece\u6240\u77e5\u3002 \u6240\u4ee5,\u5bf9\u4e8e n \\le 2 * 10 ^ 4 n \\le 2 * 10 ^ 4 \u7684\u6570\u636e\u91cf\uff0c O(n^2) O(n^2) \u5c31\u662f\u6781\u9650\u4e86\uff0c\u6b64\u65f6\u5e38\u6570\u8fc7\u5927\u5c31\u6709\u53ef\u80fd TLE TLE \u3002 \u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6 - \u5faa\u73af \u00b6 1 2 3 4 for ( int i = 1 ; i <= n ; ++ i ) printf ( \"ldstql! \\n \" ); for ( int j = 1 ; j <= m ; ++ j ) printf ( \"zhrtql! \\n \" ); \u5206\u6790\uff1a \u4e24\u4e2a\u5faa\u73af\u5206\u522b\u6267\u884c\u4e86 n n \u6b21\u548c m m \u6b21\uff0c \u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n + m) O(n + m) 1 2 3 for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= m ; ++ j ) printf ( \"ldstql! \\n \" ); \u5206\u6790\uff1a \u5916\u5c42\u5faa\u73af\u6267\u884c\u4e86 n n \u6b21\uff0c\u6bcf\u4e2a\u5916\u5c42\u5faa\u73af\u4e2d\uff0c\u6709\u4e00\u4e2a m m \u6b21\u5faa\u73af\uff0c \u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n*m) O(n*m) 1 2 3 for ( int i = 1 ; i <= n ; ++ i ) for ( int j = i + 1 ; j <= n ; ++ j ) printf ( \"ldstql! \\n \" ); \u5206\u6790: \u8ba1\u7b97\u6b21\u6570 sum = \\sum_{i = 1}^{n - 1} = 1 + 2 + 3 + ... + n - 1 = \\frac{n * (n - 1)}{2} = \\frac{1}{2}(n ^ 2 - n) sum = \\sum_{i = 1}^{n - 1} = 1 + 2 + 3 + ... + n - 1 = \\frac{n * (n - 1)}{2} = \\frac{1}{2}(n ^ 2 - n) \u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u662f O(n^2) O(n^2) 1 2 3 4 for ( int i = 1 , j = 1 ; i <= n ; ++ i ) { for (; j <= i ; ++ j ) printf ( \"ldstql! \\n \" ); } \u5206\u6790: \u867d\u7136\u4ecd\u7136\u662f\u4e24\u5c42\u5faa\u73af\uff0c\u4f46\u662f\u5728\u6bcf\u4e00\u6b21\u5916\u5c42\u5faa\u73af\u4e2d\uff0c j j \u5e76\u6ca1\u6709\u904d\u5386\u5230 n n ,\u5373, i,j i,j \u53ea\u4f1a\u589e\u52a0\uff0c\u4e0d\u4f1a\u51cf\u5c11 \u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u65b9\u4fbf\u7b97\u6cd5\u662f \u8ba1\u7b97\u4ed6\u4eec\u7684\u8d77\u70b9\u548c\u7ec8\u70b9 ,\u90a3\u4e48 sum = n + n sum = n + n ,\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n) \u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6 - \u4f4d\u8fd0\u7b97 \u00b6 1 2 3 4 while ( n ) { printf ( \"ldstql! \\n \" ); n >>= 1 ; } \u5206\u6790: \u672c\u8d28\u4e0a\u662f n n \u4e8c\u8fdb\u5236\u4e0b\u6709\u591a\u5c11\u4f4d\uff0c\u90a3\u4e48 for for \u5faa\u73af\u5c31\u4f1a\u6267\u884c\u51e0\u6b21\uff0c\u6bd4\u5982 9_{(10)} = 1001_{(2)} 9_{(10)} = 1001_{(2)} \u5417,\u90a3\u4e48\u663e\u7136\u5b83\u4f1a\u6267\u884c 4 4 \u6b21\u3002 \u90a3\u4e48\u6211\u4eec\u600e\u4e48\u624d\u80fd\u5f97\u51fa\u5b83\u4e8c\u8fdb\u5236\u4e0b\u6709\u591a\u5c11\u4f4d\u5462\uff1f\u5176\u5b9e\u5f88\u7b80\u5355 sum = log_{2}(n) sum = log_{2}(n) \u90a3\u4e48\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(log_2(n)) O(log_2(n)) \u3002 \u7531\u4e8e\u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5982\u679c\u6709\u5bf9\u6570\u7684,\u90a3\u4e48\u57fa\u672c\u90fd\u662f\u4ee5 2 2 \u4e3a\u5e95\u6570\u7684\uff0c\u6240\u4ee5\u9ed8\u8ba4\u60c5\u51b5\u4e0b log(n) log(n) \uff0c\u5c31\u662f\u4ee5 2 2 \u4e3a\u5e95\u6570\u7684\u3002 \u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6 - \u9012\u5f52 \u00b6 1 2 3 4 5 6 7 8 9 10 void dfs ( int x ) { if ( x == n ) return ; dfs ( x + 1 ); for ( int i = 1 ; i <= x ; ++ i ) printf ( \"ldstql \" ); printf ( \" \\n \" ); } dfs ( 1 ); \u5206\u6790: \u9012\u5f52\u6df1\u5ea6\u662f n n ,\u5728\u6bcf\u5c42\u9012\u5f52\u7a0b\u5e8f\u4e2d,\u6709\u4e2a\u6267\u884c x x \u6b21\u7684\u5faa\u73af\uff0c\u90a3\u4e48\u5b9e\u9645\u4e0a\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u4e4b\u524d\u7684\u4e8c\u5c42\u5faa\u73af\u662f\u4e00\u6837\u7684\uff0c\u5373 O(n^2) O(n^2) 1 2 3 4 5 6 7 8 9 10 11 12 void dfs ( int l , int r ) { if ( l == r ) { printf ( \"ldstql! \\n \" ); return ; } int mid = ( l + r ) >> 1 ; dfs ( l , mid ); dfs ( mid + 1 , r ); } dfs ( 1 , n ); \u6211\u4eec\u7528 [l, r1] [l, r1] \u6765\u8868\u793a\u6bcf\u6b21\u9012\u5f52\u7684\u8303\u56f4,\u5e76\u5047\u8bbe n = 8 n = 8 \u7b2c 0 0 \u6b21\u9012\u5f52: [1, 8] [1, 8] \u7b2c 1 1 \u6b21\u9012\u5f52: [1, 4] [1, 4] , \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 [5, 8] [5, 8] \u7b2c 2 2 \u6b21\u9012\u5f52: [1, 2] [1, 2] ,\u2003\u2003\u2003 [3, 4] [3, 4] , \u2003\u2003\u2003 [5, 6] [5, 6] \u2003\u2003\u2003, [7, 8] [7, 8] \u7b2c 3 3 \u6b21\u9012\u5f52: [1, 1], [2, 2], [3,3], [4,4],[5,5],[6,6],[7,7],[8,8] [1, 1], [2, 2], [3,3], [4,4],[5,5],[6,6],[7,7],[8,8] \u663e\u7136\uff0c\u5b83\u7684\u9012\u5f52\u8fb9\u754c\u8303\u56f4( r - l + 1 r - l + 1 )\u5728\u6bcf\u6b21\u9012\u5f52\u4e2d\u90fd\u4f1a\u4e00\u5206\u4e3a\u4e8c\uff0c\u6240\u4ee5\u9012\u5f52\u6df1\u5ea6\u4e3a \\lceil log_2(n) \\rceil \\lceil log_2(n) \\rceil \u3002\u5728\u7b2c i i \u5c42\u9012\u5f52\u4e2d,\u5171\u6709 2^i 2^i \u4e2a\u5206\u652f\u3002\u90a3\u4e48\u603b\u6b21\u6570 sum = \\sum_{i = 0}^{\\lceil log_2(n) \\rceil} 2^i = 2^{\\lceil log_2(n) \\rceil + 1} - 1 = 2 * n - 1 sum = \\sum_{i = 0}^{\\lceil log_2(n) \\rceil} 2^i = 2^{\\lceil log_2(n) \\rceil + 1} - 1 = 2 * n - 1 \u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n)","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"basic-algorithm/time/#_1","text":"","title":"\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"basic-algorithm/time/#_2","text":"\u73b0\u4ee3\u8ba1\u7b97\u673a\u6bcf\u79d2\u53ef\u4ee5\u5904\u7406\u6570\u4ebf\u4e43\u81f3\u66f4\u591a\u6b21\u57fa\u672c\u8fd0\u7b97\uff0c\u56e0\u6b64\u6211\u4eec\u5904\u7406\u7684\u6570\u636e\u89c4\u6a21\u901a\u5e38\u5f88\u5927\u3002\u4f46\u5982\u679c\u8ba1\u7b97\u7684\u91cf\u5f88\u5927\uff0c\u90a3\u4e48\u8ba1\u7b97\u91cf\u53ef\u80fd\u4f1a\u662f\u4e2a\u5929\u6587\u6570\u5b57\uff0c\u90a3\u4e48\u5373\u4fbf\u662f\u8d85\u7ea7\u8ba1\u7b97\u673a\uff0c\u4e5f\u9700\u8981\u8017\u8d39\u6781\u5927\u7684\u65f6\u95f4\u53bb\u89e3\u51b3\u3002 \u6bd4\u5982\uff0c\u5047\u8bbe\u6570\u636e\u91cf\u4e3a n n (\u53ef\u4ee5\u7406\u89e3\u4e3a\u6709 n n \u4e2a\u6570\u9700\u8981\u8fdb\u884c\u5904\u7406)\uff0c\u7b97\u6cd5 A A \u7684\u8ba1\u7b97\u91cf\u4e3a 2^n 2^n \uff0c\u800c\u7b97\u6cd5 B B \u7684\u6240\u9700\u8ba1\u7b97\u91cf\u4e3a n^2 n^2 \u3002\u5047\u8bbe\u8d85\u7ea7\u8ba1\u7b97\u673a\u6bcf\u79d2\u53ef\u8fdb\u884c 10^{12} 10^{12} \u6b21\u8ba1\u7b97\u3002\u5982\u679c n\\le 80 n\\le 80 \uff0c\u90a3\u4e48\u8ba1\u7b97\u673a\u90fd\u53ef\u4ee5\u5728\u6781\u77ed\u65f6\u95f4\u5185\u8ba1\u7b97\u51fa\u7ed3\u679c\uff0c\u4f46\u5982\u679c n n \u5f88\u5927\uff0c\u6bd4\u5982 n = 10^5 n = 10^5 \uff0c\u90a3\u4e48\u663e\u7136\uff0c\u8ba1\u7b97\u673a\u65e0\u6cd5\u5728\u77ed\u65f6\u5185\u8ba1\u7b97\u5b8c\u7b97\u6cd5 A A \u3002","title":"\u6211\u4eec\u4e3a\u4ec0\u4e48\u9700\u8981\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"basic-algorithm/time/#_3","text":"\u9996\u5148\u6211\u4eec\u9700\u8981\u4e86\u89e3\u51e0\u4e2a\u6982\u5ff5 \u57fa\u672c\u64cd\u4f5c\u6570, T(n),O(n) T(n),O(n)","title":"\u5982\u4f55\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6"},{"location":"basic-algorithm/time/#_4","text":"\u5728\u666e\u901a\u7684\u8ba1\u7b97\u673a\u4e0a\uff0c\u52a0\u51cf\u4e58\u9664\u3001\u8bbf\u95ee\u53d8\u91cf\uff08\u57fa\u672c\u6570\u636e\u7c7b\u578b\u7684\u53d8\u91cf\uff09\u3001\u7ed9\u53d8\u91cf\u8d4b\u503c\u7b49\u90fd\u53ef\u4ee5\u770b\u4f5c\u57fa\u672c\u64cd\u4f5c\u3002 \u6bd4\u5982: 1 2 3 4 5 int x , y ; scanf ( \"%d%d\" , & x \uff0c & y ); int z = x - y ; if ( z == 0 ) printf ( \"233 \\n \" );","title":"\u57fa\u672c\u64cd\u4f5c\u6570"},{"location":"basic-algorithm/time/#tt","text":"\u5f53\u6570\u636e\u89c4\u6a21\u4e3a n n \u65f6, T(n) T(n) \u8868\u793a\u7b97\u6cd5\u6240\u9700\u7684\u8ba1\u7b97\u91cf \u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c \u57fa\u672c\u64cd\u4f5c\u7b97\u4f5c\u4e00\u6b21\u8fd0\u7b97 \u6bd4\u5982\u8fd9\u4e2a\u7a0b\u5e8f\uff1a 1 2 3 4 5 int ans = 0 ; for ( int i = 1 ; i <= n ; ++ i ) { ans += i ; printf ( \"%d \" , ans ); } \u5728\u5355\u6b21\u5faa\u73af\u4e2d\uff0c\u6267\u884c\u4e86\u56db\u6b21\u4e2a\u57fa\u672c\u64cd\u4f5c: 1 2 3 4 ans += i ; printf ( \"%d \" , ans ); ++ i if ( i <= n ) \u4e00\u5171\u5faa\u73af\u4e86 n n \u6b21\uff0c\u90a3\u4e48 T(n) = 4 * n \u51c6\u786e\u7684\u8bf4\uff0c\u8fd8\u6709\u8fd9\u4e09\u4e2a\u5730\u65b9\u6ca1\u6709\u8ba1\u7b97 1 2 3 int i = 1 ; ++ i ; //\u5f53i=100\u65f6 if ( i <= n ) //\u5f53i=101\u65f6 \u6240\u4ee5\uff0c\u6700\u7ec8\u7ed3\u679c\u5e94\u8be5\u662f T(n) = 4 * n + 3 T(n) = 4 * n + 3","title":"\u51fd\u6570TT"},{"location":"basic-algorithm/time/#oo","text":"\u5b9a\u4e49 :\u5bf9\u4e8e\u4e24\u4e2a\u51fd\u6570, f(n),g(n) f(n),g(n) \u8bbe f(n) = O(g(n)) f(n) = O(g(n)) \uff0c\u5219\u6709: \\exists c \\in R^*, n_0 \\in N^* \\exists c \\in R^*, n_0 \\in N^* \uff0c\u4f7f\u5f97 \\forall n \\ge n_0 \\forall n \\ge n_0 ,\u6709 0 \\le f(n) \\le c * g(n) 0 \\le f(n) \\le c * g(n) \u3002 \u4eba\u8bdd\u7248\u672c \u5f53 n n \u5f88\u5927\u7684\u65f6\u5019\uff0c f(n) f(n) \u59cb\u7ec8\u5c0f\u4e8e\u7b49\u4e8e g(n) g(n) \u4e58\u4e0a\u4e00\u4e2a\u5e38\u6570 c c \u3002","title":"\u6e10\u8fdb\u7b26\u53f7 OO"},{"location":"basic-algorithm/time/#oo_1","text":"\u5bf9\u4e8e T(n) = 4 * n + 3 T(n) = 4 * n + 3 ,\u90a3\u4e48 O(T(n)) = n O(T(n)) = n \u4e3a\u4ec0\u4e48\u5462\uff1f \u56e0\u4e3a n \\ge 1\u65f6 n \\ge 1\u65f6 \uff0c 4 * n + 3 <= 5 * n 4 * n + 3 <= 5 * n \u6b64\u65f6\uff0c c = 5, n_0 = 1 c = 5, n_0 = 1 \u90a3\u4e48\u5bf9\u4e8e T(n) = 3*n^2 + 100 * n + 114514 T(n) = 3*n^2 + 100 * n + 114514 \uff0c O(T(n)) O(T(n)) \u662f\u591a\u5c11\u5462\uff1f \u5b9e\u9645\u4e0a\u5bf9\u4e8e T(n) = 3*n^2 + 100 * n + 114514 T(n) = 3*n^2 + 100 * n + 114514 O(T(n)) = n^2 O(T(n)) = n^2 \u4e3a\u4ec0\u4e48\u5462\uff1f\u56e0\u4e3a\u5f53 n n \u8db3\u591f\u5927\u7684\u65f6\u5019\uff0c n^2 n^2 \u7684\u589e\u957f\u901f\u5ea6\u4f1a\u8fdc\u8d85 100 * n 100 * n \uff0c\u5176\u5927\u5c0f\u4e5f\u4f1a\u8fdc\u8d85 114514 114514 ,\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230 n^2 n^2 \u7684\u4e0a\u9650\u5373\u53ef\uff0c\u6b64\u65f6\u90a3\u4e48\u663e\u7136 4 * n ^ 2 4 * n ^ 2 \u53ef\u4ee5\u6ee1\u8db3\u3002(\u5f53\u7136 3.01 * n ^ 2 3.01 * n ^ 2 \u4e5f\u53ef\u4ee5\uff0c\u53ea\u8981 n n \u8db3\u591f\u5927) \u7efc\u4e0a\uff0c\u53ea\u8981\u6211\u4eec\u77e5\u9053 T(n) T(n) \u7684\u8868\u8fbe\u5f0f\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u627e\u5230\u5b83\u5728\u6570\u636e\u8303\u56f4\u4e3a n n \u65f6,\u589e\u957f\u6700\u5feb\u7684\u4e00\u9879\u5373\u53ef\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u4e5f\u4e0d\u9700\u8981\u5b8c\u6574\u7684\u6c42\u51fa T(n) T(n) \uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u6ce8\u5b83\u589e\u957f\u901f\u5ea6\u6700\u5927\u7684\u90a3\u4e00\u9879\u3002 \u6240\u8c13\u7684 O() O() \u5c31\u662f\u6211\u4eec\u5e73\u65f6\u6240\u8bf4 \u65f6\u95f4\u590d\u6742\u5ea6 \u3002 \u6bd4\u5982\u5f53 n <= 10^5 n <= 10^5 \u65f6\uff0c \u5bf9\u4e8e T(n) = 100 * n^2 + 114514 * n + n! + log_2(n) T(n) = 100 * n^2 + 114514 * n + n! + log_2(n) \u90a3\u4e48\u663e\u7136\u6709: O(T(n)) = n! O(T(n)) = n! \u8bb0\u4e3a O(n!) O(n!)","title":"\u5982\u4f55\u8ba1\u7b97 OO"},{"location":"basic-algorithm/time/#_5","text":"\u90a3\u4e48\u5b83\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u663e\u7136\u90fd\u662f O(n) O(n) \uff0c \u4f46\u662f\u8fd9\u4e24\u4e2a\u7b97\u6cd5\u5728\u8fd0\u884c\u65f6\uff0c\u6240\u6d88\u8017\u65f6\u95f4\u80af\u5b9a\u6709\u5f88\u5927\u533a\u522b\uff0c\u56e0\u4e3a\u5728 T(n) T(n) \u7684\u8868\u8fbe\u5f0f\u4e2d\uff0c\u7b97\u6cd5 A A \u4e2d n n \u7684\u524d\u9762\u4e58\u4e0a\u4e86\u4e00\u4e2a\u5f88\u5927\u7684\u5e38\u6570,\u5b83\u7684\u5927\u5c0f\u751a\u81f3\u5927\u4e8e\u4e86 n n \u7684\u8303\u56f4\uff0c\u6240\u4ee5\u6b64\u65f6\uff0c\u867d\u7136\u5b83\u662f\u4e2a\u5e38\u6570\uff0c\u4f46\u5b83\u5bf9\u8ba1\u7b97\u91cf\u7684\u5927\u5c0f\u5f71\u54cd\u662f\u5341\u5206\u663e\u8457\u7684\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5b83\u7684\u5f71\u54cd\u3002 O\u7684\u5b9a\u4e49\u662f O\u7684\u5b9a\u4e49\u662f : \\exists c \\in R^*, n_0 \\in N^* \\exists c \\in R^*, n_0 \\in N^* \uff0c\u4f7f\u5f97 \\forall n \\ge n_0 \\forall n \\ge n_0 ,\u6709 0 \\le f(n) \\le c * g(n) 0 \\le f(n) \\le c * g(n) \u3002 \u8fd9\u4e2a c c \u5176\u5b9e\u5c31\u662f\u6211\u4eec\u521a\u624d\u8bf4\u7684\u5e38\u6570\u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u57fa\u672c\u64cd\u4f5c\u5bf9\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5f71\u54cd\u6211\u4eec\u662f\u53ef\u4ee5\u4e0d\u8003\u8651\u7684\uff0c\u9664\u975e\u6211\u4eec\u5728\u4e00\u4e2a\u5faa\u73af\uff0c\u6216\u8005\u9012\u5f52\u4e2d\uff0c\u52a0\u5165\u4e86\u5f88\u591a\u6b21\u7684\u8fd0\u7b97\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u53ea\u8981 c \\le 50 c \\le 50 \uff0c\u90a3\u4e48\u901a\u5e38\u6765\u8bf4,\u95ee\u9898\u4e0d\u5927(\u66f4\u4e25\u8c28\u7684\u6765\u8bf4\uff0c\u8981\u6839\u636e n n \u7684\u8303\u56f4)\u3002 \u901a\u8fc7\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u5224\u65ad\u51fa\u6211\u4eec\u7a0b\u5e8f\u662f\u5426\u53ef\u4ee5\u5728\u89c4\u5b9a\u65f6\u95f4\u5185\u8fd0\u884c\u5b8c\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u6bd4\u8d5b\u7684\u8bc4\u6d4b\u59ec\u4e00\u79d2\u80fd\u6267\u884c 5 * 10 ^ 8 5 * 10 ^ 8 \u6b21\u5de6\u53f3\u7684\u8fd0\u7b97\uff0c\u7cbe\u786e\u6570\u503c\u901a\u5e38\u65e0\u4ece\u6240\u77e5\u3002 \u6240\u4ee5,\u5bf9\u4e8e n \\le 2 * 10 ^ 4 n \\le 2 * 10 ^ 4 \u7684\u6570\u636e\u91cf\uff0c O(n^2) O(n^2) \u5c31\u662f\u6781\u9650\u4e86\uff0c\u6b64\u65f6\u5e38\u6570\u8fc7\u5927\u5c31\u6709\u53ef\u80fd TLE TLE \u3002","title":"\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\u65f6\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282"},{"location":"basic-algorithm/time/#-","text":"1 2 3 4 for ( int i = 1 ; i <= n ; ++ i ) printf ( \"ldstql! \\n \" ); for ( int j = 1 ; j <= m ; ++ j ) printf ( \"zhrtql! \\n \" ); \u5206\u6790\uff1a \u4e24\u4e2a\u5faa\u73af\u5206\u522b\u6267\u884c\u4e86 n n \u6b21\u548c m m \u6b21\uff0c \u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n + m) O(n + m) 1 2 3 for ( int i = 1 ; i <= n ; ++ i ) for ( int j = 1 ; j <= m ; ++ j ) printf ( \"ldstql! \\n \" ); \u5206\u6790\uff1a \u5916\u5c42\u5faa\u73af\u6267\u884c\u4e86 n n \u6b21\uff0c\u6bcf\u4e2a\u5916\u5c42\u5faa\u73af\u4e2d\uff0c\u6709\u4e00\u4e2a m m \u6b21\u5faa\u73af\uff0c \u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n*m) O(n*m) 1 2 3 for ( int i = 1 ; i <= n ; ++ i ) for ( int j = i + 1 ; j <= n ; ++ j ) printf ( \"ldstql! \\n \" ); \u5206\u6790: \u8ba1\u7b97\u6b21\u6570 sum = \\sum_{i = 1}^{n - 1} = 1 + 2 + 3 + ... + n - 1 = \\frac{n * (n - 1)}{2} = \\frac{1}{2}(n ^ 2 - n) sum = \\sum_{i = 1}^{n - 1} = 1 + 2 + 3 + ... + n - 1 = \\frac{n * (n - 1)}{2} = \\frac{1}{2}(n ^ 2 - n) \u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u662f O(n^2) O(n^2) 1 2 3 4 for ( int i = 1 , j = 1 ; i <= n ; ++ i ) { for (; j <= i ; ++ j ) printf ( \"ldstql! \\n \" ); } \u5206\u6790: \u867d\u7136\u4ecd\u7136\u662f\u4e24\u5c42\u5faa\u73af\uff0c\u4f46\u662f\u5728\u6bcf\u4e00\u6b21\u5916\u5c42\u5faa\u73af\u4e2d\uff0c j j \u5e76\u6ca1\u6709\u904d\u5386\u5230 n n ,\u5373, i,j i,j \u53ea\u4f1a\u589e\u52a0\uff0c\u4e0d\u4f1a\u51cf\u5c11 \u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u65b9\u4fbf\u7b97\u6cd5\u662f \u8ba1\u7b97\u4ed6\u4eec\u7684\u8d77\u70b9\u548c\u7ec8\u70b9 ,\u90a3\u4e48 sum = n + n sum = n + n ,\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n)","title":"\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6 - \u5faa\u73af"},{"location":"basic-algorithm/time/#-_1","text":"1 2 3 4 while ( n ) { printf ( \"ldstql! \\n \" ); n >>= 1 ; } \u5206\u6790: \u672c\u8d28\u4e0a\u662f n n \u4e8c\u8fdb\u5236\u4e0b\u6709\u591a\u5c11\u4f4d\uff0c\u90a3\u4e48 for for \u5faa\u73af\u5c31\u4f1a\u6267\u884c\u51e0\u6b21\uff0c\u6bd4\u5982 9_{(10)} = 1001_{(2)} 9_{(10)} = 1001_{(2)} \u5417,\u90a3\u4e48\u663e\u7136\u5b83\u4f1a\u6267\u884c 4 4 \u6b21\u3002 \u90a3\u4e48\u6211\u4eec\u600e\u4e48\u624d\u80fd\u5f97\u51fa\u5b83\u4e8c\u8fdb\u5236\u4e0b\u6709\u591a\u5c11\u4f4d\u5462\uff1f\u5176\u5b9e\u5f88\u7b80\u5355 sum = log_{2}(n) sum = log_{2}(n) \u90a3\u4e48\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(log_2(n)) O(log_2(n)) \u3002 \u7531\u4e8e\u5728\u7b97\u6cd5\u7ade\u8d5b\u4e2d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5982\u679c\u6709\u5bf9\u6570\u7684,\u90a3\u4e48\u57fa\u672c\u90fd\u662f\u4ee5 2 2 \u4e3a\u5e95\u6570\u7684\uff0c\u6240\u4ee5\u9ed8\u8ba4\u60c5\u51b5\u4e0b log(n) log(n) \uff0c\u5c31\u662f\u4ee5 2 2 \u4e3a\u5e95\u6570\u7684\u3002","title":"\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6 - \u4f4d\u8fd0\u7b97"},{"location":"basic-algorithm/time/#-_2","text":"1 2 3 4 5 6 7 8 9 10 void dfs ( int x ) { if ( x == n ) return ; dfs ( x + 1 ); for ( int i = 1 ; i <= x ; ++ i ) printf ( \"ldstql \" ); printf ( \" \\n \" ); } dfs ( 1 ); \u5206\u6790: \u9012\u5f52\u6df1\u5ea6\u662f n n ,\u5728\u6bcf\u5c42\u9012\u5f52\u7a0b\u5e8f\u4e2d,\u6709\u4e2a\u6267\u884c x x \u6b21\u7684\u5faa\u73af\uff0c\u90a3\u4e48\u5b9e\u9645\u4e0a\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u4e4b\u524d\u7684\u4e8c\u5c42\u5faa\u73af\u662f\u4e00\u6837\u7684\uff0c\u5373 O(n^2) O(n^2) 1 2 3 4 5 6 7 8 9 10 11 12 void dfs ( int l , int r ) { if ( l == r ) { printf ( \"ldstql! \\n \" ); return ; } int mid = ( l + r ) >> 1 ; dfs ( l , mid ); dfs ( mid + 1 , r ); } dfs ( 1 , n ); \u6211\u4eec\u7528 [l, r1] [l, r1] \u6765\u8868\u793a\u6bcf\u6b21\u9012\u5f52\u7684\u8303\u56f4,\u5e76\u5047\u8bbe n = 8 n = 8 \u7b2c 0 0 \u6b21\u9012\u5f52: [1, 8] [1, 8] \u7b2c 1 1 \u6b21\u9012\u5f52: [1, 4] [1, 4] , \u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 [5, 8] [5, 8] \u7b2c 2 2 \u6b21\u9012\u5f52: [1, 2] [1, 2] ,\u2003\u2003\u2003 [3, 4] [3, 4] , \u2003\u2003\u2003 [5, 6] [5, 6] \u2003\u2003\u2003, [7, 8] [7, 8] \u7b2c 3 3 \u6b21\u9012\u5f52: [1, 1], [2, 2], [3,3], [4,4],[5,5],[6,6],[7,7],[8,8] [1, 1], [2, 2], [3,3], [4,4],[5,5],[6,6],[7,7],[8,8] \u663e\u7136\uff0c\u5b83\u7684\u9012\u5f52\u8fb9\u754c\u8303\u56f4( r - l + 1 r - l + 1 )\u5728\u6bcf\u6b21\u9012\u5f52\u4e2d\u90fd\u4f1a\u4e00\u5206\u4e3a\u4e8c\uff0c\u6240\u4ee5\u9012\u5f52\u6df1\u5ea6\u4e3a \\lceil log_2(n) \\rceil \\lceil log_2(n) \\rceil \u3002\u5728\u7b2c i i \u5c42\u9012\u5f52\u4e2d,\u5171\u6709 2^i 2^i \u4e2a\u5206\u652f\u3002\u90a3\u4e48\u603b\u6b21\u6570 sum = \\sum_{i = 0}^{\\lceil log_2(n) \\rceil} 2^i = 2^{\\lceil log_2(n) \\rceil + 1} - 1 = 2 * n - 1 sum = \\sum_{i = 0}^{\\lceil log_2(n) \\rceil} 2^i = 2^{\\lceil log_2(n) \\rceil + 1} - 1 = 2 * n - 1 \u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) O(n)","title":"\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6 - \u9012\u5f52"},{"location":"basic-algorithm/two-pointers/","text":"\u5c3a\u53d6 \u00b6 Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a freshman_lcx \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u9996\u5148\uff0c\u5c3a\u53d6\u6cd5\u5c31\u662f\u5f62\u5982\u4e00\u628a\u5c3a\u5b50\u7684\u65b9\u6cd5\uff0c\u53bb\u4e00\u5757\u4e00\u5757\u7684\u622a\u53d6\u4f60\u6240\u9700\u8981\u7684\u5e8f\u5217\u3002 \u7ed9\u4f60\u4e00\u4e2an\u548cs\uff0c\u7136\u540e\u7ed9\u51fan\u4e2a\u6570\uff0c\u6c42\u8fd9n\u4e2a\u6570\u4e2d\u548c\u5927\u4e8e\u7b49\u4e8es\u7684\u6700\u5c0f\u8fde\u7eed\u5e8f\u5217\u3002 \u770b\u4e00\u4e0b\u4e00\u7ec4\u6570\u636e 10 15 5 1 3 5 10 7 4 9 2 8 \u5728\u4e0d\u8003\u8651\u65f6\u95f4\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8fd9\u6837\u5e72 1 2 3 4 5 6 7 8 for ( l = 1 ; l <= n ; l ++ ) //>\u4ece\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6570\u5f00\u59cb\uff0c\u53d6\u533a\u95f4\u4e0b\u9650l { for ( r = l ; l <= n ; l ++ ) //\u5728\u533a\u95f4\u4e0b\u9650\u53f3\u8fb9\u53d6\u533a\u95f4\u4e0a\u9650r { check ( l , r ); //\u5224\u65ad\u533a\u95f4[l,r]\u4e2d\u6570\u7684\u548c\u662f\u5426\u5927\u4e8e\u7b49\u4e8es,\u662f\u5c31\u548c\u6700\u5c0f\u957f\u5ea6\u6bd4\u8f83\u3002 if ( check ) minlen = min ( minlen , r - l + 1 ) } } \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O( n^{2} n^{2} ) \u5c3a\u53d6\u6cd5\u662f\u8fd9\u6837\u505a\u7684 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 ; int main () { int i , t , l , r ; int n , s ; int sum , len ; int a [ N ]; scanf ( \"%d\" , & t ); while ( t -- ) { sum = 0 ; scanf ( \"%d%d\" , & n , & s ); len = n + 1 ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( l = 1 , r = 1 ; r <= n ; r ++ ) //\u8bbe\u5b9a\u5de6\u53f3\u533a\u95f4\u521d\u59cb\u5316\u4e3a1 { sum += a [ r ]; //\u4e0d\u65ad\u6269\u5927\u53f3\u533a\u95f4 if ( sum < s ) continue ; //\u76f4\u5230sum\u7684\u503c\u5927\u4e8e\u7ed9\u51fa\u7684s while ( sum - a [ l ] >= s ) sum -= a [ l ++ ]; //\u7136\u540e\u7f29\u51cf\u533a\u95f4\uff0c\u5373\u6269\u5927\u5de6\u533a\u95f4\uff0c\u628a \u591a\u4f59\u90e8\u5206\u8e22\u6389 //\u4f7f\u533a\u95f4\u6700\u5c0f len = min ( len , r - l + 1 ); //\u5f97\u5230\u533a\u95f4[l,r]\uff0c\u5224\u65ad\u957f\u5ea6 } //\u5f80\u590d if ( len == n + 1 ) printf ( \"%d \\n \" , 0 ); else printf ( \"%d \\n \" , len ); }","title":"\u5c3a\u53d6"},{"location":"basic-algorithm/two-pointers/#_1","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a freshman_lcx \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u9996\u5148\uff0c\u5c3a\u53d6\u6cd5\u5c31\u662f\u5f62\u5982\u4e00\u628a\u5c3a\u5b50\u7684\u65b9\u6cd5\uff0c\u53bb\u4e00\u5757\u4e00\u5757\u7684\u622a\u53d6\u4f60\u6240\u9700\u8981\u7684\u5e8f\u5217\u3002 \u7ed9\u4f60\u4e00\u4e2an\u548cs\uff0c\u7136\u540e\u7ed9\u51fan\u4e2a\u6570\uff0c\u6c42\u8fd9n\u4e2a\u6570\u4e2d\u548c\u5927\u4e8e\u7b49\u4e8es\u7684\u6700\u5c0f\u8fde\u7eed\u5e8f\u5217\u3002 \u770b\u4e00\u4e0b\u4e00\u7ec4\u6570\u636e 10 15 5 1 3 5 10 7 4 9 2 8 \u5728\u4e0d\u8003\u8651\u65f6\u95f4\u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8fd9\u6837\u5e72 1 2 3 4 5 6 7 8 for ( l = 1 ; l <= n ; l ++ ) //>\u4ece\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6570\u5f00\u59cb\uff0c\u53d6\u533a\u95f4\u4e0b\u9650l { for ( r = l ; l <= n ; l ++ ) //\u5728\u533a\u95f4\u4e0b\u9650\u53f3\u8fb9\u53d6\u533a\u95f4\u4e0a\u9650r { check ( l , r ); //\u5224\u65ad\u533a\u95f4[l,r]\u4e2d\u6570\u7684\u548c\u662f\u5426\u5927\u4e8e\u7b49\u4e8es,\u662f\u5c31\u548c\u6700\u5c0f\u957f\u5ea6\u6bd4\u8f83\u3002 if ( check ) minlen = min ( minlen , r - l + 1 ) } } \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O( n^{2} n^{2} ) \u5c3a\u53d6\u6cd5\u662f\u8fd9\u6837\u505a\u7684 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 5 1 3 5 10 7 4 9 2 8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <bits/stdc++.h> using namespace std ; const int N = 1e5 + 5 ; int main () { int i , t , l , r ; int n , s ; int sum , len ; int a [ N ]; scanf ( \"%d\" , & t ); while ( t -- ) { sum = 0 ; scanf ( \"%d%d\" , & n , & s ); len = n + 1 ; for ( i = 1 ; i <= n ; i ++ ) scanf ( \"%d\" , & a [ i ]); for ( l = 1 , r = 1 ; r <= n ; r ++ ) //\u8bbe\u5b9a\u5de6\u53f3\u533a\u95f4\u521d\u59cb\u5316\u4e3a1 { sum += a [ r ]; //\u4e0d\u65ad\u6269\u5927\u53f3\u533a\u95f4 if ( sum < s ) continue ; //\u76f4\u5230sum\u7684\u503c\u5927\u4e8e\u7ed9\u51fa\u7684s while ( sum - a [ l ] >= s ) sum -= a [ l ++ ]; //\u7136\u540e\u7f29\u51cf\u533a\u95f4\uff0c\u5373\u6269\u5927\u5de6\u533a\u95f4\uff0c\u628a \u591a\u4f59\u90e8\u5206\u8e22\u6389 //\u4f7f\u533a\u95f4\u6700\u5c0f len = min ( len , r - l + 1 ); //\u5f97\u5230\u533a\u95f4[l,r]\uff0c\u5224\u65ad\u957f\u5ea6 } //\u5f80\u590d if ( len == n + 1 ) printf ( \"%d \\n \" , 0 ); else printf ( \"%d \\n \" , len ); }","title":"\u5c3a\u53d6"},{"location":"c-basic/array/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u57fa\u672c\u683c\u5f0f \u00b6 1 type arrayName [ arraySize ]; \u4e00\u7ef4\u6570\u7ec4 \u00b6 1 2 3 4 5 int a [ 1005 ]; int b [ 3 ] = { 1 , 2 , 3 }; int c [] = { 1 , 2 , 3 }; scanf ( \"%d\" , & a [ 0 ]); printf ( \"%d\" , c [ 3 ]); // \u8d8a\u754c \u4e8c\u7ef4\u6570\u7ec4 \u00b6 1 double mp [ 105 ][ 105 ]; \u5b57\u7b26\u6570\u7ec4 \u00b6 1 2 3 char d [ 105 ] = { '\\0' }; char parr [] = \"zifushuzu\" ; char charr [] = { 'z' , 'i' , 'f' , 'u' , 's' , 'h' , 'u' , 'z' , 'u' }; \u8bfb\u5165\u65f6\u6ce8\u610f\u56de\u8f66\u4e0e\u7a7a\u683c","title":"\u6570\u7ec4"},{"location":"c-basic/array/#_1","text":"1 type arrayName [ arraySize ];","title":"\u57fa\u672c\u683c\u5f0f"},{"location":"c-basic/array/#_2","text":"1 2 3 4 5 int a [ 1005 ]; int b [ 3 ] = { 1 , 2 , 3 }; int c [] = { 1 , 2 , 3 }; scanf ( \"%d\" , & a [ 0 ]); printf ( \"%d\" , c [ 3 ]); // \u8d8a\u754c","title":"\u4e00\u7ef4\u6570\u7ec4"},{"location":"c-basic/array/#_3","text":"1 double mp [ 105 ][ 105 ];","title":"\u4e8c\u7ef4\u6570\u7ec4"},{"location":"c-basic/array/#_4","text":"1 2 3 char d [ 105 ] = { '\\0' }; char parr [] = \"zifushuzu\" ; char charr [] = { 'z' , 'i' , 'f' , 'u' , 's' , 'h' , 'u' , 'z' , 'u' }; \u8bfb\u5165\u65f6\u6ce8\u610f\u56de\u8f66\u4e0e\u7a7a\u683c","title":"\u5b57\u7b26\u6570\u7ec4"},{"location":"c-basic/char/","text":"\u5b57\u7b26\u6570\u7ec4\u4e0e\u5b57\u7b26\u4e32 \u00b6 Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a \u6c34\u4e4b\u5e61\u7c73\u62c9 \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u5185\u5bb9 \u00b6 \u8ba1\u7b97\u673a\u5982\u4f55\u50a8\u5b58\u53d8\u91cf char\u6570\u7ec4\u4e0estring \u8ba1\u7b97\u673a\u662f\u5982\u4f55\u50a8\u5b58\u6570\u5b57\u7684 \u00b6 \u7528\u4e8c\u8fdb\u5236\u5b58\u50a8\u6570\u5b57 \u00b6 \u56e0\u4e3a\u8ba1\u7b97\u673a\u7684\u6784\u9020\u539f\u7406\uff0c\u8ba1\u7b97\u673a\u53ea\u80fd\u50a8\u5b580\uff0c1\u8fd9\u4e24\u79cd\u72b6\u6001(\u4f4e\u7535\u4f4d\u4ee3\u88680\uff0c\u9ad8\u7535\u4f4d\u4ee3\u88681) \u90a3\u4e48\u5982\u4f55\u8868\u793a\u4e00\u4e2a\u6211\u4eec\u65e5\u5e38\u751f\u6d3b\u4e2d\u7684\u6570\u5462\uff1f\u8fd9\u5c31\u8981\u7528\u5230 \u4e8c\u8fdb\u5236 \u5047\u5982\u4e00\u6bb5\u4e8c\u8fdb\u5236\u6570\u4e3a 1010 1010 \uff0c\u90a3\u4e48\u5b83\u8f6c\u5316\u4e3a10\u8fdb\u5236\u5c31\u662f 0 * 2^0 + 1 * 2^1 + 0 * 2^2 + 1 * 2^3= 10 0 * 2^0 + 1 * 2^1 + 0 * 2^2 + 1 * 2^3= 10 \u5185\u5b58\u5355\u5143 \u00b6 \u6bcf\u4e00\u4e2a 0/1 0/1 \u6570\u5b57\u5360\u4e00\u4f4d\uff0c\u800c\u4e00\u4e2a\u5185\u5b58\u5355\u5143\u6709 8 8 \u4f4d\uff0c\u79f0\u4e3a \u5b57\u8282 \uff0c\u5373 bit \uff0c\u5b83\u7684\u5355\u4f4d\u662f byte \u3002 \u6240\u4ee5\uff0c\u7406\u8bba\u4e0a 1 1 byte\u80fd\u8868\u793a\u7684\u6700\u5927\u6570\u662f (11111111)_{(2)} =\\sum_{i=0}^{7}2^i =2^8 - 1 (11111111)_{(2)} =\\sum_{i=0}^{7}2^i =2^8 - 1 C++\u4e2d\u7684\u53d8\u91cf \u00b6 C++\u4e2d int \u7c7b\u578b\u7684\u53d8\u91cf\u5360\u7528\u56db\u4e2a\u5b57\u8282\uff0c\u4e5f\u5c31\u662f\u670932\u4e2a 0/1 0/1 \u4f4d \u90a3\u4e48\u7406\u8bba\u4e0a\u5b83\u80fd\u8868\u793a\u7684\u6700\u5927\u7684\u6570\u5e94\u8be5\u662f 2^{32}-1 2^{32}-1 \u4f46\u662f\uff01\uff01 \u95ee\u9898\u5728\u4e8e\uff0c\u5b83\u8be5\u600e\u4e48\u8868\u793a\u8d1f\u6570\uff1f \u4e3a\u4e86\u8868\u793a\u8d1f\u6570\uff0cC++\u4e2d\u628aint\u7684\u6700\u9ad8\u4f4d\uff0c\u5373\u4ee3\u8868 2^{31} 2^{31} \u7684\u90a3\u4e00\u4f4d\u4f5c\u4e3a\u7b26\u53f7\u4f4d\uff0c\u5982\u679c\u5b83\u662f 0 0 \uff0c\u90a3\u5c31\u662f\u6b63\u6570\uff0c\u5982\u679c\u5b83\u662f 1 1 \uff0c\u90a3\u5c31\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u8868\u793a [-(2^{31}-1),2^{31}-1] [-(2^{31}-1),2^{31}-1] \u540c\u6837\u7684\uff0clong long\u662f 8 8 \u4e2a\u5b57\u8282\uff0c\u5b83\u7684\u6700\u9ad8\u4f4d\u4e5f\u662f\u8868\u793a\u6b63\u8d1f\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u8868\u793a [-(2^{63}-1), 2^{63}-1] [-(2^{63}-1), 2^{63}-1] \u6240\u4ee5\u8bf4\uff0c\u5728\u7206int\u7684\u65f6\u5019\uff0c\u6709\u65f6\u5019\u7ed3\u679c\u5c31\u4f1a\u53d8\u6210\u8d1f\u6570 unsigned \u7c7b\u578b\u53d8\u91cf \u00b6 \u4f7f\u7528unsigned int/unsigned long long\u65f6\uff0c\u5b83\u5c31\u5c06\u6240\u6709 0/1\u4f4d 0/1\u4f4d \u90fd\u7528\u6765\u8868\u793a\u6570\u503c\uff0c\u6240\u4ee5\u5b83\u65e0\u6cd5\u8868\u793a\u8d1f\u6570\uff0c\u4f46\u662f\u8868\u793a\u8303\u56f4\u6269\u5927\u4e86\u3002 \u4e14\u53d1\u751f\u7b97\u672f\u6ea2\u51fa\u65f6\uff0c\u5c31\u76f8\u5f53\u4e8e\u81ea\u52a8\u5bf9 \u6700\u9ad8\u4f4d\u53d6\u6a21\u3002 \u6bd4\u5982unsigned int ,\u53d1\u751f\u6ea2\u51fa\u65f6\uff0c\u9ad8\u4e8e\u6700\u9ad8\u4f4d\u7684\u6240\u6709\u6570\u88ab\u4e22\u5f03\uff0c\u5c31\u76f8\u5f53\u4e8e\u5bf9 2^{31} 2^{31} \u53d6\u6a21\u3002 \u8ba1\u7b97\u673a\u5982\u4f55\u50a8\u5b58\u5b57\u7b26 \u00b6 \u6211\u4eec\u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u6765\u8868\u793a\u6570\u5b57\uff0c\u4f46\u662f\u8be5\u5982\u4f55\u53bb\u8868\u793a\u5b57\u6bcd\u5462\uff1f \u5b57\u6bcd\u4e0e\u6570\u5b57\u53ef\u4ee5\u8bf4\u662f\u5b8c\u5168\u6ca1\u6709\u5173\u7cfb\uff0c\u6240\u4ee5\u80af\u5b9a\u65e0\u6cd5\u67d0\u4e9b\u8fd0\u7b97\u6765\u5f97\u5230 \u6240\u4ee5\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5927\u5bb6\u89c4\u5b9a\uff0c\u7528 \u7279\u5b9a\u6570\u503c\u6765\u8868\u793a\u67d0\u4e2a\u5b57\u6bcd \u5373\uff0c \u5efa\u7acb\u6570\u503c\u4e0e\u5b57\u6bcd\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\u3002 \u6bd4\u5982\u8bf4\uff0c\u7528 65 65 \u8868\u793aA\uff0c\u7528 66 66 \u8868\u793aB\u3002 ASCLL\u7801 \u00b6 \u56e0\u4e3a\u7528 \u7279\u5b9a\u6570\u503c\u8868\u793a\u7279\u5b9a\u5b57\u6bcd \u8fd9\u79cd\u65b9\u5f0f\u662f\u4eba\u4e3a\u89c4\u5b9a\u7684\uff0c\u4e0d\u540c\u5730\u533a\u4f1a\u6709\u4e0d\u540c\u7684\u89c4\u5b9a\uff0c\u6240\u4ee5\u4e3a\u4e86\u9632\u6b62\u6df7\u4e71\uff0c\u73b0\u5728\u4e00\u822c\u91c7\u7528 ASCII\u7801 \u8fd9\u79cd\u5bf9\u5e94\u89c4\u5219\u3002 \u7f8e\u56fd\u4fe1\u606f\u4ea4\u6362\u6807\u51c6\u4ee3\u7801\u662f\u7531\u7f8e\u56fd\u56fd\u5bb6\u6807\u51c6\u5b66\u4f1a(American National Standard Institute , ANSI )\u5236\u5b9a\u7684\uff0c\u662f\u4e00\u79cd\u6807\u51c6\u7684\u5355\u5b57\u8282\u5b57\u7b26\u7f16\u7801\u65b9\u6848\uff0c\u7528\u4e8e\u57fa\u4e8e\u6587\u672c\u7684\u6570\u636e\u3002\u5b83\u6700\u521d\u662f\u7f8e\u56fd\u56fd\u5bb6\u6807\u51c6\uff0c\u4f9b\u4e0d\u540c\u8ba1\u7b97\u673a\u5728\u76f8\u4e92\u901a\u4fe1\u65f6\u7528\u4f5c\u5171\u540c\u9075\u5b88\u7684\u897f\u6587\u5b57\u7b26\u7f16\u7801\u6807\u51c6\uff0c\u540e\u6765\u5b83\u88ab\u56fd\u9645\u6807\u51c6\u5316\u7ec4\u7ec7\uff08International Organization for Standardization, ISO\uff09\u5b9a\u4e3a\u56fd\u9645\u6807\u51c6\uff0c\u79f0\u4e3aISO 646\u6807\u51c6\u3002\u9002\u7528\u4e8e\u6240\u6709\u62c9\u4e01\u6587\u5b57\u5b57\u6bcd\u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u5927\u5199\u5b57\u6bcd\u3001\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u7684ASCII\u7801\u662f\u5206\u522b\u8fde\u7eed\u7684\u3002 \u5373\uff0c A\u7684ASCII\u7801\u4e0b\u4e00\u4f4d\u5c31\u662fB\uff0cc\u7684ASCLL\u7801\u4e0b\u4e00\u4f4d\u5c31\u662fd\u3002 \u5177\u4f53\u5e94\u7528 \u00b6 \u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u4ee5\u4e0b\u7a0b\u5e8f 1 printf ( \"%d %c \\n \" , 65 , 65 ); \u90a3\u4e48\u5177\u4f53\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f %d\u662f\u544a\u8bc9\u8ba1\u7b97\u673a\uff0c\u63a5\u4e0b\u6765\u8981\u8f93\u51fa\u7684\u5185\u5bb9\uff0c\u662f\u6309\u7167int\u7c7b\u578b\u6765\u8f93\u51fa\u7684\uff0c\u6240\u4ee5\uff0c\u8ba1\u7b97\u673a\u4f1a\u628a 65 65 \u5bf9\u5e94\u7684\u503c\uff0c\u4e5f\u5c31\u662f 65 65 \u672c\u8eab\uff0c\u8f93\u51fa\u3002 %c\u662f\u544a\u8bc9\u8ba1\u7b97\u673a\uff0c\u63a5\u4e0b\u6765\u8981\u8f93\u51fa\u7684\u5185\u5bb9\uff0c\u662f\u6309\u7167char\u7c7b\u578b\u6765\u8f93\u51fa\u7684\uff0c\u6240\u4ee5\uff0c\u8ba1\u7b97\u673a\u4f1a\u628a 65 65 \u4f5c\u4e3aASCII\u7801\uff0c\u6765\u8f93\u51fa\u5176\u5bf9\u5e94\u7684\u5b57\u7b26\uff0c\u4e5f\u5c31\u662f\u2018A\u2019\uff0c\u8f93\u51fa\u3002 1 printf ( \"%d %c \\n \" , 'A' , 'A' ); %d\u662f\u628a'A'\u7684ASCII\u7801\u8f93\u51fa\uff0c%c\u5c31\u662f\u8f93\u51fa'A'\u672c\u8eab \u56e0\u4e3a'A'\u672c\u8eab\u5728\u5185\u5b58\u4e2d\u50a8\u5b58\u5f62\u5f0f\uff0c\u5176\u5b9e\u5c31\u662f \u6570\u503c \uff0c\u5373 65 65 \uff0c\u53ea\u662f\u6839\u636e\u8f93\u51fa\u65b9\u5f0f\u4e0d\u540c\uff0c\u800c\u91c7\u53d6\u4e0d\u540c\u7684\u8868\u73b0\u5f62\u5f0f\u3002 1 2 3 4 for ( int i = 0 ; i <= 25 ; ++ i ) printf ( \"%c \" , 'A' + i ); for ( int i = 0 ; i <= 25 ; ++ i ) printf ( \"%c \" , 'a' + i ); \u5229\u7528\u5b57\u6bcdASCII\u7801\u8fde\u7eed\u7684\u6027\u8d28\uff0c\u8f93\u51fa'A'\u5230'Z'\uff0c'a'\u5230'z'\u7684\u6240\u6709\u5b57\u6bcd\u3002 1 2 3 char x = '2' ; int t = x - '0' ; printf ( \"%d \\n \" , t ); \u901a\u8fc7\u51cf\u53bb' 0 0 '\uff0c\u5c31\u53ef\u4ee5\u5c06\u5b57\u7b26\u578b\u6570\u5b57\uff0c\u8f6c\u5316\u4e3a\u6570\u503c\u3002 \u8f6c\u4e49\u7b26 \u00b6 \u5047\u5982\u6211\u4eec\u60f3\u8ba9\u8ba1\u7b97\u673a\u8f93\u51fa\u4e00\u4e2a\u7a7a\u683c\uff0c\u6216\u8005\u6362\u884c\uff0c\u600e\u4e48\u5b9e\u73b0\uff1f\u53c8\u6216\u8005\u8bf4\uff0c\u7a7a\u683c\u548c\u6362\u884c\uff0c\u5728\u8ba1\u7b97\u673a\u4e2d\u662f\u600e\u4e48\u4fdd\u5b58\u7684\uff1f \u8fd9\u5c31\u7528\u5230\u4e86\u8f6c\u4e49\u7b26\uff0c\u5728C++\u4e2d\uff0c\u5b83\u662f'\\'\u3002 \u6bd4\u5982: * \u7a7a\u683c: '\\0' * \u6362\u884c\u7b26'\\n' \u5f53\u8bfb\u5165\u5230'\\'\u65f6\uff0c\u8ba1\u7b97\u673a\u5c31\u4e0d\u4f1a\u8f93\u51fa'\\'\u4e86\uff0c\u800c\u662f\u4f1a\u518d\u8bfb\u53d6\u5b83\u540e\u9762\u4e00\u4f4d\uff0c\u4ee5\u6b64\u6765\u786e\u5b9a\u5185\u5bb9\u3002 \u90a3\u4e48\u600e\u4e48\u8f93\u51fa\u4e00\u4e2a'\\'\uff1f 1 printf ( \" \\\\ \" ); \u5b57\u7b26\u6570\u7ec4 \u00b6 \u5982\u679c\u6211\u4eec\u9700\u8981\u50a8\u5b58\u4e00\u4e32\u5b57\u7b26\u7684\u8bdd\uff0c\u6bd4\u5982'ldstql'\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528 \u5b57\u7b26\u6570\u7ec4 \u3002 \u5b9a\u4e49 \u00b6 1 char s [ 10005 ]; \u4e4b\u540e\u7684\u5b9e\u4f8b\u4e2d\uff0c\u9ed8\u8ba4s\u6570\u7ec4\u5df2\u7ecf\u88ab\u58f0\u660e\u8fc7\u4e86\u3002 \u8bfb\u5165 \u00b6 1 scanf ( \"%s\" , s ); \u6ce8\u610f\uff0c\u4ec5\u5728\u8bfb\u5165\u5b57\u7b26\u4e32\uff0c\u5373'%s'\u65f6\uff0c\u4e0d\u9700\u8981\u5728\u53d8\u91cf\u524d\u52a0'&'\u3002 \u8f93\u51fa \u00b6 1 printf ( \"%s \\n \" , s ); \u8bfb\u5165 \u00b6 1 scanf ( \"%s\" , s ); \u8fd9\u79cd\u65b9\u6cd5\u5c31\u662f\u5c06\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\u4eces[0]\u5f00\u59cb\uff0c\u4f9d\u6b21\u5f80\u540e\u590d\u5236\uff0c \u4e00\u76f4\u8bfb\u5165\u5230\u7a7a\u683c/\u6362\u884c\u7b26\u624d\u4f1a\u505c\u6b62 \u3002 \u6bd4\u5982\u4f60\u60f3\u8bfb\u5165\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u7528\u7a7a\u683c\u628a\u5b83\u4eec\u5206\u5272\uff0c\u90a3\u4e48\u5f53\u4f60\u6572\u4e0b\u7a7a\u683c\u65f6\uff0c\u8ba1\u7b97\u673a\u770b\u5230\u7684\u5176\u5b9e\u662f'\\0'\uff0c\u7136\u540e\u5b83\u5c31\u77e5\u9053\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7ed3\u675f\u4e86\u3002 \u987a\u5e26\u4e00\u63d0\uff0c\u5f53\u4f60\u5efa\u7acb\u4e00\u4e2achar\u6570\u7ec4\u65f6\uff0c\u5b83\u7684\u6bcf\u4e00\u4f4d\u9ed8\u8ba4\u4e3a\u662f'\\0'\u3002 \u5f53\u6211\u4eec\u7528\u4e0a\u8ff0\u65b9\u6cd5\u8bfb\u5165\u5b57\u7b26\u4e32'ldstql'\u65f6,\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f 1 2 s [ 0 ] = 'l' ; s [ 1 ] = 'd' ; s [ 2 ] = 's' ; s [ 3 ] = 't' , s [ 4 ] = 'q' , s [ 5 ] = 'l' ; \u90a3\u4e48\u5047\u5982\u6211\u4e60\u60ef\u6570\u7ec4\u4e0b\u6807\u662f\u4ece 1 1 \u5f00\u59cb\u7684\uff0c\u600e\u4e48\u6837\u624d\u80fd\u8bfb\u5165\u7684\u65f6\u5019\uff0cs[1]\u5f00\u59cb\u8d4b\u503c\u5462\uff1f \u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u6570\u7ec4\u540d\u540e\u52a0\u4e0a\u4f60\u60f3\u8981\u4ece\u7b2c\u51e0\u4f4d\u5f00\u59cb\u7684\u6570\u5b57\u5373\u53ef\u3002 1 scanf ( \"%s\" , s + 1 ); \u8fd9\u6837\u505a\uff0c\u5c31\u662f\u4ece\u7b2c 1 1 \u4f4d\u5f00\u59cb\u8bfb\u5165\u3002 1 2 s [ 1 ] = 'l' ; s [ 2 ] = 'd' ; s [ 3 ] = 's' ; s [ 4 ] = 't' , s [ 5 ] = 'q' , s [ 6 ] = 'l' ; \u8f93\u51fa \u00b6 \u8f93\u51fa\u6574\u4e2a\u5b57\u7b26\u4e32 \u00b6 1 printf ( \"%s \\n \" , s ); \u5b83\u7684\u8f93\u51fa\u89c4\u5219\u662f\u548c\u8bfb\u5165\u4e00\u6837\u7684\uff0c\u4ece\u7b2c 0 0 \u4f4d\u5f00\u59cb\u4f9d\u6b21\u5f80\u540e\u8f93\u51fa\uff0c \u4e00\u76f4\u8bfb\u5165\u5230\u7a7a\u683c/\u6362\u884c\u7b26\u624d\u4f1a\u505c\u6b62 \u3002 \u6ce8\u610f\uff01\uff01\uff01\uff01 \u4e0a\u8ff0\u89c4\u5219\u610f\u5473\u7740\uff0c \u5f53\u4f60\u8bfb\u5165\u65f6\uff0c\u5982\u679c\u662f\u4ece\u7b2c\u4e00\u4f4d\u8bfb\u5165\u7684\u8bdd\uff0c\u90a3\u4e48\u8f93\u51fa\u7684\u65f6\u5019\uff0c\u4e5f\u8981\u4ece\u7b2c\u4e00\u4f4d\u5f00\u59cb \uff0c\u56e0\u4e3a\u7b2c 0 0 \u4f4d\u662f\u7a7a\u683c\uff0c\u5373'\\0',\u6240\u4ee5\u5047\u5982\u8fd8\u662f\u4ece\u7b2c 0 0 \u4f4d\u8f93\u51fa\u7684\u8bdd\uff0c\u90a3\u4e48\u5b83\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u8f93\u51fa\u3002 1 printf ( \"%s\" , s + 1 ); // \u4ece\u7b2c$1\u4f4d\u5f00\u59cb\u8f93\u51fa\u3002 \u5b57\u7b26\u4e32\u4e2d\u5355\u4e2a\u5b57\u7b26 \u00b6 s[i]\u53ef\u4ee5\u8bbf\u95ee\u5b57\u7b26\u4e32\u4e2d\u7b2c i i \u4e2a\u5b57\u7b26\uff0c\u6b64\u65f6\u53ef\u4ee5\u628a\u5b83\u5f53\u4f5c\u5b57\u7b26\u5904\u7406\u3002 1 s [ 1 ] = 'l' ; s [ 2 ] = 'd' ; s [ 3 ] = 's' \u540c\u6837\u7684\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167 \u5355\u4e2a\u5b57\u7b26\u7684\u5f62\u5f0f\u8f93\u51fa 1 printf ( \"%c\" , s [ 1 ]); cstring\u5e93 \u00b6 C++\u4e2d\u6709\u4e00\u4e2a\u4e13\u95e8\u7528\u6765\u5e2e\u52a9\u6211\u4eec\u5904\u7406\u5b57\u7b26\u4e32\u7684\u5e93\uff0c\u5b83\u5c31\u53eb 1 #include <cstring> \u91cc\u9762\u63d0\u4f9b\u4e86\u5f88\u591a\u7c7b\u3001\u51fd\u6570\u53ef\u4f9b\u6211\u4eec\u4f7f\u7528 \u6ce8\u610f \u5f53\u4f60\u4f7f\u7528\u5e93\u4e2d\u5185\u5bb9\u65f6\uff0c\u5fc5\u987b\u8981include \u8fd9\u4e2a\u5e93\u3002 strlen() \u00b6 strlen()\u8fd9\u4e2a\u51fd\u6570\uff0c\u4f1a\u8fd4\u56de\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 1 int n = strlen ( s ); \u5b83\u7684\u904d\u5386\u5b57\u7b26\u4e32\u65b9\u5f0f\uff0c\u548cscanf/printf\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u5982\u679c\u5b57\u7b26\u4e32\u662f\u4ece\u7b2c\u4e00\u4f4d\u8bfb\u5165\u7684\u8bdd\uff0c\u90a3\u4e48\u5982\u679c\u60f3\u8981\u5f97\u5230\u6b63\u786e\u7ed3\u679c\uff0c\u4e5f\u5fc5\u987b\u628a\u7b2c\u4e00\u4f4d\u4f20\u5165\u8fdb\u53bb\u3002 1 int n = strlen ( s + 1 ); \u6211\u4eec\u4ee5\u540e\u8bfb\u5165\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u5feb\u901f\u83b7\u53d6\u5b83\u7684\u957f\u5ea6\u4e86\u3002 1 2 3 4 scanf ( \"%s\" , s + 1 ); int n = strlen ( s + 1 ); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%c \" , s [ i ]); strcpy() \u00b6 strcpy(x, y)\u7684\u4f5c\u7528\u662f\u628ay\u5b57\u7b26\u4e32\u62f7\u8d1d\u7ed9x 1 2 3 char s1 [ 21 ], s2 [ 21 ]; scanf ( \"%s\" , s1 ); strcmp ( s2 , s1 ); \u540c\u6837\u7684\uff0c\u5b83\u7684\u904d\u5386\u6570\u7ec4\u65b9\u5f0f\u4e0estrlen\u4e00\u6837\u3002 \u6240\u4ee5\u5982\u679c\u662f\u4ece\u7b2c\u4e00\u4f4d\u5f00\u59cb\u8bfb\u5165\u7684\uff0c\u590d\u5236\u7684\u65f6\u5019\u4e5f\u8981\u4ece\u7b2c\u4e00\u4f4d 1 2 3 4 char s1 [ 21 ], s2 [ 21 ]; scanf ( \"%s\" , s1 + 1 ); strcmp ( s2 , s1 + 1 ); //\u4eces2\u7684\u7b2c0\u4f4d\u5f00\u59cb\u7c98\u8d34 strcmp ( s2 + 1 , s1 + 1 ) //\u4eces2\u7684\u7b2c1\u4f4d\u5f00\u59cb\u7c98\u8d34 string \u00b6 cstring\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\uff08\u73b0\u5728\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e2a\u53c8\u7279\u6b8a\u529f\u80fd\u7684\u53d8\u91cf\uff09\uff0c\u53eb\u505a string\uff0c \u5b83\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u58f0\u660e \u00b6 1 string s ; \u8bfb\u5165 \u00b6 1 cin >> s ; string\u7c7b\u578b\u53d8\u91cf\u53ea\u80fd\u7528cin\u6765\u8fdb\u884c\u8bfb\u5165\uff0c\u4e0d\u80fd\u4f7f\u7528scanf\uff0c\u4e14\u53ea\u80fd\u4ece\u7b2c 0 0 \u4f4d\u5f00\u59cb\u8bfb\u5165\u3002 string\u662f\u4e0d\u9700\u8981\u58f0\u660e\u5927\u5c0f\u7684\uff0c\u5b83\u662f\u2018\u52a8\u6001\u2019\u7684\uff0c\u5373\u4f1a\u6839\u636e\u8f93\u5165\u7684\u5185\u5bb9\u81ea\u5df1\u63a7\u5236\u5927\u5c0f\u3002 string\u5176\u4f59\u90e8\u5206\uff0c\u4e0echar\u6570\u7ec4\u4e00\u81f4\u3002 1 2 cin >> s [ 1 ]; //\u8bfb\u5165\u7b2c$1$\u4f4d cout << s [ 1 ]; //\u7136\u540e\u8f93\u51fa string\u8fd8\u81ea\u5e26\u5f88\u591a\u529f\u80fd\u3002 1 2 3 4 int n = s . length () // \u8fd4\u56des\u7684\u5b57\u7b26\u4e32\u957f\u5ea6 for ( int i = 0 ; i < s . length (); ++ i ) // \u8fd9\u6837\u904d\u5386s cout << s [ i ] << \" \" ; s . clear () // \u6e05\u9664s\u5185\u7684\u6240\u6709\u5185\u5bb9 \u4e24\u4e2astring\u7c7b\u578b\u4e4b\u95f4\u53ef\u4ee5\u76f4\u63a5\u76f8\u52a0\uff0c\u76f8\u5f53\u4e8e \u628a\u540e\u9762string\u7684\u52a0\u5230\u524d\u9762string \u7684\u540e\u9762\u3002 1 2 string a = \"lds\" , b = \"tql\" ; cout << a + b << endl ; \u4f46\u662f\uff0cstring\u7c7b\u578b\u4e4b\u95f4\u662f\u6ca1\u6709\u51cf\u6cd5\u8fd0\u7b97\u7684 : ( \u4e00\u4e9b\u7ec6\u8282 \u00b6 \u4e0d\u7ba1\u662fstring\uff0c\u8fd8\u662fchar\u6570\u7ec4\uff0c\u5f53\u4f60\u5bf9\u6574\u4e2a\u6570\u7ec4\u8fdb\u884c\u8bfb\u5165\u65f6\uff0c\u4f1a\u76f4\u63a5\u8986\u76d6\u6389\u4e4b\u524d\u7684 \u6240\u6709\u5b57\u7b26 \uff0c\u54ea\u6015\u4e4b\u524d\u5b57\u7b26\u4e32\u957f\u5ea6\u662f114514\uff0c\u4f60\u5bf9 \u6574\u4e2a\u5b57\u7b26\u4e32 \u8f93\u5165\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u90a3\u5c31\u4f1a\u6e05\u9664\u6389\u4e4b\u524d\u6240\u6709\u7684\u5b57\u7b26\u3002\u4f46\u5982\u679c\u4f60\u5bf9\u5355\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u8bfb\u5165\uff0c\u90a3\u4e48\u662f\u4e0d\u4f1a\u8986\u76d6\u6389\u5176\u4f59\u90e8\u5206\u7684\u3002 1 2 3 4 5 6 7 8 9 10 char f [ 10005 ]; string s ; cin >> s ; //\u7b2c\u4e00\u6b21\u8bfb\u5165 cin >> s ; //\u4f1a\u8986\u76d6\u6389\u6240\u6709\u7b2c\u4e00\u6b21\u8bfb\u5165\u7684\u5185\u5bb9 cin >> s [ 0 ] >> s [ 1 ] >> s [ 2 ]; //\u53ea\u4f1a\u8986\u76d6\u63890,1,2\u8fd9\u4e09\u4e2a\u4f4d\u7f6e cin >> f ; //\u7b2c\u4e00\u6b21\u8bfb\u5165 cin >> f ; //\u4f1a\u8986\u76d6\u6389\u6240\u6709\u7b2c\u4e00\u6b21\u8bfb\u5165\u7684\u5185\u5bb9 cin >> f [ 0 ] >> f [ 1 ] >> f [ 2 ]; //\u53ea\u4f1a\u8986\u76d6\u63890,1,2\u8fd9\u4e09\u4e2a\u4f4d\u7f6e string\u6570\u7ec4 \u00b6 string \u4e5f\u662f\u53ef\u4ee5\u5f00\u6210\u6570\u7ec4\u5f62\u5f0f\u7684\u3002 1 2 3 4 5 6 string s [ 10 ]; // \u58f0\u660e10\u4e2astring\u7c7b\u578b\u7684\u6570\u7ec4 cin >> s [ 0 ] //\u5411\u7b2c0\u4e2astring\u4e2d\u8fdb\u884c\u8bfb\u5165 cout << s [ 0 ][ 0 ] // \u8f93\u51fa\u7b2c0\u4e2astring\u7684\u7b2c0\u4e2a\u5b57\u7b26 int n = s [ 0 ]. length () //\u83b7\u5f97\u7b2c0\u4e2astring\u7684\u957f\u5ea6 for ( int i = 0 ; i < s [ 0 ]. length (); i ++ ) //\u904d\u5386\u8fd9\u4e2a\u7b2c0\u4e2astring cout << s [ 0 ][ i ] << \"0\" ; \u4f8b\u9898 \u5224\u65ad\u56de\u6587\u4e32 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b83\u662f\u5426\u4e3a\u56de\u6587\u4e32\u3002 \u56de\u6587\u4e32\u7684\u5b9a\u4e49\u4e3a:\u8fd9\u4e2a\u5b57\u7b26\u4e32 \u4ece\u5de6\u5f80\u53f3\u8bfb\u548c\u4ece\u53f3\u5f80\u5de6\u7740\u8bfb\u662f\u4e00\u6837\u7684 \uff0c\u6bd4\u5982'cucuc'\u662f\u56de\u6587\u4e32\uff0c\u800c'niconiconi'\u5c31\u4e0d\u662f\u56de\u6587\u4e32\u3002 \u63d0\u793a \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5047\u5982\u5b83\u7684\u957f\u5ea6\u4e3a n n \uff0c\u6211\u4eec\u4ece\u7b2c 1 1 \u4f4d\u5f00\u59cb\u8bfb\u5165,\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u77e5\u9053\u4e0e\u5b83\u5bf9\u5e94\u7684\u5b57\u7b26\u5462\uff1f \u6bd4\u5982\u7b2c i i \u4f4d\uff0c\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5c31\u662f n - i + 1 n - i + 1 1 2 3 4 5 6 7 bool succ = true ; for ( int i = 1 ; i < ( n / 2 ); ++ i ) { if ( s [ i ] != s [ n - i + 1 ]) { succ = false ; break ; //\u65e2\u7136\u5df2\u7ecf\u5bf9\u5e94\u4e0d\u4e0a\u4e86\uff0c\u90a3\u4e48\u5b83\u80af\u5b9a\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u7ee7\u7eed\u5224\u65ad\u7684\u5fc5\u8981\u4e86 } }","title":"\u5b57\u7b26\u6570\u7ec4,string"},{"location":"c-basic/char/#_1","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a \u6c34\u4e4b\u5e61\u7c73\u62c9 \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002","title":"\u5b57\u7b26\u6570\u7ec4\u4e0e\u5b57\u7b26\u4e32"},{"location":"c-basic/char/#_2","text":"\u8ba1\u7b97\u673a\u5982\u4f55\u50a8\u5b58\u53d8\u91cf char\u6570\u7ec4\u4e0estring","title":"\u5185\u5bb9"},{"location":"c-basic/char/#_3","text":"","title":"\u8ba1\u7b97\u673a\u662f\u5982\u4f55\u50a8\u5b58\u6570\u5b57\u7684"},{"location":"c-basic/char/#_4","text":"\u56e0\u4e3a\u8ba1\u7b97\u673a\u7684\u6784\u9020\u539f\u7406\uff0c\u8ba1\u7b97\u673a\u53ea\u80fd\u50a8\u5b580\uff0c1\u8fd9\u4e24\u79cd\u72b6\u6001(\u4f4e\u7535\u4f4d\u4ee3\u88680\uff0c\u9ad8\u7535\u4f4d\u4ee3\u88681) \u90a3\u4e48\u5982\u4f55\u8868\u793a\u4e00\u4e2a\u6211\u4eec\u65e5\u5e38\u751f\u6d3b\u4e2d\u7684\u6570\u5462\uff1f\u8fd9\u5c31\u8981\u7528\u5230 \u4e8c\u8fdb\u5236 \u5047\u5982\u4e00\u6bb5\u4e8c\u8fdb\u5236\u6570\u4e3a 1010 1010 \uff0c\u90a3\u4e48\u5b83\u8f6c\u5316\u4e3a10\u8fdb\u5236\u5c31\u662f 0 * 2^0 + 1 * 2^1 + 0 * 2^2 + 1 * 2^3= 10 0 * 2^0 + 1 * 2^1 + 0 * 2^2 + 1 * 2^3= 10","title":"\u7528\u4e8c\u8fdb\u5236\u5b58\u50a8\u6570\u5b57"},{"location":"c-basic/char/#_5","text":"\u6bcf\u4e00\u4e2a 0/1 0/1 \u6570\u5b57\u5360\u4e00\u4f4d\uff0c\u800c\u4e00\u4e2a\u5185\u5b58\u5355\u5143\u6709 8 8 \u4f4d\uff0c\u79f0\u4e3a \u5b57\u8282 \uff0c\u5373 bit \uff0c\u5b83\u7684\u5355\u4f4d\u662f byte \u3002 \u6240\u4ee5\uff0c\u7406\u8bba\u4e0a 1 1 byte\u80fd\u8868\u793a\u7684\u6700\u5927\u6570\u662f (11111111)_{(2)} =\\sum_{i=0}^{7}2^i =2^8 - 1 (11111111)_{(2)} =\\sum_{i=0}^{7}2^i =2^8 - 1","title":"\u5185\u5b58\u5355\u5143"},{"location":"c-basic/char/#c","text":"C++\u4e2d int \u7c7b\u578b\u7684\u53d8\u91cf\u5360\u7528\u56db\u4e2a\u5b57\u8282\uff0c\u4e5f\u5c31\u662f\u670932\u4e2a 0/1 0/1 \u4f4d \u90a3\u4e48\u7406\u8bba\u4e0a\u5b83\u80fd\u8868\u793a\u7684\u6700\u5927\u7684\u6570\u5e94\u8be5\u662f 2^{32}-1 2^{32}-1 \u4f46\u662f\uff01\uff01 \u95ee\u9898\u5728\u4e8e\uff0c\u5b83\u8be5\u600e\u4e48\u8868\u793a\u8d1f\u6570\uff1f \u4e3a\u4e86\u8868\u793a\u8d1f\u6570\uff0cC++\u4e2d\u628aint\u7684\u6700\u9ad8\u4f4d\uff0c\u5373\u4ee3\u8868 2^{31} 2^{31} \u7684\u90a3\u4e00\u4f4d\u4f5c\u4e3a\u7b26\u53f7\u4f4d\uff0c\u5982\u679c\u5b83\u662f 0 0 \uff0c\u90a3\u5c31\u662f\u6b63\u6570\uff0c\u5982\u679c\u5b83\u662f 1 1 \uff0c\u90a3\u5c31\u662f\u8d1f\u6570\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u8868\u793a [-(2^{31}-1),2^{31}-1] [-(2^{31}-1),2^{31}-1] \u540c\u6837\u7684\uff0clong long\u662f 8 8 \u4e2a\u5b57\u8282\uff0c\u5b83\u7684\u6700\u9ad8\u4f4d\u4e5f\u662f\u8868\u793a\u6b63\u8d1f\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u8868\u793a [-(2^{63}-1), 2^{63}-1] [-(2^{63}-1), 2^{63}-1] \u6240\u4ee5\u8bf4\uff0c\u5728\u7206int\u7684\u65f6\u5019\uff0c\u6709\u65f6\u5019\u7ed3\u679c\u5c31\u4f1a\u53d8\u6210\u8d1f\u6570","title":"C++\u4e2d\u7684\u53d8\u91cf"},{"location":"c-basic/char/#unsigned","text":"\u4f7f\u7528unsigned int/unsigned long long\u65f6\uff0c\u5b83\u5c31\u5c06\u6240\u6709 0/1\u4f4d 0/1\u4f4d \u90fd\u7528\u6765\u8868\u793a\u6570\u503c\uff0c\u6240\u4ee5\u5b83\u65e0\u6cd5\u8868\u793a\u8d1f\u6570\uff0c\u4f46\u662f\u8868\u793a\u8303\u56f4\u6269\u5927\u4e86\u3002 \u4e14\u53d1\u751f\u7b97\u672f\u6ea2\u51fa\u65f6\uff0c\u5c31\u76f8\u5f53\u4e8e\u81ea\u52a8\u5bf9 \u6700\u9ad8\u4f4d\u53d6\u6a21\u3002 \u6bd4\u5982unsigned int ,\u53d1\u751f\u6ea2\u51fa\u65f6\uff0c\u9ad8\u4e8e\u6700\u9ad8\u4f4d\u7684\u6240\u6709\u6570\u88ab\u4e22\u5f03\uff0c\u5c31\u76f8\u5f53\u4e8e\u5bf9 2^{31} 2^{31} \u53d6\u6a21\u3002","title":"unsigned \u7c7b\u578b\u53d8\u91cf"},{"location":"c-basic/char/#_6","text":"\u6211\u4eec\u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u6765\u8868\u793a\u6570\u5b57\uff0c\u4f46\u662f\u8be5\u5982\u4f55\u53bb\u8868\u793a\u5b57\u6bcd\u5462\uff1f \u5b57\u6bcd\u4e0e\u6570\u5b57\u53ef\u4ee5\u8bf4\u662f\u5b8c\u5168\u6ca1\u6709\u5173\u7cfb\uff0c\u6240\u4ee5\u80af\u5b9a\u65e0\u6cd5\u67d0\u4e9b\u8fd0\u7b97\u6765\u5f97\u5230 \u6240\u4ee5\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5927\u5bb6\u89c4\u5b9a\uff0c\u7528 \u7279\u5b9a\u6570\u503c\u6765\u8868\u793a\u67d0\u4e2a\u5b57\u6bcd \u5373\uff0c \u5efa\u7acb\u6570\u503c\u4e0e\u5b57\u6bcd\u4e00\u4e00\u5bf9\u5e94\u5173\u7cfb\u3002 \u6bd4\u5982\u8bf4\uff0c\u7528 65 65 \u8868\u793aA\uff0c\u7528 66 66 \u8868\u793aB\u3002","title":"\u8ba1\u7b97\u673a\u5982\u4f55\u50a8\u5b58\u5b57\u7b26"},{"location":"c-basic/char/#ascll","text":"\u56e0\u4e3a\u7528 \u7279\u5b9a\u6570\u503c\u8868\u793a\u7279\u5b9a\u5b57\u6bcd \u8fd9\u79cd\u65b9\u5f0f\u662f\u4eba\u4e3a\u89c4\u5b9a\u7684\uff0c\u4e0d\u540c\u5730\u533a\u4f1a\u6709\u4e0d\u540c\u7684\u89c4\u5b9a\uff0c\u6240\u4ee5\u4e3a\u4e86\u9632\u6b62\u6df7\u4e71\uff0c\u73b0\u5728\u4e00\u822c\u91c7\u7528 ASCII\u7801 \u8fd9\u79cd\u5bf9\u5e94\u89c4\u5219\u3002 \u7f8e\u56fd\u4fe1\u606f\u4ea4\u6362\u6807\u51c6\u4ee3\u7801\u662f\u7531\u7f8e\u56fd\u56fd\u5bb6\u6807\u51c6\u5b66\u4f1a(American National Standard Institute , ANSI )\u5236\u5b9a\u7684\uff0c\u662f\u4e00\u79cd\u6807\u51c6\u7684\u5355\u5b57\u8282\u5b57\u7b26\u7f16\u7801\u65b9\u6848\uff0c\u7528\u4e8e\u57fa\u4e8e\u6587\u672c\u7684\u6570\u636e\u3002\u5b83\u6700\u521d\u662f\u7f8e\u56fd\u56fd\u5bb6\u6807\u51c6\uff0c\u4f9b\u4e0d\u540c\u8ba1\u7b97\u673a\u5728\u76f8\u4e92\u901a\u4fe1\u65f6\u7528\u4f5c\u5171\u540c\u9075\u5b88\u7684\u897f\u6587\u5b57\u7b26\u7f16\u7801\u6807\u51c6\uff0c\u540e\u6765\u5b83\u88ab\u56fd\u9645\u6807\u51c6\u5316\u7ec4\u7ec7\uff08International Organization for Standardization, ISO\uff09\u5b9a\u4e3a\u56fd\u9645\u6807\u51c6\uff0c\u79f0\u4e3aISO 646\u6807\u51c6\u3002\u9002\u7528\u4e8e\u6240\u6709\u62c9\u4e01\u6587\u5b57\u5b57\u6bcd\u3002 \u6211\u4eec\u53d1\u73b0\uff0c\u5927\u5199\u5b57\u6bcd\u3001\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u7684ASCII\u7801\u662f\u5206\u522b\u8fde\u7eed\u7684\u3002 \u5373\uff0c A\u7684ASCII\u7801\u4e0b\u4e00\u4f4d\u5c31\u662fB\uff0cc\u7684ASCLL\u7801\u4e0b\u4e00\u4f4d\u5c31\u662fd\u3002","title":"ASCLL\u7801"},{"location":"c-basic/char/#_7","text":"\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u4ee5\u4e0b\u7a0b\u5e8f 1 printf ( \"%d %c \\n \" , 65 , 65 ); \u90a3\u4e48\u5177\u4f53\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f %d\u662f\u544a\u8bc9\u8ba1\u7b97\u673a\uff0c\u63a5\u4e0b\u6765\u8981\u8f93\u51fa\u7684\u5185\u5bb9\uff0c\u662f\u6309\u7167int\u7c7b\u578b\u6765\u8f93\u51fa\u7684\uff0c\u6240\u4ee5\uff0c\u8ba1\u7b97\u673a\u4f1a\u628a 65 65 \u5bf9\u5e94\u7684\u503c\uff0c\u4e5f\u5c31\u662f 65 65 \u672c\u8eab\uff0c\u8f93\u51fa\u3002 %c\u662f\u544a\u8bc9\u8ba1\u7b97\u673a\uff0c\u63a5\u4e0b\u6765\u8981\u8f93\u51fa\u7684\u5185\u5bb9\uff0c\u662f\u6309\u7167char\u7c7b\u578b\u6765\u8f93\u51fa\u7684\uff0c\u6240\u4ee5\uff0c\u8ba1\u7b97\u673a\u4f1a\u628a 65 65 \u4f5c\u4e3aASCII\u7801\uff0c\u6765\u8f93\u51fa\u5176\u5bf9\u5e94\u7684\u5b57\u7b26\uff0c\u4e5f\u5c31\u662f\u2018A\u2019\uff0c\u8f93\u51fa\u3002 1 printf ( \"%d %c \\n \" , 'A' , 'A' ); %d\u662f\u628a'A'\u7684ASCII\u7801\u8f93\u51fa\uff0c%c\u5c31\u662f\u8f93\u51fa'A'\u672c\u8eab \u56e0\u4e3a'A'\u672c\u8eab\u5728\u5185\u5b58\u4e2d\u50a8\u5b58\u5f62\u5f0f\uff0c\u5176\u5b9e\u5c31\u662f \u6570\u503c \uff0c\u5373 65 65 \uff0c\u53ea\u662f\u6839\u636e\u8f93\u51fa\u65b9\u5f0f\u4e0d\u540c\uff0c\u800c\u91c7\u53d6\u4e0d\u540c\u7684\u8868\u73b0\u5f62\u5f0f\u3002 1 2 3 4 for ( int i = 0 ; i <= 25 ; ++ i ) printf ( \"%c \" , 'A' + i ); for ( int i = 0 ; i <= 25 ; ++ i ) printf ( \"%c \" , 'a' + i ); \u5229\u7528\u5b57\u6bcdASCII\u7801\u8fde\u7eed\u7684\u6027\u8d28\uff0c\u8f93\u51fa'A'\u5230'Z'\uff0c'a'\u5230'z'\u7684\u6240\u6709\u5b57\u6bcd\u3002 1 2 3 char x = '2' ; int t = x - '0' ; printf ( \"%d \\n \" , t ); \u901a\u8fc7\u51cf\u53bb' 0 0 '\uff0c\u5c31\u53ef\u4ee5\u5c06\u5b57\u7b26\u578b\u6570\u5b57\uff0c\u8f6c\u5316\u4e3a\u6570\u503c\u3002","title":"\u5177\u4f53\u5e94\u7528"},{"location":"c-basic/char/#_8","text":"\u5047\u5982\u6211\u4eec\u60f3\u8ba9\u8ba1\u7b97\u673a\u8f93\u51fa\u4e00\u4e2a\u7a7a\u683c\uff0c\u6216\u8005\u6362\u884c\uff0c\u600e\u4e48\u5b9e\u73b0\uff1f\u53c8\u6216\u8005\u8bf4\uff0c\u7a7a\u683c\u548c\u6362\u884c\uff0c\u5728\u8ba1\u7b97\u673a\u4e2d\u662f\u600e\u4e48\u4fdd\u5b58\u7684\uff1f \u8fd9\u5c31\u7528\u5230\u4e86\u8f6c\u4e49\u7b26\uff0c\u5728C++\u4e2d\uff0c\u5b83\u662f'\\'\u3002 \u6bd4\u5982: * \u7a7a\u683c: '\\0' * \u6362\u884c\u7b26'\\n' \u5f53\u8bfb\u5165\u5230'\\'\u65f6\uff0c\u8ba1\u7b97\u673a\u5c31\u4e0d\u4f1a\u8f93\u51fa'\\'\u4e86\uff0c\u800c\u662f\u4f1a\u518d\u8bfb\u53d6\u5b83\u540e\u9762\u4e00\u4f4d\uff0c\u4ee5\u6b64\u6765\u786e\u5b9a\u5185\u5bb9\u3002 \u90a3\u4e48\u600e\u4e48\u8f93\u51fa\u4e00\u4e2a'\\'\uff1f 1 printf ( \" \\\\ \" );","title":"\u8f6c\u4e49\u7b26"},{"location":"c-basic/char/#_9","text":"\u5982\u679c\u6211\u4eec\u9700\u8981\u50a8\u5b58\u4e00\u4e32\u5b57\u7b26\u7684\u8bdd\uff0c\u6bd4\u5982'ldstql'\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528 \u5b57\u7b26\u6570\u7ec4 \u3002","title":"\u5b57\u7b26\u6570\u7ec4"},{"location":"c-basic/char/#_10","text":"1 char s [ 10005 ]; \u4e4b\u540e\u7684\u5b9e\u4f8b\u4e2d\uff0c\u9ed8\u8ba4s\u6570\u7ec4\u5df2\u7ecf\u88ab\u58f0\u660e\u8fc7\u4e86\u3002","title":"\u5b9a\u4e49"},{"location":"c-basic/char/#_11","text":"1 scanf ( \"%s\" , s ); \u6ce8\u610f\uff0c\u4ec5\u5728\u8bfb\u5165\u5b57\u7b26\u4e32\uff0c\u5373'%s'\u65f6\uff0c\u4e0d\u9700\u8981\u5728\u53d8\u91cf\u524d\u52a0'&'\u3002","title":"\u8bfb\u5165"},{"location":"c-basic/char/#_12","text":"1 printf ( \"%s \\n \" , s );","title":"\u8f93\u51fa"},{"location":"c-basic/char/#_13","text":"1 scanf ( \"%s\" , s ); \u8fd9\u79cd\u65b9\u6cd5\u5c31\u662f\u5c06\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\u4eces[0]\u5f00\u59cb\uff0c\u4f9d\u6b21\u5f80\u540e\u590d\u5236\uff0c \u4e00\u76f4\u8bfb\u5165\u5230\u7a7a\u683c/\u6362\u884c\u7b26\u624d\u4f1a\u505c\u6b62 \u3002 \u6bd4\u5982\u4f60\u60f3\u8bfb\u5165\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u7528\u7a7a\u683c\u628a\u5b83\u4eec\u5206\u5272\uff0c\u90a3\u4e48\u5f53\u4f60\u6572\u4e0b\u7a7a\u683c\u65f6\uff0c\u8ba1\u7b97\u673a\u770b\u5230\u7684\u5176\u5b9e\u662f'\\0'\uff0c\u7136\u540e\u5b83\u5c31\u77e5\u9053\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7ed3\u675f\u4e86\u3002 \u987a\u5e26\u4e00\u63d0\uff0c\u5f53\u4f60\u5efa\u7acb\u4e00\u4e2achar\u6570\u7ec4\u65f6\uff0c\u5b83\u7684\u6bcf\u4e00\u4f4d\u9ed8\u8ba4\u4e3a\u662f'\\0'\u3002 \u5f53\u6211\u4eec\u7528\u4e0a\u8ff0\u65b9\u6cd5\u8bfb\u5165\u5b57\u7b26\u4e32'ldstql'\u65f6,\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f 1 2 s [ 0 ] = 'l' ; s [ 1 ] = 'd' ; s [ 2 ] = 's' ; s [ 3 ] = 't' , s [ 4 ] = 'q' , s [ 5 ] = 'l' ; \u90a3\u4e48\u5047\u5982\u6211\u4e60\u60ef\u6570\u7ec4\u4e0b\u6807\u662f\u4ece 1 1 \u5f00\u59cb\u7684\uff0c\u600e\u4e48\u6837\u624d\u80fd\u8bfb\u5165\u7684\u65f6\u5019\uff0cs[1]\u5f00\u59cb\u8d4b\u503c\u5462\uff1f \u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u6570\u7ec4\u540d\u540e\u52a0\u4e0a\u4f60\u60f3\u8981\u4ece\u7b2c\u51e0\u4f4d\u5f00\u59cb\u7684\u6570\u5b57\u5373\u53ef\u3002 1 scanf ( \"%s\" , s + 1 ); \u8fd9\u6837\u505a\uff0c\u5c31\u662f\u4ece\u7b2c 1 1 \u4f4d\u5f00\u59cb\u8bfb\u5165\u3002 1 2 s [ 1 ] = 'l' ; s [ 2 ] = 'd' ; s [ 3 ] = 's' ; s [ 4 ] = 't' , s [ 5 ] = 'q' , s [ 6 ] = 'l' ;","title":"\u8bfb\u5165"},{"location":"c-basic/char/#_14","text":"","title":"\u8f93\u51fa"},{"location":"c-basic/char/#_15","text":"1 printf ( \"%s \\n \" , s ); \u5b83\u7684\u8f93\u51fa\u89c4\u5219\u662f\u548c\u8bfb\u5165\u4e00\u6837\u7684\uff0c\u4ece\u7b2c 0 0 \u4f4d\u5f00\u59cb\u4f9d\u6b21\u5f80\u540e\u8f93\u51fa\uff0c \u4e00\u76f4\u8bfb\u5165\u5230\u7a7a\u683c/\u6362\u884c\u7b26\u624d\u4f1a\u505c\u6b62 \u3002 \u6ce8\u610f\uff01\uff01\uff01\uff01 \u4e0a\u8ff0\u89c4\u5219\u610f\u5473\u7740\uff0c \u5f53\u4f60\u8bfb\u5165\u65f6\uff0c\u5982\u679c\u662f\u4ece\u7b2c\u4e00\u4f4d\u8bfb\u5165\u7684\u8bdd\uff0c\u90a3\u4e48\u8f93\u51fa\u7684\u65f6\u5019\uff0c\u4e5f\u8981\u4ece\u7b2c\u4e00\u4f4d\u5f00\u59cb \uff0c\u56e0\u4e3a\u7b2c 0 0 \u4f4d\u662f\u7a7a\u683c\uff0c\u5373'\\0',\u6240\u4ee5\u5047\u5982\u8fd8\u662f\u4ece\u7b2c 0 0 \u4f4d\u8f93\u51fa\u7684\u8bdd\uff0c\u90a3\u4e48\u5b83\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u8f93\u51fa\u3002 1 printf ( \"%s\" , s + 1 ); // \u4ece\u7b2c$1\u4f4d\u5f00\u59cb\u8f93\u51fa\u3002","title":"\u8f93\u51fa\u6574\u4e2a\u5b57\u7b26\u4e32"},{"location":"c-basic/char/#_16","text":"s[i]\u53ef\u4ee5\u8bbf\u95ee\u5b57\u7b26\u4e32\u4e2d\u7b2c i i \u4e2a\u5b57\u7b26\uff0c\u6b64\u65f6\u53ef\u4ee5\u628a\u5b83\u5f53\u4f5c\u5b57\u7b26\u5904\u7406\u3002 1 s [ 1 ] = 'l' ; s [ 2 ] = 'd' ; s [ 3 ] = 's' \u540c\u6837\u7684\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167 \u5355\u4e2a\u5b57\u7b26\u7684\u5f62\u5f0f\u8f93\u51fa 1 printf ( \"%c\" , s [ 1 ]);","title":"\u5b57\u7b26\u4e32\u4e2d\u5355\u4e2a\u5b57\u7b26"},{"location":"c-basic/char/#cstring","text":"C++\u4e2d\u6709\u4e00\u4e2a\u4e13\u95e8\u7528\u6765\u5e2e\u52a9\u6211\u4eec\u5904\u7406\u5b57\u7b26\u4e32\u7684\u5e93\uff0c\u5b83\u5c31\u53eb 1 #include <cstring> \u91cc\u9762\u63d0\u4f9b\u4e86\u5f88\u591a\u7c7b\u3001\u51fd\u6570\u53ef\u4f9b\u6211\u4eec\u4f7f\u7528 \u6ce8\u610f \u5f53\u4f60\u4f7f\u7528\u5e93\u4e2d\u5185\u5bb9\u65f6\uff0c\u5fc5\u987b\u8981include \u8fd9\u4e2a\u5e93\u3002","title":"cstring\u5e93"},{"location":"c-basic/char/#strlen","text":"strlen()\u8fd9\u4e2a\u51fd\u6570\uff0c\u4f1a\u8fd4\u56de\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 1 int n = strlen ( s ); \u5b83\u7684\u904d\u5386\u5b57\u7b26\u4e32\u65b9\u5f0f\uff0c\u548cscanf/printf\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u5982\u679c\u5b57\u7b26\u4e32\u662f\u4ece\u7b2c\u4e00\u4f4d\u8bfb\u5165\u7684\u8bdd\uff0c\u90a3\u4e48\u5982\u679c\u60f3\u8981\u5f97\u5230\u6b63\u786e\u7ed3\u679c\uff0c\u4e5f\u5fc5\u987b\u628a\u7b2c\u4e00\u4f4d\u4f20\u5165\u8fdb\u53bb\u3002 1 int n = strlen ( s + 1 ); \u6211\u4eec\u4ee5\u540e\u8bfb\u5165\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u5feb\u901f\u83b7\u53d6\u5b83\u7684\u957f\u5ea6\u4e86\u3002 1 2 3 4 scanf ( \"%s\" , s + 1 ); int n = strlen ( s + 1 ); for ( int i = 1 ; i <= n ; i ++ ) printf ( \"%c \" , s [ i ]);","title":"strlen()"},{"location":"c-basic/char/#strcpy","text":"strcpy(x, y)\u7684\u4f5c\u7528\u662f\u628ay\u5b57\u7b26\u4e32\u62f7\u8d1d\u7ed9x 1 2 3 char s1 [ 21 ], s2 [ 21 ]; scanf ( \"%s\" , s1 ); strcmp ( s2 , s1 ); \u540c\u6837\u7684\uff0c\u5b83\u7684\u904d\u5386\u6570\u7ec4\u65b9\u5f0f\u4e0estrlen\u4e00\u6837\u3002 \u6240\u4ee5\u5982\u679c\u662f\u4ece\u7b2c\u4e00\u4f4d\u5f00\u59cb\u8bfb\u5165\u7684\uff0c\u590d\u5236\u7684\u65f6\u5019\u4e5f\u8981\u4ece\u7b2c\u4e00\u4f4d 1 2 3 4 char s1 [ 21 ], s2 [ 21 ]; scanf ( \"%s\" , s1 + 1 ); strcmp ( s2 , s1 + 1 ); //\u4eces2\u7684\u7b2c0\u4f4d\u5f00\u59cb\u7c98\u8d34 strcmp ( s2 + 1 , s1 + 1 ) //\u4eces2\u7684\u7b2c1\u4f4d\u5f00\u59cb\u7c98\u8d34","title":"strcpy()"},{"location":"c-basic/char/#string","text":"cstring\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\uff08\u73b0\u5728\u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e2a\u53c8\u7279\u6b8a\u529f\u80fd\u7684\u53d8\u91cf\uff09\uff0c\u53eb\u505a string\uff0c \u5b83\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002","title":"string"},{"location":"c-basic/char/#_17","text":"1 string s ;","title":"\u58f0\u660e"},{"location":"c-basic/char/#_18","text":"1 cin >> s ; string\u7c7b\u578b\u53d8\u91cf\u53ea\u80fd\u7528cin\u6765\u8fdb\u884c\u8bfb\u5165\uff0c\u4e0d\u80fd\u4f7f\u7528scanf\uff0c\u4e14\u53ea\u80fd\u4ece\u7b2c 0 0 \u4f4d\u5f00\u59cb\u8bfb\u5165\u3002 string\u662f\u4e0d\u9700\u8981\u58f0\u660e\u5927\u5c0f\u7684\uff0c\u5b83\u662f\u2018\u52a8\u6001\u2019\u7684\uff0c\u5373\u4f1a\u6839\u636e\u8f93\u5165\u7684\u5185\u5bb9\u81ea\u5df1\u63a7\u5236\u5927\u5c0f\u3002 string\u5176\u4f59\u90e8\u5206\uff0c\u4e0echar\u6570\u7ec4\u4e00\u81f4\u3002 1 2 cin >> s [ 1 ]; //\u8bfb\u5165\u7b2c$1$\u4f4d cout << s [ 1 ]; //\u7136\u540e\u8f93\u51fa string\u8fd8\u81ea\u5e26\u5f88\u591a\u529f\u80fd\u3002 1 2 3 4 int n = s . length () // \u8fd4\u56des\u7684\u5b57\u7b26\u4e32\u957f\u5ea6 for ( int i = 0 ; i < s . length (); ++ i ) // \u8fd9\u6837\u904d\u5386s cout << s [ i ] << \" \" ; s . clear () // \u6e05\u9664s\u5185\u7684\u6240\u6709\u5185\u5bb9 \u4e24\u4e2astring\u7c7b\u578b\u4e4b\u95f4\u53ef\u4ee5\u76f4\u63a5\u76f8\u52a0\uff0c\u76f8\u5f53\u4e8e \u628a\u540e\u9762string\u7684\u52a0\u5230\u524d\u9762string \u7684\u540e\u9762\u3002 1 2 string a = \"lds\" , b = \"tql\" ; cout << a + b << endl ; \u4f46\u662f\uff0cstring\u7c7b\u578b\u4e4b\u95f4\u662f\u6ca1\u6709\u51cf\u6cd5\u8fd0\u7b97\u7684 : (","title":"\u8bfb\u5165"},{"location":"c-basic/char/#_19","text":"\u4e0d\u7ba1\u662fstring\uff0c\u8fd8\u662fchar\u6570\u7ec4\uff0c\u5f53\u4f60\u5bf9\u6574\u4e2a\u6570\u7ec4\u8fdb\u884c\u8bfb\u5165\u65f6\uff0c\u4f1a\u76f4\u63a5\u8986\u76d6\u6389\u4e4b\u524d\u7684 \u6240\u6709\u5b57\u7b26 \uff0c\u54ea\u6015\u4e4b\u524d\u5b57\u7b26\u4e32\u957f\u5ea6\u662f114514\uff0c\u4f60\u5bf9 \u6574\u4e2a\u5b57\u7b26\u4e32 \u8f93\u5165\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u90a3\u5c31\u4f1a\u6e05\u9664\u6389\u4e4b\u524d\u6240\u6709\u7684\u5b57\u7b26\u3002\u4f46\u5982\u679c\u4f60\u5bf9\u5355\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u8bfb\u5165\uff0c\u90a3\u4e48\u662f\u4e0d\u4f1a\u8986\u76d6\u6389\u5176\u4f59\u90e8\u5206\u7684\u3002 1 2 3 4 5 6 7 8 9 10 char f [ 10005 ]; string s ; cin >> s ; //\u7b2c\u4e00\u6b21\u8bfb\u5165 cin >> s ; //\u4f1a\u8986\u76d6\u6389\u6240\u6709\u7b2c\u4e00\u6b21\u8bfb\u5165\u7684\u5185\u5bb9 cin >> s [ 0 ] >> s [ 1 ] >> s [ 2 ]; //\u53ea\u4f1a\u8986\u76d6\u63890,1,2\u8fd9\u4e09\u4e2a\u4f4d\u7f6e cin >> f ; //\u7b2c\u4e00\u6b21\u8bfb\u5165 cin >> f ; //\u4f1a\u8986\u76d6\u6389\u6240\u6709\u7b2c\u4e00\u6b21\u8bfb\u5165\u7684\u5185\u5bb9 cin >> f [ 0 ] >> f [ 1 ] >> f [ 2 ]; //\u53ea\u4f1a\u8986\u76d6\u63890,1,2\u8fd9\u4e09\u4e2a\u4f4d\u7f6e","title":"\u4e00\u4e9b\u7ec6\u8282"},{"location":"c-basic/char/#string_1","text":"string \u4e5f\u662f\u53ef\u4ee5\u5f00\u6210\u6570\u7ec4\u5f62\u5f0f\u7684\u3002 1 2 3 4 5 6 string s [ 10 ]; // \u58f0\u660e10\u4e2astring\u7c7b\u578b\u7684\u6570\u7ec4 cin >> s [ 0 ] //\u5411\u7b2c0\u4e2astring\u4e2d\u8fdb\u884c\u8bfb\u5165 cout << s [ 0 ][ 0 ] // \u8f93\u51fa\u7b2c0\u4e2astring\u7684\u7b2c0\u4e2a\u5b57\u7b26 int n = s [ 0 ]. length () //\u83b7\u5f97\u7b2c0\u4e2astring\u7684\u957f\u5ea6 for ( int i = 0 ; i < s [ 0 ]. length (); i ++ ) //\u904d\u5386\u8fd9\u4e2a\u7b2c0\u4e2astring cout << s [ 0 ][ i ] << \"0\" ;","title":"string\u6570\u7ec4"},{"location":"c-basic/char/#_20","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u5224\u65ad\u5b83\u662f\u5426\u4e3a\u56de\u6587\u4e32\u3002 \u56de\u6587\u4e32\u7684\u5b9a\u4e49\u4e3a:\u8fd9\u4e2a\u5b57\u7b26\u4e32 \u4ece\u5de6\u5f80\u53f3\u8bfb\u548c\u4ece\u53f3\u5f80\u5de6\u7740\u8bfb\u662f\u4e00\u6837\u7684 \uff0c\u6bd4\u5982'cucuc'\u662f\u56de\u6587\u4e32\uff0c\u800c'niconiconi'\u5c31\u4e0d\u662f\u56de\u6587\u4e32\u3002","title":"\u4f8b\u9898 \u5224\u65ad\u56de\u6587\u4e32"},{"location":"c-basic/char/#_21","text":"\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5047\u5982\u5b83\u7684\u957f\u5ea6\u4e3a n n \uff0c\u6211\u4eec\u4ece\u7b2c 1 1 \u4f4d\u5f00\u59cb\u8bfb\u5165,\u90a3\u4e48\u6211\u4eec\u600e\u4e48\u77e5\u9053\u4e0e\u5b83\u5bf9\u5e94\u7684\u5b57\u7b26\u5462\uff1f \u6bd4\u5982\u7b2c i i \u4f4d\uff0c\u4e0e\u4e4b\u5bf9\u5e94\u7684\u5c31\u662f n - i + 1 n - i + 1 1 2 3 4 5 6 7 bool succ = true ; for ( int i = 1 ; i < ( n / 2 ); ++ i ) { if ( s [ i ] != s [ n - i + 1 ]) { succ = false ; break ; //\u65e2\u7136\u5df2\u7ecf\u5bf9\u5e94\u4e0d\u4e0a\u4e86\uff0c\u90a3\u4e48\u5b83\u80af\u5b9a\u4e0d\u662f\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u7ee7\u7eed\u5224\u65ad\u7684\u5fc5\u8981\u4e86 } }","title":"\u63d0\u793a"},{"location":"c-basic/function/","text":"\u51fd\u6570 \u00b6 Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u5b9a\u4e49 \u00b6 1 2 3 4 5 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u65701\u7c7b\u578b \u53c2\u65701\u540d\u79f0, \u53c2\u65702\u7c7b\u578b \u53c2\u65702\u540d\u79f0\u2026\u2026) { \u8bed\u53e5\u7ec4(\u51fd\u6570\u4f53); \u8fd4\u56de\u503c; } * \u51fd\u6570\u4e0d\u5141\u8bb8\u5d4c\u5957\u5b9a\u4e49 \uff0c\u4f46\u662f\u5141\u8bb8\u5d4c\u5957\u4f7f\u7528\u3002 1 2 3 4 5 6 int sum ( int a , int b ) { int ans = 0 ; ans = a + b ; return ans ; } * \u4e00\u65e6\u4f7f\u7528\u5934\u6587\u4ef6\u540e\u4e0d\u53ef\u4ee5\u5b9a\u4e49\u5e93\u51fd\u6570\uff0c\u6bd4\u5982\uff0c\u4f7f\u7528 <stdio.h> \u540e\u4e0d\u80fd\u518d\u81ea\u5df1\u5b9a\u4e49 printf \u51fd\u6570\u3002\u539f\u5219\u4e0a\uff0c\u5e73\u5e38\u5b9a\u4e49\u51fd\u6570\u65f6\u4e5f\u5e94\u5c3d\u91cf\u907f\u514d\u4e0e\u5e93\u51fd\u6570\u91cd\u540d\u3002 \u8c03\u7528 \u00b6 \u8c03\u7528\u51fd\u6570\uff1a \u51fd\u6570\u540d\uff08\u53c2\u65701, \u53c2\u65702\uff0c\u2026\u2026\uff09 \u5bf9\u51fd\u6570\u7684\u8c03\u7528\uff0c\u4e5f\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u51fd\u6570\u8c03\u7528\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u7531\u51fd\u6570\u5185\u90e8\u7684 return \u8bed\u53e5\u51b3\u5b9a\u3002 printf \u4e5f\u662f\u51fd\u6570\uff0c\u5b83\u7684\u58f0\u660e\u5728 <stdio.h> \u5934\u6587\u4ef6\u91cc\u3002 Q: \u4e3a\u4ec0\u4e48\u5927\u4fa0\u4eec\u4f7f\u7528\u7edd\u62db\u65f6\u90fd\u8981\u5148\u558a\u4e00\u58f0\u201c\u964d\u9f99\u5341\u516b\u638c\u201d\u4e4b\u7c7b\u7684\uff1f A: \u56e0\u4e3a \u51fd\u6570\u8c03\u7528\u4e4b\u524d\u8981\u5148\u58f0\u660e \u3002 1 2 3 4 5 6 7 8 9 10 11 #include <stdio.h> int sum ( int a , int b ); //\u58f0\u660e int main () { int a = 1 , b = 2 ; printf ( \"%d \\n \" , sum ( a , b )); } int sum ( int a , int b ) { return a + b ; } \u8fd4\u56de\u503c \u00b6 return\u8bed\u53e5\u8bed\u6cd5\u4e3a\uff1a return \u8fd4\u56de\u503c\uff1b return\u8bed\u53e5\u7684\u529f\u80fd\u662f \u7ed3\u675f\u51fd\u6570\u7684\u6267\u884c\uff0c\u5e76\u5c06\u201c\u8fd4\u56de\u503c\u201d\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de \u3002\u8fd4\u56de\u503c\u662f\u5e38\u91cf\u3001\u53d8\u91cf\u6216\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u5747\u53ef\u3002 \u5982\u679c\u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \uff0creturn\u8bed\u53e5\u5c31\u76f4\u63a5\u5199 return ; 1 2 3 4 5 6 7 8 9 10 11 12 13 int a [] = { 1 , 1 , 2 , 3 , 5 , 8 , 13 }; void show ( int n ) { for ( int i = 0 ; i < n ; i ++ ) printf ( \"%d \" , a [ i ]); return ; } int Max ( int x , int y ) // \u6c42\u4e24\u4e2a\u6574\u578b\u53d8\u91cf\u4e2d\u7684\u8f83\u5927\u503c { if ( x > y ) return x ; return y ; // \u9664void\u5916\u51fd\u6570\u4e00\u5b9a\u8981\u6709\u8fd4\u56de\uff0c\u8fd4\u56de\u610f\u5473\u7740\u51fd\u6570\u7ed3\u675f } \u5168\u5c40\u53d8\u91cf\u4e0e\u5c40\u90e8\u53d8\u91cf \u00b6 \u5728\u51fd\u6570\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u79f0\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u79f0\u4e3a\u5c40\u90e8\u53d8\u91cf\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <stdio.h> int a [ 105 ]; //\u6570\u7ec4a-\u5168\u5c40 int n ; //n-\u5168\u5c40 int muln ( int x ) //x-\u5c40\u90e8 { int t ; //t-\u5c40\u90e8 t = x * n ; return t ; } int main () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ) //i-\u5c40\u90e8 scanf ( \"%d\" , & a [ i ]); } \u5168\u5c40\u53d8\u91cf \u00b6 \u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u4ece\u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e\u5f00\u59cb\u5230\u6587\u4ef6\u7ed3\u675f\uff0c\u53ef\u4ee5\u5728\u6587\u4ef6\u4e2d\u4f4d\u4e8e\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u540e\u9762\u7684\u4efb\u4f55\u51fd\u6570\u4e2d\u4f7f\u7528\u3002 \u8fc7\u591a\u5730\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\uff0c\u4f1a\u589e\u52a0\u8c03\u8bd5\u96be\u5ea6\u3002\u56e0\u4e3a\u591a\u4e2a\u51fd\u6570\u90fd\u80fd\u6539\u53d8\u5168\u5c40\u53d8\u91cf\u7684\u503c\u3002 \u5168\u5c40\u53d8\u91cf\u5728\u5b9a\u4e49\u65f6\u9ed8\u8ba4\u521d\u503c\u4e3a0\u3002 \u5c40\u90e8\u53d8\u91cf \u00b6 \u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u5728\u5b9a\u4e49\u8be5\u53d8\u91cf\u7684\u51fd\u6570\u5185\u90e8\uff0c\u5c40\u90e8\u53d8\u91cf\u53ea\u5728\u5b9a\u4e49\u5b83\u7684\u51fd\u6570\u5185\u6709\u6548\u3002 \u5728\u4e0d\u540c\u7684\u51fd\u6570\u4e2d\u5c40\u90e8\u53d8\u91cf\u540d\u53ef\u4ee5\u76f8\u540c\u3002 \u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u548c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u662f\u53ef\u4ee5\u91cd\u540d\u7684\uff0c\u5728\u76f8\u540c\u7684\u4f5c\u7528\u57df\u5185\u5c40\u90e8\u53d8\u91cf\u6709\u6548\u3002\u4f46\u6613\u51fa\u9519\uff01\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u3002 \u5728\u4ee3\u7801\u5757\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u7684\u5b58\u5728\u65f6\u95f4\u548c\u4f5c\u7528\u57df\u5c06\u88ab\u9650\u5236\u5728\u8be5\u4ee3\u7801\u5757\u4e2d\u3002\u5982 for(int i; i<=n; i++) sum += i; \u4e2d\u7684 i \u662f\u5728\u8be5 for \u5faa\u73af\u8bed\u53e5\u4e2d\u5b9a\u4e49\u7684\uff0c\u5b58\u5728\u65f6\u95f4\u548c\u4f5c\u7528\u57df\u53ea\u80fd\u88ab\u9650\u5236\u5728\u8be5for\u5faa\u73af\u8bed\u53e5\u4e2d\u3002 \u5c40\u90e8\u53d8\u91cf\u503c\u662f\u968f\u673a\u7684\uff0c\u8981 \u521d\u59cb\u5316\u521d\u503c \u3002 \u5c40\u90e8\u53d8\u91cf\u53d7\u6808\u7a7a\u95f4\u5927\u5c0f\u9650\u5236\uff0c\u5927\u6570\u7ec4\u9700\u8981\u6ce8\u610f\u3002\u901a\u4fd7\u5730\u8bf4\uff0cmain\u51fd\u6570\u91cc\u6570\u7ec4\u4e0d\u80fd\u5f00\u5f88\u5927\uff08\u5341\u4e07\u7ea7\u522b\uff09\u3002 \u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012 \u00b6 \u539f\u5219\uff1a \u7528\u4ec0\u4e48\u4f20\u4ec0\u4e48 1 2 3 4 5 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u65701\u7c7b\u578b \u53c2\u65701\u540d\u79f0, \u53c2\u65702\u7c7b\u578b \u53c2\u65702\u540d\u79f0\u2026\u2026) { \u51fd\u6570\u4f53; \u8fd4\u56de\u503c; } \u6574\u578b/\u5b9e\u578b\u53d8\u91cf\u4f5c\u51fd\u6570\u53c2\u6570 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 double dis ( double x1 , double y1 , double x2 , double y2 ) { return sqrt (( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 )); } int fun ( double x ) { return x ; //double -> int \u7c7b\u578b\u8f6c\u6362 } int Max ( int a , int b ) { return a > b ? a : b ; } \u4e00\u7ef4\u6570\u7ec4\u4f5c\u51fd\u6570\u53c2\u6570 \u00b6 \u5199\u6cd5\u5982\u4e0b\uff1a \u51fd\u6570\u7c7b\u578b \u51fd\u6570\u540d(\u6570\u7ec4\u7c7b\u578b\u540d \u6570\u7ec4\u540d[]) \u4e0d\u7528\u5199\u51fa\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 void PrintArray ( int a []) { ... } int b [] = { 1 , 2 , 3 }; int main () { PrintArray ( b ); //\u8c03\u7528\u65f6\u53ea\u7528\u5199\u6570\u7ec4\u540d } \u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u65f6\u662f\u4f20\u5740\u5f15\u7528\u7684\uff0c\u5373\u5f62\u53c2\u6570\u7ec4\u6539\u53d8\u4e86\uff0c\u5b9e\u53c2\u6570\u7ec4\u4e5f\u4f1a\u6539\u53d8\u3002 \u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570 \u00b6 \u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u5f62\u53c2\u65f6\uff0c\u5fc5\u987b\u5199\u660e\u6570\u7ec4\u6709\u591a\u5c11\u5217\uff0c\u4e0d\u7528\u5199\u660e\u6709\u591a\u5c11\u884c\u3002 1 2 3 4 void PrintArray ( int a [][ 5 ]) { printf ( \"%d\" , a [ 4 ][ 3 ]); }","title":"\u51fd\u6570"},{"location":"c-basic/function/#_1","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002","title":"\u51fd\u6570"},{"location":"c-basic/function/#_2","text":"1 2 3 4 5 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u65701\u7c7b\u578b \u53c2\u65701\u540d\u79f0, \u53c2\u65702\u7c7b\u578b \u53c2\u65702\u540d\u79f0\u2026\u2026) { \u8bed\u53e5\u7ec4(\u51fd\u6570\u4f53); \u8fd4\u56de\u503c; } * \u51fd\u6570\u4e0d\u5141\u8bb8\u5d4c\u5957\u5b9a\u4e49 \uff0c\u4f46\u662f\u5141\u8bb8\u5d4c\u5957\u4f7f\u7528\u3002 1 2 3 4 5 6 int sum ( int a , int b ) { int ans = 0 ; ans = a + b ; return ans ; } * \u4e00\u65e6\u4f7f\u7528\u5934\u6587\u4ef6\u540e\u4e0d\u53ef\u4ee5\u5b9a\u4e49\u5e93\u51fd\u6570\uff0c\u6bd4\u5982\uff0c\u4f7f\u7528 <stdio.h> \u540e\u4e0d\u80fd\u518d\u81ea\u5df1\u5b9a\u4e49 printf \u51fd\u6570\u3002\u539f\u5219\u4e0a\uff0c\u5e73\u5e38\u5b9a\u4e49\u51fd\u6570\u65f6\u4e5f\u5e94\u5c3d\u91cf\u907f\u514d\u4e0e\u5e93\u51fd\u6570\u91cd\u540d\u3002","title":"\u5b9a\u4e49"},{"location":"c-basic/function/#_3","text":"\u8c03\u7528\u51fd\u6570\uff1a \u51fd\u6570\u540d\uff08\u53c2\u65701, \u53c2\u65702\uff0c\u2026\u2026\uff09 \u5bf9\u51fd\u6570\u7684\u8c03\u7528\uff0c\u4e5f\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u51fd\u6570\u8c03\u7528\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u7531\u51fd\u6570\u5185\u90e8\u7684 return \u8bed\u53e5\u51b3\u5b9a\u3002 printf \u4e5f\u662f\u51fd\u6570\uff0c\u5b83\u7684\u58f0\u660e\u5728 <stdio.h> \u5934\u6587\u4ef6\u91cc\u3002 Q: \u4e3a\u4ec0\u4e48\u5927\u4fa0\u4eec\u4f7f\u7528\u7edd\u62db\u65f6\u90fd\u8981\u5148\u558a\u4e00\u58f0\u201c\u964d\u9f99\u5341\u516b\u638c\u201d\u4e4b\u7c7b\u7684\uff1f A: \u56e0\u4e3a \u51fd\u6570\u8c03\u7528\u4e4b\u524d\u8981\u5148\u58f0\u660e \u3002 1 2 3 4 5 6 7 8 9 10 11 #include <stdio.h> int sum ( int a , int b ); //\u58f0\u660e int main () { int a = 1 , b = 2 ; printf ( \"%d \\n \" , sum ( a , b )); } int sum ( int a , int b ) { return a + b ; }","title":"\u8c03\u7528"},{"location":"c-basic/function/#_4","text":"return\u8bed\u53e5\u8bed\u6cd5\u4e3a\uff1a return \u8fd4\u56de\u503c\uff1b return\u8bed\u53e5\u7684\u529f\u80fd\u662f \u7ed3\u675f\u51fd\u6570\u7684\u6267\u884c\uff0c\u5e76\u5c06\u201c\u8fd4\u56de\u503c\u201d\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de \u3002\u8fd4\u56de\u503c\u662f\u5e38\u91cf\u3001\u53d8\u91cf\u6216\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u5747\u53ef\u3002 \u5982\u679c\u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a void \uff0creturn\u8bed\u53e5\u5c31\u76f4\u63a5\u5199 return ; 1 2 3 4 5 6 7 8 9 10 11 12 13 int a [] = { 1 , 1 , 2 , 3 , 5 , 8 , 13 }; void show ( int n ) { for ( int i = 0 ; i < n ; i ++ ) printf ( \"%d \" , a [ i ]); return ; } int Max ( int x , int y ) // \u6c42\u4e24\u4e2a\u6574\u578b\u53d8\u91cf\u4e2d\u7684\u8f83\u5927\u503c { if ( x > y ) return x ; return y ; // \u9664void\u5916\u51fd\u6570\u4e00\u5b9a\u8981\u6709\u8fd4\u56de\uff0c\u8fd4\u56de\u610f\u5473\u7740\u51fd\u6570\u7ed3\u675f }","title":"\u8fd4\u56de\u503c"},{"location":"c-basic/function/#_5","text":"\u5728\u51fd\u6570\u5916\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u79f0\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u5728\u51fd\u6570\u5185\u90e8\u5b9a\u4e49\u7684\u53d8\u91cf\u79f0\u4e3a\u5c40\u90e8\u53d8\u91cf\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <stdio.h> int a [ 105 ]; //\u6570\u7ec4a-\u5168\u5c40 int n ; //n-\u5168\u5c40 int muln ( int x ) //x-\u5c40\u90e8 { int t ; //t-\u5c40\u90e8 t = x * n ; return t ; } int main () { scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ) //i-\u5c40\u90e8 scanf ( \"%d\" , & a [ i ]); }","title":"\u5168\u5c40\u53d8\u91cf\u4e0e\u5c40\u90e8\u53d8\u91cf"},{"location":"c-basic/function/#_6","text":"\u5168\u5c40\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u4ece\u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e\u5f00\u59cb\u5230\u6587\u4ef6\u7ed3\u675f\uff0c\u53ef\u4ee5\u5728\u6587\u4ef6\u4e2d\u4f4d\u4e8e\u5168\u5c40\u53d8\u91cf\u5b9a\u4e49\u540e\u9762\u7684\u4efb\u4f55\u51fd\u6570\u4e2d\u4f7f\u7528\u3002 \u8fc7\u591a\u5730\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\uff0c\u4f1a\u589e\u52a0\u8c03\u8bd5\u96be\u5ea6\u3002\u56e0\u4e3a\u591a\u4e2a\u51fd\u6570\u90fd\u80fd\u6539\u53d8\u5168\u5c40\u53d8\u91cf\u7684\u503c\u3002 \u5168\u5c40\u53d8\u91cf\u5728\u5b9a\u4e49\u65f6\u9ed8\u8ba4\u521d\u503c\u4e3a0\u3002","title":"\u5168\u5c40\u53d8\u91cf"},{"location":"c-basic/function/#_7","text":"\u5c40\u90e8\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u662f\u5728\u5b9a\u4e49\u8be5\u53d8\u91cf\u7684\u51fd\u6570\u5185\u90e8\uff0c\u5c40\u90e8\u53d8\u91cf\u53ea\u5728\u5b9a\u4e49\u5b83\u7684\u51fd\u6570\u5185\u6709\u6548\u3002 \u5728\u4e0d\u540c\u7684\u51fd\u6570\u4e2d\u5c40\u90e8\u53d8\u91cf\u540d\u53ef\u4ee5\u76f8\u540c\u3002 \u4e00\u4e2a\u5c40\u90e8\u53d8\u91cf\u548c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u662f\u53ef\u4ee5\u91cd\u540d\u7684\uff0c\u5728\u76f8\u540c\u7684\u4f5c\u7528\u57df\u5185\u5c40\u90e8\u53d8\u91cf\u6709\u6548\u3002\u4f46\u6613\u51fa\u9519\uff01\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u3002 \u5728\u4ee3\u7801\u5757\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u7684\u5b58\u5728\u65f6\u95f4\u548c\u4f5c\u7528\u57df\u5c06\u88ab\u9650\u5236\u5728\u8be5\u4ee3\u7801\u5757\u4e2d\u3002\u5982 for(int i; i<=n; i++) sum += i; \u4e2d\u7684 i \u662f\u5728\u8be5 for \u5faa\u73af\u8bed\u53e5\u4e2d\u5b9a\u4e49\u7684\uff0c\u5b58\u5728\u65f6\u95f4\u548c\u4f5c\u7528\u57df\u53ea\u80fd\u88ab\u9650\u5236\u5728\u8be5for\u5faa\u73af\u8bed\u53e5\u4e2d\u3002 \u5c40\u90e8\u53d8\u91cf\u503c\u662f\u968f\u673a\u7684\uff0c\u8981 \u521d\u59cb\u5316\u521d\u503c \u3002 \u5c40\u90e8\u53d8\u91cf\u53d7\u6808\u7a7a\u95f4\u5927\u5c0f\u9650\u5236\uff0c\u5927\u6570\u7ec4\u9700\u8981\u6ce8\u610f\u3002\u901a\u4fd7\u5730\u8bf4\uff0cmain\u51fd\u6570\u91cc\u6570\u7ec4\u4e0d\u80fd\u5f00\u5f88\u5927\uff08\u5341\u4e07\u7ea7\u522b\uff09\u3002","title":"\u5c40\u90e8\u53d8\u91cf"},{"location":"c-basic/function/#_8","text":"\u539f\u5219\uff1a \u7528\u4ec0\u4e48\u4f20\u4ec0\u4e48 1 2 3 4 5 \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d(\u53c2\u65701\u7c7b\u578b \u53c2\u65701\u540d\u79f0, \u53c2\u65702\u7c7b\u578b \u53c2\u65702\u540d\u79f0\u2026\u2026) { \u51fd\u6570\u4f53; \u8fd4\u56de\u503c; }","title":"\u51fd\u6570\u53c2\u6570\u7684\u4f20\u9012"},{"location":"c-basic/function/#_9","text":"1 2 3 4 5 6 7 8 9 10 11 12 double dis ( double x1 , double y1 , double x2 , double y2 ) { return sqrt (( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 )); } int fun ( double x ) { return x ; //double -> int \u7c7b\u578b\u8f6c\u6362 } int Max ( int a , int b ) { return a > b ? a : b ; }","title":"\u6574\u578b/\u5b9e\u578b\u53d8\u91cf\u4f5c\u51fd\u6570\u53c2\u6570"},{"location":"c-basic/function/#_10","text":"\u5199\u6cd5\u5982\u4e0b\uff1a \u51fd\u6570\u7c7b\u578b \u51fd\u6570\u540d(\u6570\u7ec4\u7c7b\u578b\u540d \u6570\u7ec4\u540d[]) \u4e0d\u7528\u5199\u51fa\u6570\u7ec4\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 void PrintArray ( int a []) { ... } int b [] = { 1 , 2 , 3 }; int main () { PrintArray ( b ); //\u8c03\u7528\u65f6\u53ea\u7528\u5199\u6570\u7ec4\u540d } \u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u65f6\u662f\u4f20\u5740\u5f15\u7528\u7684\uff0c\u5373\u5f62\u53c2\u6570\u7ec4\u6539\u53d8\u4e86\uff0c\u5b9e\u53c2\u6570\u7ec4\u4e5f\u4f1a\u6539\u53d8\u3002","title":"\u4e00\u7ef4\u6570\u7ec4\u4f5c\u51fd\u6570\u53c2\u6570"},{"location":"c-basic/function/#_11","text":"\u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u5f62\u53c2\u65f6\uff0c\u5fc5\u987b\u5199\u660e\u6570\u7ec4\u6709\u591a\u5c11\u5217\uff0c\u4e0d\u7528\u5199\u660e\u6709\u591a\u5c11\u884c\u3002 1 2 3 4 void PrintArray ( int a [][ 5 ]) { printf ( \"%d\" , a [ 4 ][ 3 ]); }","title":"\u4e8c\u7ef4\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570"},{"location":"c-basic/grammar/","text":"\u8bed\u6cd5\u57fa\u7840 \u00b6 Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u7406\u8bba\u77e5\u8bc6 \u00b6 C\u8bed\u8a00\u4e66\u5199\u683c\u5f0f\u662f\u81ea\u7531\u7684\uff0c\u6bcf\u884c\u53ef\u4ee5\u5199\u591a\u4e2a\u8bed\u53e5\uff0c\u53ef\u4ee5\u5199\u591a\u884c\u3002 \u4e00\u4e2aC\u8bed\u8a00\u7a0b\u5e8f\u6709\u4e14\u53ea\u6709\u4e00\u4e2amain\u51fd\u6570\uff0c\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u8d77\u70b9\u3002 \u6bcf\u4e2aC\u8bed\u8a00\u7a0b\u5e8f\u5199\u5b8c\u540e\uff0c\u90fd\u662f\u5148\u7f16\u8bd1\uff0c\u540e\u94fe\u63a5\uff0c\u6700\u540e\u8fd0\u884c\u3002\uff08.c->.obj->.exe\uff09\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6ce8\u610f.c\u548c.obj\u6587\u4ef6\u65f6\u65e0\u6cd5\u8fd0\u884c\u7684\uff0c\u53ea\u6709.exe\u6587\u4ef6\u624d\u53ef\u4ee5\u8fd0\u884c\u3002 C\u9762\u5411\u8fc7\u7a0b\uff0cC++\u3001java\u9762\u5411\u5bf9\u8c61\u3002 \u6807\u8bc6\u7b26 \u00b6 \u5408\u6cd5\u7684\u8981\u6c42\u662f\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u5fc5\u987b\u4e3a\u5b57\u6bcd\u6216\u662f\u4e0b\u5212\u7ebf\u3002 \u5173\u952e\u5b57\u4e0d\u53ef\u4ee5\u4f5c\u4e3a\u7528\u6237\u6807\u8bc6\u7b26\u53f7\u3002 main define scanf printf include If \u90fd\u4e0d\u662f\u5173\u952e\u5b57\u3002 \u9a7c\u5cf0\u547d\u540d\u6cd5 \u6574\u6570 \u00b6 \u6570\u636e\u7c7b\u578b \u5b9a\u4e49\u6807\u8bc6\u7b26 \u5360\u5b57\u8282\u6570 \u6570\u503c\u8303\u56f4 \u77ed\u6574\u578b short 2 -2 15 ~2 15 -1 (32767) \u6574\u578b int 4 -2 31 ~2 31 -1(\u7ea62\u00d710 9 ) \u8d85\u957f\u6574\u578b long long 8 -2 63 ~2 63 -1(\u7ea69\u00d710 18 ) \u65e0\u7b26\u53f7\u6574\u578b unsigned int 4 0~2 32 -1(\u7ea64\u00d710 9 ) \u5176\u4f59\u65e0\u7b26\u53f7\u7c7b\u578b\u540c\u7406 \u5b9e\u6570 \u00b6 \u6570\u636e\u7c7b\u578b \u5b9a\u4e49\u6807\u8bc6\u7b26 \u6570\u503c\u8303\u56f4 \u5360\u5b57\u8282\u6570 \u6709\u6548\u4f4d\u6570 \u5355\u7cbe\u5ea6\u5b9e\u578b float -3.4\u00d710 38 ~3.4\u00d710 38 4 6~7\u4f4d \u53cc\u7cbe\u5ea6\u5b9e\u578b double -1.7\u00d710 308 ~1.7\u00d710 308 8 15~16\u4f4d \u5e03\u5c14\u578b bool true \u6216 false 1 \u5168\u6574\u6570\u9664\u6cd5 \u00b6 \u4e24\u4e2a\u6574\u6570\u76f8\u9664\u7ed3\u679c\u8fd8\u662f\u6574\u6570\uff0c 5/2 \u7684\u503c\u4e3a2\u800c\u4e0d\u662f2.5 \u89e3\u51b3\u65b9\u6cd5\uff1a\u81f3\u5c11\u4e00\u4e2a\u6570\u8f6c\u6362\u6210\u6d6e\u70b9\u6570\uff0c\u5982 5/2.0 (float)a/b \u9664\u4ee50\u4f1a\u8fd4\u56de NaN \u5b57\u7b26\u578b \u00b6 \u5b9a\u4e49\u6807\u8bc6\u7b26 \u5360\u5b57\u8282\u6570 \u6570\u503c\u8303\u56f4 char 1 -128~127 \u76f4\u63a5\u8868\u793a char c = 'A'; ASCII\u7801\u8868\u793a char ch = 65; \u8f6c\u4e49\u5b57\u7b26 \u6362\u884c\u7b26 '\\n' \u5355\u5f15\u53f7 '\\'' \u53cd\u659c\u6760 '\\\\' \u5b57\u7b26\u578b\u4e5f\u53ef\u4ee5\u505a\u52a0\u51cf\u8fd0\u7b97 \u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f \u00b6 \u8fd0\u7b97\u7b26\u7c7b\u578b \u5e38\u7528\u8fd0\u7b97\u7b26 \u793a\u4f8b \u7b97\u672f\u8fd0\u7b97\u7b26 + - * / % ++ -- 5 % 2 \u5173\u7cfb\u8fd0\u7b97\u7b26 > < == >= <= != a == 1 \u903b\u8f91\u8fd0\u7b97\u7b26 && || ! a>0 && a<b \u4f4d\u64cd\u4f5c\u8fd0\u7b97\u7b26 & | ~ ^ << >> 1<<2 \u8d4b\u503c\u8fd0\u7b97\u7b26 = += &= <<= a += 2 \u6761\u4ef6\u8fd0\u7b97\u7b26 ? : a == 1 ? 1 : 0 \u6307\u9488\u8fd0\u7b97\u7b26 * & *it \u8d4b\u503c\u8bed\u53e5 \u00b6 \u683c\u5f0f\uff1a \u2003\u2003 \u53d8\u91cf = \u8868\u8fbe\u5f0f; \u610f\u4e49\uff1a \u2003\u2003\u5c06\u53f3\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u8d4b\u7ed9\u5de6\u8fb9\u7684\u53d8\u91cf \u4e00\u5b9a\u8981\u533a\u5206 = \u548c \u7b49\u4e8e\uff0c C\u8bed\u8a00\u4e2d\u5224\u65ad\u76f8\u7b49\u7528 == \u8fd0\u7b97\u7b26 1 2 if ( a = 1 ) //\u00d7 while ( a = 1 ) //\u00d7 \u5728\u8fdb\u884c\u8d4b\u503c\u8fd0\u7b97\u65f6\uff0c\u5982\u679c\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e24\u8fb9\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u540c\uff0c\u7cfb\u7edf\u5c06\u4f1a\u81ea\u52a8\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u5373\u5c06\u8d4b\u503c\u8fd0\u7b97\u7b26\u53f3\u8fb9\u7684\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u6210\u5de6\u8fb9\u7684\u53d8\u91cf\u7c7b\u578b\u3002\u53ef\u80fd\u4f1a\u51fa\u73b0\u6570\u636e\u4e22\u5931\u3002 \u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7 \u00b6 \u81ea\u589e\u8868\u8fbe\u5f0f \u00b6 1 2 3 4 5 6 7 8 9 10 int a = 21 ; int c ; // a \u7684\u503c\u5728\u8d4b\u503c\u4e4b\u524d\u4e0d\u4f1a\u81ea\u589e c = a ++ ; // c = 21 a = 22 // a \u7684\u503c\u5728\u8d4b\u503c\u4e4b\u524d\u81ea\u589e c = ++ a ; // c = 23 a = 23 \u4f4d\u8fd0\u7b97 \u00b6 \u8fd0\u7b97\u7b26 \u540d\u79f0 \u4f5c\u7528 & \u4e0e \u4e24\u4e2a\u4f4d\u90fd\u4e3a1\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a1 | \u6216 \u4e24\u4e2a\u4f4d\u90fd\u4e3a0\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a0 ^ \u5f02\u6216 \u4e24\u4e2a\u4f4d\u76f8\u540c\u4e3a0\uff0c\u76f8\u5f02\u4e3a1 ~ \u53d6\u53cd 0\u53d81\uff0c1\u53d80 << \u5de6\u79fb \u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff0c\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650 >> \u53f3\u79fb \u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c\u5bf9\u65e0\u7b26\u53f7\u6570\uff0c\u9ad8\u4f4d\u88650\uff0c\u6709\u7b26\u53f7\u6570 \u533a\u5206 | \u548c || \uff0c & \u548c && \u6807\u51c6\u8f93\u5165\u8f93\u51fa \u00b6 \u5934\u6587\u4ef6\uff1a <stdio.h> \u8f93\u5165\u51fd\u6570\uff1a scanf(\"%\u5bf9\u5e94\u683c\u5f0f\u5b57\u7b26\", &\u53d8\u91cf\u540d); \u8f93\u51fa\u51fd\u6570: printf(\"\u5176\u4ed6\u5b57\u7b26 %\u5bf9\u5e94\u683c\u5f0f\u5b57\u7b26 \u5176\u4ed6\u5b57\u7b26\", \u53d8\u91cf\u540d); \u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0 scanf \u51fd\u6570\u4e2d\u7684& \u5b57\u7b26\u7c7b\u578b\u53d8\u91cf\u540d = getchar(); \u4f7f\u7528\u65f6\u6ce8\u610f\u5403\u6389\u6362\u884c\u7b26 \u6570\u636e\u7c7b\u578b \u683c\u5f0f\u7b26* \u6570\u636e\u7c7b\u578b \u683c\u5f0f\u7b26* int %d long long %lld unsigned long long %llu char %c \u5b57\u7b26\u6570\u7ec4 %s float %f double %lf *\u8fd9\u91cc\u4e3a\u4e86\u770b\u7740\u65b9\u4fbf\u52a0\u4e0a\u4e86% 1 2 3 4 5 6 7 8 9 10 int a ; long long b ; char c ; double d = 1.0 ; float f = 2.7 ; scanf ( \"%d%lld\" , & a , & b ); scanf ( \"%c\" , & c ); //\u7a7a\u683c\uff0c\u56de\u8f66\uff0c\u7f29\u8fdb\u90fd\u4f1a\u88ab\u8bfb\u5165\uff0c\u6ce8\u610f\uff01 printf ( \"%d%d\" , a , c ); //c\u88ab\u8f6c\u6362\u6210int\u7c7b\u578b printf ( \"ans = %f %.12lf \\n \" , f , d ); Bug 1 2 3 4 5 6 7 8 9 10 11 // \u9664\u4e86\u5927\u62ec\u53f7\uff0c\u6bcf\u884c\u81f3\u5c11\u6709\u4e00\u4e2abug int mian () { int a , b ; c , d = 1 ; bool flag1 = ture , flag2 = flase ; scanf ( \"%d\" , a ); printf ( \"%d, b\" ); c = b + 1 e = 2 ab ; return 1 ; }","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"c-basic/grammar/#_1","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002","title":"\u8bed\u6cd5\u57fa\u7840"},{"location":"c-basic/grammar/#_2","text":"C\u8bed\u8a00\u4e66\u5199\u683c\u5f0f\u662f\u81ea\u7531\u7684\uff0c\u6bcf\u884c\u53ef\u4ee5\u5199\u591a\u4e2a\u8bed\u53e5\uff0c\u53ef\u4ee5\u5199\u591a\u884c\u3002 \u4e00\u4e2aC\u8bed\u8a00\u7a0b\u5e8f\u6709\u4e14\u53ea\u6709\u4e00\u4e2amain\u51fd\u6570\uff0c\u662f\u7a0b\u5e8f\u8fd0\u884c\u7684\u8d77\u70b9\u3002 \u6bcf\u4e2aC\u8bed\u8a00\u7a0b\u5e8f\u5199\u5b8c\u540e\uff0c\u90fd\u662f\u5148\u7f16\u8bd1\uff0c\u540e\u94fe\u63a5\uff0c\u6700\u540e\u8fd0\u884c\u3002\uff08.c->.obj->.exe\uff09\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6ce8\u610f.c\u548c.obj\u6587\u4ef6\u65f6\u65e0\u6cd5\u8fd0\u884c\u7684\uff0c\u53ea\u6709.exe\u6587\u4ef6\u624d\u53ef\u4ee5\u8fd0\u884c\u3002 C\u9762\u5411\u8fc7\u7a0b\uff0cC++\u3001java\u9762\u5411\u5bf9\u8c61\u3002","title":"\u7406\u8bba\u77e5\u8bc6"},{"location":"c-basic/grammar/#_3","text":"\u5408\u6cd5\u7684\u8981\u6c42\u662f\u7531\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u4e0b\u5212\u7ebf\u7ec4\u6210\uff0c\u5e76\u4e14\u7b2c\u4e00\u4e2a\u5fc5\u987b\u4e3a\u5b57\u6bcd\u6216\u662f\u4e0b\u5212\u7ebf\u3002 \u5173\u952e\u5b57\u4e0d\u53ef\u4ee5\u4f5c\u4e3a\u7528\u6237\u6807\u8bc6\u7b26\u53f7\u3002 main define scanf printf include If \u90fd\u4e0d\u662f\u5173\u952e\u5b57\u3002 \u9a7c\u5cf0\u547d\u540d\u6cd5","title":"\u6807\u8bc6\u7b26"},{"location":"c-basic/grammar/#_4","text":"\u6570\u636e\u7c7b\u578b \u5b9a\u4e49\u6807\u8bc6\u7b26 \u5360\u5b57\u8282\u6570 \u6570\u503c\u8303\u56f4 \u77ed\u6574\u578b short 2 -2 15 ~2 15 -1 (32767) \u6574\u578b int 4 -2 31 ~2 31 -1(\u7ea62\u00d710 9 ) \u8d85\u957f\u6574\u578b long long 8 -2 63 ~2 63 -1(\u7ea69\u00d710 18 ) \u65e0\u7b26\u53f7\u6574\u578b unsigned int 4 0~2 32 -1(\u7ea64\u00d710 9 ) \u5176\u4f59\u65e0\u7b26\u53f7\u7c7b\u578b\u540c\u7406","title":"\u6574\u6570"},{"location":"c-basic/grammar/#_5","text":"\u6570\u636e\u7c7b\u578b \u5b9a\u4e49\u6807\u8bc6\u7b26 \u6570\u503c\u8303\u56f4 \u5360\u5b57\u8282\u6570 \u6709\u6548\u4f4d\u6570 \u5355\u7cbe\u5ea6\u5b9e\u578b float -3.4\u00d710 38 ~3.4\u00d710 38 4 6~7\u4f4d \u53cc\u7cbe\u5ea6\u5b9e\u578b double -1.7\u00d710 308 ~1.7\u00d710 308 8 15~16\u4f4d \u5e03\u5c14\u578b bool true \u6216 false 1","title":"\u5b9e\u6570"},{"location":"c-basic/grammar/#_6","text":"\u4e24\u4e2a\u6574\u6570\u76f8\u9664\u7ed3\u679c\u8fd8\u662f\u6574\u6570\uff0c 5/2 \u7684\u503c\u4e3a2\u800c\u4e0d\u662f2.5 \u89e3\u51b3\u65b9\u6cd5\uff1a\u81f3\u5c11\u4e00\u4e2a\u6570\u8f6c\u6362\u6210\u6d6e\u70b9\u6570\uff0c\u5982 5/2.0 (float)a/b \u9664\u4ee50\u4f1a\u8fd4\u56de NaN","title":"\u5168\u6574\u6570\u9664\u6cd5"},{"location":"c-basic/grammar/#_7","text":"\u5b9a\u4e49\u6807\u8bc6\u7b26 \u5360\u5b57\u8282\u6570 \u6570\u503c\u8303\u56f4 char 1 -128~127 \u76f4\u63a5\u8868\u793a char c = 'A'; ASCII\u7801\u8868\u793a char ch = 65; \u8f6c\u4e49\u5b57\u7b26 \u6362\u884c\u7b26 '\\n' \u5355\u5f15\u53f7 '\\'' \u53cd\u659c\u6760 '\\\\' \u5b57\u7b26\u578b\u4e5f\u53ef\u4ee5\u505a\u52a0\u51cf\u8fd0\u7b97","title":"\u5b57\u7b26\u578b"},{"location":"c-basic/grammar/#_8","text":"\u8fd0\u7b97\u7b26\u7c7b\u578b \u5e38\u7528\u8fd0\u7b97\u7b26 \u793a\u4f8b \u7b97\u672f\u8fd0\u7b97\u7b26 + - * / % ++ -- 5 % 2 \u5173\u7cfb\u8fd0\u7b97\u7b26 > < == >= <= != a == 1 \u903b\u8f91\u8fd0\u7b97\u7b26 && || ! a>0 && a<b \u4f4d\u64cd\u4f5c\u8fd0\u7b97\u7b26 & | ~ ^ << >> 1<<2 \u8d4b\u503c\u8fd0\u7b97\u7b26 = += &= <<= a += 2 \u6761\u4ef6\u8fd0\u7b97\u7b26 ? : a == 1 ? 1 : 0 \u6307\u9488\u8fd0\u7b97\u7b26 * & *it","title":"\u8fd0\u7b97\u7b26\u548c\u8868\u8fbe\u5f0f"},{"location":"c-basic/grammar/#_9","text":"\u683c\u5f0f\uff1a \u2003\u2003 \u53d8\u91cf = \u8868\u8fbe\u5f0f; \u610f\u4e49\uff1a \u2003\u2003\u5c06\u53f3\u8fb9\u8868\u8fbe\u5f0f\u7684\u503c\u8d4b\u7ed9\u5de6\u8fb9\u7684\u53d8\u91cf \u4e00\u5b9a\u8981\u533a\u5206 = \u548c \u7b49\u4e8e\uff0c C\u8bed\u8a00\u4e2d\u5224\u65ad\u76f8\u7b49\u7528 == \u8fd0\u7b97\u7b26 1 2 if ( a = 1 ) //\u00d7 while ( a = 1 ) //\u00d7 \u5728\u8fdb\u884c\u8d4b\u503c\u8fd0\u7b97\u65f6\uff0c\u5982\u679c\u8d4b\u503c\u8fd0\u7b97\u7b26\u4e24\u8fb9\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u540c\uff0c\u7cfb\u7edf\u5c06\u4f1a\u81ea\u52a8\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\uff0c\u5373\u5c06\u8d4b\u503c\u8fd0\u7b97\u7b26\u53f3\u8fb9\u7684\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u6210\u5de6\u8fb9\u7684\u53d8\u91cf\u7c7b\u578b\u3002\u53ef\u80fd\u4f1a\u51fa\u73b0\u6570\u636e\u4e22\u5931\u3002","title":"\u8d4b\u503c\u8bed\u53e5"},{"location":"c-basic/grammar/#_10","text":"","title":"\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7"},{"location":"c-basic/grammar/#_11","text":"1 2 3 4 5 6 7 8 9 10 int a = 21 ; int c ; // a \u7684\u503c\u5728\u8d4b\u503c\u4e4b\u524d\u4e0d\u4f1a\u81ea\u589e c = a ++ ; // c = 21 a = 22 // a \u7684\u503c\u5728\u8d4b\u503c\u4e4b\u524d\u81ea\u589e c = ++ a ; // c = 23 a = 23","title":"\u81ea\u589e\u8868\u8fbe\u5f0f"},{"location":"c-basic/grammar/#_12","text":"\u8fd0\u7b97\u7b26 \u540d\u79f0 \u4f5c\u7528 & \u4e0e \u4e24\u4e2a\u4f4d\u90fd\u4e3a1\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a1 | \u6216 \u4e24\u4e2a\u4f4d\u90fd\u4e3a0\u65f6\uff0c\u7ed3\u679c\u624d\u4e3a0 ^ \u5f02\u6216 \u4e24\u4e2a\u4f4d\u76f8\u540c\u4e3a0\uff0c\u76f8\u5f02\u4e3a1 ~ \u53d6\u53cd 0\u53d81\uff0c1\u53d80 << \u5de6\u79fb \u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u5de6\u79fb\u82e5\u5e72\u4f4d\uff0c\u9ad8\u4f4d\u4e22\u5f03\uff0c\u4f4e\u4f4d\u88650 >> \u53f3\u79fb \u5404\u4e8c\u8fdb\u4f4d\u5168\u90e8\u53f3\u79fb\u82e5\u5e72\u4f4d\uff0c\u5bf9\u65e0\u7b26\u53f7\u6570\uff0c\u9ad8\u4f4d\u88650\uff0c\u6709\u7b26\u53f7\u6570 \u533a\u5206 | \u548c || \uff0c & \u548c &&","title":"\u4f4d\u8fd0\u7b97"},{"location":"c-basic/grammar/#_13","text":"\u5934\u6587\u4ef6\uff1a <stdio.h> \u8f93\u5165\u51fd\u6570\uff1a scanf(\"%\u5bf9\u5e94\u683c\u5f0f\u5b57\u7b26\", &\u53d8\u91cf\u540d); \u8f93\u51fa\u51fd\u6570: printf(\"\u5176\u4ed6\u5b57\u7b26 %\u5bf9\u5e94\u683c\u5f0f\u5b57\u7b26 \u5176\u4ed6\u5b57\u7b26\", \u53d8\u91cf\u540d); \u4e00\u5b9a\u4e0d\u8981\u5fd8\u8bb0 scanf \u51fd\u6570\u4e2d\u7684& \u5b57\u7b26\u7c7b\u578b\u53d8\u91cf\u540d = getchar(); \u4f7f\u7528\u65f6\u6ce8\u610f\u5403\u6389\u6362\u884c\u7b26 \u6570\u636e\u7c7b\u578b \u683c\u5f0f\u7b26* \u6570\u636e\u7c7b\u578b \u683c\u5f0f\u7b26* int %d long long %lld unsigned long long %llu char %c \u5b57\u7b26\u6570\u7ec4 %s float %f double %lf *\u8fd9\u91cc\u4e3a\u4e86\u770b\u7740\u65b9\u4fbf\u52a0\u4e0a\u4e86% 1 2 3 4 5 6 7 8 9 10 int a ; long long b ; char c ; double d = 1.0 ; float f = 2.7 ; scanf ( \"%d%lld\" , & a , & b ); scanf ( \"%c\" , & c ); //\u7a7a\u683c\uff0c\u56de\u8f66\uff0c\u7f29\u8fdb\u90fd\u4f1a\u88ab\u8bfb\u5165\uff0c\u6ce8\u610f\uff01 printf ( \"%d%d\" , a , c ); //c\u88ab\u8f6c\u6362\u6210int\u7c7b\u578b printf ( \"ans = %f %.12lf \\n \" , f , d ); Bug 1 2 3 4 5 6 7 8 9 10 11 // \u9664\u4e86\u5927\u62ec\u53f7\uff0c\u6bcf\u884c\u81f3\u5c11\u6709\u4e00\u4e2abug int mian () { int a , b ; c , d = 1 ; bool flag1 = ture , flag2 = flase ; scanf ( \"%d\" , a ); printf ( \"%d, b\" ); c = b + 1 e = 2 ab ; return 1 ; }","title":"\u6807\u51c6\u8f93\u5165\u8f93\u51fa"},{"location":"c-basic/python/","text":"Python \u7ade\u8d5b\u57fa\u7840 \u00b6 Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a YanhuiJessica \uff0c LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u63a8\u8350 \u5f3a\u70c8\u63a8\u8350 YanhuiJessica \u7684 TemPro \u4ed3\u5e93\u3002\u5305\u62ec\u6211\u4e2a\u4eba\u4e5f\u662f\u5728\u63ed\u5e08\u59d0\u7684\u5f71\u54cd\u4e0b\u4e00\u6b65\u6b65\u6210\u4e3aPython\u9009\u624b\uff08jdltxdy! :P\uff09\u3002\u73e0\u7389\u5728\u524d\uff0c\u4e0d\u751a\u5b8c\u5584\u4e4b\u5904\u8fd8\u5e0c\u671b\u540e\u4eba\u7ee7\u7eed\u6dfb\u7816\u52a0\u74e6\u3002 \u6ce8\u610f \u00b6 \u672c\u6587\u6863\u4ec5\u9762\u5411\u4e8e\u300c\u4f7f\u7528 Python3 \u7684\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u9009\u624b\u300d\u3002\u6211\u5e0c\u671b\u53ef\u4ee5\u4e3a C++\u8f6cPython \u9009\u624b\u63d0\u4f9b\u4e00\u4efd\u5feb\u901f\u5165\u95e8\u7684\u6587\u6863\uff0c\u4e24\u79cd\u8bed\u8a00\u76f8\u540c\u7684\u64cd\u4f5c\u5927\u90fd\u4e0d\u4f1a\u88ab\u63d0\u53ca\u3002 \u8f93\u5165\u8f93\u51fa \u00b6 \u8f93\u5165 \u00b6 \u8bf7\u53c2\u7167 YanhuiJessica/Tempro/Python \u3002 \u8f93\u51fa \u00b6 Python \u8f93\u51fa\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981 1 print ( a ) \u5bf9\u4e8e C++\u8f6cPython \u9009\u624b\uff0c\u4e5f\u53ef\u4f7f\u7528\u7c7b\u4f3c\u4e8e printf \u7684\u8f93\u51fa\u5f62\u5f0f\uff0c\u5728\u4fdd\u7559\u6307\u5b9a\u4f4d\u5c0f\u6570\u7ed3\u679c\u7684\u9898\u76ee\u4e2d\u975e\u5e38\u6709\u7528\u3002 1 print ( 'The length of %s is %d ' % ( s , x )) \u7c7b\u578b\uff0c\u8fd0\u7b97\u7b26\u548c\u6d41\u7a0b\u63a7\u5236 \u00b6 int \u00b6 \u4e0e C++ \u6700\u5927\u7684\u4e0d\u540c\u662f\uff0c Python \u4e2d\u7684\u6574\u6570 \u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f \u5b58\u50a8\uff0c\u8fd9\u4ee3\u8868\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u6ca1\u6709\u5b58\u50a8\u4e0a\u9650\u3002\u540c\u65f6\u5b9a\u4e49\u53d8\u91cf\u65f6\u4e0d\u9700\u8981\u58f0\u660e\u7c7b\u578b\u3002 1 a = 100 float \u548c \u9664\u6cd5 \u00b6 Python \u6ca1\u6709 double \u7c7b\u578b\uff0c\u5b83\u7684 float \u7c7b\u578b\u4e0e\u524d\u8005\u7c7b\u4f3c\u3002\u8bf7\u6ce8\u610f\u9664\u6cd5\u662f\u81ea\u52a8\u8f6c\u4e3a\u6d6e\u70b9\u6570\u7684\uff0c\u8bf7\u4e25\u683c\u533a\u5206 / \u4e0e // \u3002\u9664\u6cd5\u64cd\u4f5c / \u6c38\u8fdc\u8fd4\u56de\u6d6e\u70b9\u7c7b\u578b\uff0c\u540c\u65f6\u4ecd\u5b58\u5728\u6d6e\u70b9\u8bef\u5dee\u3002 1 2 3 4 / 3 # 1.3333333333333333 4 // 3 # 1 0.1 + 0.2 # 0.30000000000000004 bool \u00b6 1 2 3 4 5 6 7 8 # \u8bf7\u987a\u4fbf\u6ce8\u610fif\u8bed\u53e5\u7684\u5199\u6cd5 flag = True if flag not False : print ( 'Right' ) elif xxx : # ... else : # ... switch? \u00b6 Python \u4e2d\u6ca1\u6709 switch \u8bed\u53e5\uff0c\u4f46\u5728 Python 3.10 beta \u4e2d\u589e\u52a0\u4e86 match-case \u7684\u5b9e\u73b0\u3002\u76ee\u524d\u4ecd\u7136\u53ea\u5efa\u8bae\u4f7f\u7528\u591a\u4e2a if-else \u8bed\u53e5\u89e3\u51b3\u3002 \u7f29\u8fdb \u00b6 Python\u662f\u7f29\u8fdb\u654f\u611f\u7684\u8bed\u8a00\uff0c\u4e0d\u4e25\u683c\u6309\u7167\u6307\u5b9a\u7f29\u8fdb\u8bed\u6cd5\u4f1a\u62a5\u9519\u3002 \u62f7\u8d1d \u00b6 Python\u548cC++\u7684\u53e6\u4e00\u4e2a\u663e\u8457\u4e0d\u540c\u70b9\u662f\uff0c\u5bf9\u8c61\u4e4b\u95f4\u7684\u300c\u8d4b\u503c\u300d\u64cd\u4f5c\u4f1a\u88ab\u89e3\u91ca\u5668\u7406\u89e3\u4e3a\u300c\u5f15\u7528\u300d\u3002 1 newlist = list1 # \u5f15\u7528\uff0c\u66f4\u6539\u4e00\u4e2a\u5bf9\u8c61\u4f1a\u5bfc\u81f4\u53e6\u4e00\u4e2a\u51fa\u73b0\u53d8\u5316\u3002 \u5982\u679c\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff0c\u4e0e\u539f\u6709\u5bf9\u8c61\u7684\u57fa\u672c\u5c5e\u6027\u4e00\u81f4\uff08\u9664\u4e86\u5730\u5740\uff09\uff0c\u5219\u9700\u8981\u4f7f\u7528\u6df1\u62f7\u8d1d\u3002 1 2 import copy list2 = copy . copy ( list1 ) \u5728\u67d0\u4e9b\u7ed3\u6784\u91cc\u9762\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7279\u6b8a\u64cd\u4f5c\u8fbe\u5230\u62f7\u8d1d\u7684\u6548\u679c\u3002 1 list2 = list1 [:] \u5e38\u7528\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u7684\u6620\u5c04 \u00b6 C++ Python \u5907\u6ce8 array/vector list \u4e25\u683c\u610f\u4e49\u4e0a\u5e94\u8be5\u662farray\u5bf9\u5e94array, vector\u5bf9\u5e94list\uff0c\u4f46\u662f\u6211\u4eec\u5efa\u8bae\u66f4\u591a\u5730\u4f7f\u7528list tuple(C++11) tuple Python\u7684tuple\u662f\u4e0d\u53ef\u4fee\u6539\u7684 map dict \u8bf7\u6ce8\u610fPython\u5bf9\u4e8e\u4e0d\u5b58\u5728\u952e\u7684\u63d2\u5165\u64cd\u4f5c set set stack list queue queue deque collections.deque priority_queue heapq sort sorted lower_bound/upper_bound bisect \u00d7 pow(x,y,mod) Python\u81ea\u5e26\u5feb\u901f\u5e42 \u4e24\u8005\u64cd\u4f5c\u5927\u81f4\u662f\u76f8\u540c\u7684\uff0c\u5177\u4f53\u8bed\u6cd5\u8bf7\u81ea\u884c\u5b66\u4e60\u3002 \u63a8\u5bfc\u5f0f \u00b6 \u5408\u7406\u4f7f\u7528\u63a8\u5bfc\u5f0f\u4f1a\u8ba9\u4f60\u7684\u4ee3\u7801\u770b\u8d77\u6765\u66f4 pythonic \uff0c\u4f46\u4e5f\u4f1a\u7565\u5fae\u964d\u4f4e\u53ef\u8bfb\u6027\u3002 1 2 3 4 nums = [ i * i for i in range ( 1 , 101 ) if i % 3 == 0 ] dict2 = { k : v for k , v in enumerate ( dict1 )} # \u4e00\u4e2a\u53ef\u8bfb\u6027\u8f83\u4f4e\u7684\u53cd\u4f8b print ( ' \\n ' . join ([ ' ' . join ([ ' %2d * %2d = %2d ' % ( col , row , col * row ) for col in range ( 1 , row + 1 )]) for row in range ( 1 , 10 )])) Python \u7684\u4f18\u7f3a\u70b9 \u00b6 \u5927\u90e8\u5206\u7ade\u8d5b\u9009\u624b\u4e0d\u7528Python\u7684\u539f\u56e0\u5728\u4e8ePython\u7684\u901f\u5ea6\u592a\u6162\u3002\u5c3d\u7ba1 PyPI \u53ef\u4ee5\u52a0\u901fPython\u4ee3\u7801\u7684\u8fd0\u884c\uff0c\u6211\u4e2a\u4eba\u8fd8\u662f\u4e0d\u5efa\u8bae\u62ff\u7eafPython\u53bb\u53c2\u52a0\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u3002 \u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u5426\u8ba4\u7684\u662f\uff0c\u5728\u67d0\u4e9b\u7279\u5b9a\u95ee\u9898\u4e0b\uff0cPython\u5177\u6709\u660e\u663e\u7684\u7f16\u7801\u65f6\u95f4\u4f18\u52bf\u3002\u6bd4\u5982\u5728\u5904\u7406\u9ad8\u7cbe\u5ea6\u8ba1\u7b97\u7b49\u95ee\u9898\u4e0a\uff0c\u5408\u7406\u4f7f\u7528Python\u4f1a\u8d77\u5230\u4e8b\u534a\u529f\u500d\u7684\u6548\u679c\u3002 \u5e94\u7528 \u00b6 \u4e0b\u9762\u5c55\u793a\u7b80\u5355\u7684\u5e94\u7528\uff0c\u7528\u4e8e\u89e3\u51b3 2019ICPC\u5f90\u5dde\u7ad9\u7f51\u7edc\u8d5bA\u9898 \uff0c\u9898\u76ee\u6709\u4e00\u6b65\u9700\u8981\u4f7f\u7528\u62d3\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff0c\u8ba1\u7b97\u8fc7\u7a0b\u4f1a\u8d85\u51fa long long \u8303\u56f4\u3002 C++, by LyuLumos 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include <iostream> using namespace std ; typedef __int128 ll ; void exgcd ( ll a , ll b , ll & g , ll & x , ll & y ) { if ( b == 0 ) { g = a ; x = 1 ; y = 0 ; return ; } exgcd ( b , a % b , g , y , x ); y -= ( a / b ) * x ; } bool flag = false ; ll a1 , a2 , n1 , n2 ; ll abs ( ll x ) { return x > 0 ? x : - x ; } void china () { ll d = a2 - a1 ; ll g , x , y ; exgcd ( n1 , n2 , g , x , y ); if ( d % g == 0 ) { x = (( x * d / g ) % ( n2 / g ) + ( n2 / g )) % ( n2 / g ); a1 = x * n1 + a1 ; n1 = ( n1 * n2 ) / g ; } else flag = true ; } int n ; long long as [ 100001 ]; long long ns [ 100001 ]; ll realchina () { a1 = as [ 0 ]; n1 = ns [ 0 ]; for ( ll i = 1 ; i < n ; i ++ ) { a2 = as [ i ]; n2 = ns [ i ]; china (); if ( flag ) return -1 ; //\u65e0\u89e3 } return a1 ; } int main () { cin >> n ; flag = false ; for ( ll i = 0 ; i < n ; i ++ ) cin >> ns [ i ] >> as [ i ]; cout << ( long long ) realchina () << endl ; //\u4e0d\u5230\u8f93\u51fa\u4e0d\u6362int128 } Python, by YanhuiJessica 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def gcd ( a , b ): if ( b == 0 ): return a else : return gcd ( b , a % b ) def exgcd ( a , b , x , y ): x , y = 0 , 0 if ( b == 0 ): x = 1 y = 0 return a , x , y d , x , y = exgcd ( b , a % b , x , y ) tmp = x x = y y = tmp - int ( a / b ) * y return d , x , y def inv ( a , b ): a , x , y = exgcd ( a , b , a , b ) while ( x < 0 ): x += b return x if __name__ == '__main__' : N , M = map ( int , input () . split ()) Divider = [ 0 ] Remainder = [ 0 ] for i in range ( 1 , N + 1 ): a , b = map ( int , input () . split ()) Divider . append ( a ) Remainder . append ( b ) flag = True for i in range ( 2 , N + 1 ): M1 , M2 = Divider [ i - 1 ], Divider [ i ] t1 , t2 = Remainder [ i - 1 ], Remainder [ i ] T = gcd ( M1 , M2 ) if (( t2 - t1 ) % T != 0 ): flag = False break Divider [ i ] = ( M1 * M2 ) // T Remainder [ i ] = ( inv ( M1 // T , M2 // T ) * ( t2 - t1 ) // T ) % ( M2 // T ) * M1 + t1 Remainder [ i ] = ( Remainder [ i ] % Divider [ i ] + Divider [ i ]) % Divider [ i ] if ( flag ): ans = Remainder [ N ] else : ans =- 1 \u4e0a\u9762C++\u7684\u4ee3\u7801\u65e0\u6cd5\u8fdb\u884c\u8d85\u51fa __int128 \u8303\u56f4\u7684\u8ba1\u7b97\uff0c\u9700\u8981\u8fdb\u884c\u624b\u5199\u9ad8\u7cbe\u5ea6\u624d\u80fd\u5b9e\u73b0\u4e0ePython\u76f8\u540c\u7684\u6548\u679c\u3002","title":"Python\u7ade\u8d5b\u57fa\u7840"},{"location":"c-basic/python/#python","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a YanhuiJessica \uff0c LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u63a8\u8350 \u5f3a\u70c8\u63a8\u8350 YanhuiJessica \u7684 TemPro \u4ed3\u5e93\u3002\u5305\u62ec\u6211\u4e2a\u4eba\u4e5f\u662f\u5728\u63ed\u5e08\u59d0\u7684\u5f71\u54cd\u4e0b\u4e00\u6b65\u6b65\u6210\u4e3aPython\u9009\u624b\uff08jdltxdy! :P\uff09\u3002\u73e0\u7389\u5728\u524d\uff0c\u4e0d\u751a\u5b8c\u5584\u4e4b\u5904\u8fd8\u5e0c\u671b\u540e\u4eba\u7ee7\u7eed\u6dfb\u7816\u52a0\u74e6\u3002","title":"Python \u7ade\u8d5b\u57fa\u7840"},{"location":"c-basic/python/#_1","text":"\u672c\u6587\u6863\u4ec5\u9762\u5411\u4e8e\u300c\u4f7f\u7528 Python3 \u7684\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u9009\u624b\u300d\u3002\u6211\u5e0c\u671b\u53ef\u4ee5\u4e3a C++\u8f6cPython \u9009\u624b\u63d0\u4f9b\u4e00\u4efd\u5feb\u901f\u5165\u95e8\u7684\u6587\u6863\uff0c\u4e24\u79cd\u8bed\u8a00\u76f8\u540c\u7684\u64cd\u4f5c\u5927\u90fd\u4e0d\u4f1a\u88ab\u63d0\u53ca\u3002","title":"\u6ce8\u610f"},{"location":"c-basic/python/#_2","text":"","title":"\u8f93\u5165\u8f93\u51fa"},{"location":"c-basic/python/#_3","text":"\u8bf7\u53c2\u7167 YanhuiJessica/Tempro/Python \u3002","title":"\u8f93\u5165"},{"location":"c-basic/python/#_4","text":"Python \u8f93\u51fa\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981 1 print ( a ) \u5bf9\u4e8e C++\u8f6cPython \u9009\u624b\uff0c\u4e5f\u53ef\u4f7f\u7528\u7c7b\u4f3c\u4e8e printf \u7684\u8f93\u51fa\u5f62\u5f0f\uff0c\u5728\u4fdd\u7559\u6307\u5b9a\u4f4d\u5c0f\u6570\u7ed3\u679c\u7684\u9898\u76ee\u4e2d\u975e\u5e38\u6709\u7528\u3002 1 print ( 'The length of %s is %d ' % ( s , x ))","title":"\u8f93\u51fa"},{"location":"c-basic/python/#_5","text":"","title":"\u7c7b\u578b\uff0c\u8fd0\u7b97\u7b26\u548c\u6d41\u7a0b\u63a7\u5236"},{"location":"c-basic/python/#int","text":"\u4e0e C++ \u6700\u5927\u7684\u4e0d\u540c\u662f\uff0c Python \u4e2d\u7684\u6574\u6570 \u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f \u5b58\u50a8\uff0c\u8fd9\u4ee3\u8868\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u6ca1\u6709\u5b58\u50a8\u4e0a\u9650\u3002\u540c\u65f6\u5b9a\u4e49\u53d8\u91cf\u65f6\u4e0d\u9700\u8981\u58f0\u660e\u7c7b\u578b\u3002 1 a = 100","title":"int"},{"location":"c-basic/python/#float","text":"Python \u6ca1\u6709 double \u7c7b\u578b\uff0c\u5b83\u7684 float \u7c7b\u578b\u4e0e\u524d\u8005\u7c7b\u4f3c\u3002\u8bf7\u6ce8\u610f\u9664\u6cd5\u662f\u81ea\u52a8\u8f6c\u4e3a\u6d6e\u70b9\u6570\u7684\uff0c\u8bf7\u4e25\u683c\u533a\u5206 / \u4e0e // \u3002\u9664\u6cd5\u64cd\u4f5c / \u6c38\u8fdc\u8fd4\u56de\u6d6e\u70b9\u7c7b\u578b\uff0c\u540c\u65f6\u4ecd\u5b58\u5728\u6d6e\u70b9\u8bef\u5dee\u3002 1 2 3 4 / 3 # 1.3333333333333333 4 // 3 # 1 0.1 + 0.2 # 0.30000000000000004","title":"float \u548c \u9664\u6cd5"},{"location":"c-basic/python/#bool","text":"1 2 3 4 5 6 7 8 # \u8bf7\u987a\u4fbf\u6ce8\u610fif\u8bed\u53e5\u7684\u5199\u6cd5 flag = True if flag not False : print ( 'Right' ) elif xxx : # ... else : # ...","title":"bool"},{"location":"c-basic/python/#switch","text":"Python \u4e2d\u6ca1\u6709 switch \u8bed\u53e5\uff0c\u4f46\u5728 Python 3.10 beta \u4e2d\u589e\u52a0\u4e86 match-case \u7684\u5b9e\u73b0\u3002\u76ee\u524d\u4ecd\u7136\u53ea\u5efa\u8bae\u4f7f\u7528\u591a\u4e2a if-else \u8bed\u53e5\u89e3\u51b3\u3002","title":"switch?"},{"location":"c-basic/python/#_6","text":"Python\u662f\u7f29\u8fdb\u654f\u611f\u7684\u8bed\u8a00\uff0c\u4e0d\u4e25\u683c\u6309\u7167\u6307\u5b9a\u7f29\u8fdb\u8bed\u6cd5\u4f1a\u62a5\u9519\u3002","title":"\u7f29\u8fdb"},{"location":"c-basic/python/#_7","text":"Python\u548cC++\u7684\u53e6\u4e00\u4e2a\u663e\u8457\u4e0d\u540c\u70b9\u662f\uff0c\u5bf9\u8c61\u4e4b\u95f4\u7684\u300c\u8d4b\u503c\u300d\u64cd\u4f5c\u4f1a\u88ab\u89e3\u91ca\u5668\u7406\u89e3\u4e3a\u300c\u5f15\u7528\u300d\u3002 1 newlist = list1 # \u5f15\u7528\uff0c\u66f4\u6539\u4e00\u4e2a\u5bf9\u8c61\u4f1a\u5bfc\u81f4\u53e6\u4e00\u4e2a\u51fa\u73b0\u53d8\u5316\u3002 \u5982\u679c\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u5bf9\u8c61\uff0c\u4e0e\u539f\u6709\u5bf9\u8c61\u7684\u57fa\u672c\u5c5e\u6027\u4e00\u81f4\uff08\u9664\u4e86\u5730\u5740\uff09\uff0c\u5219\u9700\u8981\u4f7f\u7528\u6df1\u62f7\u8d1d\u3002 1 2 import copy list2 = copy . copy ( list1 ) \u5728\u67d0\u4e9b\u7ed3\u6784\u91cc\u9762\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7279\u6b8a\u64cd\u4f5c\u8fbe\u5230\u62f7\u8d1d\u7684\u6548\u679c\u3002 1 list2 = list1 [:]","title":"\u62f7\u8d1d"},{"location":"c-basic/python/#_8","text":"C++ Python \u5907\u6ce8 array/vector list \u4e25\u683c\u610f\u4e49\u4e0a\u5e94\u8be5\u662farray\u5bf9\u5e94array, vector\u5bf9\u5e94list\uff0c\u4f46\u662f\u6211\u4eec\u5efa\u8bae\u66f4\u591a\u5730\u4f7f\u7528list tuple(C++11) tuple Python\u7684tuple\u662f\u4e0d\u53ef\u4fee\u6539\u7684 map dict \u8bf7\u6ce8\u610fPython\u5bf9\u4e8e\u4e0d\u5b58\u5728\u952e\u7684\u63d2\u5165\u64cd\u4f5c set set stack list queue queue deque collections.deque priority_queue heapq sort sorted lower_bound/upper_bound bisect \u00d7 pow(x,y,mod) Python\u81ea\u5e26\u5feb\u901f\u5e42 \u4e24\u8005\u64cd\u4f5c\u5927\u81f4\u662f\u76f8\u540c\u7684\uff0c\u5177\u4f53\u8bed\u6cd5\u8bf7\u81ea\u884c\u5b66\u4e60\u3002","title":"\u5e38\u7528\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u7684\u6620\u5c04"},{"location":"c-basic/python/#_9","text":"\u5408\u7406\u4f7f\u7528\u63a8\u5bfc\u5f0f\u4f1a\u8ba9\u4f60\u7684\u4ee3\u7801\u770b\u8d77\u6765\u66f4 pythonic \uff0c\u4f46\u4e5f\u4f1a\u7565\u5fae\u964d\u4f4e\u53ef\u8bfb\u6027\u3002 1 2 3 4 nums = [ i * i for i in range ( 1 , 101 ) if i % 3 == 0 ] dict2 = { k : v for k , v in enumerate ( dict1 )} # \u4e00\u4e2a\u53ef\u8bfb\u6027\u8f83\u4f4e\u7684\u53cd\u4f8b print ( ' \\n ' . join ([ ' ' . join ([ ' %2d * %2d = %2d ' % ( col , row , col * row ) for col in range ( 1 , row + 1 )]) for row in range ( 1 , 10 )]))","title":"\u63a8\u5bfc\u5f0f"},{"location":"c-basic/python/#python_1","text":"\u5927\u90e8\u5206\u7ade\u8d5b\u9009\u624b\u4e0d\u7528Python\u7684\u539f\u56e0\u5728\u4e8ePython\u7684\u901f\u5ea6\u592a\u6162\u3002\u5c3d\u7ba1 PyPI \u53ef\u4ee5\u52a0\u901fPython\u4ee3\u7801\u7684\u8fd0\u884c\uff0c\u6211\u4e2a\u4eba\u8fd8\u662f\u4e0d\u5efa\u8bae\u62ff\u7eafPython\u53bb\u53c2\u52a0\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u3002 \u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u5426\u8ba4\u7684\u662f\uff0c\u5728\u67d0\u4e9b\u7279\u5b9a\u95ee\u9898\u4e0b\uff0cPython\u5177\u6709\u660e\u663e\u7684\u7f16\u7801\u65f6\u95f4\u4f18\u52bf\u3002\u6bd4\u5982\u5728\u5904\u7406\u9ad8\u7cbe\u5ea6\u8ba1\u7b97\u7b49\u95ee\u9898\u4e0a\uff0c\u5408\u7406\u4f7f\u7528Python\u4f1a\u8d77\u5230\u4e8b\u534a\u529f\u500d\u7684\u6548\u679c\u3002","title":"Python \u7684\u4f18\u7f3a\u70b9"},{"location":"c-basic/python/#_10","text":"\u4e0b\u9762\u5c55\u793a\u7b80\u5355\u7684\u5e94\u7528\uff0c\u7528\u4e8e\u89e3\u51b3 2019ICPC\u5f90\u5dde\u7ad9\u7f51\u7edc\u8d5bA\u9898 \uff0c\u9898\u76ee\u6709\u4e00\u6b65\u9700\u8981\u4f7f\u7528\u62d3\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406\uff0c\u8ba1\u7b97\u8fc7\u7a0b\u4f1a\u8d85\u51fa long long \u8303\u56f4\u3002 C++, by LyuLumos 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 #include <iostream> using namespace std ; typedef __int128 ll ; void exgcd ( ll a , ll b , ll & g , ll & x , ll & y ) { if ( b == 0 ) { g = a ; x = 1 ; y = 0 ; return ; } exgcd ( b , a % b , g , y , x ); y -= ( a / b ) * x ; } bool flag = false ; ll a1 , a2 , n1 , n2 ; ll abs ( ll x ) { return x > 0 ? x : - x ; } void china () { ll d = a2 - a1 ; ll g , x , y ; exgcd ( n1 , n2 , g , x , y ); if ( d % g == 0 ) { x = (( x * d / g ) % ( n2 / g ) + ( n2 / g )) % ( n2 / g ); a1 = x * n1 + a1 ; n1 = ( n1 * n2 ) / g ; } else flag = true ; } int n ; long long as [ 100001 ]; long long ns [ 100001 ]; ll realchina () { a1 = as [ 0 ]; n1 = ns [ 0 ]; for ( ll i = 1 ; i < n ; i ++ ) { a2 = as [ i ]; n2 = ns [ i ]; china (); if ( flag ) return -1 ; //\u65e0\u89e3 } return a1 ; } int main () { cin >> n ; flag = false ; for ( ll i = 0 ; i < n ; i ++ ) cin >> ns [ i ] >> as [ i ]; cout << ( long long ) realchina () << endl ; //\u4e0d\u5230\u8f93\u51fa\u4e0d\u6362int128 } Python, by YanhuiJessica 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def gcd ( a , b ): if ( b == 0 ): return a else : return gcd ( b , a % b ) def exgcd ( a , b , x , y ): x , y = 0 , 0 if ( b == 0 ): x = 1 y = 0 return a , x , y d , x , y = exgcd ( b , a % b , x , y ) tmp = x x = y y = tmp - int ( a / b ) * y return d , x , y def inv ( a , b ): a , x , y = exgcd ( a , b , a , b ) while ( x < 0 ): x += b return x if __name__ == '__main__' : N , M = map ( int , input () . split ()) Divider = [ 0 ] Remainder = [ 0 ] for i in range ( 1 , N + 1 ): a , b = map ( int , input () . split ()) Divider . append ( a ) Remainder . append ( b ) flag = True for i in range ( 2 , N + 1 ): M1 , M2 = Divider [ i - 1 ], Divider [ i ] t1 , t2 = Remainder [ i - 1 ], Remainder [ i ] T = gcd ( M1 , M2 ) if (( t2 - t1 ) % T != 0 ): flag = False break Divider [ i ] = ( M1 * M2 ) // T Remainder [ i ] = ( inv ( M1 // T , M2 // T ) * ( t2 - t1 ) // T ) % ( M2 // T ) * M1 + t1 Remainder [ i ] = ( Remainder [ i ] % Divider [ i ] + Divider [ i ]) % Divider [ i ] if ( flag ): ans = Remainder [ N ] else : ans =- 1 \u4e0a\u9762C++\u7684\u4ee3\u7801\u65e0\u6cd5\u8fdb\u884c\u8d85\u51fa __int128 \u8303\u56f4\u7684\u8ba1\u7b97\uff0c\u9700\u8981\u8fdb\u884c\u624b\u5199\u9ad8\u7cbe\u5ea6\u624d\u80fd\u5b9e\u73b0\u4e0ePython\u76f8\u540c\u7684\u6548\u679c\u3002","title":"\u5e94\u7528"},{"location":"c-basic/structure/","text":"\u903b\u8f91\u7ed3\u6784 \u00b6 Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a LyuLumos , Zhang1933 \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u672c\u601d\u8def \u00b6 \u8f93\u5165 \u2192 \u8ba1\u7b97\u5904\u7406 \u2192 \u8f93\u51fa \u57fa\u672c\u7ed3\u6784 \u00b6 1 2 3 4 5 6 7 #include <stdio.h> // \u5934\u6587\u4ef6 int main () // \u4e3b\u51fd\u6570 { printf ( \"Hello, world!\" ); // \u8c03\u7528 printf \u51fd\u6570 return 0 ; // \u8fd4\u56de0\uff0c\u4e3b\u51fd\u6570\u4e0d\u80fd\u8fd4\u56de\u5176\u4ed6\u503c } \u987a\u5e8f\u7ed3\u6784 \u00b6 \u9009\u62e9\u7ed3\u6784 \u00b6 if \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 if ( \u6761\u4ef6\u8868\u8fbe\u5f0f ) { \u8bed\u53e51 ; \u8bed\u53e52 ; } else if ( \u6761\u4ef6\u8868\u8fbe\u5f0f ) { \u8bed\u53e53 ; } else { \u8bed\u53e54 ; } switch \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 switch ( \u8868\u8fbe\u5f0f ) { case \u5e38\u91cf\u8868\u8fbe\u5f0f1 \uff1a \u8bed\u53e51 \uff1b break ; case \u5e38\u91cf\u8868\u8fbe\u5f0f2 \uff1a \u8bed\u53e52 \uff1b \u8bed\u53e53 \uff1b break ; ... default : //\u53ef\u7701\u7565 \u8bed\u53e5n \uff1b } \u4e0d\u8981\u5fd8\u8bb0 break \u548c\u6bcf\u79cd\u60c5\u51b5\u540e\u7684 : switch \u8bed\u53e5\u7684\u5bf9\u8c61\u53ea\u80fd\u662f int char bool \u7c7b\u578b\u7684\u6570\u636e \u5faa\u73af\u7ed3\u6784 \u00b6 for \u00b6 1 2 3 4 for ( init ; condition ; increment ) { statement ( s ); } while \u00b6 1 2 3 4 while ( condition ) { statement ( s ); } do-while \u00b6 1 2 3 4 do { statement ( s ); // \u8bed\u53e5\u81f3\u5c11\u4f1a\u88ab\u6267\u884c\u4e00\u6b21 } while ( condition ); \u5d4c\u5957\u5faa\u73af \u00b6 \u2002\u2002\u5c31\u662f\u5728\u5faa\u73af\u91cc\u9762\u5faa\u73af\u3002 1 2 3 4 5 6 7 for ( init ; condition ; increment ) { while ( condition ) { statement ( s ); } } \u6b7b\u5faa\u73af \u00b6 \u8868\u793a\u4e0d\u4f1a\u7ec8\u6b62\u7684\u5faa\u73af\u3002 1 2 while ( true ){} for (;;) break&continue; \u00b6 break\u8868\u793a\u8df3\u51fa\u5faa\u73af\uff1b continue\u8868\u793a\u7ed3\u675f\u672c\u6b21\u5faa\u73af\uff0c\u76f4\u63a5\u8fdb\u884c\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u53ea\u80fd\u7528\u4e8e\u5faa\u73af\u7ed3\u6784\u3002 \u4f8b\uff1a\u5224\u65adn\u662f\u5426\u4e3a\u7d20\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <stdio.h> int main () { int n , flg = 0 ; scanf ( \"%d\" , & n ); for ( int i = 2 ; i < n ; i ++ ) { if ( n % i != 0 ) continue ; //\u4e0d\u662f\u56e0\u5b50\u7ee7\u7eed\u5faa\u73af flg = 1 ; break ; //\u8df3\u51fa\u5faa\u73af } if ( flg == 1 ) printf ( \"NO \\n \" ); else printf ( \"YES \\n \" ); return 0 ; } \u7b97\u6cd5\u7ade\u8d5b\u4e2d\u7684\u8f93\u5165\u8f93\u51fa \u00b6 \u5904\u7406\u5230\u6587\u4ef6\u7ed3\u675f \u00b6 \u4f8b\u5982\uff0c\u7ed9\u51fa\u6574\u6570a\u548cb\u7684\u503c\uff0c\u8f93\u51faa+b\uff0c\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6570\u636e\uff0c\u5904\u7406\u5230\u6587\u4ef6\u7ed3\u675f\u3002 C\u8bed\u8a00 EOF\u5728C\u6807\u51c6\u51fd\u6570\u5e93\u4e2d\u8868\u793a \u6587\u4ef6\u7ed3\u675f\u7b26(end of file) \uff0c\u5728while\u5faa\u73af\u4e2d\u4ee5EOF\u4e3a\u6587\u4ef6\u7ed3\u675f\u6807\u5fd7\u3002\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165Ctrl+z\u53ef\u4ee5\u7ed3\u675f\u8f93\u5165\u3002 1 2 3 4 5 6 7 8 9 10 11 #include <stdio.h> int main () { int a , b ; while ( scanf ( \"%d%d\" , & a , & b ) != EOF ) //\u6216\u4f7f\u7528 while(~scanf(\"%d%d\",&a,&b)) { printf ( \"%d \\n \" , a + b ); } return 0 ; } C++ 1 2 3 4 5 6 7 8 9 10 11 #include <iostream> using namepsace std ; int main () { int a , b ; while ( cin >> a >> b ) { cout << a + b << endl ; } return 0 ; } \u5f53\u9898\u76ee\u662f\u591a\u7ec4\u6570\u636e\u4e14\u5904\u7406\u5230\u6587\u4ef6\u7ed3\u675f\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u5b9a\u8981\u5199EOF\u6216\u8005~( \u63a8\u8350\u4f7f\u7528 )\uff0c\u4e0d\u7136\u53ef\u80fd\u4f1a\u62a5\u9519\u3002 T\u7ec4\u6837\u4f8b\u8f93\u5165\u8f93\u51fa \u00b6 \u7ed9\u51fa\u6574\u6570a\u548cb\u7684\u503c\uff0c\u8f93\u51faa+b\uff0c\u8f93\u5165\u5305\u542bT\u7ec4\u6570\u636e\u3002\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u4e3aT\uff0c\u4e4b\u540e\u7684T\u884c\u5206\u522b\u662fa\u548cb\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 #include <stdio.h> int main () { int a , b , t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & a , & b ); printf ( \"%d \\n \" , a + b ); } return 0 ; }","title":"\u903b\u8f91\u7ed3\u6784"},{"location":"c-basic/structure/#_1","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a LyuLumos , Zhang1933 \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002","title":"\u903b\u8f91\u7ed3\u6784"},{"location":"c-basic/structure/#_2","text":"\u8f93\u5165 \u2192 \u8ba1\u7b97\u5904\u7406 \u2192 \u8f93\u51fa","title":"\u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u672c\u601d\u8def"},{"location":"c-basic/structure/#_3","text":"1 2 3 4 5 6 7 #include <stdio.h> // \u5934\u6587\u4ef6 int main () // \u4e3b\u51fd\u6570 { printf ( \"Hello, world!\" ); // \u8c03\u7528 printf \u51fd\u6570 return 0 ; // \u8fd4\u56de0\uff0c\u4e3b\u51fd\u6570\u4e0d\u80fd\u8fd4\u56de\u5176\u4ed6\u503c }","title":"\u57fa\u672c\u7ed3\u6784"},{"location":"c-basic/structure/#_4","text":"","title":"\u987a\u5e8f\u7ed3\u6784"},{"location":"c-basic/structure/#_5","text":"","title":"\u9009\u62e9\u7ed3\u6784"},{"location":"c-basic/structure/#if","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 if ( \u6761\u4ef6\u8868\u8fbe\u5f0f ) { \u8bed\u53e51 ; \u8bed\u53e52 ; } else if ( \u6761\u4ef6\u8868\u8fbe\u5f0f ) { \u8bed\u53e53 ; } else { \u8bed\u53e54 ; }","title":"if"},{"location":"c-basic/structure/#switch","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 switch ( \u8868\u8fbe\u5f0f ) { case \u5e38\u91cf\u8868\u8fbe\u5f0f1 \uff1a \u8bed\u53e51 \uff1b break ; case \u5e38\u91cf\u8868\u8fbe\u5f0f2 \uff1a \u8bed\u53e52 \uff1b \u8bed\u53e53 \uff1b break ; ... default : //\u53ef\u7701\u7565 \u8bed\u53e5n \uff1b } \u4e0d\u8981\u5fd8\u8bb0 break \u548c\u6bcf\u79cd\u60c5\u51b5\u540e\u7684 : switch \u8bed\u53e5\u7684\u5bf9\u8c61\u53ea\u80fd\u662f int char bool \u7c7b\u578b\u7684\u6570\u636e","title":"switch"},{"location":"c-basic/structure/#_6","text":"","title":"\u5faa\u73af\u7ed3\u6784"},{"location":"c-basic/structure/#for","text":"1 2 3 4 for ( init ; condition ; increment ) { statement ( s ); }","title":"for"},{"location":"c-basic/structure/#while","text":"1 2 3 4 while ( condition ) { statement ( s ); }","title":"while"},{"location":"c-basic/structure/#do-while","text":"1 2 3 4 do { statement ( s ); // \u8bed\u53e5\u81f3\u5c11\u4f1a\u88ab\u6267\u884c\u4e00\u6b21 } while ( condition );","title":"do-while"},{"location":"c-basic/structure/#_7","text":"\u5c31\u662f\u5728\u5faa\u73af\u91cc\u9762\u5faa\u73af\u3002 1 2 3 4 5 6 7 for ( init ; condition ; increment ) { while ( condition ) { statement ( s ); } }","title":"\u5d4c\u5957\u5faa\u73af"},{"location":"c-basic/structure/#_8","text":"\u8868\u793a\u4e0d\u4f1a\u7ec8\u6b62\u7684\u5faa\u73af\u3002 1 2 while ( true ){} for (;;)","title":"\u6b7b\u5faa\u73af"},{"location":"c-basic/structure/#break","text":"break\u8868\u793a\u8df3\u51fa\u5faa\u73af\uff1b continue\u8868\u793a\u7ed3\u675f\u672c\u6b21\u5faa\u73af\uff0c\u76f4\u63a5\u8fdb\u884c\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u53ea\u80fd\u7528\u4e8e\u5faa\u73af\u7ed3\u6784\u3002 \u4f8b\uff1a\u5224\u65adn\u662f\u5426\u4e3a\u7d20\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <stdio.h> int main () { int n , flg = 0 ; scanf ( \"%d\" , & n ); for ( int i = 2 ; i < n ; i ++ ) { if ( n % i != 0 ) continue ; //\u4e0d\u662f\u56e0\u5b50\u7ee7\u7eed\u5faa\u73af flg = 1 ; break ; //\u8df3\u51fa\u5faa\u73af } if ( flg == 1 ) printf ( \"NO \\n \" ); else printf ( \"YES \\n \" ); return 0 ; }","title":"break&continue;"},{"location":"c-basic/structure/#_9","text":"","title":"\u7b97\u6cd5\u7ade\u8d5b\u4e2d\u7684\u8f93\u5165\u8f93\u51fa"},{"location":"c-basic/structure/#_10","text":"\u4f8b\u5982\uff0c\u7ed9\u51fa\u6574\u6570a\u548cb\u7684\u503c\uff0c\u8f93\u51faa+b\uff0c\u8f93\u5165\u5305\u542b\u591a\u7ec4\u6570\u636e\uff0c\u5904\u7406\u5230\u6587\u4ef6\u7ed3\u675f\u3002 C\u8bed\u8a00 EOF\u5728C\u6807\u51c6\u51fd\u6570\u5e93\u4e2d\u8868\u793a \u6587\u4ef6\u7ed3\u675f\u7b26(end of file) \uff0c\u5728while\u5faa\u73af\u4e2d\u4ee5EOF\u4e3a\u6587\u4ef6\u7ed3\u675f\u6807\u5fd7\u3002\u5728\u547d\u4ee4\u884c\u4e2d\u8f93\u5165Ctrl+z\u53ef\u4ee5\u7ed3\u675f\u8f93\u5165\u3002 1 2 3 4 5 6 7 8 9 10 11 #include <stdio.h> int main () { int a , b ; while ( scanf ( \"%d%d\" , & a , & b ) != EOF ) //\u6216\u4f7f\u7528 while(~scanf(\"%d%d\",&a,&b)) { printf ( \"%d \\n \" , a + b ); } return 0 ; } C++ 1 2 3 4 5 6 7 8 9 10 11 #include <iostream> using namepsace std ; int main () { int a , b ; while ( cin >> a >> b ) { cout << a + b << endl ; } return 0 ; } \u5f53\u9898\u76ee\u662f\u591a\u7ec4\u6570\u636e\u4e14\u5904\u7406\u5230\u6587\u4ef6\u7ed3\u675f\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u5b9a\u8981\u5199EOF\u6216\u8005~( \u63a8\u8350\u4f7f\u7528 )\uff0c\u4e0d\u7136\u53ef\u80fd\u4f1a\u62a5\u9519\u3002","title":"\u5904\u7406\u5230\u6587\u4ef6\u7ed3\u675f"},{"location":"c-basic/structure/#t","text":"\u7ed9\u51fa\u6574\u6570a\u548cb\u7684\u503c\uff0c\u8f93\u51faa+b\uff0c\u8f93\u5165\u5305\u542bT\u7ec4\u6570\u636e\u3002\u8f93\u5165\u7684\u7b2c\u4e00\u884c\u4e3aT\uff0c\u4e4b\u540e\u7684T\u884c\u5206\u522b\u662fa\u548cb\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 #include <stdio.h> int main () { int a , b , t ; scanf ( \"%d\" , & t ); while ( t -- ) { scanf ( \"%d%d\" , & a , & b ); printf ( \"%d \\n \" , a + b ); } return 0 ; }","title":"T\u7ec4\u6837\u4f8b\u8f93\u5165\u8f93\u51fa"},{"location":"data-struct/ST/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a zrz \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u8be6\u7ec6\u8bf7\u89c1\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357P41\u9875 \u5728RMQ\u95ee\u9898(\u533a\u95f4\u6700\u503c\u95ee\u9898)\uff0cST\u8868\u662f\u57fa\u4e8e\u500d\u589e\u65b9\u6cd5\uff0c\u5b9e\u73b0\u4e86\u533a\u95f4\u67e5\u8be2 O(1) O(1) \u4f18\u4e8e\u7ebf\u6bb5\u6811\uff0c\u6811\u72b6\u6570\u7ec4\u7b49\u67e5\u8be2 \uff0c\u4f46\u662f\u4e0d\u80fd\u5b9e\u73b0\u533a\u95f4\u4fee\u6539\u6216\u8005\u5355\u70b9\u4fee\u6539 \u57fa\u672c\u662f\u9884\u5904\u7406\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u590d\u6742\u5ea6 O(nlogn) O(nlogn) ps : \u4e0b\u9762\u4ee3\u7801\u7ed9\u51fa\u7684Log\u6570\u7ec4\u662f\u6c42\u51fa log_2n log_2n \u7684\u6240\u6709\u503c\uff0c\u901f\u5ea6\u4e0a\u4f18\u4e8ec++\u5185\u90e8\u7684log\u51fd\u6570 \u9884\u5904\u7406\u6a21\u7248\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 int f [ maxn ][ 30 ]; //\u7b2c\u4e8c\u7ef4\u662f\u4e00\u4e2a\u957f\u5ea6\u8303\u56f4\uff0c\u4e00\u822c\u5f00\u523030\u5c31\u591f\u5927\u4e86\uff0c\u4f8b\u5982f[i][j]\u4ee3\u8868\u4ecei\u5f00\u59cb\u957f\u5ea6\u4e3a2^j\u533a\u95f4\u7684\u6700\u503c int Log [ maxn ]; void inits (){ Log [ 1 ] = 0 ; for ( int i = 2 ; i <= n ; i ++ ) Log [ i ] = Log [ i / 2 ] + 1 ; } void RMQ_ST (){ for ( int i = 1 ; i <= n ; i ++ ){ f [ i ][ 0 ] = a [ i ]; } int t = Log [ n ] + 1 ; //\u9884\u5904\u7406Log\u6570\u7ec4\u8981\u6bd4\u81ea\u5e26\u7684log2\u5feb\u4e00\u4e9b\uff0c\u5982\u679c\u8981\u8fdb\u884c\u5927\u91cf\u7684\u533a\u95f4\u67e5\u8be2\uff0c\u6700\u597d\u662f\u9884\u5904\u7406\u4e00\u4e0b // int t = log2(n)+1; for ( int j = 1 ; j < t ; j ++ ){ for ( int i = 1 ; i <= n - ( 1 << j ) + 1 ; i ++ ){ f [ i ][ j ] = max ( f [ i ][ j -1 ], f [ i + ( 1 << ( j -1 ))][ j -1 ]); } } } \u67e5\u8be2\u6a21\u7248\uff1a \u590d\u6742\u5ea6 O(1) O(1) 1 2 int kk = Log [ x - i + 1 ]; //\u540c\u6837\u662f\u4f7f\u7528\u9884\u5904\u7406\u6570\u7ec4 mx = max ( f [ i ][ kk ], f [ x - ( 1 << kk ) + 1 ][ kk ]);","title":"ST\u7b97\u6cd5"},{"location":"data-struct/fenwick-tree/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a YanhuiJessica \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u4e3b\u8981\u7528\u9014 \u00b6 \u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2 \u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2 \u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2 \u5355\u70b9\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2 (\u03a6\u0434\u03a6\u256c) \u6c42\u9006\u5e8f\u5bf9 \u539f\u7406 \u00b6 \u6811\u72b6\u6570\u7ec4\u4e2d\u4f7f\u7528\u6570\u7ec4\u6765\u5b58\u50a8\u503c\uff0c\u800c\u6570\u7ec4\u4e2d\u5404\u4e2a\u5143\u7d20\u95f4\u5448\u6811\u5f62\u5173\u7cfb e.g. \u901a\u8fc7\u9010\u4e2a\u63d2\u5165\u7684\u65b9\u5f0f\u521b\u5efa\u6570\u7ec4 [1, 2, 3, 4, 5] \u7684\u6811\u72b6\u6570\u7ec4 \u6811\u72b6\u6570\u7ec4\u88ab\u53d1\u660e\u662f\u53d7\u300c\u6240\u6709\u7684\u6574\u6570\u90fd\u53ef\u4ee5\u8868\u793a\u6210 2 2 \u7684\u5e42\u548c\uff08\u4e8c\u8fdb\u5236\uff09\u300d\u7684\u542f\u53d1\uff0c\u63a5\u4e0b\u6765\uff0c\u4e5f\u5c06\u6839\u636e\u56fe\u7247\u5e76\u7ed3\u5408\u4e8c\u8fdb\u5236\u6765\u89e3\u91ca A \u6570\u7ec4\u7528\u4e8e\u5b58\u50a8\u539f\u59cb\u6570\u636e\uff0cC \u6570\u7ec4\u7ba1\u7406 A \u6570\u7ec4\uff08A \u6570\u7ec4\u53ef\u89c6\u60c5\u51b5\u9009\u62e9\u662f\u5426\u4fdd\u7559\uff0c\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ea\u7528 C \u6570\u7ec4\u8db3\u77e3\uff09(<\u309d\u03c9\u03a6) \u7531\u56fe\u53ef\u77e5\uff0cC[2] \u7ba1\u7406 A[1] \u548c A[2]\uff0cC[4] \u7ba1\u7406 A[1]\u3001A[2]\u3001A[3] \u548c A[4]\uff0c\u4ee5\u6b64\u7c7b\u63a8 \u7c7b\u4f3c\u4e8e\u4e8c\u8fdb\u5236\uff0c\u6bd4\u5982 5 5 \u7684\u4e8c\u8fdb\u5236 101 \u53ef\u4ee5\u62c6\u5206\u6210 101 = 100 + 1 \uff0c\u5982\u679c\u8981\u6c42 A[1] \u5230 A[5] \u7684\u548c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 C[4] + C[5]\uff08 \u8fd9\u6837\u770b\u8d77\u6765\u597d\u50cf\u548c\u524d\u7f00\u548c\u5dee\u4e0d\u591a(\u03a6\u0434\u03a6\u256c) \u524d\u7f00\u548c\u4fee\u6539\u8d77\u6765\u65b9\u4fbf\u5417\uff1f(\u03a6^\u03a6)\uff09 \u6811\u72b6\u6570\u7ec4\u67e5\u8be2\u548c\u4fee\u6539\u7684\u590d\u6742\u5ea6\u90fd\u4e3a O(log(n)) O(log(n)) \u57fa\u672c\u64cd\u4f5c \u00b6 lowbit \u51fd\u6570 \u00b6 \u4f60\u53ef\u80fd\u5df2\u7ecf\u53d1\u73b0\u4e86\uff0c\u64cd\u4f5c\u7684\u5173\u952e\u5728\u4e8e\u4e8c\u8fdb\u5236\u4e2d\u7684 1 1 \uff0c\u51c6\u786e\u7684\u8bf4\u662f\u9700\u8981\u77e5\u9053\u6570\u7531 2 2 \u7684\u54ea\u4e9b\u5e42\u7ec4\u6210 \u4e8e\u662f\u5f15\u5165\u4e86\u51fd\u6570 lowbit \uff0c\u7528\u6765\u6c42\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u5f0f\u4e2d\u6700\u4f4e\u4f4d\u7684 1 1 \u6240\u4ee3\u8868\u7684\u503c \u6bd4\u5982 6_{(10)}=110_{(2)} 6_{(10)}=110_{(2)} \uff0c\u4ece\u53f3\u5f80\u5de6\u6570\u7b2c\u4e00\u4e2a 1 1 \u548c\u5176\u540e\u7684 0 0 \u7ec4\u6210 10_{(2)} 10_{(2)} \uff0c\u5373\u4ee3\u8868\u503c\u662f 2_{(10)} 2_{(10)} 1 2 3 4 5 6 7 8 // \u5b8f\u5b9a\u4e49\u5199\u6cd5 #define lowbit(x) (x & (-x)) // \u51fd\u6570\u5199\u6cd5 int lowbit ( int x ) { return x & ( - x ); } \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f x & -x \uff0c\u53ef\u4ee5\u5b66\u4e60\u5173\u4e8e \u8865\u7801 \u7684\u77e5\u8bc6 \u8d1f\u6570\u7684\u8865\u7801\u662f\u5176\u5bf9\u5e94\u6b63\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u6309\u4f4d\u53d6\u53cd\u540e\u52a0 1 1 \u7684\u7ed3\u679c 6_{(10)}\\, \\& \\,-6_{(10)} = 110_{(2)}\\, \\& \\,(001_{(2)} + 1_{(2)}) = 010_{(2)} 6_{(10)}\\, \\& \\,-6_{(10)} = 110_{(2)}\\, \\& \\,(001_{(2)} + 1_{(2)}) = 010_{(2)} \u5355\u70b9\u4fee\u6539 \u00b6 \u4f2a\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 procedure change ( pos , v ) // pos\uff1a\u8981\u4fee\u6539\u5143\u7d20\u7684\u4e0b\u6807 // v\uff1a\u6539\u53d8\u7684\u503c { while ( pos <= n ) // n \u4e3a\u6570\u7ec4\u5143\u7d20\u7684\u6570\u91cf { c [ pos ] += v ; pos += lowbit ( pos ); } // \u5faa\u73af\u5f62\u5f0f // for(i = pos; i <= n; i += lowbit(i)) // c[i] += v; } \u9664\u975e\u5fc5\u8981\uff0cA \u6570\u7ec4\u7684\u66f4\u65b0\u53ef\u4ee5\u4e0d\u8003\u8651 \u6c42\u548c \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 procedure getsum ( x ) // \u6c42 a[1]...a[x]\u7684\u548c { ans = 0 ; while ( x ) { ans += c [ x ]; x -= lowbit ( x ); } return ans ; // \u5faa\u73af\u5f62\u5f0f // ans = 0; // for (i = x; i > 0; i -= lowbit(i)) // ans += c[i]; } \u6709\u4e86 A[1] \u5230 A[n] \u7684\u6c42\u548c\u65b9\u6cd5\uff0c\u4efb\u610f\u533a\u95f4\u7684\u6c42\u548c\u5c31\u7b80\u5355\u4e86\\(\u03a6\u03c9\u03a6)/\u3002\u8981\u6c42 [l, r] [l, r] \u7684\u533a\u95f4\u548c\uff0c\u53ea\u9700\u8981 getsum(r) - getsum(l-1) \u5c31\u53ef\u4ee5\u4e86(<\u309d\u03c9\u03a6) \u8fdb\u9636 \u00b6 \u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2 \u00b6 \u5229\u7528\u5dee\u5206\u5efa\u6811 \u6570\u7ec4 D \u7528\u4e8e\u5b58\u50a8 A \u6570\u7ec4\u76f8\u90bb\u4e24\u9879\u7684\u5dee\u503c\uff0c\u5373 D[i] = A[i] - A[i - 1] D[i] = A[i] - A[i - 1] \u5bf9\u4e8e\u4e0b\u9762\u7684\u6570\u7ec4 A \u53ca\u5176\u5dee\u5206\u6570\u7ec4 D A[] = \\{1, 2, 3, 2, 1\\} A[] = \\{1, 2, 3, 2, 1\\} D[] = \\{1, 1, 1, -1, -1\\} D[] = \\{1, 1, 1, -1, -1\\} \u5c06 [1, 3] [1, 3] \u533a\u95f4\u5185\u6240\u6709\u6570\u52a0 2 2 A[] = \\{1, 4, 5, 4, 1\\} A[] = \\{1, 4, 5, 4, 1\\} D[] = \\{1, 3, 1, -1, -3\\} D[] = \\{1, 3, 1, -1, -3\\} \u5dee\u5206\u6570\u7ec4\u7684\u4f18\u70b9\u5c31\u4f53\u73b0\u4e86\uff0c\u5f53\u67d0\u4e2a [l, r] [l, r] \u533a\u95f4\u5185\u6240\u6709\u6570\u7edf\u4e00\u52a0\u51cf\u65f6\uff0c\u53ea\u6709 D[l] D[l] \u548c D[r + 1] D[r + 1] \u4e24\u4e2a\u5143\u7d20\u7684\u503c\u53d1\u751f\u53d8\u5316 \u8fd9\u6837\u4e00\u6765\uff0cC \u6570\u7ec4\u5c31\u5e94\u8be5\u5efa\u7acb\u5728 D \u6570\u7ec4\u800c\u975e A \u6570\u7ec4\u4e0a\uff0c\u533a\u95f4\u66f4\u65b0\u5219\u8f6c\u5316\u4e3a\u66f4\u65b0\u4e24\u4e2a\u70b9\uff0c\u66f4\u65b0\u51fd\u6570\u548c\u6c42\u548c\u51fd\u6570\u5219\u4e0d\u9700\u8981\u53d8 \u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2 \u00b6 \u57fa\u4e8e \u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2 \u7684\u5dee\u5206\u601d\u8def\uff0c\u8003\u8651\u5982\u4f55\u5728\u5176\u6784\u5efa\u7684\u6811\u72b6\u6570\u7ec4\u4e2d\u6c42\u6570\u7ec4 A \u7684\u524d\u7f00\u548c\uff1a \u2211_{i=1}^pa[i]=\u2211_{i=1}^p\u2211_{j=1}^id[j] \u2211_{i=1}^pa[i]=\u2211_{i=1}^p\u2211_{j=1}^id[j] \u5728\u5f0f\u5b50 \u2211_{i=1}^p\u2211_{j=1}^id[j] \u2211_{i=1}^p\u2211_{j=1}^id[j] \u4e2d\uff0c d[1] d[1] \u88ab\u7528\u4e86 p p \u6b21\uff0c d[2] d[2] \u88ab\u7528\u4e86 p-1 p-1 \u6b21\u2026\u2026\u7531\u6b64\u53ef\u4ee5\u63a8\u51fa\uff1a \u2211_{i=1}^p\u2211_{j=1}^id[j]=\u2211_{i=1}^pd[i]*(p-i+1)=(p+1)*\u2211_{i=1}^pd[i]-\u2211_{i=1}^pd[i]*i \u2211_{i=1}^p\u2211_{j=1}^id[j]=\u2211_{i=1}^pd[i]*(p-i+1)=(p+1)*\u2211_{i=1}^pd[i]-\u2211_{i=1}^pd[i]*i \u63a5\u4e0b\u6765\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4\u7684\u524d\u7f00\u548c\uff0c sum1[i]=d[i] sum1[i]=d[i] \u548c sum2=d[i] * i sum2=d[i] * i \u67e5\u8be2\u548c\u4fee\u6539\u7684\u4f2a\u4ee3\u7801\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 procedure change ( pos , v ) { for ( i = pos ; i <= n ; i += lowbit ( i )) sum1 [ i ] += v , sum2 [ i ] += v * pos ; } // \u66f4\u65b0\u533a\u95f4 [l, r] // change(l, v), change(r + 1, -v); procedure getsum ( pos ) { ans = 0 ; for ( i = pos ; i ; i -= lowbit ( i )) ans += ( p + 1 ) * sum1 [ i ] - sum2 [ i ]; return ans ; } \u4f8b\u9898 \u00b6 \u6811\u72b6\u6570\u7ec4 1\uff1a\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2 \u6811\u72b6\u6570\u7ec4 2\uff1a\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2 \u6811\u72b6\u6570\u7ec4 3\uff1a\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2 \u6c42\u9006\u5e8f\u5bf9\uff1aUltra-QuickSort \u53c2\u8003\u8d44\u6599 \u00b6 \u6811\u72b6\u6570\u7ec4-\u7ef4\u57fa\u767e\u79d1 \u6811\u72b6\u6570\u7ec4-OI Wiki","title":"\u6811\u72b6\u6570\u7ec4"},{"location":"data-struct/fenwick-tree/#_1","text":"\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2 \u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2 \u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2 \u5355\u70b9\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2 (\u03a6\u0434\u03a6\u256c) \u6c42\u9006\u5e8f\u5bf9","title":"\u4e3b\u8981\u7528\u9014"},{"location":"data-struct/fenwick-tree/#_2","text":"\u6811\u72b6\u6570\u7ec4\u4e2d\u4f7f\u7528\u6570\u7ec4\u6765\u5b58\u50a8\u503c\uff0c\u800c\u6570\u7ec4\u4e2d\u5404\u4e2a\u5143\u7d20\u95f4\u5448\u6811\u5f62\u5173\u7cfb e.g. \u901a\u8fc7\u9010\u4e2a\u63d2\u5165\u7684\u65b9\u5f0f\u521b\u5efa\u6570\u7ec4 [1, 2, 3, 4, 5] \u7684\u6811\u72b6\u6570\u7ec4 \u6811\u72b6\u6570\u7ec4\u88ab\u53d1\u660e\u662f\u53d7\u300c\u6240\u6709\u7684\u6574\u6570\u90fd\u53ef\u4ee5\u8868\u793a\u6210 2 2 \u7684\u5e42\u548c\uff08\u4e8c\u8fdb\u5236\uff09\u300d\u7684\u542f\u53d1\uff0c\u63a5\u4e0b\u6765\uff0c\u4e5f\u5c06\u6839\u636e\u56fe\u7247\u5e76\u7ed3\u5408\u4e8c\u8fdb\u5236\u6765\u89e3\u91ca A \u6570\u7ec4\u7528\u4e8e\u5b58\u50a8\u539f\u59cb\u6570\u636e\uff0cC \u6570\u7ec4\u7ba1\u7406 A \u6570\u7ec4\uff08A \u6570\u7ec4\u53ef\u89c6\u60c5\u51b5\u9009\u62e9\u662f\u5426\u4fdd\u7559\uff0c\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ea\u7528 C \u6570\u7ec4\u8db3\u77e3\uff09(<\u309d\u03c9\u03a6) \u7531\u56fe\u53ef\u77e5\uff0cC[2] \u7ba1\u7406 A[1] \u548c A[2]\uff0cC[4] \u7ba1\u7406 A[1]\u3001A[2]\u3001A[3] \u548c A[4]\uff0c\u4ee5\u6b64\u7c7b\u63a8 \u7c7b\u4f3c\u4e8e\u4e8c\u8fdb\u5236\uff0c\u6bd4\u5982 5 5 \u7684\u4e8c\u8fdb\u5236 101 \u53ef\u4ee5\u62c6\u5206\u6210 101 = 100 + 1 \uff0c\u5982\u679c\u8981\u6c42 A[1] \u5230 A[5] \u7684\u548c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 C[4] + C[5]\uff08 \u8fd9\u6837\u770b\u8d77\u6765\u597d\u50cf\u548c\u524d\u7f00\u548c\u5dee\u4e0d\u591a(\u03a6\u0434\u03a6\u256c) \u524d\u7f00\u548c\u4fee\u6539\u8d77\u6765\u65b9\u4fbf\u5417\uff1f(\u03a6^\u03a6)\uff09 \u6811\u72b6\u6570\u7ec4\u67e5\u8be2\u548c\u4fee\u6539\u7684\u590d\u6742\u5ea6\u90fd\u4e3a O(log(n)) O(log(n))","title":"\u539f\u7406"},{"location":"data-struct/fenwick-tree/#_3","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"data-struct/fenwick-tree/#lowbit","text":"\u4f60\u53ef\u80fd\u5df2\u7ecf\u53d1\u73b0\u4e86\uff0c\u64cd\u4f5c\u7684\u5173\u952e\u5728\u4e8e\u4e8c\u8fdb\u5236\u4e2d\u7684 1 1 \uff0c\u51c6\u786e\u7684\u8bf4\u662f\u9700\u8981\u77e5\u9053\u6570\u7531 2 2 \u7684\u54ea\u4e9b\u5e42\u7ec4\u6210 \u4e8e\u662f\u5f15\u5165\u4e86\u51fd\u6570 lowbit \uff0c\u7528\u6765\u6c42\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u8fbe\u5f0f\u4e2d\u6700\u4f4e\u4f4d\u7684 1 1 \u6240\u4ee3\u8868\u7684\u503c \u6bd4\u5982 6_{(10)}=110_{(2)} 6_{(10)}=110_{(2)} \uff0c\u4ece\u53f3\u5f80\u5de6\u6570\u7b2c\u4e00\u4e2a 1 1 \u548c\u5176\u540e\u7684 0 0 \u7ec4\u6210 10_{(2)} 10_{(2)} \uff0c\u5373\u4ee3\u8868\u503c\u662f 2_{(10)} 2_{(10)} 1 2 3 4 5 6 7 8 // \u5b8f\u5b9a\u4e49\u5199\u6cd5 #define lowbit(x) (x & (-x)) // \u51fd\u6570\u5199\u6cd5 int lowbit ( int x ) { return x & ( - x ); } \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f x & -x \uff0c\u53ef\u4ee5\u5b66\u4e60\u5173\u4e8e \u8865\u7801 \u7684\u77e5\u8bc6 \u8d1f\u6570\u7684\u8865\u7801\u662f\u5176\u5bf9\u5e94\u6b63\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u6309\u4f4d\u53d6\u53cd\u540e\u52a0 1 1 \u7684\u7ed3\u679c 6_{(10)}\\, \\& \\,-6_{(10)} = 110_{(2)}\\, \\& \\,(001_{(2)} + 1_{(2)}) = 010_{(2)} 6_{(10)}\\, \\& \\,-6_{(10)} = 110_{(2)}\\, \\& \\,(001_{(2)} + 1_{(2)}) = 010_{(2)}","title":"lowbit \u51fd\u6570"},{"location":"data-struct/fenwick-tree/#_4","text":"\u4f2a\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 procedure change ( pos , v ) // pos\uff1a\u8981\u4fee\u6539\u5143\u7d20\u7684\u4e0b\u6807 // v\uff1a\u6539\u53d8\u7684\u503c { while ( pos <= n ) // n \u4e3a\u6570\u7ec4\u5143\u7d20\u7684\u6570\u91cf { c [ pos ] += v ; pos += lowbit ( pos ); } // \u5faa\u73af\u5f62\u5f0f // for(i = pos; i <= n; i += lowbit(i)) // c[i] += v; } \u9664\u975e\u5fc5\u8981\uff0cA \u6570\u7ec4\u7684\u66f4\u65b0\u53ef\u4ee5\u4e0d\u8003\u8651","title":"\u5355\u70b9\u4fee\u6539"},{"location":"data-struct/fenwick-tree/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 procedure getsum ( x ) // \u6c42 a[1]...a[x]\u7684\u548c { ans = 0 ; while ( x ) { ans += c [ x ]; x -= lowbit ( x ); } return ans ; // \u5faa\u73af\u5f62\u5f0f // ans = 0; // for (i = x; i > 0; i -= lowbit(i)) // ans += c[i]; } \u6709\u4e86 A[1] \u5230 A[n] \u7684\u6c42\u548c\u65b9\u6cd5\uff0c\u4efb\u610f\u533a\u95f4\u7684\u6c42\u548c\u5c31\u7b80\u5355\u4e86\\(\u03a6\u03c9\u03a6)/\u3002\u8981\u6c42 [l, r] [l, r] \u7684\u533a\u95f4\u548c\uff0c\u53ea\u9700\u8981 getsum(r) - getsum(l-1) \u5c31\u53ef\u4ee5\u4e86(<\u309d\u03c9\u03a6)","title":"\u6c42\u548c"},{"location":"data-struct/fenwick-tree/#_6","text":"","title":"\u8fdb\u9636"},{"location":"data-struct/fenwick-tree/#_7","text":"\u5229\u7528\u5dee\u5206\u5efa\u6811 \u6570\u7ec4 D \u7528\u4e8e\u5b58\u50a8 A \u6570\u7ec4\u76f8\u90bb\u4e24\u9879\u7684\u5dee\u503c\uff0c\u5373 D[i] = A[i] - A[i - 1] D[i] = A[i] - A[i - 1] \u5bf9\u4e8e\u4e0b\u9762\u7684\u6570\u7ec4 A \u53ca\u5176\u5dee\u5206\u6570\u7ec4 D A[] = \\{1, 2, 3, 2, 1\\} A[] = \\{1, 2, 3, 2, 1\\} D[] = \\{1, 1, 1, -1, -1\\} D[] = \\{1, 1, 1, -1, -1\\} \u5c06 [1, 3] [1, 3] \u533a\u95f4\u5185\u6240\u6709\u6570\u52a0 2 2 A[] = \\{1, 4, 5, 4, 1\\} A[] = \\{1, 4, 5, 4, 1\\} D[] = \\{1, 3, 1, -1, -3\\} D[] = \\{1, 3, 1, -1, -3\\} \u5dee\u5206\u6570\u7ec4\u7684\u4f18\u70b9\u5c31\u4f53\u73b0\u4e86\uff0c\u5f53\u67d0\u4e2a [l, r] [l, r] \u533a\u95f4\u5185\u6240\u6709\u6570\u7edf\u4e00\u52a0\u51cf\u65f6\uff0c\u53ea\u6709 D[l] D[l] \u548c D[r + 1] D[r + 1] \u4e24\u4e2a\u5143\u7d20\u7684\u503c\u53d1\u751f\u53d8\u5316 \u8fd9\u6837\u4e00\u6765\uff0cC \u6570\u7ec4\u5c31\u5e94\u8be5\u5efa\u7acb\u5728 D \u6570\u7ec4\u800c\u975e A \u6570\u7ec4\u4e0a\uff0c\u533a\u95f4\u66f4\u65b0\u5219\u8f6c\u5316\u4e3a\u66f4\u65b0\u4e24\u4e2a\u70b9\uff0c\u66f4\u65b0\u51fd\u6570\u548c\u6c42\u548c\u51fd\u6570\u5219\u4e0d\u9700\u8981\u53d8","title":"\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2"},{"location":"data-struct/fenwick-tree/#_8","text":"\u57fa\u4e8e \u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2 \u7684\u5dee\u5206\u601d\u8def\uff0c\u8003\u8651\u5982\u4f55\u5728\u5176\u6784\u5efa\u7684\u6811\u72b6\u6570\u7ec4\u4e2d\u6c42\u6570\u7ec4 A \u7684\u524d\u7f00\u548c\uff1a \u2211_{i=1}^pa[i]=\u2211_{i=1}^p\u2211_{j=1}^id[j] \u2211_{i=1}^pa[i]=\u2211_{i=1}^p\u2211_{j=1}^id[j] \u5728\u5f0f\u5b50 \u2211_{i=1}^p\u2211_{j=1}^id[j] \u2211_{i=1}^p\u2211_{j=1}^id[j] \u4e2d\uff0c d[1] d[1] \u88ab\u7528\u4e86 p p \u6b21\uff0c d[2] d[2] \u88ab\u7528\u4e86 p-1 p-1 \u6b21\u2026\u2026\u7531\u6b64\u53ef\u4ee5\u63a8\u51fa\uff1a \u2211_{i=1}^p\u2211_{j=1}^id[j]=\u2211_{i=1}^pd[i]*(p-i+1)=(p+1)*\u2211_{i=1}^pd[i]-\u2211_{i=1}^pd[i]*i \u2211_{i=1}^p\u2211_{j=1}^id[j]=\u2211_{i=1}^pd[i]*(p-i+1)=(p+1)*\u2211_{i=1}^pd[i]-\u2211_{i=1}^pd[i]*i \u63a5\u4e0b\u6765\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u4e24\u4e2a\u6570\u7ec4\u7684\u524d\u7f00\u548c\uff0c sum1[i]=d[i] sum1[i]=d[i] \u548c sum2=d[i] * i sum2=d[i] * i \u67e5\u8be2\u548c\u4fee\u6539\u7684\u4f2a\u4ee3\u7801\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 procedure change ( pos , v ) { for ( i = pos ; i <= n ; i += lowbit ( i )) sum1 [ i ] += v , sum2 [ i ] += v * pos ; } // \u66f4\u65b0\u533a\u95f4 [l, r] // change(l, v), change(r + 1, -v); procedure getsum ( pos ) { ans = 0 ; for ( i = pos ; i ; i -= lowbit ( i )) ans += ( p + 1 ) * sum1 [ i ] - sum2 [ i ]; return ans ; }","title":"\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2"},{"location":"data-struct/fenwick-tree/#_9","text":"\u6811\u72b6\u6570\u7ec4 1\uff1a\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2 \u6811\u72b6\u6570\u7ec4 2\uff1a\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2 \u6811\u72b6\u6570\u7ec4 3\uff1a\u533a\u95f4\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2 \u6c42\u9006\u5e8f\u5bf9\uff1aUltra-QuickSort","title":"\u4f8b\u9898"},{"location":"data-struct/fenwick-tree/#_10","text":"\u6811\u72b6\u6570\u7ec4-\u7ef4\u57fa\u767e\u79d1 \u6811\u72b6\u6570\u7ec4-OI Wiki","title":"\u53c2\u8003\u8d44\u6599"},{"location":"data-struct/hld/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a YanhuiJessica \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u7b80\u4ecb \u00b6 \u6811\u94fe\u5256\u5206\u5c06\u6811\u5206\u5272\u6210\u82e5\u5e72\u6761\u94fe\uff0c\u4ee5\u7ef4\u62a4\u6811\u4e0a\u8def\u5f84\u7684\u4fe1\u606f \u6811\u94fe\u5256\u5206\u901a\u5e38\u6307\u300c\u91cd\u94fe\u5256\u5206\u300d\uff0c\u5256\u5206\u540e\u7684\u6bcf\u6761\u94fe\u4e3a\u7ebf\u6027\u7ed3\u6784\uff0c\u4e14\u6bcf\u6761\u94fe\u4e0a\u7684\u8282\u70b9 DFS \u8bbf\u95ee\u8fde\u7eed\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7b49\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f \u9664\u4e86\u7528\u4e8e\u6811\u4e0a\u4e24\u70b9\u95f4\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u6216\u4ee5\u67d0\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u4fee\u6539\u548c\u67e5\u8be2\uff0c\u6811\u94fe\u5256\u5206\u8fd8\u53ef\u4ee5 O(logn) O(logn) \u5730\u6c42 LCA \u91cd\u94fe\u5256\u5206 \u00b6 \u57fa\u672c\u6982\u5ff5 \u00b6 \u91cd\u5b50\u8282\u70b9 \uff1a\u7236\u8282\u70b9\u7684\u6240\u6709\u5b69\u5b50\u8282\u70b9\u4e2d\u5b50\u6811\u8282\u70b9\u6570\u76ee\u6700\u591a\u7684\u8282\u70b9 \u8f7b\u5b50\u8282\u70b9 \uff1a\u9664\u91cd\u5b50\u8282\u70b9\u5916\u7684\u6240\u6709\u5b50\u8282\u70b9 \u91cd\u8fb9 \uff1a\u7236\u8282\u70b9\u5230\u5176\u91cd\u5b50\u8282\u70b9\u7684\u8fb9 \u8f7b\u8fb9 \uff1a\u7236\u8282\u70b9\u5230\u5176\u8f7b\u5b50\u8282\u70b9\u7684\u8fb9 \u91cd\u94fe \uff1a\u7531\u9996\u5c3e\u76f8\u63a5\u7684\u91cd\u8fb9\u6784\u6210\uff0c\u975e\u91cd\u94fe\u7aef\u70b9\u7684\u53f6\u5b50\u8282\u70b9\u53ef\u770b\u4f5c\u6784\u6210\u4e86\u957f\u5ea6\u4e3a 0 0 \u7684\u91cd\u94fe DFN \u5e8f\uff1a\u70b9\u6309\u7167 DFS \u8fdb\u5165\u8282\u70b9\u7684\u987a\u5e8f\u6392\u5217\u7684\u5e8f\u5217\uff0c\u662f DFS \u5e8f\u7684\u5b50\u5e8f\u5217 \u5b9e\u73b0 \u00b6 \u901a\u8fc7\u4e24\u4e2a DFS \u5b9e\u73b0\u6811\u94fe\u5256\u5206 \u7b2c\u4e00\u4e2a DFS \u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u3001\u6df1\u5ea6\u3001\u5b50\u6811\u5927\u5c0f\u53ca\u5176\u91cd\u5b50\u8282\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 dfs1 ( p , pre , deep ) // p\uff1a\u5f53\u524d\u8282\u70b9\uff1bpre\uff1ap \u7684\u7236\u8282\u70b9\uff1bdeep\uff1a\u5f53\u524d\u6df1\u5ea6 { dep [ p ] = deep , size [ p ] = 1 , father [ p ] = pre ; // dep[p]\uff1a\u8282\u70b9 p \u5728\u6811\u4e0a\u7684\u6df1\u5ea6 // size[p]\uff1a\u8282\u70b9 p \u7684\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570 // father[p]\uff1a\u8282\u70b9 p \u7684\u7236\u8282\u70b9 for each p ' s son i { size [ p ] += dfs1 ( i , p , deep + 1 ); if ( size [ son [ p ]] < size [ i ]) son [ p ] = i // son[p]\uff1a\u8282\u70b9 p \u7684\u91cd\u513f\u5b50 } return size [ p ]; } \u7b2c\u4e8c\u4e2a DFS \u8bb0\u5f55\u8282\u70b9\u6240\u5728\u94fe\u7684\u94fe\u9876\uff08\u521d\u59cb\u4e3a\u81ea\u8eab\uff09\uff0c\u91cd\u8fb9\u4f18\u5148\u904d\u5386\u65f6\u7684 DFS\uff08DFN\uff09 \u5e8f\uff0cDFS \u5e8f\u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 dfs2 ( p , top ) // top\uff1a\u5f53\u524d\u94fe\u7684\u94fe\u9876 { tid [ p ] = cnt , rnk [ cnt ] = p , tp [ p ] = top ; cnt ++ ; // tid[p]\uff1a\u8282\u70b9 p \u7684 DFS \u5e8f\uff0c\u4e5f\u662f\u5176\u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u7f16\u53f7 // rnk[cnt]\uff1aDFS \u5e8f\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u6709 rnk[tid[p]] = p // tp[p]\uff1a\u8282\u70b9 p \u6240\u5728\u91cd\u94fe\u7684\u9876\u90e8\u8282\u70b9\uff08\u6df1\u5ea6\u6700\u5c0f\uff09 if ( son [ p ]) dfs2 ( son [ p ], top ); for each p ' s son i { if ( i != son [ p ]) dfs2 ( i , i ); } } \u90e8\u5206\u6027\u8d28 \u00b6 \u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u90fd\u5c5e\u4e8e\u4e14\u4ec5\u5c5e\u4e8e\u4e00\u6761\u91cd\u94fe \u91cd\u8fb9\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u5b9a\u4e49\uff0c\u56e0\u6b64\u91cd\u94fe\u7684\u5f00\u5934\u8282\u70b9\u4e0d\u4e00\u5b9a\u662f\u91cd\u5b50\u8282\u70b9 \u82e5 (u, v) (u, v) \u4e3a\u4e00\u6761\u8f7b\u8fb9\uff0c\u90a3\u4e48 size(v) < size(u)/2 size(v) < size(u)/2 \u5bf9\u6709 n n \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6839\u8282\u70b9\u5230\u4efb\u610f\u53f6\u5b50\u8282\u70b9\u6700\u591a\u7ecf\u8fc7 log_2n log_2n \u6761\u8f7b\u8fb9 \u5256\u5206\u4e00\u6b21\u7684\u590d\u6742\u5ea6\u4e3a O(n) O(n) XD \u5e38\u89c1\u5e94\u7528 \u00b6 \u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148 \u00b6 \u5982\u679c\u4e24\u8282\u70b9\u4f4d\u4e8e\u540c\u4e00\u6761\u91cd\u94fe\uff0c\u6df1\u5ea6\u8f83\u6d45\u7684\u8282\u70b9\u5373\u4e3a\u6240\u6c42\u7684 LCA\uff0c\u82e5\u4e0d\u662f\u5219\u5c06\u4e24\u4e2a\u8282\u70b9\u4e2d\u91cd\u94fe\u94fe\u9876\u8f83\u6df1\u7684\u8282\u70b9\u8df3\u81f3\u5176\u94fe\u9876\u7684\u7236\u8282\u70b9\uff0c\u518d\u6b21\u5224\u65ad 1 2 3 4 5 6 7 8 9 10 getlca ( u , v ) { while ( tp [ u ] != tp [ v ]) { if ( dep [ tp [ u ]] > dep [ tp [ v ]]) u = fa [ tp [ u ]]; else v = fa [ tp [ v ]]; } return dep [ u ] > dep [ v ] ? v : u ; } \u8def\u5f84\u4e0a\u7ef4\u62a4 \u00b6 \u7528\u6811\u94fe\u5256\u5206\u6c42\u6811\u4e0a\u4efb\u610f\u4e24\u70b9\u95f4\u6240\u6709\u8282\u70b9\u7684\u548c\u3001\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u7b49 \u7c7b\u4f3c\u6c42 LCA \u7684\u601d\u60f3\uff0c\u5c06\u8282\u70b9\u4e0a\u8df3\uff0c\u8df3\u4e4b\u524d\u4f7f\u7528\u7ebf\u6bb5\u6811\u3001\u6811\u72b6\u6570\u7ec4\u7b49\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u8be5\u8282\u70b9\u5230\u5176\u94fe\u9876\u7684\u533a\u95f4 \u4ee5\u6c42\u8def\u5f84\u533a\u95f4\u6700\u5927\u503c\u4e3a\u4f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 treepath_max ( u , v ) { mx = max ( val [ u ], val [ v ]); while ( tp [ u ] != tp [ v ]) { if ( dep [ tp [ u ]] > dep [ tp [ v ]]) { mx = max ( mx , query ( tid [ tp [ u ]] -> tid [ u ])); // query \u4e3a\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u51fd\u6570 // \u5bf9 [tid[tp[u]], tid[u]] \u533a\u95f4\u6c42\u6700\u5927\u503c u = fa [ tp [ u ]]; } else { mx = max ( mx , query ( tid [ tp [ v ]] -> tid [ v ])); v = fa [ tp [ v ]]; } } mx = max ( mx , query ( between ( u , v ))); // \u6ce8\u610f\u8003\u8651 u \u548c v \u7684\u5927\u5c0f\u5173\u7cfb return mx ; } \u5b50\u6811\u7ef4\u62a4 \u00b6 \u4e00\u4e9b\u9898\u76ee\u4f1a\u8981\u6c42\u5bf9\u4ee5\u67d0\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u8fdb\u884c\u6574\u4f53\u64cd\u4f5c \u5b50\u6811\u4e2d\u7684\u8282\u70b9\u7684 DFS \u5e8f\u662f\u8fde\u7eed\u7684\uff0c\u53ef\u4ee5\u589e\u52a0\u4e00\u4e2a bottom \u6570\u7ec4\uff0c\u7528\u4e8e\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u8fde\u7eed\u533a\u95f4\u672b\u7aef\u7684\u8282\u70b9\uff08\u6216\u5176 DFN \u5e8f\uff09 \u5b50\u6811\u5bf9\u5e94\u7684\u533a\u95f4\u53ef\u4ee5\u8868\u793a\u6210\uff1a [\\,tid[p],\\,tid[bottom[p]]\\,] [\\,tid[p],\\,tid[bottom[p]]\\,] \u53c2\u8003\u8d44\u6599 \u00b6 \u6811\u94fe\u5256\u5206 - OI Wiki Heavy path decomposition - Wikipedia","title":"\u6811\u94fe\u5256\u5206"},{"location":"data-struct/hld/#_1","text":"\u6811\u94fe\u5256\u5206\u5c06\u6811\u5206\u5272\u6210\u82e5\u5e72\u6761\u94fe\uff0c\u4ee5\u7ef4\u62a4\u6811\u4e0a\u8def\u5f84\u7684\u4fe1\u606f \u6811\u94fe\u5256\u5206\u901a\u5e38\u6307\u300c\u91cd\u94fe\u5256\u5206\u300d\uff0c\u5256\u5206\u540e\u7684\u6bcf\u6761\u94fe\u4e3a\u7ebf\u6027\u7ed3\u6784\uff0c\u4e14\u6bcf\u6761\u94fe\u4e0a\u7684\u8282\u70b9 DFS \u8bbf\u95ee\u8fde\u7eed\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7b49\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f \u9664\u4e86\u7528\u4e8e\u6811\u4e0a\u4e24\u70b9\u95f4\u8def\u5f84\u4e0a\u6240\u6709\u70b9\u6216\u4ee5\u67d0\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u4fee\u6539\u548c\u67e5\u8be2\uff0c\u6811\u94fe\u5256\u5206\u8fd8\u53ef\u4ee5 O(logn) O(logn) \u5730\u6c42 LCA","title":"\u7b80\u4ecb"},{"location":"data-struct/hld/#_2","text":"","title":"\u91cd\u94fe\u5256\u5206"},{"location":"data-struct/hld/#_3","text":"\u91cd\u5b50\u8282\u70b9 \uff1a\u7236\u8282\u70b9\u7684\u6240\u6709\u5b69\u5b50\u8282\u70b9\u4e2d\u5b50\u6811\u8282\u70b9\u6570\u76ee\u6700\u591a\u7684\u8282\u70b9 \u8f7b\u5b50\u8282\u70b9 \uff1a\u9664\u91cd\u5b50\u8282\u70b9\u5916\u7684\u6240\u6709\u5b50\u8282\u70b9 \u91cd\u8fb9 \uff1a\u7236\u8282\u70b9\u5230\u5176\u91cd\u5b50\u8282\u70b9\u7684\u8fb9 \u8f7b\u8fb9 \uff1a\u7236\u8282\u70b9\u5230\u5176\u8f7b\u5b50\u8282\u70b9\u7684\u8fb9 \u91cd\u94fe \uff1a\u7531\u9996\u5c3e\u76f8\u63a5\u7684\u91cd\u8fb9\u6784\u6210\uff0c\u975e\u91cd\u94fe\u7aef\u70b9\u7684\u53f6\u5b50\u8282\u70b9\u53ef\u770b\u4f5c\u6784\u6210\u4e86\u957f\u5ea6\u4e3a 0 0 \u7684\u91cd\u94fe DFN \u5e8f\uff1a\u70b9\u6309\u7167 DFS \u8fdb\u5165\u8282\u70b9\u7684\u987a\u5e8f\u6392\u5217\u7684\u5e8f\u5217\uff0c\u662f DFS \u5e8f\u7684\u5b50\u5e8f\u5217","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"data-struct/hld/#_4","text":"\u901a\u8fc7\u4e24\u4e2a DFS \u5b9e\u73b0\u6811\u94fe\u5256\u5206 \u7b2c\u4e00\u4e2a DFS \u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u3001\u6df1\u5ea6\u3001\u5b50\u6811\u5927\u5c0f\u53ca\u5176\u91cd\u5b50\u8282\u70b9 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 dfs1 ( p , pre , deep ) // p\uff1a\u5f53\u524d\u8282\u70b9\uff1bpre\uff1ap \u7684\u7236\u8282\u70b9\uff1bdeep\uff1a\u5f53\u524d\u6df1\u5ea6 { dep [ p ] = deep , size [ p ] = 1 , father [ p ] = pre ; // dep[p]\uff1a\u8282\u70b9 p \u5728\u6811\u4e0a\u7684\u6df1\u5ea6 // size[p]\uff1a\u8282\u70b9 p \u7684\u5b50\u6811\u7684\u8282\u70b9\u4e2a\u6570 // father[p]\uff1a\u8282\u70b9 p \u7684\u7236\u8282\u70b9 for each p ' s son i { size [ p ] += dfs1 ( i , p , deep + 1 ); if ( size [ son [ p ]] < size [ i ]) son [ p ] = i // son[p]\uff1a\u8282\u70b9 p \u7684\u91cd\u513f\u5b50 } return size [ p ]; } \u7b2c\u4e8c\u4e2a DFS \u8bb0\u5f55\u8282\u70b9\u6240\u5728\u94fe\u7684\u94fe\u9876\uff08\u521d\u59cb\u4e3a\u81ea\u8eab\uff09\uff0c\u91cd\u8fb9\u4f18\u5148\u904d\u5386\u65f6\u7684 DFS\uff08DFN\uff09 \u5e8f\uff0cDFS \u5e8f\u5bf9\u5e94\u7684\u8282\u70b9\u7f16\u53f7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 dfs2 ( p , top ) // top\uff1a\u5f53\u524d\u94fe\u7684\u94fe\u9876 { tid [ p ] = cnt , rnk [ cnt ] = p , tp [ p ] = top ; cnt ++ ; // tid[p]\uff1a\u8282\u70b9 p \u7684 DFS \u5e8f\uff0c\u4e5f\u662f\u5176\u5728\u7ebf\u6bb5\u6811\u4e2d\u7684\u7f16\u53f7 // rnk[cnt]\uff1aDFS \u5e8f\u5bf9\u5e94\u7684\u8282\u70b9\uff0c\u6709 rnk[tid[p]] = p // tp[p]\uff1a\u8282\u70b9 p \u6240\u5728\u91cd\u94fe\u7684\u9876\u90e8\u8282\u70b9\uff08\u6df1\u5ea6\u6700\u5c0f\uff09 if ( son [ p ]) dfs2 ( son [ p ], top ); for each p ' s son i { if ( i != son [ p ]) dfs2 ( i , i ); } }","title":"\u5b9e\u73b0"},{"location":"data-struct/hld/#_5","text":"\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u90fd\u5c5e\u4e8e\u4e14\u4ec5\u5c5e\u4e8e\u4e00\u6761\u91cd\u94fe \u91cd\u8fb9\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u5b9a\u4e49\uff0c\u56e0\u6b64\u91cd\u94fe\u7684\u5f00\u5934\u8282\u70b9\u4e0d\u4e00\u5b9a\u662f\u91cd\u5b50\u8282\u70b9 \u82e5 (u, v) (u, v) \u4e3a\u4e00\u6761\u8f7b\u8fb9\uff0c\u90a3\u4e48 size(v) < size(u)/2 size(v) < size(u)/2 \u5bf9\u6709 n n \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u6839\u8282\u70b9\u5230\u4efb\u610f\u53f6\u5b50\u8282\u70b9\u6700\u591a\u7ecf\u8fc7 log_2n log_2n \u6761\u8f7b\u8fb9 \u5256\u5206\u4e00\u6b21\u7684\u590d\u6742\u5ea6\u4e3a O(n) O(n) XD","title":"\u90e8\u5206\u6027\u8d28"},{"location":"data-struct/hld/#_6","text":"","title":"\u5e38\u89c1\u5e94\u7528"},{"location":"data-struct/hld/#_7","text":"\u5982\u679c\u4e24\u8282\u70b9\u4f4d\u4e8e\u540c\u4e00\u6761\u91cd\u94fe\uff0c\u6df1\u5ea6\u8f83\u6d45\u7684\u8282\u70b9\u5373\u4e3a\u6240\u6c42\u7684 LCA\uff0c\u82e5\u4e0d\u662f\u5219\u5c06\u4e24\u4e2a\u8282\u70b9\u4e2d\u91cd\u94fe\u94fe\u9876\u8f83\u6df1\u7684\u8282\u70b9\u8df3\u81f3\u5176\u94fe\u9876\u7684\u7236\u8282\u70b9\uff0c\u518d\u6b21\u5224\u65ad 1 2 3 4 5 6 7 8 9 10 getlca ( u , v ) { while ( tp [ u ] != tp [ v ]) { if ( dep [ tp [ u ]] > dep [ tp [ v ]]) u = fa [ tp [ u ]]; else v = fa [ tp [ v ]]; } return dep [ u ] > dep [ v ] ? v : u ; }","title":"\u6c42\u6700\u8fd1\u516c\u5171\u7956\u5148"},{"location":"data-struct/hld/#_8","text":"\u7528\u6811\u94fe\u5256\u5206\u6c42\u6811\u4e0a\u4efb\u610f\u4e24\u70b9\u95f4\u6240\u6709\u8282\u70b9\u7684\u548c\u3001\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u7b49 \u7c7b\u4f3c\u6c42 LCA \u7684\u601d\u60f3\uff0c\u5c06\u8282\u70b9\u4e0a\u8df3\uff0c\u8df3\u4e4b\u524d\u4f7f\u7528\u7ebf\u6bb5\u6811\u3001\u6811\u72b6\u6570\u7ec4\u7b49\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u8be5\u8282\u70b9\u5230\u5176\u94fe\u9876\u7684\u533a\u95f4 \u4ee5\u6c42\u8def\u5f84\u533a\u95f4\u6700\u5927\u503c\u4e3a\u4f8b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 treepath_max ( u , v ) { mx = max ( val [ u ], val [ v ]); while ( tp [ u ] != tp [ v ]) { if ( dep [ tp [ u ]] > dep [ tp [ v ]]) { mx = max ( mx , query ( tid [ tp [ u ]] -> tid [ u ])); // query \u4e3a\u7ebf\u6bb5\u6811\u6216\u6811\u72b6\u6570\u7ec4\u51fd\u6570 // \u5bf9 [tid[tp[u]], tid[u]] \u533a\u95f4\u6c42\u6700\u5927\u503c u = fa [ tp [ u ]]; } else { mx = max ( mx , query ( tid [ tp [ v ]] -> tid [ v ])); v = fa [ tp [ v ]]; } } mx = max ( mx , query ( between ( u , v ))); // \u6ce8\u610f\u8003\u8651 u \u548c v \u7684\u5927\u5c0f\u5173\u7cfb return mx ; }","title":"\u8def\u5f84\u4e0a\u7ef4\u62a4"},{"location":"data-struct/hld/#_9","text":"\u4e00\u4e9b\u9898\u76ee\u4f1a\u8981\u6c42\u5bf9\u4ee5\u67d0\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u8fdb\u884c\u6574\u4f53\u64cd\u4f5c \u5b50\u6811\u4e2d\u7684\u8282\u70b9\u7684 DFS \u5e8f\u662f\u8fde\u7eed\u7684\uff0c\u53ef\u4ee5\u589e\u52a0\u4e00\u4e2a bottom \u6570\u7ec4\uff0c\u7528\u4e8e\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u8fde\u7eed\u533a\u95f4\u672b\u7aef\u7684\u8282\u70b9\uff08\u6216\u5176 DFN \u5e8f\uff09 \u5b50\u6811\u5bf9\u5e94\u7684\u533a\u95f4\u53ef\u4ee5\u8868\u793a\u6210\uff1a [\\,tid[p],\\,tid[bottom[p]]\\,] [\\,tid[p],\\,tid[bottom[p]]\\,]","title":"\u5b50\u6811\u7ef4\u62a4"},{"location":"data-struct/hld/#_10","text":"\u6811\u94fe\u5256\u5206 - OI Wiki Heavy path decomposition - Wikipedia","title":"\u53c2\u8003\u8d44\u6599"},{"location":"data-struct/intro/","text":"\u4ec0\u4e48\u662f\u6570\u636e\u7ed3\u6784\uff1f \u00b6 \u6570\u636e\u7ed3\u6784(Data Structure)\u662f\u5e26\u6709\u7ed3\u6784\u7279\u6027\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408\uff0c\u5b83\u7814\u7a76\u7684\u662f\u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\u548c\u6570\u636e\u7684\u7269\u7406\u7ed3\u6784\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u76f8\u4e92\u5173\u7cfb\uff0c\u5e76\u5bf9\u8fd9\u79cd\u7ed3\u6784\u5b9a\u4e49\u76f8\u9002\u5e94\u7684\u8fd0\u7b97\uff0c\u8bbe\u8ba1\u51fa\u76f8\u5e94\u7684\u7b97\u6cd5\uff0c\u5e76\u786e\u4fdd\u7ecf\u8fc7\u8fd9\u4e9b\u8fd0\u7b97\u4ee5\u540e\u6240\u5f97\u5230\u7684\u65b0\u7ed3\u6784\u4ecd\u4fdd\u6301\u539f\u6765\u7684\u7ed3\u6784\u7c7b\u578b\u3002 \u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\u548c\u7269\u7406\u7ed3\u6784\u662f\u6570\u636e\u7ed3\u6784\u7684\u4e24\u4e2a\u5bc6\u5207\u76f8\u5173\u7684\u65b9\u9762\uff0c\u540c\u4e00\u903b\u8f91\u7ed3\u6784\u53ef\u4ee5\u5bf9\u5e94\u4e0d\u540c\u7684\u5b58\u50a8\u7ed3\u6784\u3002\u7b97\u6cd5\u7684\u8bbe\u8ba1\u53d6\u51b3\u4e8e\u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\uff0c\u800c\u7b97\u6cd5\u7684\u5b9e\u73b0\u4f9d\u8d56\u4e8e\u6307\u5b9a\u7684\u5b58\u50a8\u7ed3\u6784\u3002 \u58f0\u660e \u00b6 \u8bf7\u4e0d\u8981\u5728\u6b64\u677f\u5757\u4e0b\u63d0\u4ea4\u672c\u79d1\u300a\u6570\u636e\u7ed3\u6784\u300b\u8bfe\u7a0b\u4e2d\u7684\u57fa\u672c\u6570\u636e\u7ed3\u6784\u3002\u624b\u52a8\u5b9e\u73b0\u8fd9\u4e9b\u57fa\u672c\u6570\u636e\u7ed3\u6784\u4e0d\u4ec5\u7e41\u7410\u800c\u4e14\u6781\u6613\u51fa\u9519\uff0c\u5728\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e2d \u6781\u5176\u4e0d\u63a8\u8350 \u3002 \u6570\u636e\u7ed3\u6784\u90e8\u5206\u7684\u8d21\u732e\u8005 \u00b6 YanhuiJessica","title":"\u6570\u636e\u7ed3\u6784\u7b80\u4ecb"},{"location":"data-struct/intro/#_1","text":"\u6570\u636e\u7ed3\u6784(Data Structure)\u662f\u5e26\u6709\u7ed3\u6784\u7279\u6027\u7684\u6570\u636e\u5143\u7d20\u7684\u96c6\u5408\uff0c\u5b83\u7814\u7a76\u7684\u662f\u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\u548c\u6570\u636e\u7684\u7269\u7406\u7ed3\u6784\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u76f8\u4e92\u5173\u7cfb\uff0c\u5e76\u5bf9\u8fd9\u79cd\u7ed3\u6784\u5b9a\u4e49\u76f8\u9002\u5e94\u7684\u8fd0\u7b97\uff0c\u8bbe\u8ba1\u51fa\u76f8\u5e94\u7684\u7b97\u6cd5\uff0c\u5e76\u786e\u4fdd\u7ecf\u8fc7\u8fd9\u4e9b\u8fd0\u7b97\u4ee5\u540e\u6240\u5f97\u5230\u7684\u65b0\u7ed3\u6784\u4ecd\u4fdd\u6301\u539f\u6765\u7684\u7ed3\u6784\u7c7b\u578b\u3002 \u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\u548c\u7269\u7406\u7ed3\u6784\u662f\u6570\u636e\u7ed3\u6784\u7684\u4e24\u4e2a\u5bc6\u5207\u76f8\u5173\u7684\u65b9\u9762\uff0c\u540c\u4e00\u903b\u8f91\u7ed3\u6784\u53ef\u4ee5\u5bf9\u5e94\u4e0d\u540c\u7684\u5b58\u50a8\u7ed3\u6784\u3002\u7b97\u6cd5\u7684\u8bbe\u8ba1\u53d6\u51b3\u4e8e\u6570\u636e\u7684\u903b\u8f91\u7ed3\u6784\uff0c\u800c\u7b97\u6cd5\u7684\u5b9e\u73b0\u4f9d\u8d56\u4e8e\u6307\u5b9a\u7684\u5b58\u50a8\u7ed3\u6784\u3002","title":"\u4ec0\u4e48\u662f\u6570\u636e\u7ed3\u6784\uff1f"},{"location":"data-struct/intro/#_2","text":"\u8bf7\u4e0d\u8981\u5728\u6b64\u677f\u5757\u4e0b\u63d0\u4ea4\u672c\u79d1\u300a\u6570\u636e\u7ed3\u6784\u300b\u8bfe\u7a0b\u4e2d\u7684\u57fa\u672c\u6570\u636e\u7ed3\u6784\u3002\u624b\u52a8\u5b9e\u73b0\u8fd9\u4e9b\u57fa\u672c\u6570\u636e\u7ed3\u6784\u4e0d\u4ec5\u7e41\u7410\u800c\u4e14\u6781\u6613\u51fa\u9519\uff0c\u5728\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u4e2d \u6781\u5176\u4e0d\u63a8\u8350 \u3002","title":"\u58f0\u660e"},{"location":"data-struct/intro/#_3","text":"YanhuiJessica","title":"\u6570\u636e\u7ed3\u6784\u90e8\u5206\u7684\u8d21\u732e\u8005"},{"location":"data-struct/modui/","text":"\u83ab\u961f\u7b97\u6cd5 \u00b6 Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u9996\u5148\u9700\u8981\u58f0\u660e\uff0c\u83ab\u961f\u7b97\u6cd5\u4e25\u683c\u610f\u4e49\u4e0a\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a\u90e8\u5206\uff0c\u4f46\u662f\u7531\u4e8e\u5b83\u89e3\u51b3\u7684\u95ee\u9898\u4e0e\u300c\u4e3b\u5e2d\u6811\u300d\u3001\u300c\u6811\u72b6\u6570\u7ec4\u300d\u7b49\u6570\u636e\u7ed3\u6784\u5177\u6709\u6781\u9ad8\u7684\u76f8\u4f3c\u5ea6\uff0c\u59d1\u4e14\u7f6e\u4e8e\u6570\u636e\u7ed3\u6784\u5355\u5143\u3002 \u666e\u901a\u83ab\u961f\u7b97\u6cd5 \u00b6 \u6982\u8ff0 \u00b6 \u4e3b\u8981\u7528\u4e8e \u79bb\u7ebf \u89e3\u51b3\u901a\u5e38\u4e0d\u5e26\u4fee\u6539\u7684\u533a\u95f4\u67e5\u8be2\u95ee\u9898\uff0c\u57fa\u4e8e\u5206\u5757\u601d\u60f3\uff0c\u590d\u6742\u5ea6\u4e3a O(nlogn) O(nlogn) \u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u53ef\u4ee5\u5728 O(1) O(1) \u5185\u4ece [l, r] [l, r] \u7684\u7b54\u6848\u8f6c\u79fb\u5230 [l-1, r] [l-1, r] \u3001 [l+1, r] [l+1, r] \u3001 [l, r-1] [l, r-1] \u3001 [l, r+1] [l, r+1] \u8fd9\u56db\u4e2a\u4e0e\u4e4b\u7d27\u90bb\u7684\u533a\u95f4\u7684\u7b54\u6848\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u83ab\u961f\u3002 \u9898\u76ee\u539f\u578b \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u5e8f\u5217\uff0c m m \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u533a\u95f4 [l,r] [l,r] \u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u989c\u8272\u3002 n,m\\leq 100000, 1\\leq l \\leq r \\leq n n,m\\leq 100000, 1\\leq l \\leq r \\leq n \u66b4\u529b\u7684\u4ee3\u7801\u663e\u7136\u662f O(nm) O(nm) \u7684\u3002\u7528\u6811\u72b6\u6570\u7ec4\u6216\u8005\u7ebf\u6bb5\u6811\u4f1a\u8d85\u65f6 \u7528\u4e3b\u5e2d\u6811\u53ef\u4ee5\u89e3\u51b3\u4f46\u662f\u53ea\u6709jdl\u4f1a \u3002 \u89e3\u51b3 \u00b6 \u83ab\u961f\u7b97\u6cd5\u7684\u6838\u5fc3\u5728\u4e8e\uff0c \u79bb\u7ebf \u5f97\u5230\u4e86\u4e00\u5806\u9700\u8981\u5904\u7406\u7684\u533a\u95f4\u540e\uff0c\u5408\u7406\u5b89\u6392\u8fd9\u4e9b\u533a\u95f4\u8ba1\u7b97\u7684\u6b21\u5e8f\u4ee5\u5f97\u5230\u4e00\u4e2a\u8f83\u4f18\u7684\u590d\u6742\u5ea6\u3002\u5176\u91c7\u7528\u7684\u7b56\u7565\u662f\uff1a \u5c06\u5e8f\u5217\u5206\u6210 \\sqrt{n} \\sqrt{n} \u4e2a\u957f\u5ea6\u4e3a \\sqrt{n} \\sqrt{n} \u7684\u5757\uff0c\u82e5\u5de6\u7aef\u70b9\u5728\u540c\u4e00\u4e2a\u5757\u5185\uff0c\u5219\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\uff08\u4ee5\u5de6\u7aef\u70b9\u6240\u5728\u5757\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u53f3\u7aef\u70b9\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff09\u3002 \u8fd9\u6837\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u53ef\u4ee5\u88ab \u8bc1\u660e \u662f O(n\\sqrt n) O(n\\sqrt n) \u7684\u3002 \u5bf9\u4e8e n<m n<m \u7684\u60c5\u51b5\uff0c\u5206\u5757\u5927\u5c0f\u5e94\u9009\u53d6 \\frac{n}{\\sqrt m} \\frac{n}{\\sqrt m} \uff0c\u6b64\u65f6\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a O(n\\sqrt m) O(n\\sqrt m) \u3002 \u5361\u5e38 \u00b6 \u83ab\u961f\u7b97\u6cd5\u662f\u5f88\u5bb9\u6613\u88ab\u5361\u5e38\u7684\uff08\u4f46\u662f\u5fc5\u8981\u60c5\u51b5\u4e0d\u7528\u83ab\u961fAC\u60f3\u90fd\u4e0d\u8981\u60f3\uff09\u3002 \u5947\u5076\u6027\u6392\u5e8f \u00b6 \u5c06\u4e00\u822c\u7684\u6392\u5e8f 1 2 3 int cmp ( query a , query b ) { return belong [ a . l ] == belong [ b . l ] ? a . r < b . r : belong [ a . l ] < belong [ b . l ]; } \u66f4\u6539\u4e3a 1 2 3 int cmp ( query a , query b ) { return ( belong [ a . l ] ^ belong [ b . l ]) ? belong [ a . l ] < belong [ b . l ] : (( belong [ a . l ] & 1 ) ? a . r < b . r : a . r > b . r ); } \u4e00\u4e2a\u5408\u7406\u7684\u89e3\u91ca\u662f \u53f3\u6307\u9488\u8df3\u5b8c\u5947\u6570\u5757\u5f80\u56de\u8df3\u65f6\u5728\u540c\u4e00\u4e2a\u65b9\u5411\u80fd\u987a\u8def\u628a\u5076\u6570\u5757\u8df3\u5b8c\uff0c\u7136\u540e\u8df3\u5b8c\u8fd9\u4e2a\u5076\u6570\u5757\u53c8\u80fd\u987a\u5e26\u628a\u4e0b\u4e00\u4e2a\u5947\u6570\u5757\u8df3\u5b8c\u3002 \u79fb\u52a8\u6307\u9488\u7684\u5e38\u6570\u538b\u7f29 \u00b6 \u53ea\u6709\u5c11\u6570\u987a\u5e8f\u662f\u8f83\u5feb\u7684\uff0c\u4f8b\u5982 1 2 3 4 while ( l > q [ i ]. l ) add ( a [ -- l ]); while ( r < q [ i ]. r ) add ( a [ ++ r ]); while ( l < q [ i ]. l ) del ( a [ l ++ ]); while ( r > q [ i ]. r ) del ( a [ r -- ]); \u8be6\u7ec6\u5206\u6790\u89c1 OI-wiki - \u83ab\u961f\u7b97\u6cd5 - \u5173\u4e8e\u56db\u4e2a\u5faa\u73af\u4f4d\u7f6e\u7684\u8ba8\u8bba \u5feb\u901f\u8bfb/\u5199 \u00b6 \u7565\u3002 O2\u4f18\u5316 \u00b6 \u83ab\u961f\u5728O2\u4f18\u5316\u4e0b\u901f\u5ea6\u975e\u5e38\u53ef\u6015\u3002\u4f46\u662f\u9274\u4e8e\u6b63\u5f0f\u6bd4\u8d5b\u4e2d\u5177\u4f53\u8bc4\u6d4b\u73af\u5883\u4e0d\u4e00\u81f4\uff0c\u975e\u5fc5\u8981\u60c5\u51b5\u4e0b\u4e0d\u5efa\u8bae\u4f7f\u7528\u3002 \u76ee\u524d\u652f\u6301O2\u4f18\u5316\u7684\u5e73\u53f0\u6709 \u6d1b\u8c37\u3001codeforces\u3001CUC-ACM-OJ \u7b49\u3002 \u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 #include <bits/stdc++.h> using namespace std ; int read () { char x ; while (( x = getchar ()) > '9' || x < '0' ); int u = x - '0' ; while (( x = getchar ()) <= '9' && x >= '0' ) u = ( u << 3 ) + ( u << 1 ) + x - '0' ; return u ; } int buf [ 105 ]; inline void write ( int i ) { int p = 0 ; if ( i == 0 ) p ++ ; else while ( i ) { buf [ p ++ ] = i % 10 ; i /= 10 ; } for ( int j = p - 1 ; j >= 0 ; j -- ) putchar ( '0' + buf [ j ]); } #define il inline #define re register int block , ans = 0 , cnt [ 1000001 ]; int n , m , a [ 500010 ], Ans [ 500010 ]; struct node { int l , r , id ; } q [ 500010 ]; il bool cmp ( node a , node b ) { return ( a . l / block ) ^ ( b . l / block ) ? a . l < b . l : ((( a . l / block ) & 1 ) ? a . r < b . r : a . r > b . r ); } il void add ( int x ) { if ( ! cnt [ a [ x ]]) ans ++ ; cnt [ a [ x ]] ++ ; } il void del ( int x ) { cnt [ a [ x ]] -- ; if ( ! cnt [ a [ x ]]) ans -- ; } int i ; int main () { n = read (); for ( i = 1 ; i <= n ; ++ i ) a [ i ] = read (); m = read (); block = n / sqrt ( m * 2 / 3 ); // \u8fd9\u79cd\u5927\u5c0f\u968f\u673a\u60c5\u51b5\u4e0b\u5b9e\u6d4b\u4f1a\u66f4\u5feb for ( i = 1 ; i <= m ; ++ i ) { q [ i ]. l = read (); q [ i ]. r = read (); q [ i ]. id = i ; } sort ( q + 1 , q + m + 1 , cmp ); int l = 0 , r = 0 ; for ( i = 1 ; i <= m ; ++ i ) { int ql = q [ i ]. l , qr = q [ i ]. r ; while ( l < ql ) del ( l ++ ); while ( l > ql ) add ( -- l ); while ( r < qr ) add ( ++ r ); while ( r > qr ) del ( r -- ); Ans [ q [ i ]. id ] = ans ; } for ( i = 1 ; i <= m ; ++ i ) write ( Ans [ i ]), printf ( \" \\n \" ); return 0 ; } \u53c2\u8003 \u00b6 OI-wiki - \u666e\u901a\u83ab\u961f\u7b97\u6cd5","title":"\u83ab\u961f\u7b97\u6cd5"},{"location":"data-struct/modui/#_1","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u9996\u5148\u9700\u8981\u58f0\u660e\uff0c\u83ab\u961f\u7b97\u6cd5\u4e25\u683c\u610f\u4e49\u4e0a\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a\u90e8\u5206\uff0c\u4f46\u662f\u7531\u4e8e\u5b83\u89e3\u51b3\u7684\u95ee\u9898\u4e0e\u300c\u4e3b\u5e2d\u6811\u300d\u3001\u300c\u6811\u72b6\u6570\u7ec4\u300d\u7b49\u6570\u636e\u7ed3\u6784\u5177\u6709\u6781\u9ad8\u7684\u76f8\u4f3c\u5ea6\uff0c\u59d1\u4e14\u7f6e\u4e8e\u6570\u636e\u7ed3\u6784\u5355\u5143\u3002","title":"\u83ab\u961f\u7b97\u6cd5"},{"location":"data-struct/modui/#_2","text":"","title":"\u666e\u901a\u83ab\u961f\u7b97\u6cd5"},{"location":"data-struct/modui/#_3","text":"\u4e3b\u8981\u7528\u4e8e \u79bb\u7ebf \u89e3\u51b3\u901a\u5e38\u4e0d\u5e26\u4fee\u6539\u7684\u533a\u95f4\u67e5\u8be2\u95ee\u9898\uff0c\u57fa\u4e8e\u5206\u5757\u601d\u60f3\uff0c\u590d\u6742\u5ea6\u4e3a O(nlogn) O(nlogn) \u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5982\u679c\u53ef\u4ee5\u5728 O(1) O(1) \u5185\u4ece [l, r] [l, r] \u7684\u7b54\u6848\u8f6c\u79fb\u5230 [l-1, r] [l-1, r] \u3001 [l+1, r] [l+1, r] \u3001 [l, r-1] [l, r-1] \u3001 [l, r+1] [l, r+1] \u8fd9\u56db\u4e2a\u4e0e\u4e4b\u7d27\u90bb\u7684\u533a\u95f4\u7684\u7b54\u6848\uff0c\u5219\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u83ab\u961f\u3002","title":"\u6982\u8ff0"},{"location":"data-struct/modui/#_4","text":"\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u5e8f\u5217\uff0c m m \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u533a\u95f4 [l,r] [l,r] \u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u989c\u8272\u3002 n,m\\leq 100000, 1\\leq l \\leq r \\leq n n,m\\leq 100000, 1\\leq l \\leq r \\leq n \u66b4\u529b\u7684\u4ee3\u7801\u663e\u7136\u662f O(nm) O(nm) \u7684\u3002\u7528\u6811\u72b6\u6570\u7ec4\u6216\u8005\u7ebf\u6bb5\u6811\u4f1a\u8d85\u65f6 \u7528\u4e3b\u5e2d\u6811\u53ef\u4ee5\u89e3\u51b3\u4f46\u662f\u53ea\u6709jdl\u4f1a \u3002","title":"\u9898\u76ee\u539f\u578b"},{"location":"data-struct/modui/#_5","text":"\u83ab\u961f\u7b97\u6cd5\u7684\u6838\u5fc3\u5728\u4e8e\uff0c \u79bb\u7ebf \u5f97\u5230\u4e86\u4e00\u5806\u9700\u8981\u5904\u7406\u7684\u533a\u95f4\u540e\uff0c\u5408\u7406\u5b89\u6392\u8fd9\u4e9b\u533a\u95f4\u8ba1\u7b97\u7684\u6b21\u5e8f\u4ee5\u5f97\u5230\u4e00\u4e2a\u8f83\u4f18\u7684\u590d\u6742\u5ea6\u3002\u5176\u91c7\u7528\u7684\u7b56\u7565\u662f\uff1a \u5c06\u5e8f\u5217\u5206\u6210 \\sqrt{n} \\sqrt{n} \u4e2a\u957f\u5ea6\u4e3a \\sqrt{n} \\sqrt{n} \u7684\u5757\uff0c\u82e5\u5de6\u7aef\u70b9\u5728\u540c\u4e00\u4e2a\u5757\u5185\uff0c\u5219\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\uff08\u4ee5\u5de6\u7aef\u70b9\u6240\u5728\u5757\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u53f3\u7aef\u70b9\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\uff09\u3002 \u8fd9\u6837\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u53ef\u4ee5\u88ab \u8bc1\u660e \u662f O(n\\sqrt n) O(n\\sqrt n) \u7684\u3002 \u5bf9\u4e8e n<m n<m \u7684\u60c5\u51b5\uff0c\u5206\u5757\u5927\u5c0f\u5e94\u9009\u53d6 \\frac{n}{\\sqrt m} \\frac{n}{\\sqrt m} \uff0c\u6b64\u65f6\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a O(n\\sqrt m) O(n\\sqrt m) \u3002","title":"\u89e3\u51b3"},{"location":"data-struct/modui/#_6","text":"\u83ab\u961f\u7b97\u6cd5\u662f\u5f88\u5bb9\u6613\u88ab\u5361\u5e38\u7684\uff08\u4f46\u662f\u5fc5\u8981\u60c5\u51b5\u4e0d\u7528\u83ab\u961fAC\u60f3\u90fd\u4e0d\u8981\u60f3\uff09\u3002","title":"\u5361\u5e38"},{"location":"data-struct/modui/#_7","text":"\u5c06\u4e00\u822c\u7684\u6392\u5e8f 1 2 3 int cmp ( query a , query b ) { return belong [ a . l ] == belong [ b . l ] ? a . r < b . r : belong [ a . l ] < belong [ b . l ]; } \u66f4\u6539\u4e3a 1 2 3 int cmp ( query a , query b ) { return ( belong [ a . l ] ^ belong [ b . l ]) ? belong [ a . l ] < belong [ b . l ] : (( belong [ a . l ] & 1 ) ? a . r < b . r : a . r > b . r ); } \u4e00\u4e2a\u5408\u7406\u7684\u89e3\u91ca\u662f \u53f3\u6307\u9488\u8df3\u5b8c\u5947\u6570\u5757\u5f80\u56de\u8df3\u65f6\u5728\u540c\u4e00\u4e2a\u65b9\u5411\u80fd\u987a\u8def\u628a\u5076\u6570\u5757\u8df3\u5b8c\uff0c\u7136\u540e\u8df3\u5b8c\u8fd9\u4e2a\u5076\u6570\u5757\u53c8\u80fd\u987a\u5e26\u628a\u4e0b\u4e00\u4e2a\u5947\u6570\u5757\u8df3\u5b8c\u3002","title":"\u5947\u5076\u6027\u6392\u5e8f"},{"location":"data-struct/modui/#_8","text":"\u53ea\u6709\u5c11\u6570\u987a\u5e8f\u662f\u8f83\u5feb\u7684\uff0c\u4f8b\u5982 1 2 3 4 while ( l > q [ i ]. l ) add ( a [ -- l ]); while ( r < q [ i ]. r ) add ( a [ ++ r ]); while ( l < q [ i ]. l ) del ( a [ l ++ ]); while ( r > q [ i ]. r ) del ( a [ r -- ]); \u8be6\u7ec6\u5206\u6790\u89c1 OI-wiki - \u83ab\u961f\u7b97\u6cd5 - \u5173\u4e8e\u56db\u4e2a\u5faa\u73af\u4f4d\u7f6e\u7684\u8ba8\u8bba","title":"\u79fb\u52a8\u6307\u9488\u7684\u5e38\u6570\u538b\u7f29"},{"location":"data-struct/modui/#_9","text":"\u7565\u3002","title":"\u5feb\u901f\u8bfb/\u5199"},{"location":"data-struct/modui/#o2","text":"\u83ab\u961f\u5728O2\u4f18\u5316\u4e0b\u901f\u5ea6\u975e\u5e38\u53ef\u6015\u3002\u4f46\u662f\u9274\u4e8e\u6b63\u5f0f\u6bd4\u8d5b\u4e2d\u5177\u4f53\u8bc4\u6d4b\u73af\u5883\u4e0d\u4e00\u81f4\uff0c\u975e\u5fc5\u8981\u60c5\u51b5\u4e0b\u4e0d\u5efa\u8bae\u4f7f\u7528\u3002 \u76ee\u524d\u652f\u6301O2\u4f18\u5316\u7684\u5e73\u53f0\u6709 \u6d1b\u8c37\u3001codeforces\u3001CUC-ACM-OJ \u7b49\u3002","title":"O2\u4f18\u5316"},{"location":"data-struct/modui/#_10","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 #include <bits/stdc++.h> using namespace std ; int read () { char x ; while (( x = getchar ()) > '9' || x < '0' ); int u = x - '0' ; while (( x = getchar ()) <= '9' && x >= '0' ) u = ( u << 3 ) + ( u << 1 ) + x - '0' ; return u ; } int buf [ 105 ]; inline void write ( int i ) { int p = 0 ; if ( i == 0 ) p ++ ; else while ( i ) { buf [ p ++ ] = i % 10 ; i /= 10 ; } for ( int j = p - 1 ; j >= 0 ; j -- ) putchar ( '0' + buf [ j ]); } #define il inline #define re register int block , ans = 0 , cnt [ 1000001 ]; int n , m , a [ 500010 ], Ans [ 500010 ]; struct node { int l , r , id ; } q [ 500010 ]; il bool cmp ( node a , node b ) { return ( a . l / block ) ^ ( b . l / block ) ? a . l < b . l : ((( a . l / block ) & 1 ) ? a . r < b . r : a . r > b . r ); } il void add ( int x ) { if ( ! cnt [ a [ x ]]) ans ++ ; cnt [ a [ x ]] ++ ; } il void del ( int x ) { cnt [ a [ x ]] -- ; if ( ! cnt [ a [ x ]]) ans -- ; } int i ; int main () { n = read (); for ( i = 1 ; i <= n ; ++ i ) a [ i ] = read (); m = read (); block = n / sqrt ( m * 2 / 3 ); // \u8fd9\u79cd\u5927\u5c0f\u968f\u673a\u60c5\u51b5\u4e0b\u5b9e\u6d4b\u4f1a\u66f4\u5feb for ( i = 1 ; i <= m ; ++ i ) { q [ i ]. l = read (); q [ i ]. r = read (); q [ i ]. id = i ; } sort ( q + 1 , q + m + 1 , cmp ); int l = 0 , r = 0 ; for ( i = 1 ; i <= m ; ++ i ) { int ql = q [ i ]. l , qr = q [ i ]. r ; while ( l < ql ) del ( l ++ ); while ( l > ql ) add ( -- l ); while ( r < qr ) add ( ++ r ); while ( r > qr ) del ( r -- ); Ans [ q [ i ]. id ] = ans ; } for ( i = 1 ; i <= m ; ++ i ) write ( Ans [ i ]), printf ( \" \\n \" ); return 0 ; }","title":"\u6a21\u677f"},{"location":"data-struct/modui/#_11","text":"OI-wiki - \u666e\u901a\u83ab\u961f\u7b97\u6cd5","title":"\u53c2\u8003"},{"location":"data-struct/pds-intro/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a YanhuiJessica \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u7b80\u4ecb \u00b6 \u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\uff08Persistent data structure\uff09\u6bcf\u6b21\u4fee\u6539\u90fd\u4f1a\u4fdd\u7559\u5176\u81ea\u8eab\u6bcf\u4e00\u4e2a\u5386\u53f2\u7248\u672c \u5206\u7c7b \u00b6 \u90e8\u5206\u53ef\u6301\u4e45\u5316 \u00b6 \u6bcf\u4e2a\u5386\u53f2\u7248\u672c\u90fd\u53ef\u4ee5\u8bbf\u95ee\uff0c\u4f46\u53ea\u6709\u6700\u65b0\u7684\u7248\u672c\u624d\u53ef\u4ee5\u4fee\u6539 \u5b8c\u5168\u53ef\u6301\u4e45\u5316 \u00b6 \u6bcf\u4e2a\u5386\u53f2\u7248\u672c\u90fd\u53ef\u4ee5\u8bbf\u95ee\u548c\u4fee\u6539 \u878d\u5408\u53ef\u6301\u4e45\u5316 \u00b6 \u6bcf\u4e2a\u5386\u53f2\u7248\u672c\u90fd\u53ef\u4ee5\u8bbf\u95ee\u548c\u4fee\u6539\uff0c\u4e14\u652f\u6301\u901a\u8fc7\u5408\u5e76\u4e24\u4e2a\u5386\u53f2\u7248\u672c\u6765\u521b\u5efa\u65b0\u7248\u672c \u53c2\u8003\u8d44\u6599 \u00b6 Persistent data structure - Wikipedia","title":"\u7b80\u4ecb"},{"location":"data-struct/pds-intro/#_1","text":"\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784\uff08Persistent data structure\uff09\u6bcf\u6b21\u4fee\u6539\u90fd\u4f1a\u4fdd\u7559\u5176\u81ea\u8eab\u6bcf\u4e00\u4e2a\u5386\u53f2\u7248\u672c","title":"\u7b80\u4ecb"},{"location":"data-struct/pds-intro/#_2","text":"","title":"\u5206\u7c7b"},{"location":"data-struct/pds-intro/#_3","text":"\u6bcf\u4e2a\u5386\u53f2\u7248\u672c\u90fd\u53ef\u4ee5\u8bbf\u95ee\uff0c\u4f46\u53ea\u6709\u6700\u65b0\u7684\u7248\u672c\u624d\u53ef\u4ee5\u4fee\u6539","title":"\u90e8\u5206\u53ef\u6301\u4e45\u5316"},{"location":"data-struct/pds-intro/#_4","text":"\u6bcf\u4e2a\u5386\u53f2\u7248\u672c\u90fd\u53ef\u4ee5\u8bbf\u95ee\u548c\u4fee\u6539","title":"\u5b8c\u5168\u53ef\u6301\u4e45\u5316"},{"location":"data-struct/pds-intro/#_5","text":"\u6bcf\u4e2a\u5386\u53f2\u7248\u672c\u90fd\u53ef\u4ee5\u8bbf\u95ee\u548c\u4fee\u6539\uff0c\u4e14\u652f\u6301\u901a\u8fc7\u5408\u5e76\u4e24\u4e2a\u5386\u53f2\u7248\u672c\u6765\u521b\u5efa\u65b0\u7248\u672c","title":"\u878d\u5408\u53ef\u6301\u4e45\u5316"},{"location":"data-struct/pds-intro/#_6","text":"Persistent data structure - Wikipedia","title":"\u53c2\u8003\u8d44\u6599"},{"location":"data-struct/persistent-segment/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a YanhuiJessica \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u4ee5\u4e0b\u4e3b\u8981\u662f\u4e3b\u5e2d\u6811\uff08\u5168\u79f0\u53ef\u6301\u4e45\u5316\u6743\u503c\u7ebf\u6bb5\u6811\uff09\u7684\u5185\u5bb9 \u6743\u503c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u5185\u6570\u7ec4\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570 \u5173\u4e8e\u4e3b\u5e2d\u6811\u548c\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u5173\u7cfb\uff0c\u53c2\u89c1 \u77e5\u4e4e \u300c\u4e2a\u4eba\u611f\u89c9\u4e3b\u5e2d\u6811\u662f\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u7684\u5b50\u96c6\uff08\u5c0f\u58f0(\u03a6\u8278\u03a6)\uff09\u300d \u4e3b\u8981\u7528\u9014 \u00b6 \u67e5\u8be2\u533a\u95f4\u7b2c K K \u5927\uff08\u5c0f\uff09 \u539f\u7406 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5e8f\u5217\u7684\u6bcf\u4e2a\u524d\u7f00\uff08\u5171 n n \u4e2a\uff09\u5efa\u7acb\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7b2c i i \u68f5\u6811\u5b58\u50a8\u7684\u662f\u539f\u5e8f\u5217 [1,\\,i] [1,\\,i] \u4e2d\u5c5e\u4e8e\u6743\u503c\u533a\u95f4 [L,\\,R] [L,\\,R] \u7684\u6570\u7684\u4e2a\u6570 \u5047\u8bbe\u6709\u5e8f\u5217 {4,1,3,2} {4,1,3,2} \uff0c\u90a3\u4e48\u753b\u51fa\u6765\u7684\u56fe\u5982\u4e0b\uff1a \u8fd9\u4e48\u5efa\u6811\u5b9e\u9645\u80af\u5b9a\u662f\u4f1a MLE \u7684(\u03a6\u0434\u03a6\u256c) \u4ed4\u7ec6\u89c2\u5bdf\u53d1\u73b0\uff0c\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u6570\u540e\uff0c\u6811\u4e0a\u53ea\u6709\u4e00\u6761\u94fe\uff08\u4e5f\u5c31\u662f\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff09\u4e0a\u8282\u70b9\u7684\u503c\u4f1a\u88ab\u4fee\u6539\u3002\u90a3\u4e48\uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u4fee\u6539 logn logn \u4e2a\u8282\u70b9\uff0c\u5269\u4f59\u8282\u70b9\u5171\u7528\uff0c\u771f\u6b63\u7684\u4e3b\u5e2d\u6811\u5982\u4e0b\uff08\u4ec5\u4ee5\u524d\u4e24\u4e2a\u524d\u7f00\u4e3a\u4f8b\uff09\uff1a \u4fee\u6539\u7684\u90e8\u5206\u53e6\u5efa\u8282\u70b9\uff0c\u672a\u4fee\u6539\u7684\u90e8\u5206\u94fe\u63a5\u4e4b\u524d\u7684 \u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u4e0d\u80fd\u518d\u7528 2*x 2*x \u548c 2*x+1 2*x+1 \u6765\u8868\u793a\u5de6\u53f3\u5b69\u5b50\uff0c\u5728\u4e3b\u5e2d\u6811\u4e2d\u4f7f\u7528\u7684\u662f\u52a8\u6001\u5f00\u70b9\u7684\u65b9\u5f0f \u5b9e\u73b0 \u00b6 \u9759\u6001\u4e3b\u5e2d\u6811 \u00b6 \u4e0d\u53d8\u7684\u90e8\u5206\u4f7f\u7528\u4e4b\u524d\u7684\u8282\u70b9\uff0c\u66f4\u65b0\u7684\u90e8\u5206\u521b\u5efa\u65b0\u8282\u70b9\uff0c\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6bcf\u6b21\u66f4\u65b0\u65f6\u6811\u7684\u6839\u8282\u70b9\uff08\u8fd9\u6837\u5c31\u80fd\u8bbf\u95ee\u6307\u5b9a\u7248\u672c\u4e86\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 update ( l , r , x , & y , v ) // \u8282\u70b9\u5bf9\u5e94\u533a\u95f4 [l, r] // x\uff1a\u4e0a\u4e00\u68f5\u6811\u7684\u8282\u70b9 // y\uff1a\u5f53\u524d\u6811\u7684\u8282\u70b9\uff0c\u5f15\u7528\u4f20\u53c2 { y = tot ++ ; // \u4e3a y \u5206\u914d\u65b0\u8282\u70b9\uff0ctot \u8bb0\u5f55\u5df2\u5206\u914d\u8282\u70b9\u6570 sum [ y ] = sum [ x ] + 1 ; // \u5229\u7528\u4e0a\u4e00\u68f5\u6811\u7684\u72b6\u6001\u6765\u66f4\u65b0 if ( l == r ) return ; ls [ y ] = ls [ x ]; rs [ y ] = rs [ x ]; // \u5c06\u5de6\u53f3\u5b69\u5b50\u521d\u59cb\u5316\uff0c\u503c\u4e0e\u4e0a\u4e00\u68f5\u6811\u76f8\u540c\uff0c\u4e4b\u540e\u9047\u5230\u66f4\u65b0\u5c31\u4fee\u6539 // \u53ef\u4ee5\u5c06\u8282\u70b9\u4fe1\u606f\u4fdd\u5b58\u5728\u7ed3\u6784\u4f53\u4e2d int mid = ( l + r ) >> 1 ; // \u6bcf\u4e00\u65f6\u523b\u8bbf\u95ee\u7684\u4e24\u68f5\u6811\u4e0a\u7684\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u76f8\u540c if ( v <= mid ) update ( l , mid , ls [ x ], ls [ y ], v ); else update ( mid + 1 , r , rs [ x ], rs [ y ], v ); } \u521d\u59cb\u4e3b\u5e2d\u6811\u4e3a\u7a7a\uff0c\u6bcf\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u66f4\u65b0\u4e00\u6b21 \u67e5\u8be2\u7c7b\u4f3c\u4e8e\u524d\u7f00\u548c\uff0c\u7528\u7b2c r r \u68f5\u6811\u7684\u4fe1\u606f\u51cf\u53bb\u7b2c l-1 l-1 \u68f5\u6811\u7684\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 [l,r] [l,r] \u533a\u95f4\u7684\u7edf\u8ba1\u4fe1\u606f \u53c2\u8003 \u7ebf\u6bb5\u6811\u7684\u67e5\u8be2\u65b9\u6cd5 \uff0c\u6ce8\u610f\u4e3b\u5e2d\u6811\u7684\u5de6\u53f3\u5b69\u5b50\u8868\u793a\u4e0e\u666e\u901a\u7ebf\u6bb5\u6811\u4e0d\u540c \u90a3\u4e48\u56de\u5230\u6700\u521d\u7684\u95ee\u9898\uff0c\u5982\u4f55\u6c42\u533a\u95f4\u7b2c K K \u5927\uff08\u5c0f\uff09\u5462\uff1f \u4ee5\u533a\u95f4\u7b2c K K \u5927\u4e3a\u4f8b\uff0c\u5047\u8bbe\u53f3\u5b69\u5b50\u5bf9\u5e94\u7684\u6743\u503c\u533a\u95f4\u6709 x x \u4e2a\u6570\uff0c\u5982\u679c x >= K x >= K \uff0c\u5c31\u8bbf\u95ee\u53f3\u5b69\u5b50\uff0c\u5426\u5219\u5728\u5de6\u5b69\u5b50\u8be2\u95ee\u7b2c K - x K - x \u5927\u7684\u6570 1 2 3 4 5 6 7 8 9 query ( k , lp , rp , l , r ) // lp, rp \u5206\u522b\u4e3a\u7b2c l-1 \u68f5\u548c\u7b2c r \u68f5\u4e3b\u5e2d\u6811\u7684\u8282\u70b9 // l, r \u662f\u5f53\u524d\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4 { if ( l == r ) return l ; int mid = ( l + r ) >> 1 , cnt = sum [ rs [ rp ]] - sum [ rs [ lp ]]; if ( cnt < k ) return query ( k - cnt , ls [ lp ], ls [ rp ], l , mid ); else return query ( k , rs [ lp ], rs [ rp ], mid + 1 , r ); } \u5bf9\u957f\u5ea6\u4e3a N N \u7684\u5e8f\u5217\u8fdb\u884c M M \u6b21\u66f4\u65b0\uff0c\u4e3b\u5e2d\u6811\u7684\u7a7a\u95f4\u4e00\u822c\u5f00 (N+M)*logN (N+M)*logN \uff08\u5f53\u7136\u53ef\u4ee5\u76f4\u63a5\u5411\u4e0a\u53d6\u6574\uff0c\u4e0d\u6392\u9664\u4f1a MLE MLE \u7684\u53ef\u80fd\uff09 \u5e26\u4fee\u6539\u4e3b\u5e2d\u6811 \u00b6 \u66f4\u65b0 \u00b6 \u9759\u6001\u4e3b\u5e2d\u6811\u7c7b\u4f3c\u524d\u7f00\u548c\uff0c\u524d\u7f00\u548c\u7684\u7ef4\u62a4\u4fee\u6539\u5229\u7528\u5230\u4e86\u6811\u72b6\u6570\u7ec4\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8981\u4fee\u6539\u7684\u90e8\u5206\uff0c\u4e5f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\uff08\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\uff01\uff09 \u5efa\u6811\u65f6\u4f7f\u7528\u9759\u6001\u4e3b\u5e2d\u6811\u7684\u65b9\u5f0f\u6784\u5efa\uff0c\u5f53\u8981\u4fee\u6539\u5386\u53f2\u7248\u672c\u65f6\u518d\u4f7f\u7528\u6811\u72b6\u6570\u7ec4 \u4e00\u5171\u9700\u8981\u4e24\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6839\u8282\u70b9\uff0c\u4e00\u4e2a\u662f\u539f\u672c\u4e3b\u5e2d\u6811\u8bb0\u5f55\u6839\u8282\u70b9\u7684\u6570\u7ec4\uff0c\u4e00\u4e2a\u8bb0\u5f55\u5229\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u53d8\u66f4\u503c\u7684\u4e3b\u5e2d\u6811\u6839\u8282\u70b9 \u53c2\u8003 \u6811\u72b6\u6570\u7ec4\u66f4\u65b0\u65b9\u6cd5 \uff0c\u53ea\u4e0d\u8fc7\u66f4\u65b0\u7684\u64cd\u4f5c\u4e0d\u662f\u5bf9\u6811\u72b6\u6570\u7ec4\u8fdb\u884c\u7b80\u5355\u52a0\u51cf\uff0c\u800c\u662f\u590d\u7528\u4e3b\u5e2d\u6811\u7684 update \u51fd\u6570(\u4f20\u5165\u7684\u662f\u8bb0\u5f55\u5229\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u53d8\u66f4\u503c\u7684\u4e3b\u5e2d\u6811\u6839\u8282\u70b9\u7684\u6570\u7ec4) \u4ece\u8bb0\u5f55\u5229\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u53d8\u66f4\u503c\u7684\u4e3b\u5e2d\u6811\u6839\u8282\u70b9\u7684\u6570\u7ec4\u4e0b\u6807\u6765\u770b\uff0c\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u54ea\u51e0\u68f5\u4e3b\u5e2d\u6811\u662f\u4e0e\u5148\u524d\u4e00\u81f4\u7684\uff0c\u53c2\u89c1 \u6811\u72b6\u6570\u7ec4\u539f\u7406\u8bf4\u660e \u67e5\u8be2 \u00b6 \u5728\u67e5\u8be2\u533a\u95f4 [l, r] [l, r] \u524d\uff0c\u5148\u5c06\u8981\u4f7f\u7528\u5230\u7684\u5229\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u53d8\u66f4\u503c\u7684\u4e3b\u5e2d\u6811\u6839\u8282\u70b9\u5206\u522b\u5b58\u50a8\u5230 L[\\,] L[\\,] \u548c R[\\,] R[\\,] \u4e24\u4e2a\u6570\u7ec4\u4e2d \u67e5\u8be2\u65f6\uff0c\u6811\u72b6\u6570\u7ec4 \u8bbf\u95ee\u5de6\u53f3\u5b69\u5b50 \u548c\u4e3b\u5e2d\u6811\u540c\u6b65\uff08\u4e5f\u5c31\u662f\u5728\u5411\u4e0b\u9012\u5f52\u4e4b\u524d\uff0c\u5148\u8981\u66f4\u65b0 L L \u548c R R \u6570\u7ec4\u7684\u503c\uff09 \u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\u533a\u95f4\u5bf9\u5e94\u6570\u7684\u4e2a\u6570\u9700\u8981\u8003\u8651\u6811\u72b6\u6570\u7ec4\u4e2d\u7684\u503c\uff08\u5b9e\u9645\u7684\u503c = \u539f\u4e3b\u5e2d\u6811\u8282\u70b9\u7684\u503c + \u6811\u72b6\u6570\u7ec4\u8bb0\u5f55\u53d8\u66f4\u7684\u503c\uff08\u4e0d\u662f\u53d8\u66f4\u4e4b\u540e\u7684\u503c\u55f7\uff01\uff09\uff09 \u6811\u4e0a\u4e3b\u5e2d\u6811 \u00b6 \u5bf9\u4e8e\u6811\u4e0a\u8282\u70b9 u u \u5230 v v \u8def\u5f84\u4e0a\u7684\u4fe1\u606f\uff0c\u5148\u5f97\u5230\u4e24\u4e2a\u8282\u70b9\u7684 DFS \u5e8f\uff08\u53ef\u4ee5\u4f7f\u7528 \u6811\u94fe\u5256\u5206 \uff09\uff0c\u518d\u901a\u8fc7 sum[u] + sum[v] - sum[LCA(u,\\,v)] - sum[father[LCA(u,\\,v)]] sum[u] + sum[v] - sum[LCA(u,\\,v)] - sum[father[LCA(u,\\,v)]] \u83b7\u5f97\uff08 u u \u3001 v v \u3001 LCA(u,\\,v) LCA(u,\\,v) \u3001 father[LCA(u,\\,v)] father[LCA(u,\\,v)] \u8868\u793a\u5bf9\u5e94\u4e3b\u5e2d\u6811\u4e0a\u7684\u8282\u70b9\uff0c sum sum \u4e3a\u5404\u8282\u70b9\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u4fe1\u606f\uff09 \u53c2\u8003\u8d44\u6599 \u00b6 thewalker88 \u68a6\u6e38\u4ed9\u5883\u2014\u2014\u4e3b\u5e2d\u6811\u8be6\u89e3\uff08\u9759\u6001\u4e3b\u5e2d\u6811\uff0c\u5e26\u4fee\u6539\u4e3b\u5e2d\u6811\uff0c\u6811\u4e0a\u4e3b\u5e2d\u6811\uff09 \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 - OI Wiki","title":"\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811"},{"location":"data-struct/persistent-segment/#_1","text":"\u67e5\u8be2\u533a\u95f4\u7b2c K K \u5927\uff08\u5c0f\uff09","title":"\u4e3b\u8981\u7528\u9014"},{"location":"data-struct/persistent-segment/#_2","text":"\u5bf9\u4e8e\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u5e8f\u5217\u7684\u6bcf\u4e2a\u524d\u7f00\uff08\u5171 n n \u4e2a\uff09\u5efa\u7acb\u4e00\u68f5\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u7b2c i i \u68f5\u6811\u5b58\u50a8\u7684\u662f\u539f\u5e8f\u5217 [1,\\,i] [1,\\,i] \u4e2d\u5c5e\u4e8e\u6743\u503c\u533a\u95f4 [L,\\,R] [L,\\,R] \u7684\u6570\u7684\u4e2a\u6570 \u5047\u8bbe\u6709\u5e8f\u5217 {4,1,3,2} {4,1,3,2} \uff0c\u90a3\u4e48\u753b\u51fa\u6765\u7684\u56fe\u5982\u4e0b\uff1a \u8fd9\u4e48\u5efa\u6811\u5b9e\u9645\u80af\u5b9a\u662f\u4f1a MLE \u7684(\u03a6\u0434\u03a6\u256c) \u4ed4\u7ec6\u89c2\u5bdf\u53d1\u73b0\uff0c\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u6570\u540e\uff0c\u6811\u4e0a\u53ea\u6709\u4e00\u6761\u94fe\uff08\u4e5f\u5c31\u662f\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff09\u4e0a\u8282\u70b9\u7684\u503c\u4f1a\u88ab\u4fee\u6539\u3002\u90a3\u4e48\uff0c\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u4fee\u6539 logn logn \u4e2a\u8282\u70b9\uff0c\u5269\u4f59\u8282\u70b9\u5171\u7528\uff0c\u771f\u6b63\u7684\u4e3b\u5e2d\u6811\u5982\u4e0b\uff08\u4ec5\u4ee5\u524d\u4e24\u4e2a\u524d\u7f00\u4e3a\u4f8b\uff09\uff1a \u4fee\u6539\u7684\u90e8\u5206\u53e6\u5efa\u8282\u70b9\uff0c\u672a\u4fee\u6539\u7684\u90e8\u5206\u94fe\u63a5\u4e4b\u524d\u7684 \u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u4e0d\u80fd\u518d\u7528 2*x 2*x \u548c 2*x+1 2*x+1 \u6765\u8868\u793a\u5de6\u53f3\u5b69\u5b50\uff0c\u5728\u4e3b\u5e2d\u6811\u4e2d\u4f7f\u7528\u7684\u662f\u52a8\u6001\u5f00\u70b9\u7684\u65b9\u5f0f","title":"\u539f\u7406"},{"location":"data-struct/persistent-segment/#_3","text":"","title":"\u5b9e\u73b0"},{"location":"data-struct/persistent-segment/#_4","text":"\u4e0d\u53d8\u7684\u90e8\u5206\u4f7f\u7528\u4e4b\u524d\u7684\u8282\u70b9\uff0c\u66f4\u65b0\u7684\u90e8\u5206\u521b\u5efa\u65b0\u8282\u70b9\uff0c\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6bcf\u6b21\u66f4\u65b0\u65f6\u6811\u7684\u6839\u8282\u70b9\uff08\u8fd9\u6837\u5c31\u80fd\u8bbf\u95ee\u6307\u5b9a\u7248\u672c\u4e86\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 update ( l , r , x , & y , v ) // \u8282\u70b9\u5bf9\u5e94\u533a\u95f4 [l, r] // x\uff1a\u4e0a\u4e00\u68f5\u6811\u7684\u8282\u70b9 // y\uff1a\u5f53\u524d\u6811\u7684\u8282\u70b9\uff0c\u5f15\u7528\u4f20\u53c2 { y = tot ++ ; // \u4e3a y \u5206\u914d\u65b0\u8282\u70b9\uff0ctot \u8bb0\u5f55\u5df2\u5206\u914d\u8282\u70b9\u6570 sum [ y ] = sum [ x ] + 1 ; // \u5229\u7528\u4e0a\u4e00\u68f5\u6811\u7684\u72b6\u6001\u6765\u66f4\u65b0 if ( l == r ) return ; ls [ y ] = ls [ x ]; rs [ y ] = rs [ x ]; // \u5c06\u5de6\u53f3\u5b69\u5b50\u521d\u59cb\u5316\uff0c\u503c\u4e0e\u4e0a\u4e00\u68f5\u6811\u76f8\u540c\uff0c\u4e4b\u540e\u9047\u5230\u66f4\u65b0\u5c31\u4fee\u6539 // \u53ef\u4ee5\u5c06\u8282\u70b9\u4fe1\u606f\u4fdd\u5b58\u5728\u7ed3\u6784\u4f53\u4e2d int mid = ( l + r ) >> 1 ; // \u6bcf\u4e00\u65f6\u523b\u8bbf\u95ee\u7684\u4e24\u68f5\u6811\u4e0a\u7684\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u76f8\u540c if ( v <= mid ) update ( l , mid , ls [ x ], ls [ y ], v ); else update ( mid + 1 , r , rs [ x ], rs [ y ], v ); } \u521d\u59cb\u4e3b\u5e2d\u6811\u4e3a\u7a7a\uff0c\u6bcf\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\u66f4\u65b0\u4e00\u6b21 \u67e5\u8be2\u7c7b\u4f3c\u4e8e\u524d\u7f00\u548c\uff0c\u7528\u7b2c r r \u68f5\u6811\u7684\u4fe1\u606f\u51cf\u53bb\u7b2c l-1 l-1 \u68f5\u6811\u7684\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230 [l,r] [l,r] \u533a\u95f4\u7684\u7edf\u8ba1\u4fe1\u606f \u53c2\u8003 \u7ebf\u6bb5\u6811\u7684\u67e5\u8be2\u65b9\u6cd5 \uff0c\u6ce8\u610f\u4e3b\u5e2d\u6811\u7684\u5de6\u53f3\u5b69\u5b50\u8868\u793a\u4e0e\u666e\u901a\u7ebf\u6bb5\u6811\u4e0d\u540c \u90a3\u4e48\u56de\u5230\u6700\u521d\u7684\u95ee\u9898\uff0c\u5982\u4f55\u6c42\u533a\u95f4\u7b2c K K \u5927\uff08\u5c0f\uff09\u5462\uff1f \u4ee5\u533a\u95f4\u7b2c K K \u5927\u4e3a\u4f8b\uff0c\u5047\u8bbe\u53f3\u5b69\u5b50\u5bf9\u5e94\u7684\u6743\u503c\u533a\u95f4\u6709 x x \u4e2a\u6570\uff0c\u5982\u679c x >= K x >= K \uff0c\u5c31\u8bbf\u95ee\u53f3\u5b69\u5b50\uff0c\u5426\u5219\u5728\u5de6\u5b69\u5b50\u8be2\u95ee\u7b2c K - x K - x \u5927\u7684\u6570 1 2 3 4 5 6 7 8 9 query ( k , lp , rp , l , r ) // lp, rp \u5206\u522b\u4e3a\u7b2c l-1 \u68f5\u548c\u7b2c r \u68f5\u4e3b\u5e2d\u6811\u7684\u8282\u70b9 // l, r \u662f\u5f53\u524d\u8282\u70b9\u5bf9\u5e94\u7684\u533a\u95f4 { if ( l == r ) return l ; int mid = ( l + r ) >> 1 , cnt = sum [ rs [ rp ]] - sum [ rs [ lp ]]; if ( cnt < k ) return query ( k - cnt , ls [ lp ], ls [ rp ], l , mid ); else return query ( k , rs [ lp ], rs [ rp ], mid + 1 , r ); } \u5bf9\u957f\u5ea6\u4e3a N N \u7684\u5e8f\u5217\u8fdb\u884c M M \u6b21\u66f4\u65b0\uff0c\u4e3b\u5e2d\u6811\u7684\u7a7a\u95f4\u4e00\u822c\u5f00 (N+M)*logN (N+M)*logN \uff08\u5f53\u7136\u53ef\u4ee5\u76f4\u63a5\u5411\u4e0a\u53d6\u6574\uff0c\u4e0d\u6392\u9664\u4f1a MLE MLE \u7684\u53ef\u80fd\uff09","title":"\u9759\u6001\u4e3b\u5e2d\u6811"},{"location":"data-struct/persistent-segment/#_5","text":"","title":"\u5e26\u4fee\u6539\u4e3b\u5e2d\u6811"},{"location":"data-struct/persistent-segment/#_6","text":"\u9759\u6001\u4e3b\u5e2d\u6811\u7c7b\u4f3c\u524d\u7f00\u548c\uff0c\u524d\u7f00\u548c\u7684\u7ef4\u62a4\u4fee\u6539\u5229\u7528\u5230\u4e86\u6811\u72b6\u6570\u7ec4\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8981\u4fee\u6539\u7684\u90e8\u5206\uff0c\u4e5f\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\uff08\u6811\u72b6\u6570\u7ec4\u5957\u4e3b\u5e2d\u6811\uff01\uff09 \u5efa\u6811\u65f6\u4f7f\u7528\u9759\u6001\u4e3b\u5e2d\u6811\u7684\u65b9\u5f0f\u6784\u5efa\uff0c\u5f53\u8981\u4fee\u6539\u5386\u53f2\u7248\u672c\u65f6\u518d\u4f7f\u7528\u6811\u72b6\u6570\u7ec4 \u4e00\u5171\u9700\u8981\u4e24\u4e2a\u6570\u7ec4\u8bb0\u5f55\u6839\u8282\u70b9\uff0c\u4e00\u4e2a\u662f\u539f\u672c\u4e3b\u5e2d\u6811\u8bb0\u5f55\u6839\u8282\u70b9\u7684\u6570\u7ec4\uff0c\u4e00\u4e2a\u8bb0\u5f55\u5229\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u53d8\u66f4\u503c\u7684\u4e3b\u5e2d\u6811\u6839\u8282\u70b9 \u53c2\u8003 \u6811\u72b6\u6570\u7ec4\u66f4\u65b0\u65b9\u6cd5 \uff0c\u53ea\u4e0d\u8fc7\u66f4\u65b0\u7684\u64cd\u4f5c\u4e0d\u662f\u5bf9\u6811\u72b6\u6570\u7ec4\u8fdb\u884c\u7b80\u5355\u52a0\u51cf\uff0c\u800c\u662f\u590d\u7528\u4e3b\u5e2d\u6811\u7684 update \u51fd\u6570(\u4f20\u5165\u7684\u662f\u8bb0\u5f55\u5229\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u53d8\u66f4\u503c\u7684\u4e3b\u5e2d\u6811\u6839\u8282\u70b9\u7684\u6570\u7ec4) \u4ece\u8bb0\u5f55\u5229\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u53d8\u66f4\u503c\u7684\u4e3b\u5e2d\u6811\u6839\u8282\u70b9\u7684\u6570\u7ec4\u4e0b\u6807\u6765\u770b\uff0c\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u54ea\u51e0\u68f5\u4e3b\u5e2d\u6811\u662f\u4e0e\u5148\u524d\u4e00\u81f4\u7684\uff0c\u53c2\u89c1 \u6811\u72b6\u6570\u7ec4\u539f\u7406\u8bf4\u660e","title":"\u66f4\u65b0"},{"location":"data-struct/persistent-segment/#_7","text":"\u5728\u67e5\u8be2\u533a\u95f4 [l, r] [l, r] \u524d\uff0c\u5148\u5c06\u8981\u4f7f\u7528\u5230\u7684\u5229\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u53d8\u66f4\u503c\u7684\u4e3b\u5e2d\u6811\u6839\u8282\u70b9\u5206\u522b\u5b58\u50a8\u5230 L[\\,] L[\\,] \u548c R[\\,] R[\\,] \u4e24\u4e2a\u6570\u7ec4\u4e2d \u67e5\u8be2\u65f6\uff0c\u6811\u72b6\u6570\u7ec4 \u8bbf\u95ee\u5de6\u53f3\u5b69\u5b50 \u548c\u4e3b\u5e2d\u6811\u540c\u6b65\uff08\u4e5f\u5c31\u662f\u5728\u5411\u4e0b\u9012\u5f52\u4e4b\u524d\uff0c\u5148\u8981\u66f4\u65b0 L L \u548c R R \u6570\u7ec4\u7684\u503c\uff09 \u6bcf\u4e2a\u8282\u70b9\u7684\u6743\u503c\u533a\u95f4\u5bf9\u5e94\u6570\u7684\u4e2a\u6570\u9700\u8981\u8003\u8651\u6811\u72b6\u6570\u7ec4\u4e2d\u7684\u503c\uff08\u5b9e\u9645\u7684\u503c = \u539f\u4e3b\u5e2d\u6811\u8282\u70b9\u7684\u503c + \u6811\u72b6\u6570\u7ec4\u8bb0\u5f55\u53d8\u66f4\u7684\u503c\uff08\u4e0d\u662f\u53d8\u66f4\u4e4b\u540e\u7684\u503c\u55f7\uff01\uff09\uff09","title":"\u67e5\u8be2"},{"location":"data-struct/persistent-segment/#_8","text":"\u5bf9\u4e8e\u6811\u4e0a\u8282\u70b9 u u \u5230 v v \u8def\u5f84\u4e0a\u7684\u4fe1\u606f\uff0c\u5148\u5f97\u5230\u4e24\u4e2a\u8282\u70b9\u7684 DFS \u5e8f\uff08\u53ef\u4ee5\u4f7f\u7528 \u6811\u94fe\u5256\u5206 \uff09\uff0c\u518d\u901a\u8fc7 sum[u] + sum[v] - sum[LCA(u,\\,v)] - sum[father[LCA(u,\\,v)]] sum[u] + sum[v] - sum[LCA(u,\\,v)] - sum[father[LCA(u,\\,v)]] \u83b7\u5f97\uff08 u u \u3001 v v \u3001 LCA(u,\\,v) LCA(u,\\,v) \u3001 father[LCA(u,\\,v)] father[LCA(u,\\,v)] \u8868\u793a\u5bf9\u5e94\u4e3b\u5e2d\u6811\u4e0a\u7684\u8282\u70b9\uff0c sum sum \u4e3a\u5404\u8282\u70b9\u5230\u6839\u8282\u70b9\u8def\u5f84\u4e0a\u7684\u4fe1\u606f\uff09","title":"\u6811\u4e0a\u4e3b\u5e2d\u6811"},{"location":"data-struct/persistent-segment/#_9","text":"thewalker88 \u68a6\u6e38\u4ed9\u5883\u2014\u2014\u4e3b\u5e2d\u6811\u8be6\u89e3\uff08\u9759\u6001\u4e3b\u5e2d\u6811\uff0c\u5e26\u4fee\u6539\u4e3b\u5e2d\u6811\uff0c\u6811\u4e0a\u4e3b\u5e2d\u6811\uff09 \u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811 - OI Wiki","title":"\u53c2\u8003\u8d44\u6599"},{"location":"data-struct/segment-tree/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a YanhuiJessica \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u7b80\u4ecb \u00b6 \u7ebf\u6bb5\u6811\u662f\u4e8c\u53c9\u6811\u5f62\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u533a\u95f4\u6216\u7ebf\u6bb5\u3002\u5b83\u80fd\u89e3\u51b3\u6811\u72b6\u6570\u7ec4\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u4e5f\u80fd\u89e3\u51b3\u6811\u72b6\u6570\u7ec4\u4e0d\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff08\u30fd(\u03a6\u02cb\u53e3\u02ca\u03a6)\u30ce\u6811\u72b6\u6570\u7ec4\u5c0a\u4e25\u4f55\u5728\uff1f\uff09\uff0c\u5f53\u7136\uff0c\u76f8\u6bd4\u6811\u72b6\u6570\u7ec4\uff0c\u7ebf\u6bb5\u6811\u4ee3\u7801\u91cf\u4f1a\u7a0d\u5fae\u591a\u4e00\u70b9~ \u4f8b\u5b50 \u00b6 \u6211\u4eec\u4ee5\u6570\u7ec4 A[\\,] = \\{1, 2, 3, 6, 5, 4\\} A[\\,] = \\{1, 2, 3, 6, 5, 4\\} \u4e3a\u4f8b\uff0c\u5047\u8bbe\u9700\u8981\u7ef4\u62a4\u7684\u662f\u533a\u95f4\u6700\u5927\u503c\uff0c\u90a3\u4e48\u6784\u6210\u7684\u7ebf\u6bb5\u6811\u5982\u4e0b\uff1a \u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u533a\u95f4\uff0c\u8282\u70b9\u4e2d\u7684\u503c\u662f\u8be5\u8282\u70b9\u6240\u7ba1\u7406\u533a\u95f4\u7684\u6700\u5927\u503c \u7ea2\u8272\u6570\u5b57\u662f\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u6807\u3002\u5728\u7ebf\u6bb5\u6811\u4e2d\uff0c\u6bcf\u4e2a\u5de6\u5b69\u5b50\u7684\u4e0b\u6807\u90fd\u662f\u7236\u4eb2\u8282\u70b9\u7684 2 2 \u500d\uff0c\u6bcf\u4e2a\u53f3\u5b69\u5b50\u7684\u4e0b\u6807\u90fd\u662f\u7236\u4eb2\u8282\u70b9\u7684 2 2 \u500d\u591a 1 1 \u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6700\u4e0b\u9762\u4e00\u884c\u53f6\u5b50\u8282\u70b9\u7684\u6807\u53f7\u76f4\u63a5\u4ece 9 9 \u8df3\u5230\u4e86 12 12 \uff0c 5 5 \u53f7\u8282\u70b9\u867d\u7136\u6ca1\u6709\u5b69\u5b50\uff0c\u4f46\u662f\u7a7a\u95f4\u8fd8\u662f\u4fdd\u7559\u7740\u7684 \u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u53ef\u4ee5\u628a\u4e00\u4e2a\u6709 n n \u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u770b\u6210\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\u6765\u8ba1\u7b97\u6240\u9700\u8981\u7684\u7a7a\u95f4\u3002\u5bf9\u4e8e\u5b8c\u5168\u4e8c\u53c9\u6811 k k \u5c42\u4e00\u5171\u6709 2^k-1 2^k-1 \u4e2a\u8282\u70b9\uff0c\u7b2c k k \u5c42\u6709 2^{k-1} 2^{k-1} \u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u5b8c\u5168\u4e8c\u53c9\u6811\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\u6570\u7ea6\u7b49\u4e8e\u524d\u9762\u5c42\u8282\u70b9\u6570\u4e4b\u548c\u3002\u56e0\u6b64\uff0c\u65e0\u4f18\u5316\u7ebf\u6bb5\u6811\u9700\u8981 2*2^k(2^{k-1}<n\\leq2^k) 2*2^k(2^{k-1}<n\\leq2^k) \u7a7a\u95f4\uff0c\u4e00\u822c\u4f1a\u5f00\u5230 4*n 4*n \u9632 RE \u57fa\u672c\u64cd\u4f5c \u00b6 \u5efa\u6811 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 typedef struct { // \u7ebf\u6bb5\u6811\u8282\u70b9\u4e00\u822c\u4f1a\u5305\u542b\u7684\u503c v1 [, v2 , ...]; // \u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u548c\u3001\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u7b49 // \u610f\u4e49\u3001\u53d8\u91cf\u6570\u91cf\u56e0\u9898\u800c\u5f02 lazy ; // \u61d2\u6807\u8bb0\uff0c\u533a\u95f4\u66f4\u65b0\u65f6\u4f1a\u7528\u5230 } Tree ; procedure pushup ( p ) { // \u5047\u8bbe\u7ef4\u62a4\u7684\u662f\u6700\u5927\u503c // tree \u662f\u7ebf\u6bb5\u6811\u7ed3\u6784\u4f53\u6570\u7ec4 tree [ p ]. mx = max ( tree [ p << 1 ]. mx , tree [ p << 1 | 1 ]. mx ); } // \u9012\u5f52\u65b9\u5f0f\u5efa\u6811 build(1, 1, n); procedure build ( p , l , r ) // p \u4e3a\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u6807\uff0cl\u3001r \u5206\u522b\u4e3a\u5f53\u524d\u8282\u70b9\u6240\u7ba1\u7406\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9 { if ( l == r ) // \u5de6\u7aef\u70b9\u7b49\u4e8e\u53f3\u7aef\u70b9\uff0c\u5373\u4e3a\u53f6\u5b50\u8282\u70b9\uff0c\u65e0\u9700\u518d\u5411\u4e0b\u9012\u5f52 { do some things ; // \u4e3a\u53f6\u5b50\u8282\u70b9\u8d4b\u521d\u503c return ; } mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ); // \u9012\u5f52\u6784\u9020\u5de6\u5b69\u5b50\u8282\u70b9 build ( p << 1 | 1 , mid + 1 , r ); // \u9012\u5f52\u6784\u9020\u53f3\u5b69\u5b50\u8282\u70b9 pushup ( p ); // \u6839\u636e\u5de6\u53f3\u5b69\u5b50\u7684\u503c\u66f4\u65b0\u7236\u8282\u70b9 } \u5355\u70b9\u66f4\u65b0 \u00b6 \u4f9d\u7136\u4ee5\u6570\u7ec4 A[\\,] = \\{1, 2, 3, 6, 5, 4\\} A[\\,] = \\{1, 2, 3, 6, 5, 4\\} \u548c\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\u7684\u7ebf\u6bb5\u6811\u4e3a\u4f8b\uff0c\u5047\u8bbe\u5c06 A[1] A[1] \u7684\u503c\u589e\u52a0 5 5 \uff0c\u4e5f\u5c31\u662f A[1] A[1] \u7684\u503c\u53d8\u4e3a 7 7 \uff0c\u5219\u66f4\u65b0\u540e\u7684\u7ebf\u6bb5\u6811\u5982\u4e0b\uff1a \u66f4\u65b0\u4e86 A[1] A[1] \u540e\uff0c\u7ba1\u7406\u8be5\u70b9\u6240\u5728\u533a\u95f4\u7684\u6240\u6709\u8282\u70b9\u90fd\u9700\u8981\u66f4\u65b0 \u6bcf\u6b21\u66f4\u65b0\u90fd\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\uff0c\u5047\u8bbe\u53f6\u5b50\u8282\u70b9\u5728\u7b2c k k \u5c42\uff0c\u90a3\u4e48\u4e00\u5171\u9700\u8981\u66f4\u65b0 log(k) log(k) \u4e2a\u8282\u70b9\uff0c\u6bcf\u6b21\u66f4\u65b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logN) O(logN) \u5355\u70b9\u66f4\u65b0\u7684\u4f2a\u4ee3\u7801\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 procedure update ( p , l , r , k , v ) // k\uff1a\u66f4\u65b0\u7684\u6570\u7ec4\u5143\u7d20\u7684\u4e0b\u6807 // v\uff1a\u66f4\u65b0\u7684\u503c { if ( l == r ) // \u5230\u8fbe\u53f6\u5b50\u8282\u70b9 { do some things ; // \u66f4\u65b0 return ; } mid = ( l + r ) >> 1 ; if ( k <= mid ) // \u82e5\u9700\u8981\u66f4\u65b0\u7684\u6570\u7ec4\u5143\u7d20\u5728\u5de6\u5b50\u6811\u533a\u95f4 update ( p << 1 , l , mid , k , v ); else // \u82e5\u9700\u8981\u66f4\u65b0\u7684\u6570\u7ec4\u5143\u7d20\u5728\u53f3\u5b50\u6811\u533a\u95f4 update ( p << 1 | 1 , mid + 1 , r , k , v ); pushup ( p ); // \u66f4\u65b0\u7236\u8282\u70b9 } \u533a\u95f4\u67e5\u8be2 \u00b6 \u4f9d\u7136\u662f\u4ece\u6839\u8282\u70b9\u5411\u4e0b\u9012\u5f52\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u7ba1\u7406\u7684\u533a\u95f4\u5b8c\u5168\u843d\u5728\u8981\u67e5\u8be2\u533a\u95f4\u5185\uff0c\u5219\u65e0\u9700\u518d\u5411\u4e0b\u9012\u5f52 \u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f O(logN) O(logN) \u4f2a\u4ee3\u7801\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 procedure query ( p , l , r , L , R ) // [L, R] \u662f\u67e5\u8be2\u7684\u533a\u95f4 { if ( L <= l && r <= R ) return some things ; mid = ( l + r ) >> 1 ; if ( L <= mid ) // \u82e5\u5de6\u5b50\u6811\u548c\u9700\u67e5\u8be2\u7684\u533a\u95f4\u4ea4\u96c6\u975e\u7a7a query ( p << 1 , l , mid , L , R ); // \u9012\u5f52\u67e5\u8be2\uff0c\u8fd4\u56de\u503c\u8bf7\u4f9d\u636e\u5177\u4f53\u60c5\u51b5\u5904\u7406 if ( R > mid ) // \u82e5\u53f3\u5b50\u6811\u548c\u9700\u67e5\u8be2\u7684\u533a\u95f4\u4ea4\u96c6\u975e\u7a7a query ( p << 1 | 1 , mid + 1 , r , L , R ); // \u9012\u5f52\u67e5\u8be2\uff0c\u8fd4\u56de\u503c\u8bf7\u4f9d\u636e\u5177\u4f53\u60c5\u51b5\u5904\u7406 return some things ; } \u533a\u95f4\u66f4\u65b0 \u00b6 \u6811\u72b6\u6570\u7ec4\u4e2d\u533a\u95f4\u66f4\u65b0\u4f7f\u7528\u5dee\u5206\u7684\u601d\u60f3\uff0c\u800c\u7ebf\u6bb5\u6811\u9009\u62e9\u5077\u61d2\u03a6\u03c9\u03a6 \u5bf9\u4e8e\u533a\u95f4 [L, R] [L, R] \u6765\u8bf4\uff0c\u6bcf\u6b21\u66f4\u65b0\u90fd\u9700\u8981\u66f4\u65b0\u6240\u6709\u4e0e\u4e4b\u76f8\u5173\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\uff0c\u590d\u6742\u5ea6\u5c06\u8fbe\u5230 O(NlogN) O(NlogN) (\u2565\u03c9\u2565) \u4e8e\u662f\u5f15\u8fdb\u4e86 lazy \u6807\u8bb0\uff0c\u4e5f\u5c31\u662f\u61d2\u6807\u8bb0\u3002\u6bcf\u6b21\u66f4\u65b0\u53ea\u66f4\u65b0\u5230\u66f4\u65b0\u533a\u95f4\u5b8c\u5168\u8986\u76d6\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u533a\u95f4\u4e3a\u6b62\uff0c\u800c\u88ab\u66f4\u65b0\u8282\u70b9\u7684\u5b50\u5b59\u8282\u70b9\u533a\u95f4\u5c1a\u672a\u66f4\u65b0\uff0c\u4e8e\u662f\u5728\u88ab\u66f4\u65b0\u8282\u70b9\u4e0a\u6253\u4e0a lazy \u6807\u8bb0\uff0c\u7b49\u5230\u5b50\u5b59\u8282\u70b9\u88ab\u8bbf\u95ee\u524d\u518d\u4e0b\u4f20\uff0c\u6240\u4ee5\u4e5f\u53eb\u5ef6\u8fdf\u6807\u8bb0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 procedure pushdown ( p ) { if ( lazy ) // \u5982\u679c lazy \u6807\u8bb0\u5b58\u5728 { \u5c06 lazy \u6807\u8bb0\u4e0b\u4f20\u5230\u5de6\u53f3\u5b69\u5b50\u8282\u70b9\u7684 lazy \u6807\u8bb0 ; // \u533a\u95f4\u548c lazy \u6807\u8bb0\u7684\u503c\u76f8\u52a0 // \u533a\u95f4\u7f6e\u6570\u5219\u76f4\u63a5\u8d4b\u503c \u4f9d\u636e lazy \u6807\u8bb0\u66f4\u65b0\u5de6\u53f3\u5b69\u5b50\u8282\u70b9\u7ef4\u62a4\u7684\u503c ; \u6e05\u9664 lazy \u6807\u8bb0 ; } } procedure update ( p , l , r , L , R , v ) // [L, R] \u4e3a\u66f4\u65b0\u7684\u533a\u95f4 { if ( L <= l && r <= R ) { \u66f4\u65b0 lazy \u6807\u8bb0 ; \u66f4\u65b0\u8282\u70b9\u7ef4\u62a4\u7684\u503c ; return ; } pushdown ( p ); // \u66f4\u65b0\u5b50\u6811\u524d\u5148\u4e0b\u4f20 lazy \u6807\u8bb0 mid = ( l + r ) >> 1 ; if ( L <= mid ) update ( p << 1 , l , mid , L , R , v ); if ( R > mid ) update ( p << 1 | 1 , mid + 1 , r , L , R , v ); pushup ( p ); } \u533a\u95f4\u67e5\u8be2\u65f6\u4e5f\u8981\u8bb0\u5f97\u4e0b\u4f20 lazy \u6807\u8bb0\u55f7~(<\u309d\u03c9\u03a6) \u53c2\u8003\u8d44\u6599 \u00b6 \u7ebf\u6bb5\u6811\u8be6\u89e3 - Xenny - \u535a\u5ba2\u56ed","title":"\u7ebf\u6bb5\u6811"},{"location":"data-struct/segment-tree/#_1","text":"\u7ebf\u6bb5\u6811\u662f\u4e8c\u53c9\u6811\u5f62\u6570\u636e\u7ed3\u6784\uff0c\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u533a\u95f4\u6216\u7ebf\u6bb5\u3002\u5b83\u80fd\u89e3\u51b3\u6811\u72b6\u6570\u7ec4\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u4e5f\u80fd\u89e3\u51b3\u6811\u72b6\u6570\u7ec4\u4e0d\u80fd\u89e3\u51b3\u7684\u95ee\u9898\uff08\u30fd(\u03a6\u02cb\u53e3\u02ca\u03a6)\u30ce\u6811\u72b6\u6570\u7ec4\u5c0a\u4e25\u4f55\u5728\uff1f\uff09\uff0c\u5f53\u7136\uff0c\u76f8\u6bd4\u6811\u72b6\u6570\u7ec4\uff0c\u7ebf\u6bb5\u6811\u4ee3\u7801\u91cf\u4f1a\u7a0d\u5fae\u591a\u4e00\u70b9~","title":"\u7b80\u4ecb"},{"location":"data-struct/segment-tree/#_2","text":"\u6211\u4eec\u4ee5\u6570\u7ec4 A[\\,] = \\{1, 2, 3, 6, 5, 4\\} A[\\,] = \\{1, 2, 3, 6, 5, 4\\} \u4e3a\u4f8b\uff0c\u5047\u8bbe\u9700\u8981\u7ef4\u62a4\u7684\u662f\u533a\u95f4\u6700\u5927\u503c\uff0c\u90a3\u4e48\u6784\u6210\u7684\u7ebf\u6bb5\u6811\u5982\u4e0b\uff1a \u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u4e00\u4e2a\u533a\u95f4\uff0c\u8282\u70b9\u4e2d\u7684\u503c\u662f\u8be5\u8282\u70b9\u6240\u7ba1\u7406\u533a\u95f4\u7684\u6700\u5927\u503c \u7ea2\u8272\u6570\u5b57\u662f\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u6807\u3002\u5728\u7ebf\u6bb5\u6811\u4e2d\uff0c\u6bcf\u4e2a\u5de6\u5b69\u5b50\u7684\u4e0b\u6807\u90fd\u662f\u7236\u4eb2\u8282\u70b9\u7684 2 2 \u500d\uff0c\u6bcf\u4e2a\u53f3\u5b69\u5b50\u7684\u4e0b\u6807\u90fd\u662f\u7236\u4eb2\u8282\u70b9\u7684 2 2 \u500d\u591a 1 1 \u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6700\u4e0b\u9762\u4e00\u884c\u53f6\u5b50\u8282\u70b9\u7684\u6807\u53f7\u76f4\u63a5\u4ece 9 9 \u8df3\u5230\u4e86 12 12 \uff0c 5 5 \u53f7\u8282\u70b9\u867d\u7136\u6ca1\u6709\u5b69\u5b50\uff0c\u4f46\u662f\u7a7a\u95f4\u8fd8\u662f\u4fdd\u7559\u7740\u7684 \u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u53ef\u4ee5\u628a\u4e00\u4e2a\u6709 n n \u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u7ebf\u6bb5\u6811\u770b\u6210\u4e00\u4e2a\u5b8c\u5168\u4e8c\u53c9\u6811\u6765\u8ba1\u7b97\u6240\u9700\u8981\u7684\u7a7a\u95f4\u3002\u5bf9\u4e8e\u5b8c\u5168\u4e8c\u53c9\u6811 k k \u5c42\u4e00\u5171\u6709 2^k-1 2^k-1 \u4e2a\u8282\u70b9\uff0c\u7b2c k k \u5c42\u6709 2^{k-1} 2^{k-1} \u4e2a\u8282\u70b9\uff0c\u6240\u4ee5\u5b8c\u5168\u4e8c\u53c9\u6811\u6700\u540e\u4e00\u5c42\u7684\u8282\u70b9\u6570\u7ea6\u7b49\u4e8e\u524d\u9762\u5c42\u8282\u70b9\u6570\u4e4b\u548c\u3002\u56e0\u6b64\uff0c\u65e0\u4f18\u5316\u7ebf\u6bb5\u6811\u9700\u8981 2*2^k(2^{k-1}<n\\leq2^k) 2*2^k(2^{k-1}<n\\leq2^k) \u7a7a\u95f4\uff0c\u4e00\u822c\u4f1a\u5f00\u5230 4*n 4*n \u9632 RE","title":"\u4f8b\u5b50"},{"location":"data-struct/segment-tree/#_3","text":"","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"data-struct/segment-tree/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 typedef struct { // \u7ebf\u6bb5\u6811\u8282\u70b9\u4e00\u822c\u4f1a\u5305\u542b\u7684\u503c v1 [, v2 , ...]; // \u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u548c\u3001\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u7b49 // \u610f\u4e49\u3001\u53d8\u91cf\u6570\u91cf\u56e0\u9898\u800c\u5f02 lazy ; // \u61d2\u6807\u8bb0\uff0c\u533a\u95f4\u66f4\u65b0\u65f6\u4f1a\u7528\u5230 } Tree ; procedure pushup ( p ) { // \u5047\u8bbe\u7ef4\u62a4\u7684\u662f\u6700\u5927\u503c // tree \u662f\u7ebf\u6bb5\u6811\u7ed3\u6784\u4f53\u6570\u7ec4 tree [ p ]. mx = max ( tree [ p << 1 ]. mx , tree [ p << 1 | 1 ]. mx ); } // \u9012\u5f52\u65b9\u5f0f\u5efa\u6811 build(1, 1, n); procedure build ( p , l , r ) // p \u4e3a\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u6807\uff0cl\u3001r \u5206\u522b\u4e3a\u5f53\u524d\u8282\u70b9\u6240\u7ba1\u7406\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9 { if ( l == r ) // \u5de6\u7aef\u70b9\u7b49\u4e8e\u53f3\u7aef\u70b9\uff0c\u5373\u4e3a\u53f6\u5b50\u8282\u70b9\uff0c\u65e0\u9700\u518d\u5411\u4e0b\u9012\u5f52 { do some things ; // \u4e3a\u53f6\u5b50\u8282\u70b9\u8d4b\u521d\u503c return ; } mid = ( l + r ) >> 1 ; build ( p << 1 , l , mid ); // \u9012\u5f52\u6784\u9020\u5de6\u5b69\u5b50\u8282\u70b9 build ( p << 1 | 1 , mid + 1 , r ); // \u9012\u5f52\u6784\u9020\u53f3\u5b69\u5b50\u8282\u70b9 pushup ( p ); // \u6839\u636e\u5de6\u53f3\u5b69\u5b50\u7684\u503c\u66f4\u65b0\u7236\u8282\u70b9 }","title":"\u5efa\u6811"},{"location":"data-struct/segment-tree/#_5","text":"\u4f9d\u7136\u4ee5\u6570\u7ec4 A[\\,] = \\{1, 2, 3, 6, 5, 4\\} A[\\,] = \\{1, 2, 3, 6, 5, 4\\} \u548c\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\u7684\u7ebf\u6bb5\u6811\u4e3a\u4f8b\uff0c\u5047\u8bbe\u5c06 A[1] A[1] \u7684\u503c\u589e\u52a0 5 5 \uff0c\u4e5f\u5c31\u662f A[1] A[1] \u7684\u503c\u53d8\u4e3a 7 7 \uff0c\u5219\u66f4\u65b0\u540e\u7684\u7ebf\u6bb5\u6811\u5982\u4e0b\uff1a \u66f4\u65b0\u4e86 A[1] A[1] \u540e\uff0c\u7ba1\u7406\u8be5\u70b9\u6240\u5728\u533a\u95f4\u7684\u6240\u6709\u8282\u70b9\u90fd\u9700\u8981\u66f4\u65b0 \u6bcf\u6b21\u66f4\u65b0\u90fd\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\uff0c\u5047\u8bbe\u53f6\u5b50\u8282\u70b9\u5728\u7b2c k k \u5c42\uff0c\u90a3\u4e48\u4e00\u5171\u9700\u8981\u66f4\u65b0 log(k) log(k) \u4e2a\u8282\u70b9\uff0c\u6bcf\u6b21\u66f4\u65b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(logN) O(logN) \u5355\u70b9\u66f4\u65b0\u7684\u4f2a\u4ee3\u7801\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 procedure update ( p , l , r , k , v ) // k\uff1a\u66f4\u65b0\u7684\u6570\u7ec4\u5143\u7d20\u7684\u4e0b\u6807 // v\uff1a\u66f4\u65b0\u7684\u503c { if ( l == r ) // \u5230\u8fbe\u53f6\u5b50\u8282\u70b9 { do some things ; // \u66f4\u65b0 return ; } mid = ( l + r ) >> 1 ; if ( k <= mid ) // \u82e5\u9700\u8981\u66f4\u65b0\u7684\u6570\u7ec4\u5143\u7d20\u5728\u5de6\u5b50\u6811\u533a\u95f4 update ( p << 1 , l , mid , k , v ); else // \u82e5\u9700\u8981\u66f4\u65b0\u7684\u6570\u7ec4\u5143\u7d20\u5728\u53f3\u5b50\u6811\u533a\u95f4 update ( p << 1 | 1 , mid + 1 , r , k , v ); pushup ( p ); // \u66f4\u65b0\u7236\u8282\u70b9 }","title":"\u5355\u70b9\u66f4\u65b0"},{"location":"data-struct/segment-tree/#_6","text":"\u4f9d\u7136\u662f\u4ece\u6839\u8282\u70b9\u5411\u4e0b\u9012\u5f52\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u7ba1\u7406\u7684\u533a\u95f4\u5b8c\u5168\u843d\u5728\u8981\u67e5\u8be2\u533a\u95f4\u5185\uff0c\u5219\u65e0\u9700\u518d\u5411\u4e0b\u9012\u5f52 \u67e5\u8be2\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e5f\u662f O(logN) O(logN) \u4f2a\u4ee3\u7801\u5982\u4e0b 1 2 3 4 5 6 7 8 9 10 11 12 procedure query ( p , l , r , L , R ) // [L, R] \u662f\u67e5\u8be2\u7684\u533a\u95f4 { if ( L <= l && r <= R ) return some things ; mid = ( l + r ) >> 1 ; if ( L <= mid ) // \u82e5\u5de6\u5b50\u6811\u548c\u9700\u67e5\u8be2\u7684\u533a\u95f4\u4ea4\u96c6\u975e\u7a7a query ( p << 1 , l , mid , L , R ); // \u9012\u5f52\u67e5\u8be2\uff0c\u8fd4\u56de\u503c\u8bf7\u4f9d\u636e\u5177\u4f53\u60c5\u51b5\u5904\u7406 if ( R > mid ) // \u82e5\u53f3\u5b50\u6811\u548c\u9700\u67e5\u8be2\u7684\u533a\u95f4\u4ea4\u96c6\u975e\u7a7a query ( p << 1 | 1 , mid + 1 , r , L , R ); // \u9012\u5f52\u67e5\u8be2\uff0c\u8fd4\u56de\u503c\u8bf7\u4f9d\u636e\u5177\u4f53\u60c5\u51b5\u5904\u7406 return some things ; }","title":"\u533a\u95f4\u67e5\u8be2"},{"location":"data-struct/segment-tree/#_7","text":"\u6811\u72b6\u6570\u7ec4\u4e2d\u533a\u95f4\u66f4\u65b0\u4f7f\u7528\u5dee\u5206\u7684\u601d\u60f3\uff0c\u800c\u7ebf\u6bb5\u6811\u9009\u62e9\u5077\u61d2\u03a6\u03c9\u03a6 \u5bf9\u4e8e\u533a\u95f4 [L, R] [L, R] \u6765\u8bf4\uff0c\u6bcf\u6b21\u66f4\u65b0\u90fd\u9700\u8981\u66f4\u65b0\u6240\u6709\u4e0e\u4e4b\u76f8\u5173\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\uff0c\u590d\u6742\u5ea6\u5c06\u8fbe\u5230 O(NlogN) O(NlogN) (\u2565\u03c9\u2565) \u4e8e\u662f\u5f15\u8fdb\u4e86 lazy \u6807\u8bb0\uff0c\u4e5f\u5c31\u662f\u61d2\u6807\u8bb0\u3002\u6bcf\u6b21\u66f4\u65b0\u53ea\u66f4\u65b0\u5230\u66f4\u65b0\u533a\u95f4\u5b8c\u5168\u8986\u76d6\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u533a\u95f4\u4e3a\u6b62\uff0c\u800c\u88ab\u66f4\u65b0\u8282\u70b9\u7684\u5b50\u5b59\u8282\u70b9\u533a\u95f4\u5c1a\u672a\u66f4\u65b0\uff0c\u4e8e\u662f\u5728\u88ab\u66f4\u65b0\u8282\u70b9\u4e0a\u6253\u4e0a lazy \u6807\u8bb0\uff0c\u7b49\u5230\u5b50\u5b59\u8282\u70b9\u88ab\u8bbf\u95ee\u524d\u518d\u4e0b\u4f20\uff0c\u6240\u4ee5\u4e5f\u53eb\u5ef6\u8fdf\u6807\u8bb0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 procedure pushdown ( p ) { if ( lazy ) // \u5982\u679c lazy \u6807\u8bb0\u5b58\u5728 { \u5c06 lazy \u6807\u8bb0\u4e0b\u4f20\u5230\u5de6\u53f3\u5b69\u5b50\u8282\u70b9\u7684 lazy \u6807\u8bb0 ; // \u533a\u95f4\u548c lazy \u6807\u8bb0\u7684\u503c\u76f8\u52a0 // \u533a\u95f4\u7f6e\u6570\u5219\u76f4\u63a5\u8d4b\u503c \u4f9d\u636e lazy \u6807\u8bb0\u66f4\u65b0\u5de6\u53f3\u5b69\u5b50\u8282\u70b9\u7ef4\u62a4\u7684\u503c ; \u6e05\u9664 lazy \u6807\u8bb0 ; } } procedure update ( p , l , r , L , R , v ) // [L, R] \u4e3a\u66f4\u65b0\u7684\u533a\u95f4 { if ( L <= l && r <= R ) { \u66f4\u65b0 lazy \u6807\u8bb0 ; \u66f4\u65b0\u8282\u70b9\u7ef4\u62a4\u7684\u503c ; return ; } pushdown ( p ); // \u66f4\u65b0\u5b50\u6811\u524d\u5148\u4e0b\u4f20 lazy \u6807\u8bb0 mid = ( l + r ) >> 1 ; if ( L <= mid ) update ( p << 1 , l , mid , L , R , v ); if ( R > mid ) update ( p << 1 | 1 , mid + 1 , r , L , R , v ); pushup ( p ); } \u533a\u95f4\u67e5\u8be2\u65f6\u4e5f\u8981\u8bb0\u5f97\u4e0b\u4f20 lazy \u6807\u8bb0\u55f7~(<\u309d\u03c9\u03a6)","title":"\u533a\u95f4\u66f4\u65b0"},{"location":"data-struct/segment-tree/#_8","text":"\u7ebf\u6bb5\u6811\u8be6\u89e3 - Xenny - \u535a\u5ba2\u56ed","title":"\u53c2\u8003\u8d44\u6599"},{"location":"dp/CountingDP/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a CooolKey \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u8981\u70b9\uff1a \u5b66\u4f1a\u5c06\u95ee\u9898\u5316\u4e3a \u5b50\u95ee\u9898 \u540c\u65f6\u4fdd\u8bc1 \u4e0d\u91cd\u4e0d\u6f0f \u4f8b\u9898\u4e09 \u00b6 \u7ed9\u5b9a\u4e00\u4e2a n * m \u7684\u68cb\u76d8(1 \u2264 n,m < 1e5)\uff0c\u68cb\u76d8\u4e0a\u6709 N (1 \u2264 N \u2264 2000)\u4e2a\u683c\u5b50\u662f\u9ed1\u8272\u7684\uff0c\u5176\u4ed6\u662f\u767d\u8272\u7684 \u521d\u59cb\u4f4d\u7f6e\u5728\u5de6\u4e0a\u89d2\uff0c\u53ea\u80fd\u5411\u4e0b\u6216\u5411\u53f3\u79fb\u52a8\uff0c\u4e0d\u80fd\u7ecf\u8fc7\u9ed1\u8272\u683c\u5b50 \u4ece\u5de6\u4e0a\u89d2\u79fb\u52a8\u5230\u53f3\u4e0b\u89d2\u4e00\u7528\u6709\u591a\u5c11\u79cd\u8d70\u6cd5\uff1f \uff08\u8f93\u51fa\u65f6\u5bf9 1e9+7 \u53d6\u6a21\uff09 \u4e0d\u8003\u8651\u9ed1\u683c\u5b50\uff0c\u4ece\u5de6\u4e0a\u89d2\u79fb\u52a8\u5230\u53f3\u4e0b\u89d2\u7684\u8d70\u6cd5\uff1a C_{m+n}^m C_{m+n}^m \u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u68cb\u76d8\u5f88\u5927\uff0c\u53ef\u662f\u9ed1\u8272\u683c\u5b50\u6570\u91cf\u5f88\u5c11 \u95ee\u9898\u8f6c\u6362\uff1a \u6c42\u4ece\u5de6\u4e0a\u89d2\u79fb\u52a8\u5230\u53f3\u4e0b\u89d2\u4f1a\u7ecf\u8fc7\u9ed1\u8272\u683c\u5b50\u7684\u8d70\u6cd5 \u5b50\u95ee\u9898\u5212\u5206\uff1a \u6309\u7167\u7b2c\u4e00\u4e2a\u7ecf\u8fc7\u7684\u9ed1\u683c\u5b50\u5212\u5206 \u89e3\u9898\u601d\u8def\uff1a \u5047\u8bbe\u7ec8\u70b9\u4e5f\u662f\u9ed1\u8272\u683c\u5b50\uff0c\u6392\u5e8f\u540e\uff0c\u8bbe dp[i] \u4e3a\u4ece\u8d77\u70b9\u8d70\u5230\u7b2c i \u4e2a\u9ed1\u683c\u5b50\uff0c\u4e14\u4e0d\u7ecf\u8fc7\u5176\u4ed6\u9ed1\u683c\u5b50\u7684\u8def\u7ebf\u6570 dp[i]=C_{x_i-1+y_i-1}^{x_i-1}-\\sum_{j=0}^{i-1}dp[j]*C_{x_i-x_j+y_i-y_j}^{x_i-x_j} dp[i]=C_{x_i-1+y_i-1}^{x_i-1}-\\sum_{j=0}^{i-1}dp[j]*C_{x_i-x_j+y_i-y_j}^{x_i-x_j} \u5feb\u901f\u5e42\u677f\u5b50 1 2 3 4 5 6 7 8 9 10 ll qpow ( ll a , ll b ) { ll ans = 1 % mod ; for (; b ; b >>= 1l l ) { if ( b & 1l l ) ans = ans * a % mod ; a = a * a % mod ; } return ans ; } \u7ec4\u5408\u6570\u677f\u5b50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ll jc [ 200020 ], jcinv [ 200020 ]; ll inv ( ll a ) { return qpow ( a , mod -2 ); } void init ( int n ) { jc [ 1 ] = 1 ; jcinv [ 1 ] = inv ( 1 ); for ( int i = 2 ; i <= n ; i ++ ) { jc [ i ] = jc [ i -1 ] * i % mod ; jcinv [ i ] = inv ( jc [ i ]); } } ll C ( int n , int m ) { if ( n == 0 ) return 1 ; else if ( n == m ) return 1 ; return jc [ m ] * jcinv [ n ] % mod * jcinv [ m - n ] % mod ; } \u4f8b\u9898\u56db \u00b6 \u6c42 N \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u8fde\u901a\u56fe\u6709\u591a\u5c11\u4e2a\uff0c\u8282\u70b9\u6709\u6807\u53f7\uff0c\u7f16\u53f7\u4e3a1\uff5eN\uff081 \u2264 N \u2264 50\uff09 \u663e\u7136\uff0c\u65e0\u5411\u56fe\u7684\u603b\u6570\u4e3a 2^{N(N-1)/2} 2^{N(N-1)/2} \u76f4\u63a5\u8ba1\u7b97\u8fde\u901a\u56fe\u5f88\u56f0\u96be \u95ee\u9898\u8f6c\u6362\uff1a \u6c42\u4e0d\u8fde\u901a\u56fe\u7684\u4e2a\u6570 \u5212\u5206\uff1a \u56fa\u5b9a\u4e00\u4e2a\u70b9\uff0c\u6309\u7167\u8be5\u70b9\u6240\u5728\u7684\u8fde\u901a\u56fe\u7684\u8282\u70b9\u4e2a\u6570\u5212\u5206 \u89e3\u9898\u601d\u8def\uff1a \u8bbe dp[i] \u4e3a i \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u8fde\u901a\u56fe\u7684\u4e2a\u6570 dp[i]=2^{i(i-1)/2}-\\sum^{i-1}_{j=1}dp[j]*C_{i-1}^{j-1}*2^{(i-j)(i-j-1)/2} dp[i]=2^{i(i-1)/2}-\\sum^{i-1}_{j=1}dp[j]*C_{i-1}^{j-1}*2^{(i-j)(i-j-1)/2} \u5927\u6570 \u53ef\u4ee5\u5728\u7f51\u4e0a\u627e\u5927\u6570\u677f\u5b50 \u7531\u4e8e\u8fd9\u4e2a\u9898\u53ea\u670950\u4e2a\u6570\uff0c\u4e5f\u53ef\u4ee5\u7528python\u5199\u5b8c\uff0c\u628a\u7b54\u6848\u6253\u5370\u51fa\u6765\uff0c\u7528C\u8bed\u8a00\u76f4\u63a5\u8f93\u51fa \u5c0f\u5efa\u8bae \u00b6 \u9047\u5230\u5199\u4e0d\u51fa\u6765\u7684\u9898\uff0c\u770b\u5b8c\u9898\u89e3\u540e\u4e0d\u4ec5\u4ec5\u8981\u77e5\u9053\u300c\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\u5199\u300d\uff0c\u8fd8\u8981\u601d\u8003\u300c\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u60f3\u300d \u5bf9\u4e8eACM\u7684\u6280\u80fd\u52a0\u70b9\uff0c\u9664\u4e86\u201c\u8ba1\u6570DP\uff0c\u6811\u4e0aDP\uff0c\u7ec4\u5408\u6570\u5b66\uff0c\u56fe\u8bba ...\u201d\u8fd9\u79cd\u300c\u4e13\u9898\u7c7b\u300d\u7684\u5b66\u4e60\uff0c\u50cf\u201c\u62fc\u51d1\u601d\u60f3\uff0c\u4e8c\u5206\u601d\u60f3\uff0c\u8f6c\u5316\u4e3a\u5b50\u95ee\u9898\uff0c\u53cd\u5411\u601d\u8003 ...\u201d\u8fd9\u6837\u7684\u300c\u601d\u60f3\u7c7b\u300d\u5f52\u7eb3\u4e5f\u5f88\u91cd\u8981","title":"\u8ba1\u6570DP"},{"location":"dp/CountingDP/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a n * m \u7684\u68cb\u76d8(1 \u2264 n,m < 1e5)\uff0c\u68cb\u76d8\u4e0a\u6709 N (1 \u2264 N \u2264 2000)\u4e2a\u683c\u5b50\u662f\u9ed1\u8272\u7684\uff0c\u5176\u4ed6\u662f\u767d\u8272\u7684 \u521d\u59cb\u4f4d\u7f6e\u5728\u5de6\u4e0a\u89d2\uff0c\u53ea\u80fd\u5411\u4e0b\u6216\u5411\u53f3\u79fb\u52a8\uff0c\u4e0d\u80fd\u7ecf\u8fc7\u9ed1\u8272\u683c\u5b50 \u4ece\u5de6\u4e0a\u89d2\u79fb\u52a8\u5230\u53f3\u4e0b\u89d2\u4e00\u7528\u6709\u591a\u5c11\u79cd\u8d70\u6cd5\uff1f \uff08\u8f93\u51fa\u65f6\u5bf9 1e9+7 \u53d6\u6a21\uff09 \u4e0d\u8003\u8651\u9ed1\u683c\u5b50\uff0c\u4ece\u5de6\u4e0a\u89d2\u79fb\u52a8\u5230\u53f3\u4e0b\u89d2\u7684\u8d70\u6cd5\uff1a C_{m+n}^m C_{m+n}^m \u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u68cb\u76d8\u5f88\u5927\uff0c\u53ef\u662f\u9ed1\u8272\u683c\u5b50\u6570\u91cf\u5f88\u5c11 \u95ee\u9898\u8f6c\u6362\uff1a \u6c42\u4ece\u5de6\u4e0a\u89d2\u79fb\u52a8\u5230\u53f3\u4e0b\u89d2\u4f1a\u7ecf\u8fc7\u9ed1\u8272\u683c\u5b50\u7684\u8d70\u6cd5 \u5b50\u95ee\u9898\u5212\u5206\uff1a \u6309\u7167\u7b2c\u4e00\u4e2a\u7ecf\u8fc7\u7684\u9ed1\u683c\u5b50\u5212\u5206 \u89e3\u9898\u601d\u8def\uff1a \u5047\u8bbe\u7ec8\u70b9\u4e5f\u662f\u9ed1\u8272\u683c\u5b50\uff0c\u6392\u5e8f\u540e\uff0c\u8bbe dp[i] \u4e3a\u4ece\u8d77\u70b9\u8d70\u5230\u7b2c i \u4e2a\u9ed1\u683c\u5b50\uff0c\u4e14\u4e0d\u7ecf\u8fc7\u5176\u4ed6\u9ed1\u683c\u5b50\u7684\u8def\u7ebf\u6570 dp[i]=C_{x_i-1+y_i-1}^{x_i-1}-\\sum_{j=0}^{i-1}dp[j]*C_{x_i-x_j+y_i-y_j}^{x_i-x_j} dp[i]=C_{x_i-1+y_i-1}^{x_i-1}-\\sum_{j=0}^{i-1}dp[j]*C_{x_i-x_j+y_i-y_j}^{x_i-x_j} \u5feb\u901f\u5e42\u677f\u5b50 1 2 3 4 5 6 7 8 9 10 ll qpow ( ll a , ll b ) { ll ans = 1 % mod ; for (; b ; b >>= 1l l ) { if ( b & 1l l ) ans = ans * a % mod ; a = a * a % mod ; } return ans ; } \u7ec4\u5408\u6570\u677f\u5b50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ll jc [ 200020 ], jcinv [ 200020 ]; ll inv ( ll a ) { return qpow ( a , mod -2 ); } void init ( int n ) { jc [ 1 ] = 1 ; jcinv [ 1 ] = inv ( 1 ); for ( int i = 2 ; i <= n ; i ++ ) { jc [ i ] = jc [ i -1 ] * i % mod ; jcinv [ i ] = inv ( jc [ i ]); } } ll C ( int n , int m ) { if ( n == 0 ) return 1 ; else if ( n == m ) return 1 ; return jc [ m ] * jcinv [ n ] % mod * jcinv [ m - n ] % mod ; }","title":"\u4f8b\u9898\u4e09"},{"location":"dp/CountingDP/#_2","text":"\u6c42 N \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u8fde\u901a\u56fe\u6709\u591a\u5c11\u4e2a\uff0c\u8282\u70b9\u6709\u6807\u53f7\uff0c\u7f16\u53f7\u4e3a1\uff5eN\uff081 \u2264 N \u2264 50\uff09 \u663e\u7136\uff0c\u65e0\u5411\u56fe\u7684\u603b\u6570\u4e3a 2^{N(N-1)/2} 2^{N(N-1)/2} \u76f4\u63a5\u8ba1\u7b97\u8fde\u901a\u56fe\u5f88\u56f0\u96be \u95ee\u9898\u8f6c\u6362\uff1a \u6c42\u4e0d\u8fde\u901a\u56fe\u7684\u4e2a\u6570 \u5212\u5206\uff1a \u56fa\u5b9a\u4e00\u4e2a\u70b9\uff0c\u6309\u7167\u8be5\u70b9\u6240\u5728\u7684\u8fde\u901a\u56fe\u7684\u8282\u70b9\u4e2a\u6570\u5212\u5206 \u89e3\u9898\u601d\u8def\uff1a \u8bbe dp[i] \u4e3a i \u4e2a\u8282\u70b9\u7684\u65e0\u5411\u8fde\u901a\u56fe\u7684\u4e2a\u6570 dp[i]=2^{i(i-1)/2}-\\sum^{i-1}_{j=1}dp[j]*C_{i-1}^{j-1}*2^{(i-j)(i-j-1)/2} dp[i]=2^{i(i-1)/2}-\\sum^{i-1}_{j=1}dp[j]*C_{i-1}^{j-1}*2^{(i-j)(i-j-1)/2} \u5927\u6570 \u53ef\u4ee5\u5728\u7f51\u4e0a\u627e\u5927\u6570\u677f\u5b50 \u7531\u4e8e\u8fd9\u4e2a\u9898\u53ea\u670950\u4e2a\u6570\uff0c\u4e5f\u53ef\u4ee5\u7528python\u5199\u5b8c\uff0c\u628a\u7b54\u6848\u6253\u5370\u51fa\u6765\uff0c\u7528C\u8bed\u8a00\u76f4\u63a5\u8f93\u51fa","title":"\u4f8b\u9898\u56db"},{"location":"dp/CountingDP/#_3","text":"\u9047\u5230\u5199\u4e0d\u51fa\u6765\u7684\u9898\uff0c\u770b\u5b8c\u9898\u89e3\u540e\u4e0d\u4ec5\u4ec5\u8981\u77e5\u9053\u300c\u4e3a\u4ec0\u4e48\u662f\u8fd9\u6837\u5199\u300d\uff0c\u8fd8\u8981\u601d\u8003\u300c\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u60f3\u300d \u5bf9\u4e8eACM\u7684\u6280\u80fd\u52a0\u70b9\uff0c\u9664\u4e86\u201c\u8ba1\u6570DP\uff0c\u6811\u4e0aDP\uff0c\u7ec4\u5408\u6570\u5b66\uff0c\u56fe\u8bba ...\u201d\u8fd9\u79cd\u300c\u4e13\u9898\u7c7b\u300d\u7684\u5b66\u4e60\uff0c\u50cf\u201c\u62fc\u51d1\u601d\u60f3\uff0c\u4e8c\u5206\u601d\u60f3\uff0c\u8f6c\u5316\u4e3a\u5b50\u95ee\u9898\uff0c\u53cd\u5411\u601d\u8003 ...\u201d\u8fd9\u6837\u7684\u300c\u601d\u60f3\u7c7b\u300d\u5f52\u7eb3\u4e5f\u5f88\u91cd\u8981","title":"\u5c0f\u5efa\u8bae"},{"location":"dp/DigitalDP/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a CooolKey \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u8fd9\u7c7b\u9898\u76ee\u4e2d\u4e00\u822c\u7ed9\u5b9a\u4e00\u4e9b\u9650\u5236\u6761\u4ef6\uff0c \u6c42\u6ee1\u8db3\u9650\u5236\u6761\u4ef6\u7684\u7b2c K \u5c0f\u7684\u6570\u662f\u591a\u5c11\uff0c \u6216\u8005\u6c42\u5728\u533a\u95f4 [ L , R ] \u5185\u6709\u591a\u5c11\u4e2a\u6ee1\u8db3\u9650\u5236\u6761\u4ef6\u7684\u6570 \u89e3\u9898\u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212\u8fdb\u884c \u9884\u5904\u7406 \u8bd5\u586b\u6cd5 \u6c42\u7b54\u6848(\u62fc\u51d1\u601d\u60f3) \u4f8b\u9898\u4e00 \u00b6 \u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4 [ n , m ]\uff08 0 < n \u2264 m < 1000 000 \uff09 \u6c42\u533a\u95f4\u4e2d\u4e0d\u542b\u6570\u5b574\uff0c\u4e5f\u4e0d\u542b62\u7684\u6570\u6709\u591a\u5c11\u4e2a \u4f8b\uff1a 62315 73418 88914 \u4e0d\u8ba1\u7b97\u5728\u5185 61152 \u8ba1\u7b97\u5728\u5185(6\u548c2\u4e0d\u8fde\u7eed) \u95ee\u9898\u8f6c\u6362\uff1a \u6c42 n \u4ee5\u5185\u4e0d\u542b4\u548c62\u7684\u6570\u7684\u4e2a\u6570 \u914d\u51d1\uff1a 4\u53ea\u548c\u81ea\u5df1\u672c\u8eab\u7684\u6570\u4f4d\u6709\u5173 62\u548c\u76f8\u90bb\u4e24\u4f4d\u6570\u6709\u5173 \u6240\u4ee5\u914d\u51d1\u65f6\u9700\u8981\u77e5\u9053\u9996\u4f4d\u6570\u5b57 \u8bbe dp [ i ] [ j ] \uff0c\u8868\u793a\u5f00\u5934\u4e3a i \uff0c\u4f4d\u6570\u4e3a j \u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u7684\u4e2a\u6570 \u914d\u51d1\u4e3e\u4f8b\uff1a n = 7563241 7 : +dp [ 0 ] [ 7 ] +dp [ 1 ] [ 7 ] +dp [ 2 ] [ 7 ] +dp [ 3 ] [ 7 ] +dp [ 5 ] [ 7 ] +dp [ 6 ] [ 7 ] 5 : +dp [ 0 ] [ 6 ] +dp [ 1 ] [ 6 ] +dp [ 2 ] [ 6 ] +dp [ 3 ] [ 6 ] 6 : +dp [ 0 ] [ 5 ] +dp [ 1 ] [ 5 ] +dp [ 2 ] [ 5 ] +dp [ 3 ] [ 5 ] +dp [ 5 ] [ 5 ] 3 : +dp [ 0 ] [ 4 ] +dp [ 1 ] [ 4 ] +dp [ 2 ] [ 4 ] 2 : +dp [ 0 ] [ 3 ] +dp [ 1 ] [ 3 ] 4 : +dp [ 0 ] [ 2 ] +dp [ 1 ] [ 2 ] +dp [ 2 ] [ 2 ] +dp [ 3 ] [ 2 ] break \u9884\u5904\u7406 1 2 if ( i != 4 &&! ( i == 6 && k == 2 )) dp [ i ][ j ] += dp [ k ][ j -1 ]; \u4f18\u5316 \u53ef\u5c06 i \u7b80\u5316\u4e3a 0 \u548c 1 \u4e24\u79cd\u72b6\u6001 \u4f8b\u9898\u4e8c \u00b6 \u6c42\u7b2c n \u5c0f\u7684\uff0c\u6570\u4f4d\u4e2d\u5305\u542b666\u7684\u6570 (\u6d4b\u8bd5\u7528\u4f8b\u4e0d\u8d85\u8fc71000\u7ec4\uff0cn < 50 000 000) \u914d\u51d1\uff1a \u9996\u5148\u6c42\u51fa\u4f4d\u6570\uff0c\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u6570\u5b57\u53bb\u5c1d\u8bd5 \u4f8b\u5982 \u5df2\u6c42\u51fa\u7b54\u6848\u4e3a8\u4f4d\u6570 \u6700\u9ad8\u4f4d\u4e3a1\u65f6\uff0ccnt\u5e94\u52a0\u4e0a\u6240\u67097\u4f4d\u7684\u5305\u542b666\u7684\u6570 \u6700\u9ad8\u4f4d\u4e3a2\u65f6\uff0ccnt\u5e94\u52a0\u4e0a\u6240\u67097\u4f4d\u7684\u5305\u542b666\u7684\u6570 ... ... \u6700\u9ad8\u4f4d\u4e3a6\u65f6\uff0ccnt\u5e94\u52a0\u4e0a\u6240\u67097\u4f4d\u7684\u5305\u542b666\u7684\u6570\uff0c \u518d\u52a0\u4e0a\u5f00\u5934\u6709\u8fde\u7eed\u4e24\u4e2a6\u7684\u4e0d\u5305\u542b666\u7684\u6570 \u56e0\u6b64\u9700\u8981\u77e5\u9053\uff1a \u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u6240\u6709\u4e0d\u7b26\u5408\u6761\u4ef6\u4f46\u5f00\u5934\u4e3a66\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u6240\u6709\u4e0d\u7b26\u5408\u6761\u4ef6\u4f46\u5f00\u5934\u4e3a6\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u6240\u6709\u4e0d\u7b26\u5408\u6761\u4ef6\u4f46\u5f00\u5934\u4e3a\u4e0d\u4e3a6\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u9884\u5904\u7406\uff1a \u8bbe dp [ i ] [ 3 ] \uff0c\u7b26\u5408\u6761\u4ef6\u7684 i \u4f4d\u6570 \u8bbe dp [ i ] [ j ] \uff0c\u5f00\u5934\u6709 j \u4e2a6\u7684\u4e0d\u7b26\u5408\u6761\u4ef6\u7684 i \u4f4d\u6570 1 2 3 4 dp [ i ][ 0 ] = 9 * ( dp [ i -1 ][ 0 ] + dp [ i -1 ][ 1 ] + dp [ i -1 ][ 2 ]); dp [ i ][ 1 ] = dp [ i -1 ][ 0 ]; dp [ i ][ 2 ] = dp [ i -1 ][ 1 ] \uff1b dp [ i ][ 3 ] = dp [ i -1 ][ 2 ] + 10 * dp [ i -1 ][ 3 ];","title":"\u6570\u4f4dDP"},{"location":"dp/DigitalDP/#_1","text":"\u7ed9\u51fa\u4e00\u4e2a\u533a\u95f4 [ n , m ]\uff08 0 < n \u2264 m < 1000 000 \uff09 \u6c42\u533a\u95f4\u4e2d\u4e0d\u542b\u6570\u5b574\uff0c\u4e5f\u4e0d\u542b62\u7684\u6570\u6709\u591a\u5c11\u4e2a \u4f8b\uff1a 62315 73418 88914 \u4e0d\u8ba1\u7b97\u5728\u5185 61152 \u8ba1\u7b97\u5728\u5185(6\u548c2\u4e0d\u8fde\u7eed) \u95ee\u9898\u8f6c\u6362\uff1a \u6c42 n \u4ee5\u5185\u4e0d\u542b4\u548c62\u7684\u6570\u7684\u4e2a\u6570 \u914d\u51d1\uff1a 4\u53ea\u548c\u81ea\u5df1\u672c\u8eab\u7684\u6570\u4f4d\u6709\u5173 62\u548c\u76f8\u90bb\u4e24\u4f4d\u6570\u6709\u5173 \u6240\u4ee5\u914d\u51d1\u65f6\u9700\u8981\u77e5\u9053\u9996\u4f4d\u6570\u5b57 \u8bbe dp [ i ] [ j ] \uff0c\u8868\u793a\u5f00\u5934\u4e3a i \uff0c\u4f4d\u6570\u4e3a j \u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u7684\u4e2a\u6570 \u914d\u51d1\u4e3e\u4f8b\uff1a n = 7563241 7 : +dp [ 0 ] [ 7 ] +dp [ 1 ] [ 7 ] +dp [ 2 ] [ 7 ] +dp [ 3 ] [ 7 ] +dp [ 5 ] [ 7 ] +dp [ 6 ] [ 7 ] 5 : +dp [ 0 ] [ 6 ] +dp [ 1 ] [ 6 ] +dp [ 2 ] [ 6 ] +dp [ 3 ] [ 6 ] 6 : +dp [ 0 ] [ 5 ] +dp [ 1 ] [ 5 ] +dp [ 2 ] [ 5 ] +dp [ 3 ] [ 5 ] +dp [ 5 ] [ 5 ] 3 : +dp [ 0 ] [ 4 ] +dp [ 1 ] [ 4 ] +dp [ 2 ] [ 4 ] 2 : +dp [ 0 ] [ 3 ] +dp [ 1 ] [ 3 ] 4 : +dp [ 0 ] [ 2 ] +dp [ 1 ] [ 2 ] +dp [ 2 ] [ 2 ] +dp [ 3 ] [ 2 ] break \u9884\u5904\u7406 1 2 if ( i != 4 &&! ( i == 6 && k == 2 )) dp [ i ][ j ] += dp [ k ][ j -1 ]; \u4f18\u5316 \u53ef\u5c06 i \u7b80\u5316\u4e3a 0 \u548c 1 \u4e24\u79cd\u72b6\u6001","title":"\u4f8b\u9898\u4e00"},{"location":"dp/DigitalDP/#_2","text":"\u6c42\u7b2c n \u5c0f\u7684\uff0c\u6570\u4f4d\u4e2d\u5305\u542b666\u7684\u6570 (\u6d4b\u8bd5\u7528\u4f8b\u4e0d\u8d85\u8fc71000\u7ec4\uff0cn < 50 000 000) \u914d\u51d1\uff1a \u9996\u5148\u6c42\u51fa\u4f4d\u6570\uff0c\u7136\u540e\u4e00\u4e2a\u4e00\u4e2a\u6570\u5b57\u53bb\u5c1d\u8bd5 \u4f8b\u5982 \u5df2\u6c42\u51fa\u7b54\u6848\u4e3a8\u4f4d\u6570 \u6700\u9ad8\u4f4d\u4e3a1\u65f6\uff0ccnt\u5e94\u52a0\u4e0a\u6240\u67097\u4f4d\u7684\u5305\u542b666\u7684\u6570 \u6700\u9ad8\u4f4d\u4e3a2\u65f6\uff0ccnt\u5e94\u52a0\u4e0a\u6240\u67097\u4f4d\u7684\u5305\u542b666\u7684\u6570 ... ... \u6700\u9ad8\u4f4d\u4e3a6\u65f6\uff0ccnt\u5e94\u52a0\u4e0a\u6240\u67097\u4f4d\u7684\u5305\u542b666\u7684\u6570\uff0c \u518d\u52a0\u4e0a\u5f00\u5934\u6709\u8fde\u7eed\u4e24\u4e2a6\u7684\u4e0d\u5305\u542b666\u7684\u6570 \u56e0\u6b64\u9700\u8981\u77e5\u9053\uff1a \u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u6240\u6709\u4e0d\u7b26\u5408\u6761\u4ef6\u4f46\u5f00\u5934\u4e3a66\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u6240\u6709\u4e0d\u7b26\u5408\u6761\u4ef6\u4f46\u5f00\u5934\u4e3a6\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u6240\u6709\u4e0d\u7b26\u5408\u6761\u4ef6\u4f46\u5f00\u5934\u4e3a\u4e0d\u4e3a6\u7684 i \u4f4d\u6570\u7684\u4e2a\u6570 \u9884\u5904\u7406\uff1a \u8bbe dp [ i ] [ 3 ] \uff0c\u7b26\u5408\u6761\u4ef6\u7684 i \u4f4d\u6570 \u8bbe dp [ i ] [ j ] \uff0c\u5f00\u5934\u6709 j \u4e2a6\u7684\u4e0d\u7b26\u5408\u6761\u4ef6\u7684 i \u4f4d\u6570 1 2 3 4 dp [ i ][ 0 ] = 9 * ( dp [ i -1 ][ 0 ] + dp [ i -1 ][ 1 ] + dp [ i -1 ][ 2 ]); dp [ i ][ 1 ] = dp [ i -1 ][ 0 ]; dp [ i ][ 2 ] = dp [ i -1 ][ 1 ] \uff1b dp [ i ][ 3 ] = dp [ i -1 ][ 2 ] + 10 * dp [ i -1 ][ 3 ];","title":"\u4f8b\u9898\u4e8c"},{"location":"dp/simpleDP/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a HBlade \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u5b66\u4e60\u76ee\u6807 \u00b6 PS:\u4e00\u8282\u8bfe\u60f3\u641e\u6e05\u695aDP\u662f\u4e0d\u53ef\u80fd\u7684,\u56de\u53bb\u5982\u679c\u4e0d\u591a\u770b\u770b\u4ec0\u4e48\u662fDP\uff0c\u4ec0\u4e48\u53eb\u72b6\u6001\u3001\u51b3\u7b56\u548c\u8f6c\u79fb\uff0c\u90a3\u5c31\u4f1a\u4e00\u76f4\u90fd\u641e\u4e0d\u61c2\u4ec0\u4e48\u662fDP \u52a8\u6001\u89c4\u5212\u7684\u6982\u5ff5(\u72b6\u6001\u3001\u51b3\u7b56\u548c\u8f6c\u79fb) \u52a8\u6001\u89c4\u5212\u7684\u539f\u7406 \u8bb0\u5fc6\u5316\u641c\u7d22 \u52a8\u6001\u89c4\u5212\u89e3\u9898\u7684\u4e00\u822c\u601d\u8def \u52a8\u6001\u89c4\u5212\u6837\u4f8b\u5206\u6790 \u52a8\u6001\u89c4\u5212\u57fa\u672c\u601d\u60f3 \u00b6 \u62bd\u8c61\u6765\u770b\uff0c\u52a8\u6001\u89c4\u5212\u5c31\u662f\u5c06\u4e00\u4e2a\u5e9e\u5927\u7684\u95ee\u9898\u5206\u89e3\u6210\u5c0f\u95ee\u9898\uff0c\u901a\u8fc7\u5c0f\u95ee\u9898\u4e4b\u95f4\u7684\u5173\u8054\uff0c\u9010\u6b65\u89e3\u51b3\u6bcf\u4e00\u4e2a\u5c0f\u95ee\u9898\uff0c\u4ece\u800c\u89e3\u51b3\u5927\u95ee\u9898\u3002 \u7ec4\u5408\u6728\u5757 \u4f60\u6709\u4e24\u79cd\u6728\u5757\uff0c\u4e00\u79cd\u957f\u5ea6\u4e3a1\uff0c\u4e00\u79cd\u957f\u5ea6\u4e3a2\uff0c\u73b0\u5728\u8ba9\u4f60\u7ec4\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u957f\u6761\u6728\u5757\uff0c\u6709\u591a\u5c11\u79cd\u6392\u5217\u7ec4\u5408\u65b9\u6848\uff1f n<=10^5 n<=10^5 \u62c6\u5206\u65b9\u6848\uff1a\u7528F[i]\u8868\u793a\u957f\u5ea6\u4e3ai\u7684\u957f\u6761\u6709\u591a\u5c11\u79cd\u60c5\u51b5 \u5173\u8054\uff1aF(n)=F(n-1)+F(n-2) \u4ece\u800c\u5f80\u540e\u63a8\u5bfc\u5230F(n)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002 \u4f8b\u9898\u5f15\u5165 \u00b6 Question zls\u60f3\u6210\u4e3a\u4e16\u754c\u65e0\u654c\u7684dp\u5927\u5e08\uff0c\u4ed6\u7684\u8bad\u7ec3\u4e00\u5171\u6709n\u5929\uff0c\u7b2ci\u5929\u6709a[i]\u79cd\u8bad\u7ec3\u8ba1\u5212,\u9009\u62e9\u7b2cj\u79cd\u8bad\u7ec3\u80fd\u63d0\u9ad8f[i][j]\u5206\u3002zls\u6bcf\u5929\u53ea\u80fd\u9009\u4e00\u79cd\u8bad\u7ec3\uff0c\u8bf7\u95een\u5929\u4e4b\u540ezls\u7684\u5206\u503c\u6700\u9ad8\u53ef\u4ee5\u5230\u8fbe\u591a\u5c11? 1\u2264n,a[i]\u22641000 \u200b \u505a\u6cd5\uff1a\u8d2a\u5fc3\u5373\u53ef 1 2 3 4 5 6 int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ){ sum += f [ i ][ max_element ( f [ i ], f [ i ] + a [ i ]) - f [ i ]]; //max_element\u4e3aSTL\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u627e\u5230\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\uff0c\u8fd4\u56de\u6570\u7ec4\u6700\u5927\u503c\u6240\u5728\u7684\u5143\u7d20\u7684\u6307\u9488\uff08\u5730\u5740\uff09\uff0c\u5177\u4f53\u7528\u6cd5\u5927\u5bb6\u81ea\u884c\u4e0a\u7f51\u67e5\u8be2 } printf ( \"%d \\n \" , sum ); //\u65f6\u95f4\u590d\u6742\u5ea6:O(n*a[i]) 1e6 Question zls\u60f3\u6210\u4e3a\u4e16\u754c\u65e0\u654c\u7684dp\u5927\u5e08\uff0c\u4ed6\u7684\u8bad\u7ec3\u4e00\u5171\u6709n\u5929\uff0c\u7b2ci\u5929\u6709i\u79cd\u8bad\u7ec3\u65b9\u5f0f\uff0c\u5982\u679c\u4eca\u5929zls\u7528\u4e86\u7b2cj\u79cd\u8bad\u7ec3\u65b9\u5f0f\uff0c\u660e\u5929\u4ed6\u53ea\u80fd\u7528\u7b2cj\u79cd\u6216\u8005\u7b2cj+1\u79cd\u8bad\u7ec3\u65b9\u5f0f\u4e86\uff0c\u7b2ci\u5929\u7684\u7b2cj\u79cd\u8bad\u7ec3\u65b9\u5f0f\u589e\u52a0\u7684Rating\u662ff[i][j]\uff0c\u8fd9\u6837\u7684\u8bddzls\u6700\u7ec8\u80fd\u8fbe\u5230\u6700\u5927\u7684Rating\u503c\u4f1a\u662f\u591a\u5c11\u5462\uff1f 1\u2264n,m,a[i]\u22641000 \u6570\u5b57\u4e09\u89d2\u5f62(dp\u59cb\u7956)\uff1a\u4e0d\u80fd\u901a\u8fc7\u8d2a\u5fc3\u6765\u9009\u62e9\u5f53\u524d\u5c42\u7684\u6700\u5927\u503c\uff0c\u56e0\u4e3a\u4e0b\u4e00\u5c42\u7684\u9009\u62e9\u4f1a\u88ab\u4e0a\u4e00\u5c42\u7684\u9009\u62e9\u6240\u5f71\u54cd\uff08\u53ef\u80fd\u4e0b\u4e00\u5c42\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u503c\u5374\u56e0\u4e3a\u4e0a\u4e00\u5c42\u6ca1\u9009\u597d\u5c31\u9009\u4e0d\u5230\u5b83\u4e86\uff09\u3002\u56e0\u6b64\u4f7f\u7528DP\u6765\u5904\u7406\u3002 \u4ec0\u4e48\u662fDP\uff1f\uff1f\uff1f \u00b6 \u5148\u77e5\u9053\u4e00\u4e0b\u4ec0\u4e48\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\uff1a Question \u7528\u9012\u5f52\u5b9e\u73b0\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u5bf91e9+7\u53d6\u6a21\u7684\u524d100000\u9879\u3002 \uff08\u5355\u7eaf\u7684\u9012\u5f52100\u9879\u5de6\u53f3\u5c31\u5361\u6b7b\u4e86\uff0c\u4e0d\u4fe1\u4f60\u53ef\u4ee5\u8bd5\u8bd5\uff09\uff0c\u6240\u4ee5\u8981\u600e\u4e48\u505a\u5462\uff1f\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1a1,1,2,3,5,8\u2026\u2026f(n)=f(n-1)+f(n-2)\uff0c(n\u22653) \u5355\u7eaf\u7684\u770b\u9012\u5f52\u6c42fib,\u5047\u8bbe\u6211\u4eec\u8981\u9012\u5f52\u6c42fib(10)\uff0c\u90a3\u4e48fib(10)=fib(9)+fib(8)\uff0c\u6c42fib(9)\u53c8\u9700\u8981fib(8)+fib(7)\uff0c\u6c42fib(8)\u53c8\u9700\u8981fib(7)+fib(6)\u2026\u2026 \u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5b9e\u4e0a\u9762\u7684\u641c\u7d22\u662f\u6709\u91cd\u590d\u7684\u90e8\u5206\u7684\uff0c\u6bd4\u5982\u5728fib(10)=fib(9)+fib(8)\u8fd9\u4e00\u6b65\uff0c\u5bf9\u4e8efib(9)\uff0c\u6c42\u51fa\u5b83\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u77e5\u9053\u4e86fib(8)\u3001fib(7)\u662f\u591a\u5c11\uff0c\u4f46\u662f\u518d\u6c42fib(8)\u7684\u65f6\u5019\u53c8\u662f\u5f53\u4f5c\u6211\u4eec\u4e0d\u77e5\u9053fib(8)\u662f\u591a\u5c11\u6765\u5f80\u4e0b\u9012\u5f52\u53bb\u627efib(7)\u548cfib(6)\uff0c\u5176\u5b9e\u8fd9\u4e9b\u90e8\u5206\u5728\u641c\u7d22fib(9)\u7684\u65f6\u5019\u5df2\u7ecf\u641c\u7d22\u8fc7\u4e86\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u5f88\u591a\u91cd\u590d\u641c\u7d22\u7684\u90e8\u5206\u3002\u5f53\u6570\u91cf\u7ea7\u5f88\u5927\u7684\u65f6\u5019\uff0c\u91cd\u590d\u641c\u7d22\u7684\u90e8\u5206\u4f1a\u88ab\u653e\u5f97\u5f88\u5927\uff0c\u4ece\u800c\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u9ad8\u3002 \u90a3\u548b\u529e\u5462\uff1f\uff1f\uff1f \u5b58\u4e0b\u6765\u521a\u521a\u641c\u8fc7\u7684\u6570\u4e0d\u5c31\u597d\u4e86\u561b\uff01\u4e0b\u6b21\u518d\u641c\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u8fd9\u4e2a\u5730\u65b9\u662f\u5b58\u5728\u4e00\u4e2a\u503c\u7684\uff0c\u90a3\u5c31\u8bf4\u660e\u8fd9\u4e2a\u5730\u65b9\u5df2\u7ecf\u88ab\u641c\u7d22\u8fc7\u4e86\uff0c\u8fd4\u56de\u90a3\u4e2a\u503c\u5c31\u597d\u4e86\u3002 1 2 3 4 5 6 7 8 9 const int maxn = 1e6 + 6 ; const int mod = 1e9 + 7 ; int fib [ maxn ]; int f ( int a ){ if ( a == 1 || a == 2 ) return 1 ; if ( fib [ a ] != 0 ) return fib [ a ]; return fib [ a ] = ( f ( a -1 ) + f ( a -2 )) % mod ; } \u8fd9\u5c31\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u628a\u641c\u8fc7\u7684\u4e1c\u897f\u90fd\u8bb0\u4e0b\u6765\uff0c\u4ee5\u540e\u518d\u641c\u5230\u4e00\u6837\u7684\u90e8\u5206\u5c31\u4e0d\u7528\u8ba1\u7b97\u76f4\u63a5\u8f93\u51fa\u4e86\u3002 \u90a3\u4ec0\u4e48\u662fDP\uff1fDP\u5c31\u662f\u901a\u8fc7\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u5148\u8bb0\u5f55\u4e0b\u7b2c\u4e00\u6b65\u662f\u4ec0\u4e48\u72b6\u6001\uff0c\u4e4b\u540e\u7684\u6bcf\u4e00\u6b65\u6839\u636e\u4e0a\u4e00\u6b65\u7684\u72b6\u6001\u6765\u51b3\u5b9a\u5e76\u5b58\u50a8\uff0c\u76f4\u5230\u6700\u540e\u4e00\u6b65\u3002\u6700\u540e\u5229\u7528\u6211\u4eec\u901a\u8fc7DP\u5f97\u5230\u7684\u6570\u7ec4\u5904\u7406\u8f93\u51fa\u60f3\u8981\u7684\u7b54\u6848\u3002 \u5bf9\u4e8e\u6570\u5b57\u4e09\u89d2\u5f62\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u72b6\u6001\u7684\u548c\u7684\u6700\u5927\u503c\u5373\u53ef\uff0c\u6211\u4eec\u9009\u62e9\u7684\u72b6\u6001\u662f\u5f53\u5230\u4e86\u7b2ci\u884c\u7b2cj\u5217\u7684\u65f6\u5019\uff0c\u6b64\u65f6\u80fd\u5f97\u5230\u7684\u548c\u6700\u5927\u503c\u662f\u591a\u5c11\u3002 1 2 3 4 5 6 7 8 int dp [ 1010 ][ 1010 ]; int a [ 1010 ][ 1010 ]; memset ( dp , 0 , sizeof ( dp )); for ( int i = n ; i >= 1 ; i -- ){ for ( int j = 1 ; j <= i ; j ++ ){ dp [ i ][ j ] = max ( dp [ i + 1 ][ j ], dp [ i + 1 ][ j + 1 ]) + a [ i ][ j ]; } } printf ( \"%d\" , dp [ 1 ][ 1 ]); Question zls\u53c8\u60f3\u6210\u4e3a\u4e16\u754c\u65e0\u654c\u7684dp\u5927\u5e08\uff0c\u4ed6\u7684\u8bad\u7ec3\u4e00\u5171\u6709m\u5929\uff0c\u4e00\u5171\u6709n\u79cd\u8bad\u7ec3\u53ef\u4f9b\u9009\u62e9\uff0c\u7b2ci\u79cd\u8bad\u7ec3\u9700\u8981\u82b1\u8d39a[i]\u5929\uff0c\u7ed3\u675f\u4ee5\u540e\u4f1a\u589e\u957fb[i]\u70b9Rating,\u4e00\u79cd\u8bad\u7ec3\u53ea\u80fd\u8fdb\u884c\u4e00\u6b21\uff0c\u8bf7\u95een\u5929\u4e4b\u540ezls\u7684Rating\u503c\u6700\u9ad8\u53ef\u4ee5\u5230\u8fbe\u591a\u5c11? 1\u2264n,m,a[i]\u22641000 \u96be\u70b9\uff1a\u8d2a\u5fc3\u53bb\u8d2ab[i]\u6700\u5927\u503c\u65e0\u6548\uff0c\u56e0\u4e3a\u6709a[i]\u7684\u9650\u5236;a[i]\u7684\u9650\u5236\u4f7f\u5f97\u5b83\u8ddf\u8d2a\u5fc3\u7684\u95ee\u9898\u5b8c\u5168\u4e0d\u4e00\u6837\uff0c\u56e0\u6b64\u9700\u8981\u7528DP\u6765\u5b9e\u73b0\u7f16\u7a0b\u3002\uff08\u80cc\u5305DP\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int dp [ 1010 ][ 1010 ]; //\u7b2c\u4e00\u7ef4\u4e0b\u6807\uff1a\u524di\u4e2a\u8bad\u7ec3\u5f97\u5230\u7684\u72b6\u6001\uff1b //\u7b2c\u4e8c\u7ef4\u4e0b\u6807:\u5f53\u524d\u72b6\u6001\u5df2\u82b1\u8d39\u591a\u5c11\u65f6\u95f4;\u6570\u7ec4\u5b58\u653e\u5f53\u524d\u72b6\u6001\u7684\u6700\u5927\u4ef7\u503c\u662f\u591a\u5c11\u3002 memset ( dp , 0 , sizeof ( dp )); //\u521d\u59cb\u5316\u4e3a0 for ( int i = 1 ; i <= n ; i ++ ){ //\u524di\u4e2a\u7269\u54c1\u7684\u72b6\u6001 for ( int j = 0 ; j <= m ; j ++ ){ dp [ i ][ j ] = dp [ i -1 ][ j ]; } for ( int j = a [ i ]; j <= m ; -- j ){ //\u679a\u4e3e\u653e\u5165\u5f53\u524d\u7269\u54c1\u7684\u80cc\u5305\u5bb9\u91cf\u4f1a\u662f\u591a\u5c11 dp [ i ][ j ] = max ( dp [ i ][ j ], dp [ i -1 ][ j - a [ i ]] + b [ i ]); //\u5f53\u524d\u72b6\u6001\u662f\u4ece\u4e0a\u4e00\u4e2ai-1\u7684\u72b6\u6001\u7684\u80cc\u5305\u5bb9\u91cfj-a[i]\u9009\u62e9\u653e\u4e0d\u653e\u5165\u8fd9\u4e2a\u4e1c\u897f\u7684\u5bb9\u91cf\u8f6c\u79fb\u8fc7\u6765 } } printf ( \"%d\" , dp [ n ][ m ]); //\u65f6\u95f4\u590d\u6742\u5ea6O(n*m) 1e6 \u80cc\u5305\u95ee\u9898\u5176\u5b9e\u53ef\u4ee5\u7528\u4e00\u7ef4\u6570\u7ec4\u53bb\u89e3\u51b3\uff0c\u8fd9\u6837\u5c31\u4f1a\u66f4\u52a0\u8282\u7701\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u6ca1\u6709\u53d8\u5316\u3002 1 2 3 4 5 6 7 8 9 int dp [ 1010 ]; //\u4e0b\u6807\u662f\u80cc\u5305\u7684\u5bb9\u91cf memset ( dp , 0 , sizeof ( dp )); for ( int i = 0 ; i < n ; i ++ ){ for ( int j = m ; j >= a [ i ]; -- j ){ dp [ j ] = max ( dp [ j ], dp [ j - a [ i ]] + b [ i ]); //\u80cc\u5305\u5bb9\u91cf\u4e3aj\u7684\u72b6\u6001\u4ece\u80cc\u5305\u5bb9\u91cf\u4e3aj-a[i]\u7684\u72b6\u6001\u8f6c\u79fb\uff08\u9009\u62e9\u653e\u5165\u8fd9\u4e2a\u4e1c\u897f\uff09 } } printf ( \"%d\" , dp [ m ]); \u5927\u5bb6\u53ef\u4ee5\u770b\u5230\uff0c\u8f6c\u79fb\u8fc7\u7a0b\u4e2d\u80cc\u5305\u5bb9\u91cf\u8f6c\u79fb\u662f\u4ece\u5927\u5230\u5c0f\u8f6c\u79fb\u7684\uff0c\u4e3a\u4ec0\u4e48\u8981\u4ece\u5927\u5230\u5c0f\u8f6c\u79fb\u800c\u4e0d\u662f\u4ece\u5c0f\u5230\u5927\u8f6c\u79fb\u5462\uff1f\uff08\u4ec0\u4e48\u662f\u72b6\u6001\u8f6c\u79fb\uff08\u66f4\u65b0\u72b6\u6001\uff09?\uff09 \u5f53\u72b6\u6001\u672a\u8fdb\u884c\u8fc7\u66f4\u65b0\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u672a\u66f4\u65b0\u7684\u72b6\u6001\u662f\u4e0d\u5b58\u5728\u5f53\u524d\u7684\u72b6\u6001\u8f6c\u79fb\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u672a\u66f4\u65b0\u7684\u72b6\u6001\u662f\u8fd8\u6ca1\u6709\u505a\u5f53\u524d\u7684\u8bad\u7ec3\u7684\u3002 \u4e3e\u4f8b\uff1a\u5982\u679c\u4ece\u5c0f\u5230\u5927\u66f4\u65b0dp\u503c\uff0c\u5047\u8bbedp[j]\u4ecedp[j-a[i]]\u5904\u7ecf\u8fc7\u4e86\u66f4\u65b0\uff0c\u90a3\u4e48\u4e4b\u540e\u7684dp[j+a[i]]\u4e5f\u5c31\u4f1a\u4ecedp[j]\u5904 \u66f4\u65b0\u3002\u5047\u8bbedp[j]\u7684\u51b3\u7b56\u662f\u53d6\u7b2ci\u4ef6\u7269\u54c1\uff0c\u90a3\u4e48dp[j]\u7684\u72b6\u6001\u662f\u505a\u4e86\u7b2ci\u6b21\u8bad\u7ec3\u4e86\uff1b\u4e4b\u540e\u6211\u4eec\u7684dp[j+a[i]]\u4f1a\u4ecedp[j]\u8fd9\u4e2a\u72b6\u6001\u8f6c\u79fb\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u505a\u4e86\u7b2ci\u6b21\u8bad\u7ec3\uff0c\u6309\u7406\u6765\u8bf4\u662f\u4e0d\u80fd\u518d\u505a\u8fd9\u4e2a\u8bad\u7ec3\u4e86\uff0c\u4f46\u662f\u5982\u679c\u7ee7\u7eed\u505a\u7b2ci\u4e2a\u8bad\u7ec3\uff0c\u5c31\u4f1a\u5bfc\u81f4\u51b3\u7b56\u4e0e\u9898\u610f\u4e0d\u7b26\u3002 \u90a3\u4e48\uff0c\u5982\u679c\u4ece\u5927\u5230\u5c0f\u66f4\u65b0dp\u503c\uff0c\u5047\u8bbedp[j]\u4ecedp[j-a[i]]\u5904\u66f4\u65b0dp\u503c\uff0c\u7531\u4e8edp[j-a[i]]\u5904\u8fd8\u672a\u8fdb\u884c\u8fc7\u66f4\u65b0\uff0c\u6240\u4ee5\u8fd9\u4e2a\u72b6\u6001\u662f\u4e0d\u4f1a\u53bb\u505a\u7b2ci\u6b21\u8bad\u7ec3\u7684\uff0c\u6240\u4ee5\u8f6c\u79fb\u6709\u6548\u3002\u800cdp[j-a[i]]\u662f\u4ecedp[j-a[i]-a[i]]\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765\uff0c\u540c\u7406\u56e0\u4e3adp[j-a[i]-a[i]]\u4e5f\u662f\u672a\u7ecf\u8fc7\u72b6\u6001\u8f6c\u79fb\u7684\uff0c\u6240\u4ee5\u90a3\u4e2a\u72b6\u6001\u4e5f\u4e0d\u4f1a\u505a\u7b2ci\u4e2a\u8bad\u7ec3\uff0c\u56e0\u6b64\u8f6c\u79fb\u540c\u6837\u6709\u6548\uff0c\u800c\u8f6c\u79fb\u540e\u7684dp[j-a[i]]\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u4e4b\u524d\u8f6c\u79fb\u7684dp[j]\uff0c\u56e0\u4e3adp[j]\u662f\u4ece\u672a\u8fdb\u884c\u66f4\u65b0\u7684dp[j-a[i]]\u8f6c\u79fb\u8fc7\u6765\u3002 Question zls\u66f4\u60f3\u6210\u4e3a\u4e16\u754c\u65e0\u654c\u7684dp\u5927\u5e08\uff0c\u4ed6\u7684\u8bad\u7ec3\u4e00\u5171\u6709n\u5929\uff0c\u4e00\u5171\u6709m\u79cd\u8bad\u7ec3\u53ef\u4f9b\u9009\u62e9\uff0c\u7b2ci\u79cd\u8bad\u7ec3\u9700\u8981\u82b1\u8d39a[i]\u5929\uff0c\u7ed3\u675f\u4ee5\u540e\u4f1a\u589e\u957f\u5230b[i]\u70b9Rating,\u4e00\u79cd\u8bad\u7ec3\u53ef\u4ee5\u8fdb\u884c\u65e0\u6570\u6b21\uff0c\u8bf7\u95een\u5929\u4e4b\u540ezls\u7684Rating\u503c\u6700\u9ad8\u53ef\u4ee5\u5230\u8fbe\u591a\u5c11? 1\u2264n,m,a[i]\u22641000 \u96be\u70b9\uff1a\u4e0e\u521a\u521a\u7684\u9898\u5f88\u7c7b\u4f3c\uff0c\u4f46\u662f\u6bcf\u79cd\u8bad\u7ec3\u53ef\u4ee5\u65e0\u6570\u6b21\u4e86\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u53d8\u4e00\u4e0b\u521a\u521a\u7684\u4ee3\u7801\uff0c\u7528\u8bad\u7ec3\u6570\u91cf\u4e3a\u65e0\u6570\u6b21\u7684\u65b9\u6cd5\u6765\u8f6c\u79fb\u5c31\u597d\u3002\uff08\u5b8c\u5168\u80cc\u5305DP\uff09 1 2 3 4 5 6 7 8 int dp [ 1010 ]; //\u4e0b\u6807\u662f\u80cc\u5305\u7684\u5bb9\u91cf memset ( dp , 0 , sizeof ( dp )); for ( int i = 0 ; i < n ; i ++ ){ for ( int j = a [ i ]; j <= m ; ++ j ){ dp [ j ] = max ( dp [ j ], dp [ j - a [ i ]] + b [ i ]); //\u80cc\u5305\u5bb9\u91cf\u4e3aj\u7684\u72b6\u6001\u4ece\u80cc\u5305\u5bb9\u91cf\u4e3aj-a[i]\u7684\u72b6\u6001\u8f6c\u79fb\uff08\u9009\u62e9\u653e\u5165\u8fd9\u4e2a\u4e1c\u897f\uff09 } } printf ( \"%d\" , dp [ m ]); //\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m) 1e6 \u4e5f\u5c31\u662f\u521a\u521a\u7684\u80cc\u5305dp\u4e2d\u80cc\u5305\u5bb9\u91cf\u4ece\u5c0f\u5230\u5927\u8f6c\u79fb\uff0c\u56e0\u4e3a\u4ece\u5c0f\u5230\u5927\u8f6c\u79fb\u662f\u4e00\u4e2a\u7269\u54c1\u53ef\u4ee5\u53d6\u591a\u6b21\u7684\u3002 \u601d\u8003\uff1a\u5982\u679c\u8bad\u7ec3\u65f6\u95f4\uff08weight\uff09\u5f88\u5927(1e9)\uff0c\u4f46\u662f\u8bad\u7ec3\u6210\u679c\uff08value\uff09\u5f88\u5c0f\uff081e3\uff09\uff0c\u8fd9\u6837\u7684\u8bdd\u5e94\u8be5\u600e\u4e48\u8fdb\u884cdp\uff1f \u5982\u679c\u6709\u5174\u8da3\uff0c\u8fd8\u53ef\u4ee5\u60f3\u60f3\uff0c\u5982\u679c\u6bcf\u79cd\u8bad\u7ec3\u662f\u6709\u6b21\u6570\u7684\u4f46\u4e0d\u662f\u65e0\u9650\u6b21\uff0c\u90a3\u53c8\u8981\u600e\u4e48\u8f6c\u79fb\uff1f\uff08\u591a\u91cd\u80cc\u5305dp\uff09 \u9664\u4e86\u4e0a\u9762\u7684\u57fa\u672c\u7684DP\uff0c\u8fd8\u6709\u72b6\u538bDP(\u901a\u8fc7\u6570\u5b57\u6765\u5b58\u50a8\u72b6\u6001)\uff0c\u63d2\u5934DP\uff0c\u6811\u5f62DP\uff08\u9700\u8981\u77e5\u9053\u4ec0\u4e48\u662f\u6811\uff09\u7b49\u7b49\u3002 \u8fd8\u6709\u4e24\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684DP\u662f\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff08LCS\uff09\uff0c\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff08LIS\uff09\uff0c\u7531\u4e8e\u8bb2\u662f\u5f88\u96be\u8bb2\u61c2\u7684\uff0c\u5982\u679c\u4f60\u4eec\u80fd\u771f\u6b63\u4e86\u89e3\u4e86\u4ec0\u4e48\u662fDP\uff0c\u4e0a\u9762\u7684\u4e24\u4e2a\u9898\u5c31\u4f1a\u8fce\u5203\u800c\u89e3\uff0c\u4e5f\u80fd\u5728\u8111\u4e2d\u7559\u4e0b\u6df1\u523b\u7684\u8bb0\u5fc6\u3002 \u5173\u4e8e\u65e0\u540e\u6548\u6027\uff1a \u00b6 \u56e0\u4e3a\u4e4b\u524d\u5f80\u540e\u9762\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u524d\u9762\u8bb0\u5f55\u4e0b\u7684\u90fd\u662f\u524d\u9762\u6bcf\u79cd\u72b6\u6001\u7684\u6700\u4f18\u503c\uff0c\u6709\u53ef\u80fd\u4f1a\u9047\u5230\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff1a\u4e4b\u524d\u7684\u67d0\u4e2a\u72b6\u6001\u7684\u6700\u4f18\u503c\u53ef\u80fd\u56e0\u4e3a\u540e\u9762\u67d0\u4e2a\u503c\u800c\u5bfc\u81f4\u4e4b\u524d\u53d6\u7684\u6700\u4f18\u503c\u5e76\u4e0d\u662f\u9002\u5408\u5f53\u524d\u503c\u7684\u6700\u4f18\u503c\uff08\u4f8b\u5982\uff1aA\u3001B\u4e24\u4e2a\u516c\u53f8\u90fd\u9700\u8981\u62db8\u4e2a\u4eba\uff0c\u5019\u9009\u8005\u90fd\u6709a,b\u80fd\u529b\u503c\uff0c\u5982\u4f55\u53d6\u4eba\u624d\u80fd\u4f7f\u5f97A\u516c\u53f8\u62db\u5230\u5458\u5de5\u7684a\u80fd\u529b\u503c\u603b\u548c\u548cB\u516c\u53f8\u5458\u5de5\u7684b\u80fd\u529b\u503c\u603b\u548c\u52a0\u8d77\u6765\u6700\u5927\u3002\u8fd9\u4e2a\u5c31\u4e0d\u80fd\u7528\u52a8\u6001\u89c4\u5212\u53bb\u505a\uff0c\u56e0\u4e3a\u4f1a\u9047\u5230\u4e00\u79cd\u60c5\u51b5\u662f\uff0c\u5047\u8bbe\u524d\u9762A\u516c\u53f8\u53d6\u5230\u4e00\u4e2aa,b\u80fd\u529b\u503c\u540c\u6837\u4f18\u79c0\u7684\u4eba\uff0c\u4f46\u662f\u540e\u9762\u5982\u679c\u6709\u4e00\u4e2aa\u80fd\u529b\u503c\u5f88\u4f18\u79c0\u4f46\u662f\u6ca1\u6709\u524d\u9762\u90a3\u4e2a\u4eba\u4f18\u79c0\uff0c\u540c\u65f6\u8fd9\u4e2a\u4ebab\u80fd\u529b\u503c\u5f88\u5dee\u52b2\uff0c\u6240\u4ee5\u9700\u8981\u8ba9\u524d\u9762\u7684\u4eba\u53bbB\u516c\u53f8\uff0c\u8ba9\u8fd9\u4e2a\u4eba\u53bbA\u516c\u53f8\u6765\u4fdd\u6301\u603b\u548c\u6700\u5927\u8fd9\u4e2a\u6761\u4ef6\uff0c\u8fd9\u5c31\u8fdd\u53cd\u4e86\u65e0\u540e\u6548\u6027\u8fd9\u4e2a\u8981\u6c42\u3002 \u603b\u7ed3 \u00b6 \u72b6\u6001\uff1a\u8fd9\u4e2a\u53d8\u91cf\u7684\u6570\u7ec4\u4e0b\u6807\u4ee3\u8868\u4e86\u4ec0\u4e48\u60c5\u51b5(i\u4e0d\u4e00\u5b9a\u662f\u524di\u4e2a\u4e1c\u897f\uff0c\u4e0b\u6807\u4ee3\u8868\u7684\u60c5\u51b5\u8981\u6839\u636e\u9898\u610f\u548c\u6570\u636e\u8303\u56f4\u6765\u51b3\u5b9a) \u51b3\u7b56\uff1a\u5e94\u8be5\u600e\u4e48\u4ece\u5f53\u524d\u72b6\u6001\u53d8\u5316\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001 \u8f6c\u79fb\uff1a\u5982\u4f55\u5728\u4ee3\u7801\u4e0a\u8fdb\u884c\u72b6\u6001\u53d8\u5316 \u65e0\u540e\u6548\u6027\uff1a\u672a\u6765\u4e0e\u8fc7\u53bb\u65e0\u5173\uff0c\u4ee5\u540e\u505a\u7684\u51b3\u5b9a\u4e0d\u4f1a\u5f71\u54cd\u4e4b\u524d\u505a\u7684\u51b3\u5b9a\uff08\u53ea\u6709\u7b26\u5408\u8fd9\u4e00\u70b9\u624d\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u505a\uff09","title":"DP\u5165\u95e8"},{"location":"dp/simpleDP/#_1","text":"PS:\u4e00\u8282\u8bfe\u60f3\u641e\u6e05\u695aDP\u662f\u4e0d\u53ef\u80fd\u7684,\u56de\u53bb\u5982\u679c\u4e0d\u591a\u770b\u770b\u4ec0\u4e48\u662fDP\uff0c\u4ec0\u4e48\u53eb\u72b6\u6001\u3001\u51b3\u7b56\u548c\u8f6c\u79fb\uff0c\u90a3\u5c31\u4f1a\u4e00\u76f4\u90fd\u641e\u4e0d\u61c2\u4ec0\u4e48\u662fDP \u52a8\u6001\u89c4\u5212\u7684\u6982\u5ff5(\u72b6\u6001\u3001\u51b3\u7b56\u548c\u8f6c\u79fb) \u52a8\u6001\u89c4\u5212\u7684\u539f\u7406 \u8bb0\u5fc6\u5316\u641c\u7d22 \u52a8\u6001\u89c4\u5212\u89e3\u9898\u7684\u4e00\u822c\u601d\u8def \u52a8\u6001\u89c4\u5212\u6837\u4f8b\u5206\u6790","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"dp/simpleDP/#_2","text":"\u62bd\u8c61\u6765\u770b\uff0c\u52a8\u6001\u89c4\u5212\u5c31\u662f\u5c06\u4e00\u4e2a\u5e9e\u5927\u7684\u95ee\u9898\u5206\u89e3\u6210\u5c0f\u95ee\u9898\uff0c\u901a\u8fc7\u5c0f\u95ee\u9898\u4e4b\u95f4\u7684\u5173\u8054\uff0c\u9010\u6b65\u89e3\u51b3\u6bcf\u4e00\u4e2a\u5c0f\u95ee\u9898\uff0c\u4ece\u800c\u89e3\u51b3\u5927\u95ee\u9898\u3002 \u7ec4\u5408\u6728\u5757 \u4f60\u6709\u4e24\u79cd\u6728\u5757\uff0c\u4e00\u79cd\u957f\u5ea6\u4e3a1\uff0c\u4e00\u79cd\u957f\u5ea6\u4e3a2\uff0c\u73b0\u5728\u8ba9\u4f60\u7ec4\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u957f\u6761\u6728\u5757\uff0c\u6709\u591a\u5c11\u79cd\u6392\u5217\u7ec4\u5408\u65b9\u6848\uff1f n<=10^5 n<=10^5 \u62c6\u5206\u65b9\u6848\uff1a\u7528F[i]\u8868\u793a\u957f\u5ea6\u4e3ai\u7684\u957f\u6761\u6709\u591a\u5c11\u79cd\u60c5\u51b5 \u5173\u8054\uff1aF(n)=F(n-1)+F(n-2) \u4ece\u800c\u5f80\u540e\u63a8\u5bfc\u5230F(n)\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002","title":"\u52a8\u6001\u89c4\u5212\u57fa\u672c\u601d\u60f3"},{"location":"dp/simpleDP/#_3","text":"Question zls\u60f3\u6210\u4e3a\u4e16\u754c\u65e0\u654c\u7684dp\u5927\u5e08\uff0c\u4ed6\u7684\u8bad\u7ec3\u4e00\u5171\u6709n\u5929\uff0c\u7b2ci\u5929\u6709a[i]\u79cd\u8bad\u7ec3\u8ba1\u5212,\u9009\u62e9\u7b2cj\u79cd\u8bad\u7ec3\u80fd\u63d0\u9ad8f[i][j]\u5206\u3002zls\u6bcf\u5929\u53ea\u80fd\u9009\u4e00\u79cd\u8bad\u7ec3\uff0c\u8bf7\u95een\u5929\u4e4b\u540ezls\u7684\u5206\u503c\u6700\u9ad8\u53ef\u4ee5\u5230\u8fbe\u591a\u5c11? 1\u2264n,a[i]\u22641000 \u200b \u505a\u6cd5\uff1a\u8d2a\u5fc3\u5373\u53ef 1 2 3 4 5 6 int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ){ sum += f [ i ][ max_element ( f [ i ], f [ i ] + a [ i ]) - f [ i ]]; //max_element\u4e3aSTL\u7684\u51fd\u6570\uff0c\u7528\u4e8e\u627e\u5230\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\uff0c\u8fd4\u56de\u6570\u7ec4\u6700\u5927\u503c\u6240\u5728\u7684\u5143\u7d20\u7684\u6307\u9488\uff08\u5730\u5740\uff09\uff0c\u5177\u4f53\u7528\u6cd5\u5927\u5bb6\u81ea\u884c\u4e0a\u7f51\u67e5\u8be2 } printf ( \"%d \\n \" , sum ); //\u65f6\u95f4\u590d\u6742\u5ea6:O(n*a[i]) 1e6 Question zls\u60f3\u6210\u4e3a\u4e16\u754c\u65e0\u654c\u7684dp\u5927\u5e08\uff0c\u4ed6\u7684\u8bad\u7ec3\u4e00\u5171\u6709n\u5929\uff0c\u7b2ci\u5929\u6709i\u79cd\u8bad\u7ec3\u65b9\u5f0f\uff0c\u5982\u679c\u4eca\u5929zls\u7528\u4e86\u7b2cj\u79cd\u8bad\u7ec3\u65b9\u5f0f\uff0c\u660e\u5929\u4ed6\u53ea\u80fd\u7528\u7b2cj\u79cd\u6216\u8005\u7b2cj+1\u79cd\u8bad\u7ec3\u65b9\u5f0f\u4e86\uff0c\u7b2ci\u5929\u7684\u7b2cj\u79cd\u8bad\u7ec3\u65b9\u5f0f\u589e\u52a0\u7684Rating\u662ff[i][j]\uff0c\u8fd9\u6837\u7684\u8bddzls\u6700\u7ec8\u80fd\u8fbe\u5230\u6700\u5927\u7684Rating\u503c\u4f1a\u662f\u591a\u5c11\u5462\uff1f 1\u2264n,m,a[i]\u22641000 \u6570\u5b57\u4e09\u89d2\u5f62(dp\u59cb\u7956)\uff1a\u4e0d\u80fd\u901a\u8fc7\u8d2a\u5fc3\u6765\u9009\u62e9\u5f53\u524d\u5c42\u7684\u6700\u5927\u503c\uff0c\u56e0\u4e3a\u4e0b\u4e00\u5c42\u7684\u9009\u62e9\u4f1a\u88ab\u4e0a\u4e00\u5c42\u7684\u9009\u62e9\u6240\u5f71\u54cd\uff08\u53ef\u80fd\u4e0b\u4e00\u5c42\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u503c\u5374\u56e0\u4e3a\u4e0a\u4e00\u5c42\u6ca1\u9009\u597d\u5c31\u9009\u4e0d\u5230\u5b83\u4e86\uff09\u3002\u56e0\u6b64\u4f7f\u7528DP\u6765\u5904\u7406\u3002","title":"\u4f8b\u9898\u5f15\u5165"},{"location":"dp/simpleDP/#dp","text":"\u5148\u77e5\u9053\u4e00\u4e0b\u4ec0\u4e48\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\uff1a Question \u7528\u9012\u5f52\u5b9e\u73b0\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u5bf91e9+7\u53d6\u6a21\u7684\u524d100000\u9879\u3002 \uff08\u5355\u7eaf\u7684\u9012\u5f52100\u9879\u5de6\u53f3\u5c31\u5361\u6b7b\u4e86\uff0c\u4e0d\u4fe1\u4f60\u53ef\u4ee5\u8bd5\u8bd5\uff09\uff0c\u6240\u4ee5\u8981\u600e\u4e48\u505a\u5462\uff1f\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff1a1,1,2,3,5,8\u2026\u2026f(n)=f(n-1)+f(n-2)\uff0c(n\u22653) \u5355\u7eaf\u7684\u770b\u9012\u5f52\u6c42fib,\u5047\u8bbe\u6211\u4eec\u8981\u9012\u5f52\u6c42fib(10)\uff0c\u90a3\u4e48fib(10)=fib(9)+fib(8)\uff0c\u6c42fib(9)\u53c8\u9700\u8981fib(8)+fib(7)\uff0c\u6c42fib(8)\u53c8\u9700\u8981fib(7)+fib(6)\u2026\u2026 \u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5b9e\u4e0a\u9762\u7684\u641c\u7d22\u662f\u6709\u91cd\u590d\u7684\u90e8\u5206\u7684\uff0c\u6bd4\u5982\u5728fib(10)=fib(9)+fib(8)\u8fd9\u4e00\u6b65\uff0c\u5bf9\u4e8efib(9)\uff0c\u6c42\u51fa\u5b83\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u77e5\u9053\u4e86fib(8)\u3001fib(7)\u662f\u591a\u5c11\uff0c\u4f46\u662f\u518d\u6c42fib(8)\u7684\u65f6\u5019\u53c8\u662f\u5f53\u4f5c\u6211\u4eec\u4e0d\u77e5\u9053fib(8)\u662f\u591a\u5c11\u6765\u5f80\u4e0b\u9012\u5f52\u53bb\u627efib(7)\u548cfib(6)\uff0c\u5176\u5b9e\u8fd9\u4e9b\u90e8\u5206\u5728\u641c\u7d22fib(9)\u7684\u65f6\u5019\u5df2\u7ecf\u641c\u7d22\u8fc7\u4e86\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u5f88\u591a\u91cd\u590d\u641c\u7d22\u7684\u90e8\u5206\u3002\u5f53\u6570\u91cf\u7ea7\u5f88\u5927\u7684\u65f6\u5019\uff0c\u91cd\u590d\u641c\u7d22\u7684\u90e8\u5206\u4f1a\u88ab\u653e\u5f97\u5f88\u5927\uff0c\u4ece\u800c\u5bfc\u81f4\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u9ad8\u3002 \u90a3\u548b\u529e\u5462\uff1f\uff1f\uff1f \u5b58\u4e0b\u6765\u521a\u521a\u641c\u8fc7\u7684\u6570\u4e0d\u5c31\u597d\u4e86\u561b\uff01\u4e0b\u6b21\u518d\u641c\u7684\u65f6\u5019\uff0c\u53d1\u73b0\u8fd9\u4e2a\u5730\u65b9\u662f\u5b58\u5728\u4e00\u4e2a\u503c\u7684\uff0c\u90a3\u5c31\u8bf4\u660e\u8fd9\u4e2a\u5730\u65b9\u5df2\u7ecf\u88ab\u641c\u7d22\u8fc7\u4e86\uff0c\u8fd4\u56de\u90a3\u4e2a\u503c\u5c31\u597d\u4e86\u3002 1 2 3 4 5 6 7 8 9 const int maxn = 1e6 + 6 ; const int mod = 1e9 + 7 ; int fib [ maxn ]; int f ( int a ){ if ( a == 1 || a == 2 ) return 1 ; if ( fib [ a ] != 0 ) return fib [ a ]; return fib [ a ] = ( f ( a -1 ) + f ( a -2 )) % mod ; } \u8fd9\u5c31\u662f\u8bb0\u5fc6\u5316\u641c\u7d22\u4e86\uff0c\u5176\u5b9e\u5c31\u662f\u628a\u641c\u8fc7\u7684\u4e1c\u897f\u90fd\u8bb0\u4e0b\u6765\uff0c\u4ee5\u540e\u518d\u641c\u5230\u4e00\u6837\u7684\u90e8\u5206\u5c31\u4e0d\u7528\u8ba1\u7b97\u76f4\u63a5\u8f93\u51fa\u4e86\u3002 \u90a3\u4ec0\u4e48\u662fDP\uff1fDP\u5c31\u662f\u901a\u8fc7\u8bb0\u5fc6\u5316\u641c\u7d22\uff0c\u5148\u8bb0\u5f55\u4e0b\u7b2c\u4e00\u6b65\u662f\u4ec0\u4e48\u72b6\u6001\uff0c\u4e4b\u540e\u7684\u6bcf\u4e00\u6b65\u6839\u636e\u4e0a\u4e00\u6b65\u7684\u72b6\u6001\u6765\u51b3\u5b9a\u5e76\u5b58\u50a8\uff0c\u76f4\u5230\u6700\u540e\u4e00\u6b65\u3002\u6700\u540e\u5229\u7528\u6211\u4eec\u901a\u8fc7DP\u5f97\u5230\u7684\u6570\u7ec4\u5904\u7406\u8f93\u51fa\u60f3\u8981\u7684\u7b54\u6848\u3002 \u5bf9\u4e8e\u6570\u5b57\u4e09\u89d2\u5f62\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u72b6\u6001\u7684\u548c\u7684\u6700\u5927\u503c\u5373\u53ef\uff0c\u6211\u4eec\u9009\u62e9\u7684\u72b6\u6001\u662f\u5f53\u5230\u4e86\u7b2ci\u884c\u7b2cj\u5217\u7684\u65f6\u5019\uff0c\u6b64\u65f6\u80fd\u5f97\u5230\u7684\u548c\u6700\u5927\u503c\u662f\u591a\u5c11\u3002 1 2 3 4 5 6 7 8 int dp [ 1010 ][ 1010 ]; int a [ 1010 ][ 1010 ]; memset ( dp , 0 , sizeof ( dp )); for ( int i = n ; i >= 1 ; i -- ){ for ( int j = 1 ; j <= i ; j ++ ){ dp [ i ][ j ] = max ( dp [ i + 1 ][ j ], dp [ i + 1 ][ j + 1 ]) + a [ i ][ j ]; } } printf ( \"%d\" , dp [ 1 ][ 1 ]); Question zls\u53c8\u60f3\u6210\u4e3a\u4e16\u754c\u65e0\u654c\u7684dp\u5927\u5e08\uff0c\u4ed6\u7684\u8bad\u7ec3\u4e00\u5171\u6709m\u5929\uff0c\u4e00\u5171\u6709n\u79cd\u8bad\u7ec3\u53ef\u4f9b\u9009\u62e9\uff0c\u7b2ci\u79cd\u8bad\u7ec3\u9700\u8981\u82b1\u8d39a[i]\u5929\uff0c\u7ed3\u675f\u4ee5\u540e\u4f1a\u589e\u957fb[i]\u70b9Rating,\u4e00\u79cd\u8bad\u7ec3\u53ea\u80fd\u8fdb\u884c\u4e00\u6b21\uff0c\u8bf7\u95een\u5929\u4e4b\u540ezls\u7684Rating\u503c\u6700\u9ad8\u53ef\u4ee5\u5230\u8fbe\u591a\u5c11? 1\u2264n,m,a[i]\u22641000 \u96be\u70b9\uff1a\u8d2a\u5fc3\u53bb\u8d2ab[i]\u6700\u5927\u503c\u65e0\u6548\uff0c\u56e0\u4e3a\u6709a[i]\u7684\u9650\u5236;a[i]\u7684\u9650\u5236\u4f7f\u5f97\u5b83\u8ddf\u8d2a\u5fc3\u7684\u95ee\u9898\u5b8c\u5168\u4e0d\u4e00\u6837\uff0c\u56e0\u6b64\u9700\u8981\u7528DP\u6765\u5b9e\u73b0\u7f16\u7a0b\u3002\uff08\u80cc\u5305DP\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 int dp [ 1010 ][ 1010 ]; //\u7b2c\u4e00\u7ef4\u4e0b\u6807\uff1a\u524di\u4e2a\u8bad\u7ec3\u5f97\u5230\u7684\u72b6\u6001\uff1b //\u7b2c\u4e8c\u7ef4\u4e0b\u6807:\u5f53\u524d\u72b6\u6001\u5df2\u82b1\u8d39\u591a\u5c11\u65f6\u95f4;\u6570\u7ec4\u5b58\u653e\u5f53\u524d\u72b6\u6001\u7684\u6700\u5927\u4ef7\u503c\u662f\u591a\u5c11\u3002 memset ( dp , 0 , sizeof ( dp )); //\u521d\u59cb\u5316\u4e3a0 for ( int i = 1 ; i <= n ; i ++ ){ //\u524di\u4e2a\u7269\u54c1\u7684\u72b6\u6001 for ( int j = 0 ; j <= m ; j ++ ){ dp [ i ][ j ] = dp [ i -1 ][ j ]; } for ( int j = a [ i ]; j <= m ; -- j ){ //\u679a\u4e3e\u653e\u5165\u5f53\u524d\u7269\u54c1\u7684\u80cc\u5305\u5bb9\u91cf\u4f1a\u662f\u591a\u5c11 dp [ i ][ j ] = max ( dp [ i ][ j ], dp [ i -1 ][ j - a [ i ]] + b [ i ]); //\u5f53\u524d\u72b6\u6001\u662f\u4ece\u4e0a\u4e00\u4e2ai-1\u7684\u72b6\u6001\u7684\u80cc\u5305\u5bb9\u91cfj-a[i]\u9009\u62e9\u653e\u4e0d\u653e\u5165\u8fd9\u4e2a\u4e1c\u897f\u7684\u5bb9\u91cf\u8f6c\u79fb\u8fc7\u6765 } } printf ( \"%d\" , dp [ n ][ m ]); //\u65f6\u95f4\u590d\u6742\u5ea6O(n*m) 1e6 \u80cc\u5305\u95ee\u9898\u5176\u5b9e\u53ef\u4ee5\u7528\u4e00\u7ef4\u6570\u7ec4\u53bb\u89e3\u51b3\uff0c\u8fd9\u6837\u5c31\u4f1a\u66f4\u52a0\u8282\u7701\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u6ca1\u6709\u53d8\u5316\u3002 1 2 3 4 5 6 7 8 9 int dp [ 1010 ]; //\u4e0b\u6807\u662f\u80cc\u5305\u7684\u5bb9\u91cf memset ( dp , 0 , sizeof ( dp )); for ( int i = 0 ; i < n ; i ++ ){ for ( int j = m ; j >= a [ i ]; -- j ){ dp [ j ] = max ( dp [ j ], dp [ j - a [ i ]] + b [ i ]); //\u80cc\u5305\u5bb9\u91cf\u4e3aj\u7684\u72b6\u6001\u4ece\u80cc\u5305\u5bb9\u91cf\u4e3aj-a[i]\u7684\u72b6\u6001\u8f6c\u79fb\uff08\u9009\u62e9\u653e\u5165\u8fd9\u4e2a\u4e1c\u897f\uff09 } } printf ( \"%d\" , dp [ m ]); \u5927\u5bb6\u53ef\u4ee5\u770b\u5230\uff0c\u8f6c\u79fb\u8fc7\u7a0b\u4e2d\u80cc\u5305\u5bb9\u91cf\u8f6c\u79fb\u662f\u4ece\u5927\u5230\u5c0f\u8f6c\u79fb\u7684\uff0c\u4e3a\u4ec0\u4e48\u8981\u4ece\u5927\u5230\u5c0f\u8f6c\u79fb\u800c\u4e0d\u662f\u4ece\u5c0f\u5230\u5927\u8f6c\u79fb\u5462\uff1f\uff08\u4ec0\u4e48\u662f\u72b6\u6001\u8f6c\u79fb\uff08\u66f4\u65b0\u72b6\u6001\uff09?\uff09 \u5f53\u72b6\u6001\u672a\u8fdb\u884c\u8fc7\u66f4\u65b0\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u672a\u66f4\u65b0\u7684\u72b6\u6001\u662f\u4e0d\u5b58\u5728\u5f53\u524d\u7684\u72b6\u6001\u8f6c\u79fb\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u672a\u66f4\u65b0\u7684\u72b6\u6001\u662f\u8fd8\u6ca1\u6709\u505a\u5f53\u524d\u7684\u8bad\u7ec3\u7684\u3002 \u4e3e\u4f8b\uff1a\u5982\u679c\u4ece\u5c0f\u5230\u5927\u66f4\u65b0dp\u503c\uff0c\u5047\u8bbedp[j]\u4ecedp[j-a[i]]\u5904\u7ecf\u8fc7\u4e86\u66f4\u65b0\uff0c\u90a3\u4e48\u4e4b\u540e\u7684dp[j+a[i]]\u4e5f\u5c31\u4f1a\u4ecedp[j]\u5904 \u66f4\u65b0\u3002\u5047\u8bbedp[j]\u7684\u51b3\u7b56\u662f\u53d6\u7b2ci\u4ef6\u7269\u54c1\uff0c\u90a3\u4e48dp[j]\u7684\u72b6\u6001\u662f\u505a\u4e86\u7b2ci\u6b21\u8bad\u7ec3\u4e86\uff1b\u4e4b\u540e\u6211\u4eec\u7684dp[j+a[i]]\u4f1a\u4ecedp[j]\u8fd9\u4e2a\u72b6\u6001\u8f6c\u79fb\uff0c\u56e0\u4e3a\u4e4b\u524d\u5df2\u7ecf\u505a\u4e86\u7b2ci\u6b21\u8bad\u7ec3\uff0c\u6309\u7406\u6765\u8bf4\u662f\u4e0d\u80fd\u518d\u505a\u8fd9\u4e2a\u8bad\u7ec3\u4e86\uff0c\u4f46\u662f\u5982\u679c\u7ee7\u7eed\u505a\u7b2ci\u4e2a\u8bad\u7ec3\uff0c\u5c31\u4f1a\u5bfc\u81f4\u51b3\u7b56\u4e0e\u9898\u610f\u4e0d\u7b26\u3002 \u90a3\u4e48\uff0c\u5982\u679c\u4ece\u5927\u5230\u5c0f\u66f4\u65b0dp\u503c\uff0c\u5047\u8bbedp[j]\u4ecedp[j-a[i]]\u5904\u66f4\u65b0dp\u503c\uff0c\u7531\u4e8edp[j-a[i]]\u5904\u8fd8\u672a\u8fdb\u884c\u8fc7\u66f4\u65b0\uff0c\u6240\u4ee5\u8fd9\u4e2a\u72b6\u6001\u662f\u4e0d\u4f1a\u53bb\u505a\u7b2ci\u6b21\u8bad\u7ec3\u7684\uff0c\u6240\u4ee5\u8f6c\u79fb\u6709\u6548\u3002\u800cdp[j-a[i]]\u662f\u4ecedp[j-a[i]-a[i]]\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765\uff0c\u540c\u7406\u56e0\u4e3adp[j-a[i]-a[i]]\u4e5f\u662f\u672a\u7ecf\u8fc7\u72b6\u6001\u8f6c\u79fb\u7684\uff0c\u6240\u4ee5\u90a3\u4e2a\u72b6\u6001\u4e5f\u4e0d\u4f1a\u505a\u7b2ci\u4e2a\u8bad\u7ec3\uff0c\u56e0\u6b64\u8f6c\u79fb\u540c\u6837\u6709\u6548\uff0c\u800c\u8f6c\u79fb\u540e\u7684dp[j-a[i]]\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u4e4b\u524d\u8f6c\u79fb\u7684dp[j]\uff0c\u56e0\u4e3adp[j]\u662f\u4ece\u672a\u8fdb\u884c\u66f4\u65b0\u7684dp[j-a[i]]\u8f6c\u79fb\u8fc7\u6765\u3002 Question zls\u66f4\u60f3\u6210\u4e3a\u4e16\u754c\u65e0\u654c\u7684dp\u5927\u5e08\uff0c\u4ed6\u7684\u8bad\u7ec3\u4e00\u5171\u6709n\u5929\uff0c\u4e00\u5171\u6709m\u79cd\u8bad\u7ec3\u53ef\u4f9b\u9009\u62e9\uff0c\u7b2ci\u79cd\u8bad\u7ec3\u9700\u8981\u82b1\u8d39a[i]\u5929\uff0c\u7ed3\u675f\u4ee5\u540e\u4f1a\u589e\u957f\u5230b[i]\u70b9Rating,\u4e00\u79cd\u8bad\u7ec3\u53ef\u4ee5\u8fdb\u884c\u65e0\u6570\u6b21\uff0c\u8bf7\u95een\u5929\u4e4b\u540ezls\u7684Rating\u503c\u6700\u9ad8\u53ef\u4ee5\u5230\u8fbe\u591a\u5c11? 1\u2264n,m,a[i]\u22641000 \u96be\u70b9\uff1a\u4e0e\u521a\u521a\u7684\u9898\u5f88\u7c7b\u4f3c\uff0c\u4f46\u662f\u6bcf\u79cd\u8bad\u7ec3\u53ef\u4ee5\u65e0\u6570\u6b21\u4e86\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u53d8\u4e00\u4e0b\u521a\u521a\u7684\u4ee3\u7801\uff0c\u7528\u8bad\u7ec3\u6570\u91cf\u4e3a\u65e0\u6570\u6b21\u7684\u65b9\u6cd5\u6765\u8f6c\u79fb\u5c31\u597d\u3002\uff08\u5b8c\u5168\u80cc\u5305DP\uff09 1 2 3 4 5 6 7 8 int dp [ 1010 ]; //\u4e0b\u6807\u662f\u80cc\u5305\u7684\u5bb9\u91cf memset ( dp , 0 , sizeof ( dp )); for ( int i = 0 ; i < n ; i ++ ){ for ( int j = a [ i ]; j <= m ; ++ j ){ dp [ j ] = max ( dp [ j ], dp [ j - a [ i ]] + b [ i ]); //\u80cc\u5305\u5bb9\u91cf\u4e3aj\u7684\u72b6\u6001\u4ece\u80cc\u5305\u5bb9\u91cf\u4e3aj-a[i]\u7684\u72b6\u6001\u8f6c\u79fb\uff08\u9009\u62e9\u653e\u5165\u8fd9\u4e2a\u4e1c\u897f\uff09 } } printf ( \"%d\" , dp [ m ]); //\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n*m) 1e6 \u4e5f\u5c31\u662f\u521a\u521a\u7684\u80cc\u5305dp\u4e2d\u80cc\u5305\u5bb9\u91cf\u4ece\u5c0f\u5230\u5927\u8f6c\u79fb\uff0c\u56e0\u4e3a\u4ece\u5c0f\u5230\u5927\u8f6c\u79fb\u662f\u4e00\u4e2a\u7269\u54c1\u53ef\u4ee5\u53d6\u591a\u6b21\u7684\u3002 \u601d\u8003\uff1a\u5982\u679c\u8bad\u7ec3\u65f6\u95f4\uff08weight\uff09\u5f88\u5927(1e9)\uff0c\u4f46\u662f\u8bad\u7ec3\u6210\u679c\uff08value\uff09\u5f88\u5c0f\uff081e3\uff09\uff0c\u8fd9\u6837\u7684\u8bdd\u5e94\u8be5\u600e\u4e48\u8fdb\u884cdp\uff1f \u5982\u679c\u6709\u5174\u8da3\uff0c\u8fd8\u53ef\u4ee5\u60f3\u60f3\uff0c\u5982\u679c\u6bcf\u79cd\u8bad\u7ec3\u662f\u6709\u6b21\u6570\u7684\u4f46\u4e0d\u662f\u65e0\u9650\u6b21\uff0c\u90a3\u53c8\u8981\u600e\u4e48\u8f6c\u79fb\uff1f\uff08\u591a\u91cd\u80cc\u5305dp\uff09 \u9664\u4e86\u4e0a\u9762\u7684\u57fa\u672c\u7684DP\uff0c\u8fd8\u6709\u72b6\u538bDP(\u901a\u8fc7\u6570\u5b57\u6765\u5b58\u50a8\u72b6\u6001)\uff0c\u63d2\u5934DP\uff0c\u6811\u5f62DP\uff08\u9700\u8981\u77e5\u9053\u4ec0\u4e48\u662f\u6811\uff09\u7b49\u7b49\u3002 \u8fd8\u6709\u4e24\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684DP\u662f\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff08LCS\uff09\uff0c\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\uff08LIS\uff09\uff0c\u7531\u4e8e\u8bb2\u662f\u5f88\u96be\u8bb2\u61c2\u7684\uff0c\u5982\u679c\u4f60\u4eec\u80fd\u771f\u6b63\u4e86\u89e3\u4e86\u4ec0\u4e48\u662fDP\uff0c\u4e0a\u9762\u7684\u4e24\u4e2a\u9898\u5c31\u4f1a\u8fce\u5203\u800c\u89e3\uff0c\u4e5f\u80fd\u5728\u8111\u4e2d\u7559\u4e0b\u6df1\u523b\u7684\u8bb0\u5fc6\u3002","title":"\u4ec0\u4e48\u662fDP\uff1f\uff1f\uff1f"},{"location":"dp/simpleDP/#_4","text":"\u56e0\u4e3a\u4e4b\u524d\u5f80\u540e\u9762\u8f6c\u79fb\u7684\u65f6\u5019\uff0c\u524d\u9762\u8bb0\u5f55\u4e0b\u7684\u90fd\u662f\u524d\u9762\u6bcf\u79cd\u72b6\u6001\u7684\u6700\u4f18\u503c\uff0c\u6709\u53ef\u80fd\u4f1a\u9047\u5230\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff1a\u4e4b\u524d\u7684\u67d0\u4e2a\u72b6\u6001\u7684\u6700\u4f18\u503c\u53ef\u80fd\u56e0\u4e3a\u540e\u9762\u67d0\u4e2a\u503c\u800c\u5bfc\u81f4\u4e4b\u524d\u53d6\u7684\u6700\u4f18\u503c\u5e76\u4e0d\u662f\u9002\u5408\u5f53\u524d\u503c\u7684\u6700\u4f18\u503c\uff08\u4f8b\u5982\uff1aA\u3001B\u4e24\u4e2a\u516c\u53f8\u90fd\u9700\u8981\u62db8\u4e2a\u4eba\uff0c\u5019\u9009\u8005\u90fd\u6709a,b\u80fd\u529b\u503c\uff0c\u5982\u4f55\u53d6\u4eba\u624d\u80fd\u4f7f\u5f97A\u516c\u53f8\u62db\u5230\u5458\u5de5\u7684a\u80fd\u529b\u503c\u603b\u548c\u548cB\u516c\u53f8\u5458\u5de5\u7684b\u80fd\u529b\u503c\u603b\u548c\u52a0\u8d77\u6765\u6700\u5927\u3002\u8fd9\u4e2a\u5c31\u4e0d\u80fd\u7528\u52a8\u6001\u89c4\u5212\u53bb\u505a\uff0c\u56e0\u4e3a\u4f1a\u9047\u5230\u4e00\u79cd\u60c5\u51b5\u662f\uff0c\u5047\u8bbe\u524d\u9762A\u516c\u53f8\u53d6\u5230\u4e00\u4e2aa,b\u80fd\u529b\u503c\u540c\u6837\u4f18\u79c0\u7684\u4eba\uff0c\u4f46\u662f\u540e\u9762\u5982\u679c\u6709\u4e00\u4e2aa\u80fd\u529b\u503c\u5f88\u4f18\u79c0\u4f46\u662f\u6ca1\u6709\u524d\u9762\u90a3\u4e2a\u4eba\u4f18\u79c0\uff0c\u540c\u65f6\u8fd9\u4e2a\u4ebab\u80fd\u529b\u503c\u5f88\u5dee\u52b2\uff0c\u6240\u4ee5\u9700\u8981\u8ba9\u524d\u9762\u7684\u4eba\u53bbB\u516c\u53f8\uff0c\u8ba9\u8fd9\u4e2a\u4eba\u53bbA\u516c\u53f8\u6765\u4fdd\u6301\u603b\u548c\u6700\u5927\u8fd9\u4e2a\u6761\u4ef6\uff0c\u8fd9\u5c31\u8fdd\u53cd\u4e86\u65e0\u540e\u6548\u6027\u8fd9\u4e2a\u8981\u6c42\u3002","title":"\u5173\u4e8e\u65e0\u540e\u6548\u6027\uff1a"},{"location":"dp/simpleDP/#_5","text":"\u72b6\u6001\uff1a\u8fd9\u4e2a\u53d8\u91cf\u7684\u6570\u7ec4\u4e0b\u6807\u4ee3\u8868\u4e86\u4ec0\u4e48\u60c5\u51b5(i\u4e0d\u4e00\u5b9a\u662f\u524di\u4e2a\u4e1c\u897f\uff0c\u4e0b\u6807\u4ee3\u8868\u7684\u60c5\u51b5\u8981\u6839\u636e\u9898\u610f\u548c\u6570\u636e\u8303\u56f4\u6765\u51b3\u5b9a) \u51b3\u7b56\uff1a\u5e94\u8be5\u600e\u4e48\u4ece\u5f53\u524d\u72b6\u6001\u53d8\u5316\u5230\u4e0b\u4e00\u4e2a\u72b6\u6001 \u8f6c\u79fb\uff1a\u5982\u4f55\u5728\u4ee3\u7801\u4e0a\u8fdb\u884c\u72b6\u6001\u53d8\u5316 \u65e0\u540e\u6548\u6027\uff1a\u672a\u6765\u4e0e\u8fc7\u53bb\u65e0\u5173\uff0c\u4ee5\u540e\u505a\u7684\u51b3\u5b9a\u4e0d\u4f1a\u5f71\u54cd\u4e4b\u524d\u505a\u7684\u51b3\u5b9a\uff08\u53ea\u6709\u7b26\u5408\u8fd9\u4e00\u70b9\u624d\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u6765\u505a\uff09","title":"\u603b\u7ed3"},{"location":"enroll/ccpc/","text":"CCPC \u53c2\u8d5b\u6307\u5357\uff08CUC \u7248\uff09 \u00b6 Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a c4pr1c3 \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u786e\u8ba4\u81ea\u5df1\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u300c\u5b66\u751f\u767b\u5f55\u300d\u65b9\u5f0f\u767b\u5f55\u8be5\u62a5\u540d\u7f51\u7ad9\u3002\u5982\u679c\u65e0\u6cd5\u767b\u5f55\u8df3\u8f6c\u6b65\u9aa4 2. \u5426\u5219\u8df3\u8f6c\u6b65\u9aa4 3. \u3002 \u7531\u961f\u957f\u7edf\u4e00\u6309\u7167 https://s.ccpc.io/s/2021-07-10/1625928796144_CCPC\u6279\u91cf\u65b0\u589e\u5b66\u751f\u5e76\u5bfc\u5165\u5b66\u751f\u6c60Excel\u6a21\u677f.xlsx \u8fd9\u4e2a\u6a21\u7248\u586b\u5199\u4e2a\u4eba\u4fe1\u606f\u540e\uff0c\u53d1\u9001 \u672c\u6821 ACM \u8d23\u4efb\u6559\u7ec3 \u8fdb\u884c\u540e\u53f0\u5b66\u751f\u8d26\u53f7\u6ce8\u518c\u3002 \u786e\u8ba4\u672c\u961f\u62a5\u540d\u54ea\u4e00\u4e2a\u8d5b\u7ad9\uff0c\u961f\u4f0d\u4e2d\u6587\u540d\u3001\u82f1\u6587\u540d\u3001\u53c2\u8d5b\u961f\u5458\u987a\u5e8f\uff0c\u96c6\u9f50\u8fd9\u4e9b\u4fe1\u606f\u53d1\u9001 \u672c\u6821 ACM \u8d23\u4efb\u6559\u7ec3 \u8fdb\u884c\u8d5b\u4e8b\u62a5\u540d\u3002 \u62a5\u540d\u6210\u529f\u540e\uff0c \u672c\u6821 ACM \u8d23\u4efb\u6559\u7ec3 \u4f1a\u53cd\u9988\u4f60\u62a5\u540d\u6210\u529f\u622a\u56fe\uff0c\u8bf7\u518d\u6b21\u786e\u8ba4\u62a5\u540d\u4fe1\u606f\u3002 \u7f34\u8d39\u6210\u529f\u540e\uff0c \u672c\u6821 ACM \u8d23\u4efb\u6559\u7ec3 \u4f1a\u53cd\u9988\u4f60\u7f34\u8d39\u6210\u529f\u622a\u56fe\u3002 \u62a5\u540d\u6b63\u5f0f\u7ed3\u675f\uff0c\u5efa\u8bae\u81f3\u5c11\u961f\u957f\u52a0\u5165\u8d5b\u4e8b\u901a\u77e5 QQ \u7fa4\uff0c\u5173\u6ce8\u8d5b\u4e8b\u901a\u77e5\uff0c\u7b49\u5f85\u53c2\u8d5b\u3002","title":"CCPC"},{"location":"enroll/ccpc/#ccpc-cuc","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a c4pr1c3 \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u786e\u8ba4\u81ea\u5df1\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u300c\u5b66\u751f\u767b\u5f55\u300d\u65b9\u5f0f\u767b\u5f55\u8be5\u62a5\u540d\u7f51\u7ad9\u3002\u5982\u679c\u65e0\u6cd5\u767b\u5f55\u8df3\u8f6c\u6b65\u9aa4 2. \u5426\u5219\u8df3\u8f6c\u6b65\u9aa4 3. \u3002 \u7531\u961f\u957f\u7edf\u4e00\u6309\u7167 https://s.ccpc.io/s/2021-07-10/1625928796144_CCPC\u6279\u91cf\u65b0\u589e\u5b66\u751f\u5e76\u5bfc\u5165\u5b66\u751f\u6c60Excel\u6a21\u677f.xlsx \u8fd9\u4e2a\u6a21\u7248\u586b\u5199\u4e2a\u4eba\u4fe1\u606f\u540e\uff0c\u53d1\u9001 \u672c\u6821 ACM \u8d23\u4efb\u6559\u7ec3 \u8fdb\u884c\u540e\u53f0\u5b66\u751f\u8d26\u53f7\u6ce8\u518c\u3002 \u786e\u8ba4\u672c\u961f\u62a5\u540d\u54ea\u4e00\u4e2a\u8d5b\u7ad9\uff0c\u961f\u4f0d\u4e2d\u6587\u540d\u3001\u82f1\u6587\u540d\u3001\u53c2\u8d5b\u961f\u5458\u987a\u5e8f\uff0c\u96c6\u9f50\u8fd9\u4e9b\u4fe1\u606f\u53d1\u9001 \u672c\u6821 ACM \u8d23\u4efb\u6559\u7ec3 \u8fdb\u884c\u8d5b\u4e8b\u62a5\u540d\u3002 \u62a5\u540d\u6210\u529f\u540e\uff0c \u672c\u6821 ACM \u8d23\u4efb\u6559\u7ec3 \u4f1a\u53cd\u9988\u4f60\u62a5\u540d\u6210\u529f\u622a\u56fe\uff0c\u8bf7\u518d\u6b21\u786e\u8ba4\u62a5\u540d\u4fe1\u606f\u3002 \u7f34\u8d39\u6210\u529f\u540e\uff0c \u672c\u6821 ACM \u8d23\u4efb\u6559\u7ec3 \u4f1a\u53cd\u9988\u4f60\u7f34\u8d39\u6210\u529f\u622a\u56fe\u3002 \u62a5\u540d\u6b63\u5f0f\u7ed3\u675f\uff0c\u5efa\u8bae\u81f3\u5c11\u961f\u957f\u52a0\u5165\u8d5b\u4e8b\u901a\u77e5 QQ \u7fa4\uff0c\u5173\u6ce8\u8d5b\u4e8b\u901a\u77e5\uff0c\u7b49\u5f85\u53c2\u8d5b\u3002","title":"CCPC \u53c2\u8d5b\u6307\u5357\uff08CUC \u7248\uff09"},{"location":"enroll/icpc/","text":"ICPC \u53c2\u8d5b\u6307\u5357\uff08CUC \u7248\uff09 \u00b6 Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a c4pr1c3 \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u6807\u51c6\u6d41\u7a0b \u00b6 \u6839\u636e \u5177\u4f53 ICPC \u5206\u7ad9\u7684\u53c2\u8d5b\u6307\u5357 \u8fdb\u884c\u8d5b\u4e8b\u62a5\u540d\uff0c\u90e8\u5206\u8d5b\u7ad9\u53ef\u80fd\u4f1a\u8981\u6c42\u5728\u4e00\u4e2a\u7b2c\u4e09\u65b9\u7ad9\u70b9\u63d0\u4ea4\u4e00\u6b21\u5b8c\u6574\u7684\u53c2\u8d5b\u961f\u4f0d\u548c\u961f\u5458\u4e2d\u6587\u4fe1\u606f\u3002 \u53c2\u8d5b\u961f\u5458\u5728 ICPC \u5168\u7403\u5b98\u7f51 \u6ce8\u518c\u8d26\u53f7\u3002 \u961f\u957f\u5728 ICPC \u5168\u7403\u5b98\u7f51 \u7684\u8d5b\u4e8b\u641c\u7d22\u680f\u76ee\u4e2d\u627e\u5230 Asia East \uff0c\u9009\u62e9\u4f60\u6253\u7b97\u62a5\u540d\u7684\u5177\u4f53\u8d5b\u7ad9\uff0c\u6839\u636e\u6587\u5b57\u63d0\u793a\u4fe1\u606f\u8fdb\u884c\u961f\u4f0d\u6ce8\u518c\u3002 \u961f\u4f0d\u6ce8\u518c\u65f6\u961f\u957f\u53ef\u4ee5\u901a\u8fc7\u961f\u5458\u7684\u6ce8\u518c\u90ae\u7bb1\u300c\u68c0\u7d22\u300d\u540e\u5c06\u5339\u914d\u5230\u7684\u961f\u5458\u4fe1\u606f\u6ce8\u518c\u5230\u5f53\u524d\u961f\u4f0d\u3002 \u6559\u7ec3\u4fe1\u606f\u5fc5\u586b\uff0c\u5177\u4f53\u8bf7\u8054\u7cfb \u672c\u6821 ACM \u8d23\u4efb\u6559\u7ec3 \u3002 \u786e\u8ba4 ICPC \u5168\u7403\u5b98\u7f51 \u4e0a\u7684\u961f\u4f0d\u6ce8\u518c\u4fe1\u606f\u663e\u793a\u4e3a Eligible \uff0c\u5426\u5219\u6839\u636e\u8be6\u7ec6\u7684\u9519\u8bef\u63d0\u793a\u4fe1\u606f\u4fee\u6539\u53c2\u8d5b\u961f\u5458\u7684\u6ce8\u518c\u4fe1\u606f\uff0c\u76f4\u5230\u961f\u4f0d\u6ce8\u518c\u4fe1\u606f\u663e\u793a\u4e3a Eligible \u3002 \u5728 ICPC \u5168\u7403\u5b98\u7f51 \u5b98\u7f51\u4e0a\u62a5\u540d\u6210\u529f\u5e76\u4e14\u6309\u7167 \u5177\u4f53 ICPC \u5206\u7ad9\u7684\u53c2\u8d5b\u6307\u5357 \u5b8c\u6210\u62a5\u540d\u4fe1\u606f\u6536\u96c6\u786e\u8ba4\uff0c\u5219\u53ef\u4ee5\u8ba4\u4e3a\u62a5\u540d\u6210\u529f\u3002 \u7f34\u8d39\u6210\u529f\u540e\uff0c \u672c\u6821 ACM \u8d23\u4efb\u6559\u7ec3 \u4f1a\u53cd\u9988\u4f60\u7f34\u8d39\u6210\u529f\u622a\u56fe\u3002 \u62a5\u540d\u6b63\u5f0f\u7ed3\u675f\uff0c\u5efa\u8bae\u81f3\u5c11\u961f\u957f\u52a0\u5165\u8d5b\u4e8b\u901a\u77e5 QQ \u7fa4\uff0c\u5173\u6ce8\u8d5b\u4e8b\u901a\u77e5\uff0c\u7b49\u5f85\u53c2\u8d5b\u3002 \u53c2\u8d5b\u4fe1\u606f \u961f\u4f0d\u82f1\u6587\u540d\u548c\u4f53\u73b0\u53c2\u8d5b\u961f\u5458\u987a\u5e8f\u7684 3 \u4e2a\u6ce8\u518c\u90ae\u7bb1\u3002 FAQ \u00b6 \u65e0\u6cd5\u8bbf\u95ee ICPC \u5168\u7403\u5b98\u7f51 \u00b6 ICPC \u5168\u7403\u5b98\u7f51 \u5728\u4e2d\u56fd\u5927\u9646\u5730\u533a\u8bbf\u95ee\u7ecf\u5e38\u4f1a\u9047\u5230\u5404\u79cd\u7f51\u7edc\u8fde\u63a5\u95ee\u9898\uff0c\u9700\u8981\u91c7\u53d6\u5e38\u89c4\u7684\u5883\u5916\u7f51\u7ad9\u987a\u7545\u8bbf\u95ee\u6280\u672f\u624b\u6bb5\u3002\u53e6\u5916\uff0c\u5982\u679c\u53c2\u8d5b\u961f\u5458\u81ea\u52a9\u6ce8\u518c\u9047\u5230\u95ee\u9898\uff0c\u4e5f\u53ef\u4ee5\u5c06\u53c2\u8d5b\u4fe1\u606f\u53d1\u9001\u7ed9\u672c\u6821\u8d23\u4efb\u6559\u7ec3\u4ee3\u4e3a\u6ce8\u518c\u548c\u62a5\u540d\u3002 \u4f7f\u7528 ICPC \u5168\u7403\u5b98\u7f51 \u8fdb\u884c\u62a5\u540d\u8fc7\u7a0b\u4e2d\u9047\u5230\u83ab\u540d\u5176\u5999\u7684\u9519\u8bef \u00b6 \u6253\u5f00\u6d4f\u89c8\u5668\u7684\u5f00\u53d1\u8005\u5de5\u5177 - \u7f51\u7edc \u9009\u9879\u5361\uff0c\u770b\u770b\u5177\u4f53\u670d\u52a1\u5668\u62a5\u9519\u4fe1\u606f\u662f\u4ec0\u4e48\uff0c\u901a\u8fc7\u641c\u7d22\u5f15\u64ce\u641c\u7d22\u6709\u6ca1\u6709\u4eba\u9047\u5230\u548c\u4f60\u7c7b\u4f3c\u7684\u95ee\u9898\u3001\u5173\u6ce8\u8d5b\u4e8b QQ \u7fa4\u5185\u662f\u5426\u6709\u4eba\u9047\u5230\u548c\u4f60\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u5728\u5411\u4ed6\u4eba\u63d0\u95ee\u65f6\u63d0\u4f9b\u5177\u4f53\u62a5\u9519\u4fe1\u606f\u7684\u5b8c\u6574\u622a\u56fe\u3002\u66f4\u5e38\u89c1\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\uff0c\u7b2c\u4e8c\u5929\u518d\u8bd5\uff0c\u8bf4\u4e0d\u5b9a\u5c31\u597d\u4e86\u3002 ICPC \u5168\u7403\u5b98\u7f51 \u7684\u7a33\u5b9a\u6027\u662f\u51fa\u4e86\u540d\u7684\u5dee\ud83d\ude12\u3002","title":"ICPC"},{"location":"enroll/icpc/#icpc-cuc","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a c4pr1c3 \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002","title":"ICPC \u53c2\u8d5b\u6307\u5357\uff08CUC \u7248\uff09"},{"location":"enroll/icpc/#_1","text":"\u6839\u636e \u5177\u4f53 ICPC \u5206\u7ad9\u7684\u53c2\u8d5b\u6307\u5357 \u8fdb\u884c\u8d5b\u4e8b\u62a5\u540d\uff0c\u90e8\u5206\u8d5b\u7ad9\u53ef\u80fd\u4f1a\u8981\u6c42\u5728\u4e00\u4e2a\u7b2c\u4e09\u65b9\u7ad9\u70b9\u63d0\u4ea4\u4e00\u6b21\u5b8c\u6574\u7684\u53c2\u8d5b\u961f\u4f0d\u548c\u961f\u5458\u4e2d\u6587\u4fe1\u606f\u3002 \u53c2\u8d5b\u961f\u5458\u5728 ICPC \u5168\u7403\u5b98\u7f51 \u6ce8\u518c\u8d26\u53f7\u3002 \u961f\u957f\u5728 ICPC \u5168\u7403\u5b98\u7f51 \u7684\u8d5b\u4e8b\u641c\u7d22\u680f\u76ee\u4e2d\u627e\u5230 Asia East \uff0c\u9009\u62e9\u4f60\u6253\u7b97\u62a5\u540d\u7684\u5177\u4f53\u8d5b\u7ad9\uff0c\u6839\u636e\u6587\u5b57\u63d0\u793a\u4fe1\u606f\u8fdb\u884c\u961f\u4f0d\u6ce8\u518c\u3002 \u961f\u4f0d\u6ce8\u518c\u65f6\u961f\u957f\u53ef\u4ee5\u901a\u8fc7\u961f\u5458\u7684\u6ce8\u518c\u90ae\u7bb1\u300c\u68c0\u7d22\u300d\u540e\u5c06\u5339\u914d\u5230\u7684\u961f\u5458\u4fe1\u606f\u6ce8\u518c\u5230\u5f53\u524d\u961f\u4f0d\u3002 \u6559\u7ec3\u4fe1\u606f\u5fc5\u586b\uff0c\u5177\u4f53\u8bf7\u8054\u7cfb \u672c\u6821 ACM \u8d23\u4efb\u6559\u7ec3 \u3002 \u786e\u8ba4 ICPC \u5168\u7403\u5b98\u7f51 \u4e0a\u7684\u961f\u4f0d\u6ce8\u518c\u4fe1\u606f\u663e\u793a\u4e3a Eligible \uff0c\u5426\u5219\u6839\u636e\u8be6\u7ec6\u7684\u9519\u8bef\u63d0\u793a\u4fe1\u606f\u4fee\u6539\u53c2\u8d5b\u961f\u5458\u7684\u6ce8\u518c\u4fe1\u606f\uff0c\u76f4\u5230\u961f\u4f0d\u6ce8\u518c\u4fe1\u606f\u663e\u793a\u4e3a Eligible \u3002 \u5728 ICPC \u5168\u7403\u5b98\u7f51 \u5b98\u7f51\u4e0a\u62a5\u540d\u6210\u529f\u5e76\u4e14\u6309\u7167 \u5177\u4f53 ICPC \u5206\u7ad9\u7684\u53c2\u8d5b\u6307\u5357 \u5b8c\u6210\u62a5\u540d\u4fe1\u606f\u6536\u96c6\u786e\u8ba4\uff0c\u5219\u53ef\u4ee5\u8ba4\u4e3a\u62a5\u540d\u6210\u529f\u3002 \u7f34\u8d39\u6210\u529f\u540e\uff0c \u672c\u6821 ACM \u8d23\u4efb\u6559\u7ec3 \u4f1a\u53cd\u9988\u4f60\u7f34\u8d39\u6210\u529f\u622a\u56fe\u3002 \u62a5\u540d\u6b63\u5f0f\u7ed3\u675f\uff0c\u5efa\u8bae\u81f3\u5c11\u961f\u957f\u52a0\u5165\u8d5b\u4e8b\u901a\u77e5 QQ \u7fa4\uff0c\u5173\u6ce8\u8d5b\u4e8b\u901a\u77e5\uff0c\u7b49\u5f85\u53c2\u8d5b\u3002 \u53c2\u8d5b\u4fe1\u606f \u961f\u4f0d\u82f1\u6587\u540d\u548c\u4f53\u73b0\u53c2\u8d5b\u961f\u5458\u987a\u5e8f\u7684 3 \u4e2a\u6ce8\u518c\u90ae\u7bb1\u3002","title":"\u6807\u51c6\u6d41\u7a0b"},{"location":"enroll/icpc/#faq","text":"","title":"FAQ"},{"location":"enroll/icpc/#icpc","text":"ICPC \u5168\u7403\u5b98\u7f51 \u5728\u4e2d\u56fd\u5927\u9646\u5730\u533a\u8bbf\u95ee\u7ecf\u5e38\u4f1a\u9047\u5230\u5404\u79cd\u7f51\u7edc\u8fde\u63a5\u95ee\u9898\uff0c\u9700\u8981\u91c7\u53d6\u5e38\u89c4\u7684\u5883\u5916\u7f51\u7ad9\u987a\u7545\u8bbf\u95ee\u6280\u672f\u624b\u6bb5\u3002\u53e6\u5916\uff0c\u5982\u679c\u53c2\u8d5b\u961f\u5458\u81ea\u52a9\u6ce8\u518c\u9047\u5230\u95ee\u9898\uff0c\u4e5f\u53ef\u4ee5\u5c06\u53c2\u8d5b\u4fe1\u606f\u53d1\u9001\u7ed9\u672c\u6821\u8d23\u4efb\u6559\u7ec3\u4ee3\u4e3a\u6ce8\u518c\u548c\u62a5\u540d\u3002","title":"\u65e0\u6cd5\u8bbf\u95ee ICPC \u5168\u7403\u5b98\u7f51"},{"location":"enroll/icpc/#icpc_1","text":"\u6253\u5f00\u6d4f\u89c8\u5668\u7684\u5f00\u53d1\u8005\u5de5\u5177 - \u7f51\u7edc \u9009\u9879\u5361\uff0c\u770b\u770b\u5177\u4f53\u670d\u52a1\u5668\u62a5\u9519\u4fe1\u606f\u662f\u4ec0\u4e48\uff0c\u901a\u8fc7\u641c\u7d22\u5f15\u64ce\u641c\u7d22\u6709\u6ca1\u6709\u4eba\u9047\u5230\u548c\u4f60\u7c7b\u4f3c\u7684\u95ee\u9898\u3001\u5173\u6ce8\u8d5b\u4e8b QQ \u7fa4\u5185\u662f\u5426\u6709\u4eba\u9047\u5230\u548c\u4f60\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u5728\u5411\u4ed6\u4eba\u63d0\u95ee\u65f6\u63d0\u4f9b\u5177\u4f53\u62a5\u9519\u4fe1\u606f\u7684\u5b8c\u6574\u622a\u56fe\u3002\u66f4\u5e38\u89c1\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\uff0c\u7b2c\u4e8c\u5929\u518d\u8bd5\uff0c\u8bf4\u4e0d\u5b9a\u5c31\u597d\u4e86\u3002 ICPC \u5168\u7403\u5b98\u7f51 \u7684\u7a33\u5b9a\u6027\u662f\u51fa\u4e86\u540d\u7684\u5dee\ud83d\ude12\u3002","title":"\u4f7f\u7528 ICPC \u5168\u7403\u5b98\u7f51 \u8fdb\u884c\u62a5\u540d\u8fc7\u7a0b\u4e2d\u9047\u5230\u83ab\u540d\u5176\u5999\u7684\u9519\u8bef"},{"location":"graph/2-SAT/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a zrz \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u5148\u7f6e\u77e5\u8bc6:Tarjan,dfs 2-satisfiability(2-\u53ef\u6ee1\u8db3\u6027) \u63cf\u8ff0\uff1a\u6709N\u4e2a\u53d8\u91cf\uff0c\u6bcf\u4e2a\u53d8\u91cf\u53ea\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u53d6\u503c\u3002\u518d\u7ed9\u5b9aM\u4e2a\u6761\u4ef6\uff0c\u6bcf\u4e2a\u6761\u4ef6\u90fd\u662f\u5bf9\u4e24\u4e2a\u53d8\u91cf\u53d6\u503c\u7684\u9650\u5236\u3002\u6c42\u662f\u5426\u5b58\u5728\u5bf9N\u4e2a\u53d8\u91cf\u7684\u5408\u6cd5\u8d4b\u503c\uff0c\u4f7fM\u4e2a\u6761\u4ef6\u5747\u53ef\u6ee1\u8db3\u3002 \u4e00\u822cM\u4e2a\u6761\u4ef6\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5982\u4e0b\u8bed\u53e5\uff0c\u82e5A\u53d6\u503c\u4e3a0\uff0c\u5219B\u53d6\u503c\u4e3a1\u00b7\u00b7\u00b7\u00b7\uff08\u5982\u679c\u53ef\u80fd\u7684\u53d6\u503c\u53ea\u67090\u6216\u80051\u7684\u60c5\u51b5\u4e0b\uff09 \u975e\u5e38\u7c7b\u4f3c\u4e8e\u6269\u5c55\u57df\u7684\u5e76\u67e5\u96c6\uff0c\u9002\u7528\u4e8e\u66f4\u666e\u904d\u7684\u60c5\u51b5\uff08\u6307\u6240\u5728\u5173\u7cfb\u7684\u539f\u547d\u9898\u4e0d\u7b49\u540c\u4e8e\u9006\u547d\u9898\uff09\uff0c\u56e0\u4e3a\u5e76\u67e5\u96c6\u7ef4\u62a4\u7684\u5168\u662f\u65e0\u5411\u56fe\uff08\u547d\u9898\u7b49\u4e8e\u9006\u547d\u9898\uff09\uff0c\u800c2-SAT\u662f\u4ece\u6709\u5411\u56fe\u51fa\u53d1\u7684 \u65e0\u5411\u56fe\u7ef4\u62a4\u7684\u662f\u4ec0\u4e48\u6761\u4ef6\u5462\uff1f\u662f\u82e5p=0\uff0c\u5219q=0 \u548c \u82e5q=0\uff0c\u5219p=0\u7b49\u4ef7\uff0c\u6211\u4eec\u5982\u679c\u6709\u6761\u4ef6\u82e5p\u5219q\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5427p = 0\u548cq = 0\u653e\u5728\u4e00\u8d77\uff0cp = 1\u548c\u53bb= 1\u653e\u5728\u4e00\u8d77 \u6709\u5411\u56fe\u5462\uff0c\u5c31\u6bd4\u5982\u6709 \u82e5p = 0\uff0c\u5219q = 0\uff0c\u4f46\u662fq = 0\u63a8\u4e0d\u51fap = 0 \u6211\u4eec\u53ea\u80fd\u628a \u82e5p = 0\uff0c\u5219q = 0\uff0c\u548c\u82e5q = 1\uff0c\u5219p = 1\uff08\u9006\u5426\u547d\u9898\uff09\u653e\u5728\u4e00\u8d77\uff08\u6709\u5411\u8fb9\uff09 Katu Puzzle \u5178\u578b\u76842-SAT\u95ee\u9898 AND\u6761\u4ef6 c = 1 \u82e5 a = 0 \u5219 a = 1 \u82e5 b = 0 \u5219 b = 1 c = 0 \u82e5 a = 1 \u5219 b = 0 \u82e5 b = 1 \u5219 a = 0 (\u5f88\u660e\u663e\u6ca1\u6709 \u82e5b = 0\uff0c\u5219a = 1) OR \u6761\u4ef6\u540c\u7406 XOR\u6761\u4ef6 c = 1 \u82e5 a = 0 \u5219 b = 1 \u82e5 b = 1 \u5219 a = 0 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 \uff08\u6ee1\u8db3\u65e0\u5411\u56fe\u7684\u6761\u4ef6\uff09 \u8be6\u89e3\u8bf7\u89c1\u84dd\u4e66P421\u9875 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 #include <bits/stdc++.h> using namespace std ; const int maxn = 2e6 + 5 ; const int N = 2e3 + 5 ; int n , m ; struct edge { int v , next ; } e [ maxn << 1 ]; int head [ N ], cnt ; void add ( int u , int v ){ e [ cnt ]. v = v ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } void inits (){ memset ( head , -1 , sizeof ( head )); } int Scc = 0 ; int dfn [ N ], low [ N ], num ; int st [ N ], top = 0 ; int ins [ N ]; int c [ N ]; void Tarjan ( int x ){ dfn [ x ] = low [ x ] = num ++ ; st [ ++ top ] = x ; ins [ x ] = 1 ; for ( int i = head [ x ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; if ( ! dfn [ v ]){ Tarjan ( v ); low [ x ] = min ( low [ x ], low [ v ]); } else if ( ins [ v ]) low [ x ] = min ( low [ x ], dfn [ v ]); } if ( dfn [ x ] == low [ x ]){ Scc ++ ; int v ; do { v = st [ top -- ]; c [ v ] = Scc ; ins [ v ] = 0 ; } while ( v != x ); } } int main (){ cin >> n >> m ; inits (); for ( int i = 0 ; i < m ; i ++ ){ int a , b , c ; char op [ 10 ]; scanf ( \"%d%d%d\" , & a , & b , & c ); getchar (); scanf ( \"%s\" , op ); if ( op [ 0 ] == 'A' ){ if ( c == 1 ){ add ( a , a + n ); add ( b , b + n ); } else { add ( a + n , b ); add ( b + n , a ); } } else if ( op [ 0 ] == 'O' ){ if ( c == 1 ){ add ( a , b + n ); add ( b , a + n ); } else { add ( a + n , a ); add ( b + n , b ); } } else { if ( c == 1 ){ add ( a , b + n ); add ( a + n , b ); add ( b , a + n ); add ( b + n , a ); } else { add ( a , b ); add ( a + n , b + n ); add ( b , a ); add ( b + n , a + n ); } } } for ( int i = 0 ; i < 2 * n ; i ++ ){ if ( ! dfn [ i ]){ Tarjan ( i ); } } for ( int i = 0 ; i < n ; i ++ ){ if ( c [ i ] == c [ i + n ]){ cout << \"NO\" << endl ; return 0 ; } } cout << \"YES\" << endl ; return 0 ; } \u5e38\u7528\u65b9\u6cd5-Tarjan \u00b6 \u6ce8\u610f\u8fd9\u91cc\u662f\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u7684Tarjan \u590d\u6742\u5ea6\uff1a O(m) O(m) \u957f\u8bdd\u77ed\u8bf4\uff0c\u76f4\u63a5\u5728\u6240\u5efa\u7684\u56fe\u4e2d\u8dd1\u4e00\u4e2aTarjan,\u7136\u540e\u4f9d\u6b21\u5224\u65ad\u67d0\u4e00\u4e2a\u547d\u9898\u548c\u4ed6\u7684\u5426\u547d\u9898\u662f\u5426\u5728\u540c\u4e00\u4e2a\u8054\u901a\u5206\u91cf\u4e2d\uff0c\u82e5\u662f\uff0c\u5219\u77db\u76fe\u3002 \u6784\u9020\u65b9\u6848\u6570\uff1a \u5728\u7f29\u70b9\u540e\u7684\u56fe\u4e0a\uff0c\u53ef\u884c\u89e3\u53ef\u4ee5\u4f7f\u7528\u62d3\u6251\u5e8f\u7ef4\u62a4\uff0c\u628a\u62d3\u6251\u5e8f\u8f83\u5c0f\u7684\u4f5c\u4e3a\u6b63\u89e3(\u6ce8\u610f\u8fd9\u662f\u9006\u5411\u5efa\u56fe) \"\u6ce8\u610f\u5230Tarjan\u7b97\u6cd5\u7684\u672c\u8d28\u662f\u4e00\u6b21DFS,\u5b83\u5728\u56de\u6eaf\u7684\u65f6\u5019\u4f1a\u5148\u53d6\u51fa\u6709\u5411\u56fe'\u5e95\u90e8'\u7684SCC\u8fdb\u884c\u6807\u8bb0\u3002\u6545Tarjan\u7b97\u6cd5\u5f97\u5230\u7684SCC\u7f16\u53f7\u672c\u8eab\u5c31\u5df2\u7ecf\u6ee1\u8db3\u7f29\u70b9\u540e\u6709\u5411\u65e0\u73af\u56fe\u4e2d'\u81ea\u5e95\u5411\u4e0a'\u7684\u62d3\u6251\u5e8f\"\u2014\u2014\u300a\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u300b \u6ce8\u610f\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u80fd\u7ef4\u62a4\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u53ef\u884c\u89e3 \u5e38\u7528\u65b9\u6cd5-dfs \u00b6 \u8fd9\u91cc\u7684DFS\u5c31\u662f\u66b4\u529b\u6c42\u89e3 \u590d\u6742\u5ea6: O(n^2) O(n^2) \u6cbf\u7740\u56fe\u4e0a\u4e00\u6761\u8def\u5f84\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u9009\u62e9\u4e86\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u4ee5\u540e\u7684\u70b9\u90fd\u5c06\u88ab\u9009\u62e9\uff0c\u90a3\u4e48\uff0c\u51fa\u73b0\u4e0d\u53ef\u884c\u7684\u60c5\u51b5\u5c31\u662f\uff0c\u5b58\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u4e24\u8005\u90fd\u88ab\u9009\u62e9\u4e86\u3002 \u53ef\u4ee5\u6c42\u5f97\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u53ef\u884c\u89e3 \u6a21\u7248 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 vector < int > g [ maxn ]; int tag [ maxn ]; int vis [ maxn ]; //\u8bb0\u5f55\u8fd9\u6b21\u641c\u7d22\u4e86\u90a3\u4e9b\u70b9 int num = 0 ; int n , m ; bool dfs ( int x ){ if ( tag [ x ^ 1 ]) return false ; if ( tag [ x ]) return true ; vis [ num ++ ] = x ; tag [ x ] = 1 ; for ( int i = 0 ; i < ( int ) g [ x ]. size (); i ++ ){ int v = g [ x ][ i ]; if ( ! dfs ( v )){ return false ; } } return true ; } bool _SAT (){ for ( int i = 0 ; i < 2 * n ; i += 2 ){ if ( ! tag [ i ] &&! tag [ i ^ 1 ]){ num = 0 ; if ( ! dfs ( i )){ while ( num ){ tag [ vis [ -- num ]] = 0 ; } if ( ! dfs ( i ^ 1 )) return false ; } } } return true ; } \u4f8b\u9898 \u00b6 Party \u00b6 HDU - 3062 \u9898\u610f\uff1a n\u5bf9\u592b\u59bb\u88ab\u9080\u8bf7\u53c2\u52a0\u4e00\u4e2a\u805a\u4f1a\uff0c\u56e0\u4e3a\u573a\u5730\u7684\u95ee\u9898\uff0c\u6bcf\u5bf9\u592b\u59bb\u4e2d\u53ea\u67091\u4eba\u53ef\u4ee5\u5217\u5e2d\u3002\u57282n \u4e2a\u4eba\u4e2d\uff0c\u67d0\u4e9b\u4eba\u4e4b\u95f4\u6709\u7740\u5f88\u5927\u7684\u77db\u76fe\uff08\u5f53\u7136\u592b\u59bb\u4e4b\u95f4\u662f\u6ca1\u6709\u77db\u76fe\u7684\uff09\uff0c\u6709\u77db\u76fe\u76842\u4e2a\u4eba\u662f\u4e0d\u4f1a\u540c\u65f6\u51fa\u73b0\u5728\u805a\u4f1a\u4e0a\u7684\u3002\u6709\u6ca1\u6709\u53ef\u80fd\u4f1a\u6709n \u4e2a\u4eba\u540c\u65f6\u5217\u5e2d\uff1f \u601d\u8def\uff1a 2SAT\u677f\u5b50\u9898\u76ee\uff0c\u7136\u540e\u5c31\u662f\u5206\u4e24\u4e2a\u57df\uff0c\u7b2c\u4e00\u4e2a\u662f\u57280-n\u8868\u793a\u59bb\u5b50\u53c2\u52a0n-2n\u8868\u793a\u4e08\u592b\u53c2\u52a0 \u7136\u540e\u6ce8\u610f\u5efa\u56fe 2SAT\u662f\u6309\u7167\u79bb\u6563\u6570\u5b66\u547d\u9898\u548c\u9006\u547d\u9898\u89c4\u5f8b\u5efa\u7acb\u7684\uff0c\u6bd4\u5982\u4e0a\u9898\u6240\u8bf4\uff0c\u5982\u679c\u6211\u4eec0\u53f7\u548c1\u53f7\u59bb\u5b50\u4e4b\u95f4\u6709\u77db\u76fe\uff0c\u90a3\u4e48\u6211\u4eec\u63a8\u51fa\u7684\u662f\u5982\u679c\u90090\u53f7\u59bb\u5b50\uff0c\u5fc5\u90091\u53f7\u4e08\u592b\uff0c\u5982\u679c\u90091\u53f7\u59bb\u5b50\uff0c\u5fc5\u90090\u53f7\u4e08\u592b\uff08\u4e92\u4e3a\u9006\u5426\u547d\u9898\uff09\uff0c\u7136\u540e\u5173\u7cfb\u662f\u9700\u8981\u6709\u4f20\u9012\u578b\u7684\uff0c\u6bd4\u5982\u670b\u53cb\u5173\u7cfb\u5c31\u6ca1\u6709\uff0c\u5982\u679c\u6211\u4eec\u9009\u6709\u4f20\u9012\u6027\u7684\u6216\u8005\u9006\u547d\u9898\u7b49\u4ef7\u539f\u547d\u9898\u7684\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u3002 \u7136\u540e\u53ef\u884c\u89e3\u53ef\u4ee5\u4f7f\u7528\u62d3\u6251\u5e8f\u7ef4\u62a4\uff0c\u628a\u62d3\u6251\u5e8f\u8f83\u5c0f\u7684\u4f5c\u4e3a\u6b63\u89e3\uff0c\u7136\u540e\u62d3\u6251\u5e8f\uff0c\uff08\u56e0\u4e3a\u9006\u5411\u5efa\u56fe\uff09\uff0c\u7136\u540e\u5c31\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\u5c31\u662fdfs\u66b4\u529b\u89e3\uff0c\u8fd9\u4e2a\u4e0b\u9762\u8bf4 ps:\u8fd9\u4e2a\u9898\u591a\u7ec4\u6837\u4f8b\uff0c\u4f46\u662f\u9898\u76ee\u4e0a\u6ca1\u8bf4\uff0cwa\u9ebb\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #include <bits/stdc++.h> using namespace std ; const int maxn = 2005 ; vector < int > g [ maxn ]; int dfn [ maxn ]; int ins [ maxn ]; int low [ maxn ]; int s [ maxn ], top = 0 ; int num = 0 ; int lis_nu = 0 ; int tag [ maxn ]; void Tarjan ( int x ){ dfn [ x ] = low [ x ] = ++ num ; s [ ++ top ] = x ; ins [ x ] = 1 ; for ( int i = 0 ; i < g [ x ]. size (); i ++ ){ int v = g [ x ][ i ]; if ( ! dfn [ v ]){ Tarjan ( v ); low [ x ] = min ( low [ v ], low [ x ]); } else if ( ins [ v ]) low [ x ] = min ( low [ x ], dfn [ v ]); } if ( low [ x ] == dfn [ x ]){ lis_nu ++ ; int t ; do { t = s [ top -- ]; ins [ t ] = 0 ; tag [ t ] = lis_nu ; } while ( t != x ); } } int n , m ; void inits (){ for ( int i = 0 ; i < n * 2 ; i ++ ){ g [ i ]. clear (); dfn [ i ] = low [ i ] = ins [ i ] = 0 ; } top = 0 ; lis_nu = 0 ; } int main (){ while ( ~ scanf ( \"%d%d\" , & n , & m )){ inits (); for ( int i = 0 ; i < m ; i ++ ){ int a1 , a2 , c1 , c2 ; scanf ( \"%d%d%d%d\" , & a1 , & a2 , & c1 , & c2 ); if ( c1 == 0 && c2 == 0 ){ g [ a1 ]. push_back ( a2 + n ); g [ a2 ]. push_back ( a1 + n ); } else if ( c1 == 0 && c2 == 1 ){ g [ a1 ]. push_back ( a2 ); g [ a2 + n ]. push_back ( a1 + n ); } else if ( c1 == 1 && c2 == 0 ){ g [ a1 + n ]. push_back ( a2 + n ); g [ a2 ]. push_back ( a1 ); } else { g [ a1 + n ]. push_back ( a2 ); g [ a2 + n ]. push_back ( a1 ); } } for ( int i = 0 ; i < n * 2 ; i ++ ){ if ( ! dfn [ i ]){ Tarjan ( i ); } } int flag = 0 ; for ( int i = 0 ; i < n ; i ++ ){ if ( tag [ i ] == tag [ i + n ]){ printf ( \"NO \\n \" ); flag = 1 ; break ; } } if ( ! flag ) printf ( \"YES \\n \" ); } } Peaceful Commission \u00b6 HDU - 1814 \u9898\u610f\uff1a\u5c31\u662f\u8bf4\u7684\u5b57\u5178\u5e8f\u6700\u4e0b\u76842SAT\uff0c\u5c31\u662fn\u4e2a\u653f\u515a\uff0c\u7136\u540e\u6bcf\u4e2a\u653f\u515a\u7684\u67092\u4eba\uff0c\u7136\u540e\u6709\u4ec7\u89c6\u5173\u7cfb\uff0c\u95ee\u80fd\u5426\u6bcf\u4e2a\u653f\u515a\u51fa\u4e00\u4e2a\u4eba\uff0c\u51d1\u4e00\u4e2a\u4f1a\u8bae \u601d\u8def\uff1a 2SAT\u548c\u4e0a\u9762\u601d\u8def\u4e00\u6837\uff0c\u4e0d\u8fc7\u6211\u4eec\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u9009\u62e9dfs,dfs\u662f\u4e00\u79cd\u66b4\u529b\u89e3\u6cd5\uff0c\u590d\u6742\u5ea6 N^2 N^2 \uff0c\u7136\u540e\u5c31\u662f\u66b4\u529b\u5148\u641c\u5c0f\u7684\uff0c\u7136\u540e\u7531\u4e8e\u8fd9\u91cc\u9898\u76ee\u7ed9\u7684\u7279\u6b8a\u6027\u6211\u4eec\u7684\u4e24\u4e2a\u57df\uff0c\u5206\u522b\u8868\u793a\u4e3ax\u548cx^1\u6210\u5bf9\u53d8\u6362\uff0c\u5982\u679c\u662f0-n\u548cn-2n\uff0c\u6211\u4eec\u9700\u8981\u5728\u5f00\u4e00\u4e2aopp\u6570\u7ec4 AC\u4ee3\u7801 \u57fa\u672c\u662f\u6a21\u7248\uff0c\u4ee5\u540e\u53ef\u4ee5\u62ff\u6765\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #include <bits/stdc++.h> using namespace std ; const int maxn = 26005 ; vector < int > g [ maxn ]; int tag [ maxn ]; int vis [ maxn ]; //\u8bb0\u5f55\u8fd9\u6b21\u641c\u7d22\u4e86\u90a3\u4e9b\u70b9 int num = 0 ; int n , m ; bool dfs ( int x ){ if ( tag [ x ^ 1 ]) return false ; if ( tag [ x ]) return true ; vis [ num ++ ] = x ; tag [ x ] = 1 ; for ( int i = 0 ; i < ( int ) g [ x ]. size (); i ++ ){ int v = g [ x ][ i ]; if ( ! dfs ( v )){ return false ; } } return true ; } bool _SAT (){ for ( int i = 0 ; i < 2 * n ; i += 2 ){ if ( ! tag [ i ] &&! tag [ i ^ 1 ]){ num = 0 ; if ( ! dfs ( i )){ while ( num ){ tag [ vis [ -- num ]] = 0 ; } if ( ! dfs ( i ^ 1 )) return false ; } } } return true ; } void inits (){ for ( int i = 0 ; i <= 2 * n ; i ++ ){ g [ i ]. clear (); tag [ i ] = 0 ; vis [ i ] = 0 ; } } int main (){ while ( ~ scanf ( \"%d%d\" , & n , & m )){ inits (); for ( int i = 0 ; i < m ; i ++ ){ int a , b ; scanf ( \"%d%d\" , & a , & b ); a -- ; b -- ; g [ a ]. push_back ( b ^ 1 ); g [ b ]. push_back ( a ^ 1 ); } if ( _SAT ()){ for ( int i = 0 ; i < n * 2 ; i += 2 ){ if ( tag [ i ]){ printf ( \"%d \\n \" , i + 1 ); } else printf ( \"%d \\n \" , i + 2 ); } } else { printf ( \"NIE \\n \" ); } } }","title":"2-SAT"},{"location":"graph/2-SAT/#-tarjan","text":"\u6ce8\u610f\u8fd9\u91cc\u662f\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u7684Tarjan \u590d\u6742\u5ea6\uff1a O(m) O(m) \u957f\u8bdd\u77ed\u8bf4\uff0c\u76f4\u63a5\u5728\u6240\u5efa\u7684\u56fe\u4e2d\u8dd1\u4e00\u4e2aTarjan,\u7136\u540e\u4f9d\u6b21\u5224\u65ad\u67d0\u4e00\u4e2a\u547d\u9898\u548c\u4ed6\u7684\u5426\u547d\u9898\u662f\u5426\u5728\u540c\u4e00\u4e2a\u8054\u901a\u5206\u91cf\u4e2d\uff0c\u82e5\u662f\uff0c\u5219\u77db\u76fe\u3002 \u6784\u9020\u65b9\u6848\u6570\uff1a \u5728\u7f29\u70b9\u540e\u7684\u56fe\u4e0a\uff0c\u53ef\u884c\u89e3\u53ef\u4ee5\u4f7f\u7528\u62d3\u6251\u5e8f\u7ef4\u62a4\uff0c\u628a\u62d3\u6251\u5e8f\u8f83\u5c0f\u7684\u4f5c\u4e3a\u6b63\u89e3(\u6ce8\u610f\u8fd9\u662f\u9006\u5411\u5efa\u56fe) \"\u6ce8\u610f\u5230Tarjan\u7b97\u6cd5\u7684\u672c\u8d28\u662f\u4e00\u6b21DFS,\u5b83\u5728\u56de\u6eaf\u7684\u65f6\u5019\u4f1a\u5148\u53d6\u51fa\u6709\u5411\u56fe'\u5e95\u90e8'\u7684SCC\u8fdb\u884c\u6807\u8bb0\u3002\u6545Tarjan\u7b97\u6cd5\u5f97\u5230\u7684SCC\u7f16\u53f7\u672c\u8eab\u5c31\u5df2\u7ecf\u6ee1\u8db3\u7f29\u70b9\u540e\u6709\u5411\u65e0\u73af\u56fe\u4e2d'\u81ea\u5e95\u5411\u4e0a'\u7684\u62d3\u6251\u5e8f\"\u2014\u2014\u300a\u7b97\u6cd5\u7ade\u8d5b\u8fdb\u9636\u6307\u5357\u300b \u6ce8\u610f\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u80fd\u7ef4\u62a4\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u53ef\u884c\u89e3","title":"\u5e38\u7528\u65b9\u6cd5-Tarjan"},{"location":"graph/2-SAT/#-dfs","text":"\u8fd9\u91cc\u7684DFS\u5c31\u662f\u66b4\u529b\u6c42\u89e3 \u590d\u6742\u5ea6: O(n^2) O(n^2) \u6cbf\u7740\u56fe\u4e0a\u4e00\u6761\u8def\u5f84\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u9009\u62e9\u4e86\uff0c\u90a3\u4e48\u8fd9\u6761\u8def\u5f84\u4ee5\u540e\u7684\u70b9\u90fd\u5c06\u88ab\u9009\u62e9\uff0c\u90a3\u4e48\uff0c\u51fa\u73b0\u4e0d\u53ef\u884c\u7684\u60c5\u51b5\u5c31\u662f\uff0c\u5b58\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\u4e24\u8005\u90fd\u88ab\u9009\u62e9\u4e86\u3002 \u53ef\u4ee5\u6c42\u5f97\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u53ef\u884c\u89e3 \u6a21\u7248 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 vector < int > g [ maxn ]; int tag [ maxn ]; int vis [ maxn ]; //\u8bb0\u5f55\u8fd9\u6b21\u641c\u7d22\u4e86\u90a3\u4e9b\u70b9 int num = 0 ; int n , m ; bool dfs ( int x ){ if ( tag [ x ^ 1 ]) return false ; if ( tag [ x ]) return true ; vis [ num ++ ] = x ; tag [ x ] = 1 ; for ( int i = 0 ; i < ( int ) g [ x ]. size (); i ++ ){ int v = g [ x ][ i ]; if ( ! dfs ( v )){ return false ; } } return true ; } bool _SAT (){ for ( int i = 0 ; i < 2 * n ; i += 2 ){ if ( ! tag [ i ] &&! tag [ i ^ 1 ]){ num = 0 ; if ( ! dfs ( i )){ while ( num ){ tag [ vis [ -- num ]] = 0 ; } if ( ! dfs ( i ^ 1 )) return false ; } } } return true ; }","title":"\u5e38\u7528\u65b9\u6cd5-dfs"},{"location":"graph/2-SAT/#_1","text":"","title":"\u4f8b\u9898"},{"location":"graph/2-SAT/#party","text":"HDU - 3062 \u9898\u610f\uff1a n\u5bf9\u592b\u59bb\u88ab\u9080\u8bf7\u53c2\u52a0\u4e00\u4e2a\u805a\u4f1a\uff0c\u56e0\u4e3a\u573a\u5730\u7684\u95ee\u9898\uff0c\u6bcf\u5bf9\u592b\u59bb\u4e2d\u53ea\u67091\u4eba\u53ef\u4ee5\u5217\u5e2d\u3002\u57282n \u4e2a\u4eba\u4e2d\uff0c\u67d0\u4e9b\u4eba\u4e4b\u95f4\u6709\u7740\u5f88\u5927\u7684\u77db\u76fe\uff08\u5f53\u7136\u592b\u59bb\u4e4b\u95f4\u662f\u6ca1\u6709\u77db\u76fe\u7684\uff09\uff0c\u6709\u77db\u76fe\u76842\u4e2a\u4eba\u662f\u4e0d\u4f1a\u540c\u65f6\u51fa\u73b0\u5728\u805a\u4f1a\u4e0a\u7684\u3002\u6709\u6ca1\u6709\u53ef\u80fd\u4f1a\u6709n \u4e2a\u4eba\u540c\u65f6\u5217\u5e2d\uff1f \u601d\u8def\uff1a 2SAT\u677f\u5b50\u9898\u76ee\uff0c\u7136\u540e\u5c31\u662f\u5206\u4e24\u4e2a\u57df\uff0c\u7b2c\u4e00\u4e2a\u662f\u57280-n\u8868\u793a\u59bb\u5b50\u53c2\u52a0n-2n\u8868\u793a\u4e08\u592b\u53c2\u52a0 \u7136\u540e\u6ce8\u610f\u5efa\u56fe 2SAT\u662f\u6309\u7167\u79bb\u6563\u6570\u5b66\u547d\u9898\u548c\u9006\u547d\u9898\u89c4\u5f8b\u5efa\u7acb\u7684\uff0c\u6bd4\u5982\u4e0a\u9898\u6240\u8bf4\uff0c\u5982\u679c\u6211\u4eec0\u53f7\u548c1\u53f7\u59bb\u5b50\u4e4b\u95f4\u6709\u77db\u76fe\uff0c\u90a3\u4e48\u6211\u4eec\u63a8\u51fa\u7684\u662f\u5982\u679c\u90090\u53f7\u59bb\u5b50\uff0c\u5fc5\u90091\u53f7\u4e08\u592b\uff0c\u5982\u679c\u90091\u53f7\u59bb\u5b50\uff0c\u5fc5\u90090\u53f7\u4e08\u592b\uff08\u4e92\u4e3a\u9006\u5426\u547d\u9898\uff09\uff0c\u7136\u540e\u5173\u7cfb\u662f\u9700\u8981\u6709\u4f20\u9012\u578b\u7684\uff0c\u6bd4\u5982\u670b\u53cb\u5173\u7cfb\u5c31\u6ca1\u6709\uff0c\u5982\u679c\u6211\u4eec\u9009\u6709\u4f20\u9012\u6027\u7684\u6216\u8005\u9006\u547d\u9898\u7b49\u4ef7\u539f\u547d\u9898\u7684\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u3002 \u7136\u540e\u53ef\u884c\u89e3\u53ef\u4ee5\u4f7f\u7528\u62d3\u6251\u5e8f\u7ef4\u62a4\uff0c\u628a\u62d3\u6251\u5e8f\u8f83\u5c0f\u7684\u4f5c\u4e3a\u6b63\u89e3\uff0c\u7136\u540e\u62d3\u6251\u5e8f\uff0c\uff08\u56e0\u4e3a\u9006\u5411\u5efa\u56fe\uff09\uff0c\u7136\u540e\u5c31\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\u5c31\u662fdfs\u66b4\u529b\u89e3\uff0c\u8fd9\u4e2a\u4e0b\u9762\u8bf4 ps:\u8fd9\u4e2a\u9898\u591a\u7ec4\u6837\u4f8b\uff0c\u4f46\u662f\u9898\u76ee\u4e0a\u6ca1\u8bf4\uff0cwa\u9ebb\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 #include <bits/stdc++.h> using namespace std ; const int maxn = 2005 ; vector < int > g [ maxn ]; int dfn [ maxn ]; int ins [ maxn ]; int low [ maxn ]; int s [ maxn ], top = 0 ; int num = 0 ; int lis_nu = 0 ; int tag [ maxn ]; void Tarjan ( int x ){ dfn [ x ] = low [ x ] = ++ num ; s [ ++ top ] = x ; ins [ x ] = 1 ; for ( int i = 0 ; i < g [ x ]. size (); i ++ ){ int v = g [ x ][ i ]; if ( ! dfn [ v ]){ Tarjan ( v ); low [ x ] = min ( low [ v ], low [ x ]); } else if ( ins [ v ]) low [ x ] = min ( low [ x ], dfn [ v ]); } if ( low [ x ] == dfn [ x ]){ lis_nu ++ ; int t ; do { t = s [ top -- ]; ins [ t ] = 0 ; tag [ t ] = lis_nu ; } while ( t != x ); } } int n , m ; void inits (){ for ( int i = 0 ; i < n * 2 ; i ++ ){ g [ i ]. clear (); dfn [ i ] = low [ i ] = ins [ i ] = 0 ; } top = 0 ; lis_nu = 0 ; } int main (){ while ( ~ scanf ( \"%d%d\" , & n , & m )){ inits (); for ( int i = 0 ; i < m ; i ++ ){ int a1 , a2 , c1 , c2 ; scanf ( \"%d%d%d%d\" , & a1 , & a2 , & c1 , & c2 ); if ( c1 == 0 && c2 == 0 ){ g [ a1 ]. push_back ( a2 + n ); g [ a2 ]. push_back ( a1 + n ); } else if ( c1 == 0 && c2 == 1 ){ g [ a1 ]. push_back ( a2 ); g [ a2 + n ]. push_back ( a1 + n ); } else if ( c1 == 1 && c2 == 0 ){ g [ a1 + n ]. push_back ( a2 + n ); g [ a2 ]. push_back ( a1 ); } else { g [ a1 + n ]. push_back ( a2 ); g [ a2 + n ]. push_back ( a1 ); } } for ( int i = 0 ; i < n * 2 ; i ++ ){ if ( ! dfn [ i ]){ Tarjan ( i ); } } int flag = 0 ; for ( int i = 0 ; i < n ; i ++ ){ if ( tag [ i ] == tag [ i + n ]){ printf ( \"NO \\n \" ); flag = 1 ; break ; } } if ( ! flag ) printf ( \"YES \\n \" ); } }","title":"Party"},{"location":"graph/2-SAT/#peaceful-commission","text":"HDU - 1814 \u9898\u610f\uff1a\u5c31\u662f\u8bf4\u7684\u5b57\u5178\u5e8f\u6700\u4e0b\u76842SAT\uff0c\u5c31\u662fn\u4e2a\u653f\u515a\uff0c\u7136\u540e\u6bcf\u4e2a\u653f\u515a\u7684\u67092\u4eba\uff0c\u7136\u540e\u6709\u4ec7\u89c6\u5173\u7cfb\uff0c\u95ee\u80fd\u5426\u6bcf\u4e2a\u653f\u515a\u51fa\u4e00\u4e2a\u4eba\uff0c\u51d1\u4e00\u4e2a\u4f1a\u8bae \u601d\u8def\uff1a 2SAT\u548c\u4e0a\u9762\u601d\u8def\u4e00\u6837\uff0c\u4e0d\u8fc7\u6211\u4eec\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u9009\u62e9dfs,dfs\u662f\u4e00\u79cd\u66b4\u529b\u89e3\u6cd5\uff0c\u590d\u6742\u5ea6 N^2 N^2 \uff0c\u7136\u540e\u5c31\u662f\u66b4\u529b\u5148\u641c\u5c0f\u7684\uff0c\u7136\u540e\u7531\u4e8e\u8fd9\u91cc\u9898\u76ee\u7ed9\u7684\u7279\u6b8a\u6027\u6211\u4eec\u7684\u4e24\u4e2a\u57df\uff0c\u5206\u522b\u8868\u793a\u4e3ax\u548cx^1\u6210\u5bf9\u53d8\u6362\uff0c\u5982\u679c\u662f0-n\u548cn-2n\uff0c\u6211\u4eec\u9700\u8981\u5728\u5f00\u4e00\u4e2aopp\u6570\u7ec4 AC\u4ee3\u7801 \u57fa\u672c\u662f\u6a21\u7248\uff0c\u4ee5\u540e\u53ef\u4ee5\u62ff\u6765\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #include <bits/stdc++.h> using namespace std ; const int maxn = 26005 ; vector < int > g [ maxn ]; int tag [ maxn ]; int vis [ maxn ]; //\u8bb0\u5f55\u8fd9\u6b21\u641c\u7d22\u4e86\u90a3\u4e9b\u70b9 int num = 0 ; int n , m ; bool dfs ( int x ){ if ( tag [ x ^ 1 ]) return false ; if ( tag [ x ]) return true ; vis [ num ++ ] = x ; tag [ x ] = 1 ; for ( int i = 0 ; i < ( int ) g [ x ]. size (); i ++ ){ int v = g [ x ][ i ]; if ( ! dfs ( v )){ return false ; } } return true ; } bool _SAT (){ for ( int i = 0 ; i < 2 * n ; i += 2 ){ if ( ! tag [ i ] &&! tag [ i ^ 1 ]){ num = 0 ; if ( ! dfs ( i )){ while ( num ){ tag [ vis [ -- num ]] = 0 ; } if ( ! dfs ( i ^ 1 )) return false ; } } } return true ; } void inits (){ for ( int i = 0 ; i <= 2 * n ; i ++ ){ g [ i ]. clear (); tag [ i ] = 0 ; vis [ i ] = 0 ; } } int main (){ while ( ~ scanf ( \"%d%d\" , & n , & m )){ inits (); for ( int i = 0 ; i < m ; i ++ ){ int a , b ; scanf ( \"%d%d\" , & a , & b ); a -- ; b -- ; g [ a ]. push_back ( b ^ 1 ); g [ b ]. push_back ( a ^ 1 ); } if ( _SAT ()){ for ( int i = 0 ; i < n * 2 ; i += 2 ){ if ( tag [ i ]){ printf ( \"%d \\n \" , i + 1 ); } else printf ( \"%d \\n \" , i + 2 ); } } else { printf ( \"NIE \\n \" ); } } }","title":"Peaceful Commission"},{"location":"graph/LCA/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a zrz \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u5173\u4e8e\u79bb\u7ebf\u548c\u5728\u7ebf \u00b6 \u79bb\u7ebf\u7b97\u6cd5\u5176\u5b9e\u5c31\u662f\u5c06\u591a\u4e2a\u8be2\u95ee\u4e00\u6b21\u6027\u89e3\u51b3\u3002\u79bb\u7ebf\u7b97\u6cd5\u5f80\u5f80\u662f\u4e0e\u5728\u7ebf\u7b97\u6cd5\u76f8\u5bf9\u7684\u3002\u4f8b\u5982\u6c42LCA\u7684\u7b97\u6cd5\u4e2d\uff0c\u6811\u4e0a\u500d\u589e\u5c5e\u4e8e\u5728\u7ebf\u7b97\u6cd5\uff0c\u5728\u5bf9\u6811\u8fdb\u884cO(n)\u9884\u5904\u7406\u540e\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7528 O(log_2n) O(log_2n) \u590d\u6742\u5ea6\u56de\u7b54\u3002\u800c\u79bb\u7ebf\u7684Tarjan\u7b97\u6cd5\u5219\u662f\u7528 O(n+q) O(n+q) \u65f6\u95f4\u5c06\u8be2\u95ee\u4e00\u6b21\u6027\u5168\u90e8\u56de\u7b54\u3002 \u6734\u7d20\u7b97\u6cd5 \u00b6 \u5411\u4e0a\u6807\u8bb0\u6cd5 Tarjan \u00b6 Tarjan\u7684\u57fa\u672c\u601d\u60f3\u5176\u5b9e\u7684\u5c31\u662f\u60f3\u4e0a\u6807\u8bb0\u6cd5\u7684\u4f18\u5316\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u4f18\u5316\uff0c\u5c31\u662f\u628a\u56de\u6eaf\u7684\u70b9\u7684\u5408\u5e76\u5230\u7236\u8282\u70b9\uff0c\u96be\u70b9\u5176\u5b9e\u5728\u4e8e\u8bb0\u5f55\u95fb\u8baf\u548cdfs\u51fd\u6570\u7684\u7ed3\u6784 \u590d\u6742\u5ea6 O(n+m) O(n+m) problem How far away \uff1f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 #include <bits/stdc++.h> #define ms(x,y) memset(x,y,sizeof(x)) using namespace std ; const int N = 40005 ; int n , m ; struct edge { int v , next , w ; } e [ N << 1 ]; int head [ N ], cnt ; int vis [ N ], dis [ N ]; int ans [ N ]; void add ( int u , int v , int w ){ e [ cnt ]. v = v ; e [ cnt ]. w = w ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } int fa [ N ]; int get ( int x ){ if ( x == fa [ x ]) return x ; else return fa [ x ] = get ( fa [ x ]); } vector < int > qu [ N ]; vector < int > qu_id [ N ]; void inits (){ cnt = 0 ; for ( int i = 0 ; i <= n ; i ++ ){ fa [ i ] = i ; ans [ i ] = 0 ; head [ i ] = -1 ; vis [ i ] = 0 ; dis [ i ] = 0 ; qu [ i ]. clear (); qu_id [ i ]. clear (); } } void add_query ( int x , int y , int id ){ qu [ x ]. push_back ( y ); qu_id [ x ]. push_back ( id ); qu [ y ]. push_back ( x ); qu_id [ y ]. push_back ( id ); } void Tarjan ( int x , int father ){ for ( int i = head [ x ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; int w = e [ i ]. w ; if ( v == father ) continue ; dis [ v ] = dis [ x ] + w ; Tarjan ( v , x ); fa [ v ] = x ; } for ( int i = 0 ; i < qu [ x ]. size (); i ++ ){ int y = qu [ x ][ i ]; if ( vis [ y ] == 1 ){ int lca = get ( y ); ans [ qu_id [ x ][ i ]] = dis [ x ] + dis [ y ] -2 * dis [ lca ]; } } vis [ x ] = 1 ; //\u56de\u6eaf\u7684\u65f6\u5019\u8981\u6807\u8bb0\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u904d\u5386\u8fc7\u5e76\u4e14\u56de\u6eaf\u4e86 } int main (){ int T ; cin >> T ; while ( T -- ){ scanf ( \"%d%d\" , & n , & m ); inits (); for ( int i = 0 ; i < n -1 ; i ++ ){ int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); add ( u , v , w ); add ( v , u , w ); } for ( int i = 0 ; i < m ; i ++ ){ int x , y ; scanf ( \"%d%d\" , & x , & y ); add_query ( x , y , i ); } Tarjan ( 1 , 0 ); for ( int i = 0 ; i < m ; i ++ ){ printf ( \"%d \\n \" , ans [ i ]); } } } P3379\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148(LCA) Tarjan(\u79bb\u7ebf)\u7b97\u6cd5 \u76f4\u63a5\u7684\u6a21\u677f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 #include <bits/stdc++.h> using namespace std ; const int maxn = 500005 ; int head [ maxn ], cnt = 0 ; int fa [ maxn ], vis [ maxn ], ans [ maxn ]; struct edge { int u , v , next ; } e [ maxn << 1 ]; struct note { int node , id ; }; //\u8be2\u95ee\u4ee5\u7ed3\u6784\u4f53\u5f62\u5f0f\u4fdd\u5b58 vector < note > ques [ maxn ]; void add ( int u , int v ){ e [ cnt ]. u = u ; e [ cnt ]. v = v ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } int get ( int x ){ if ( fa [ x ] == x ) return x ; else return fa [ x ] = get ( fa [ x ]); //\u8def\u5f84\u538b\u7f29\u9700\u8981 } void dfs ( int u , int from ){ for ( int i = head [ u ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; if ( v == from ) continue ; dfs ( v , u ); fa [ v ] = u ; } int len = ques [ u ]. size (); for ( int i = 0 ; i < len ; i ++ ) if ( vis [ ques [ u ][ i ]. node ]) ans [ ques [ u ][ i ]. id ] = get ( ques [ u ][ i ]. node ); //\u8bbf\u95ee\u5b8c\u6bd5\u56de\u6eaf vis [ u ] = 1 ; } int main (){ memset ( head , -1 , sizeof ( head )); int n , m , s ; cin >> n >> m >> s ; for ( int i = 0 ; i <= n ; i ++ ) fa [ i ] = i ; for ( int i = 0 ; i < n -1 ; i ++ ){ int x , y ; scanf ( \"%d%d\" , & x , & y ); add ( x , y ); add ( y , x ); } for ( int i = 0 ; i < m ; i ++ ){ int x , y ; scanf ( \"%d%d\" , & x , & y ); note no ; //\u8bf4\u8bf4\u8fd9\u91cc\uff0cid\u8bb0\u5f55\u4e86\u7b2c\u51e0\u4e2a\u88ab\u8be2\u95ee no . node = y ; //node\u8868\u793a\u7b2cx\u70b9\u4e0e\u90a3\u4e2a\u70b9\u6709\u5173\u8054 no . id = i ; ques [ x ]. push_back ( no ); no . node = x ; //\u8981\u5165\u961f\u4e24\u6b21 no . id = i ; ques [ y ]. push_back ( no ); } dfs ( s , 0 ); for ( int i = 0 ; i < m ; i ++ ){ cout << ans [ i ] << endl ; } } \u5728\u7ebf\u500d\u589elca \u00b6 \u590d\u6742\u5ea6\uff1a\u521d\u59cb\u5316 O(n) O(n) \u95ee\u8baf O(logn) O(logn) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 int n , m ; int dis [ N ]; //\u8fd9\u4e2a\u662f\u8bb0\u5f55\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff08\u53ef\u4ee5\u4e0d\u8981\uff09 int d [ N ]; //\u8fd9\u4e2a\u662f\u8bb0\u5f55\u5c42\u6570\uff08\u6df1\u5ea6\uff09\uff0c\u7528\u4e8elca\u5411\u4e0a\u500d\u589e int f [ N ][ 30 ]; //\u500d\u589e\u6570\u7ec4 int t ; void bfs ( int x ){ //\u904d\u5386\u4e00\u904d\u9884\u5904\u7406 queue < int > q ; q . push ( x ); d [ x ] = 1 ; while ( ! q . empty ()){ int now = q . front (); q . pop (); for ( int i = head [ now ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; int w = e [ i ]. w ; if ( d [ v ]) continue ; d [ v ] = d [ now ] + 1 ; dis [ v ] = dis [ now ] + w ; f [ v ][ 0 ] = now ; for ( int i = 1 ; i < t ; i ++ ){ f [ v ][ i ] = f [ f [ v ][ i -1 ]][ i -1 ]; } q . push ( v ); } } } int lca ( int x , int y ){ if ( d [ x ] > d [ y ]) swap ( x , y ); for ( int i = t ; i >= 0 ; i -- ){ if ( d [ f [ y ][ i ]] >= d [ x ]) y = f [ y ][ i ]; } if ( x == y ) return x ; for ( int i = t ; i >= 0 ; i -- ){ if ( f [ x ][ i ] != f [ y ][ i ]){ x = f [ x ][ i ]; y = f [ y ][ i ]; } } return f [ x ][ 0 ]; }","title":"LCA"},{"location":"graph/LCA/#_1","text":"\u79bb\u7ebf\u7b97\u6cd5\u5176\u5b9e\u5c31\u662f\u5c06\u591a\u4e2a\u8be2\u95ee\u4e00\u6b21\u6027\u89e3\u51b3\u3002\u79bb\u7ebf\u7b97\u6cd5\u5f80\u5f80\u662f\u4e0e\u5728\u7ebf\u7b97\u6cd5\u76f8\u5bf9\u7684\u3002\u4f8b\u5982\u6c42LCA\u7684\u7b97\u6cd5\u4e2d\uff0c\u6811\u4e0a\u500d\u589e\u5c5e\u4e8e\u5728\u7ebf\u7b97\u6cd5\uff0c\u5728\u5bf9\u6811\u8fdb\u884cO(n)\u9884\u5904\u7406\u540e\uff0c\u6bcf\u4e2a\u8be2\u95ee\u7528 O(log_2n) O(log_2n) \u590d\u6742\u5ea6\u56de\u7b54\u3002\u800c\u79bb\u7ebf\u7684Tarjan\u7b97\u6cd5\u5219\u662f\u7528 O(n+q) O(n+q) \u65f6\u95f4\u5c06\u8be2\u95ee\u4e00\u6b21\u6027\u5168\u90e8\u56de\u7b54\u3002","title":"\u5173\u4e8e\u79bb\u7ebf\u548c\u5728\u7ebf"},{"location":"graph/LCA/#_2","text":"\u5411\u4e0a\u6807\u8bb0\u6cd5","title":"\u6734\u7d20\u7b97\u6cd5"},{"location":"graph/LCA/#tarjan","text":"Tarjan\u7684\u57fa\u672c\u601d\u60f3\u5176\u5b9e\u7684\u5c31\u662f\u60f3\u4e0a\u6807\u8bb0\u6cd5\u7684\u4f18\u5316\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u4f18\u5316\uff0c\u5c31\u662f\u628a\u56de\u6eaf\u7684\u70b9\u7684\u5408\u5e76\u5230\u7236\u8282\u70b9\uff0c\u96be\u70b9\u5176\u5b9e\u5728\u4e8e\u8bb0\u5f55\u95fb\u8baf\u548cdfs\u51fd\u6570\u7684\u7ed3\u6784 \u590d\u6742\u5ea6 O(n+m) O(n+m) problem How far away \uff1f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 #include <bits/stdc++.h> #define ms(x,y) memset(x,y,sizeof(x)) using namespace std ; const int N = 40005 ; int n , m ; struct edge { int v , next , w ; } e [ N << 1 ]; int head [ N ], cnt ; int vis [ N ], dis [ N ]; int ans [ N ]; void add ( int u , int v , int w ){ e [ cnt ]. v = v ; e [ cnt ]. w = w ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } int fa [ N ]; int get ( int x ){ if ( x == fa [ x ]) return x ; else return fa [ x ] = get ( fa [ x ]); } vector < int > qu [ N ]; vector < int > qu_id [ N ]; void inits (){ cnt = 0 ; for ( int i = 0 ; i <= n ; i ++ ){ fa [ i ] = i ; ans [ i ] = 0 ; head [ i ] = -1 ; vis [ i ] = 0 ; dis [ i ] = 0 ; qu [ i ]. clear (); qu_id [ i ]. clear (); } } void add_query ( int x , int y , int id ){ qu [ x ]. push_back ( y ); qu_id [ x ]. push_back ( id ); qu [ y ]. push_back ( x ); qu_id [ y ]. push_back ( id ); } void Tarjan ( int x , int father ){ for ( int i = head [ x ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; int w = e [ i ]. w ; if ( v == father ) continue ; dis [ v ] = dis [ x ] + w ; Tarjan ( v , x ); fa [ v ] = x ; } for ( int i = 0 ; i < qu [ x ]. size (); i ++ ){ int y = qu [ x ][ i ]; if ( vis [ y ] == 1 ){ int lca = get ( y ); ans [ qu_id [ x ][ i ]] = dis [ x ] + dis [ y ] -2 * dis [ lca ]; } } vis [ x ] = 1 ; //\u56de\u6eaf\u7684\u65f6\u5019\u8981\u6807\u8bb0\u8fd9\u4e2a\u70b9\u5df2\u7ecf\u904d\u5386\u8fc7\u5e76\u4e14\u56de\u6eaf\u4e86 } int main (){ int T ; cin >> T ; while ( T -- ){ scanf ( \"%d%d\" , & n , & m ); inits (); for ( int i = 0 ; i < n -1 ; i ++ ){ int u , v , w ; scanf ( \"%d%d%d\" , & u , & v , & w ); add ( u , v , w ); add ( v , u , w ); } for ( int i = 0 ; i < m ; i ++ ){ int x , y ; scanf ( \"%d%d\" , & x , & y ); add_query ( x , y , i ); } Tarjan ( 1 , 0 ); for ( int i = 0 ; i < m ; i ++ ){ printf ( \"%d \\n \" , ans [ i ]); } } } P3379\u3010\u6a21\u677f\u3011\u6700\u8fd1\u516c\u5171\u7956\u5148(LCA) Tarjan(\u79bb\u7ebf)\u7b97\u6cd5 \u76f4\u63a5\u7684\u6a21\u677f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 #include <bits/stdc++.h> using namespace std ; const int maxn = 500005 ; int head [ maxn ], cnt = 0 ; int fa [ maxn ], vis [ maxn ], ans [ maxn ]; struct edge { int u , v , next ; } e [ maxn << 1 ]; struct note { int node , id ; }; //\u8be2\u95ee\u4ee5\u7ed3\u6784\u4f53\u5f62\u5f0f\u4fdd\u5b58 vector < note > ques [ maxn ]; void add ( int u , int v ){ e [ cnt ]. u = u ; e [ cnt ]. v = v ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } int get ( int x ){ if ( fa [ x ] == x ) return x ; else return fa [ x ] = get ( fa [ x ]); //\u8def\u5f84\u538b\u7f29\u9700\u8981 } void dfs ( int u , int from ){ for ( int i = head [ u ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; if ( v == from ) continue ; dfs ( v , u ); fa [ v ] = u ; } int len = ques [ u ]. size (); for ( int i = 0 ; i < len ; i ++ ) if ( vis [ ques [ u ][ i ]. node ]) ans [ ques [ u ][ i ]. id ] = get ( ques [ u ][ i ]. node ); //\u8bbf\u95ee\u5b8c\u6bd5\u56de\u6eaf vis [ u ] = 1 ; } int main (){ memset ( head , -1 , sizeof ( head )); int n , m , s ; cin >> n >> m >> s ; for ( int i = 0 ; i <= n ; i ++ ) fa [ i ] = i ; for ( int i = 0 ; i < n -1 ; i ++ ){ int x , y ; scanf ( \"%d%d\" , & x , & y ); add ( x , y ); add ( y , x ); } for ( int i = 0 ; i < m ; i ++ ){ int x , y ; scanf ( \"%d%d\" , & x , & y ); note no ; //\u8bf4\u8bf4\u8fd9\u91cc\uff0cid\u8bb0\u5f55\u4e86\u7b2c\u51e0\u4e2a\u88ab\u8be2\u95ee no . node = y ; //node\u8868\u793a\u7b2cx\u70b9\u4e0e\u90a3\u4e2a\u70b9\u6709\u5173\u8054 no . id = i ; ques [ x ]. push_back ( no ); no . node = x ; //\u8981\u5165\u961f\u4e24\u6b21 no . id = i ; ques [ y ]. push_back ( no ); } dfs ( s , 0 ); for ( int i = 0 ; i < m ; i ++ ){ cout << ans [ i ] << endl ; } }","title":"Tarjan"},{"location":"graph/LCA/#lca","text":"\u590d\u6742\u5ea6\uff1a\u521d\u59cb\u5316 O(n) O(n) \u95ee\u8baf O(logn) O(logn) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 int n , m ; int dis [ N ]; //\u8fd9\u4e2a\u662f\u8bb0\u5f55\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff08\u53ef\u4ee5\u4e0d\u8981\uff09 int d [ N ]; //\u8fd9\u4e2a\u662f\u8bb0\u5f55\u5c42\u6570\uff08\u6df1\u5ea6\uff09\uff0c\u7528\u4e8elca\u5411\u4e0a\u500d\u589e int f [ N ][ 30 ]; //\u500d\u589e\u6570\u7ec4 int t ; void bfs ( int x ){ //\u904d\u5386\u4e00\u904d\u9884\u5904\u7406 queue < int > q ; q . push ( x ); d [ x ] = 1 ; while ( ! q . empty ()){ int now = q . front (); q . pop (); for ( int i = head [ now ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; int w = e [ i ]. w ; if ( d [ v ]) continue ; d [ v ] = d [ now ] + 1 ; dis [ v ] = dis [ now ] + w ; f [ v ][ 0 ] = now ; for ( int i = 1 ; i < t ; i ++ ){ f [ v ][ i ] = f [ f [ v ][ i -1 ]][ i -1 ]; } q . push ( v ); } } } int lca ( int x , int y ){ if ( d [ x ] > d [ y ]) swap ( x , y ); for ( int i = t ; i >= 0 ; i -- ){ if ( d [ f [ y ][ i ]] >= d [ x ]) y = f [ y ][ i ]; } if ( x == y ) return x ; for ( int i = t ; i >= 0 ; i -- ){ if ( f [ x ][ i ] != f [ y ][ i ]){ x = f [ x ][ i ]; y = f [ y ][ i ]; } } return f [ x ][ 0 ]; }","title":"\u5728\u7ebf\u500d\u589elca"},{"location":"graph/MST/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a zrz \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u5728\u5b66\u4e60\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u660e\u786e\u4e00\u4e0b\u5b9a\u4e49\uff1a 1.\u6811 2.\u751f\u6210\u6811 \u6700\u5c0f\u751f\u6210\u6811 \u00b6 \u6700\u5c0f\u751f\u6210\u6811\uff1a\u6211\u4eec\u5b9a\u4e49\u65e0\u5411\u8fde\u901a\u56fe\u7684 \u6700\u5c0f\u751f\u6210\u6811\uff08Minimum Spanning Tree\uff0cMST\uff09\u4e3a\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811\u3002 \u6ce8\u610f\uff1a\u53ea\u6709\u8fde\u901a\u56fe\u624d\u6709\u751f\u6210\u6811\uff0c\u800c\u5bf9\u4e8e\u975e\u8fde\u901a\u56fe\uff0c\u53ea\u5b58\u5728\u751f\u6210\u68ee\u6797\u3002 Kruskal \u7b97\u6cd5 \u00b6 \u6700\u4e3a\u5e38\u7528\u7684\u6700\u5c0f\u751f\u6210\u6811\u5199\u6cd5 \u601d\u60f3\uff1a\u8d2a\u5fc3\u7684\u52a0\u8fb9 \u590d\u6742\u5ea6\uff1a O(mlog(m)) O(mlog(m)) \u9002\u7528\u6761\u4ef6\uff1a\u9002\u7528\u4e8e\u7a00\u758f\u56fe \u7ed9\u5b9an\u4e2a\u70b9\u7684\u56fe\u548c\u82e5\u5e72\u6761\u8fb9\uff0c\u9996\u5148\u5c06\u6240\u6709\u8fb9\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5728\u5c06\u56fe\u4e2d\u6240\u6709\u8fb9\u6e05\u7a7a\uff0c\u679a\u4e3e\u6bcf\u4e00\u6761\u6392\u597d\u5e8f\u7684\u8fb9\uff0c\u5c06\u8fb9\u52a0\u5165\u56fe\u4e2d\uff0c\u82e5\u662f\u6210\u73af\uff0c\u5219\u4e0d\u80fd\u52a0\u8fd9\u6761\u8fb9\uff0c\u82e5\u662f\u65e0\u73af\uff0c\u5c31\u52a0\u4e0a\u8fd9\u6761\u8fb9\uff0c\u4e00\u76f4\u52a0\u5230\u56fe\u4e2d\u6709n-1\u6761\u8fb9\u4e3a\u6b62\u3002\u53ef\u4ee5\u8bc1\u660e\u6700\u540e\u7684\u56fe\u4e3a\u539f\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002 \u53c2\u8003\u4ee3\u7801\uff1a \u6ce8\u610f\u9700\u8981\u5e76\u67e5\u96c6\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct nod { int u , v , w ; } e [ 200005 ]; //\u8fd9\u91cc\u4e0d\u662f\u524d\u5411\u884c\u7684\u5b58\u8fb9\u65b9\u6cd5\uff0c\u53ea\u662f\u6b63\u957f\u7684\u5b58\u8fb9 bool cmp ( nod a , nod b ){ return a . w < b . w ; } int fa [ maxn ]; int get ( int x ){ if ( fa [ x ] == x ) return x ; else return fa [ x ] = get ( fa [ x ]); } bool merge ( int x , int y ){ int p = get ( x ); int q = get ( y ); if ( p != q ){ fa [ p ] = q ; return true ; } return false ; } \u4e3b\u51fd\u6570\u90e8\u5206 1 2 3 4 5 6 7 8 9 10 sort ( e , e + m , cmp ); //\u8d2a\u5fc3\u7684\u6392\u5e8f int ans = 0 , cnt = 0 ; for ( int i = 0 ; i < m ; i ++ ){ if ( cnt == n -1 ) break ; else if ( merge ( e [ i ]. u , e [ i ]. v )){ cnt ++ ; ans += e [ i ]. w ; } } Prime\u7b97\u6cd5 \u00b6 \u601d\u60f3\uff1a\u8d2a\u5fc3\u7684\u52a0\u70b9 \u590d\u6742\u5ea6\uff1a O((n+m)log(n)) O((n+m)log(n)) \u9002\u7528\u6761\u4ef6\uff1a\u9002\u7528\u4e8e\u7a20\u5bc6\u56fe \u6ce8\u610f\u5982\u679c\u6211\u4eec\u66b4\u529b\u7ef4\u62a4\u7684\u590d\u6742\u5ea6\u662f O(n^2+m) O(n^2+m) \u8fd9\u91cc\u91c7\u7528\u4e86\u5806\u4f18\u5316,\u5927\u5bb6\u53ef\u4ee5\u7c7b\u6bd4Dijkstra\u7684\u5806\u4f18\u5316\u53bb\u7406\u89e3 \u7ef4\u62a4\u4e86\u4e00\u4e2a\u9009\u53d6\u70b9\u7684\u96c6\u5408\uff0c\u7136\u540e\u6bcf\u6b21\u627e\u51fa\u79bb\u8fd9\u4e2a\u96c6\u5408\u4e2d\u6240\u6709\u70b9\u4e2d\u6700\u8fd1\u7684\u4e00\u4e2a\u70b9\u52a0\u5165\u8be5\u96c6\u5408\uff0c\u6700\u7ec8\u5f97\u5230\u6700\u5c0f\u751f\u6210\u6811\u3002 \u53c2\u8003\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 struct Node { int pos , val ; bool operator < ( const Node & a ) const { return a . val < val ; } }; priority_queue < Node > q ; int dis [ 105 ]; void Prime ( int s ){ Node x , y ; dis [ s ] = 0 ; x . val = dis [ s ]; x . pos = s ; q . push ( x ); do { x = q . top (); q . pop (); int u = x . pos ; sum += dis [ u ]; dis [ u ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ if ( Map [ u ][ i ] + dis [ u ] < dis [ i ]){ dis [ i ] = Map [ u ][ i ] + dis [ u ]; y . val = dis [ i ]; y . pos = i ; q . push ( y ); } } } while ( ! q . empty ()); } \u6b21\u5c0f\u751f\u6210\u6811 \u00b6 \u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811 \u00b6 \u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u6ee1\u8db3\u8fb9\u6743\u548c \u5927\u4e8e\u7b49\u4e8e \u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u548c\u7684\u751f\u6210\u6811 \u6c42\u89e3\u65b9\u6cd5 \u00b6 \u6c42\u51fa\u65e0\u5411\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811 T T \uff0c\u8bbe\u5176\u6743\u503c\u548c\u4e3a M M \u904d\u5386\u6bcf\u6761\u672a\u88ab\u9009\u4e2d\u7684\u8fb9e{u,v,w}\uff0c\u627e\u5230 T T \u4e2d u u \u5230 v v \u8def\u5f84\u4e0a\u8fb9\u6743\u6700\u5927\u7684\u4e00\u6761\u8fb9 e'={s,t,w'} e'={s,t,w'} \uff0c\u5219\u5728 T T \u4e2d\u4ee5 e e \u66ff\u6362 e' e' \uff0c\u53ef\u5f97\u4e00\u68f5\u6743\u503c\u548c\u4e3a M' = M + w - w' M' = M + w - w' \u7684\u751f\u6210\u6811 T' T' . \u5bf9\u6240\u6709\u66ff\u6362\u5f97\u5230\u7684\u7b54\u6848 M' M' \u53d6\u6700\u5c0f\u503c\u5373\u53ef \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u500d\u589e\u6765\u7ef4\u62a4\uff0c\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684 2^i 2^i \u7ea7\u7956\u5148\u53ca\u5230\u8fbe\u5176 2^i 2^i \u7ea7\u7956\u5148\u8def\u5f84\u4e0a\u6700\u5927\u7684\u8fb9\u6743\uff0c\u8fd9\u6837\u5728\u500d\u589e\u6c42 LCA \u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u76f4\u63a5\u6c42\u5f97\u3002 \u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811 \u00b6 \u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u6ee1\u8db3\u8fb9\u6743\u548c \u4e25\u683c\u5927\u4e8e \u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u548c\u7684\u751f\u6210\u6811 \u8003\u8651\u521a\u624d\u7684\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u6c42\u89e3\u8fc7\u7a0b\uff0c\u4e3a\u4ec0\u4e48\u6c42\u5f97\u7684\u89e3\u662f\u975e\u4e25\u683c\u7684\uff1f \u56e0\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u4fdd\u8bc1\u751f\u6210\u6811\u4e2d u u \u5230 v v \u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u6700\u5927\u503c\u4e00\u5b9a \u4e0d\u5927\u4e8e u u \u5176\u4ed6\u4ece v v \u5230 \u8def\u5f84\u7684\u8fb9\u6743\u6700\u5927\u503c\u3002\u6362\u8a00\u4e4b\uff0c\u5f53\u6211\u4eec\u7528\u4e8e\u66ff\u6362\u7684\u8fb9\u7684\u6743\u503c\u4e0e\u539f\u751f\u6210\u6811\u4e2d\u88ab\u66ff\u6362\u8fb9\u7684\u6743\u503c\u76f8\u7b49\u65f6\uff0c\u5f97\u5230\u7684\u6b21\u5c0f\u751f\u6210\u6811\u662f\u975e\u4e25\u683c\u7684\u3002 \u89e3\u51b3\u7684\u529e\u6cd5\u5f88\u81ea\u7136\uff1a\u6211\u4eec\u7ef4\u62a4\u5230 2^i 2^i \u7ea7\u7956\u5148\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u7684\u540c\u65f6\u7ef4\u62a4 \u4e25\u683c\u6b21\u5927\u8fb9\u6743 \uff0c\u5f53\u7528\u4e8e\u66ff\u6362\u7684\u8fb9\u7684\u6743\u503c\u4e0e\u539f\u751f\u6210\u6811\u4e2d\u8def\u5f84\u6700\u5927\u8fb9\u6743\u76f8\u7b49\u65f6\uff0c\u6211\u4eec\u7528\u4e25\u683c\u6b21\u5927\u503c\u6765\u66ff\u6362\u5373\u53ef\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u500d\u589e\u6c42\u89e3\uff0c\u590d\u6742\u5ea6 O(mlog(m)) O(mlog(m)) \u3002 \u74f6\u9888\u751f\u6210\u6811 \u00b6 \u65e0\u5411\u56fe G G \u7684\u74f6\u9888\u751f\u6210\u6811\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u5b83\u7684\u6700\u5927\u7684\u8fb9\u6743\u503c\u5728 G G \u7684\u6240\u6709\u751f\u6210\u6811\u4e2d\u6700\u5c0f\u3002 \u6027\u8d28 \u00b6 \u6700\u5c0f\u751f\u6210\u6811\u662f\u74f6\u9888\u751f\u6210\u6811\u7684\u5145\u5206\u4e0d\u5fc5\u8981\u6761\u4ef6\u3002\u5373\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u662f\u74f6\u9888\u751f\u6210\u6811\uff0c\u800c\u74f6\u9888\u751f\u6210\u6811\u4e0d\u4e00\u5b9a\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002 problem POJ 2395 Out of Hay \u6c42\u6700\u5c0f\u751f\u6210\u6811\u89e3\u51b3 \u6700\u5c0f\u74f6\u9888\u8def \u00b6 \u65e0\u5411\u56fe G G \u4e2d x \u5230 y \u7684\u6700\u5c0f\u74f6\u9888\u8def\u662f\u8fd9\u6837\u7684\u4e00\u7c7b\u7b80\u5355\u8def\u5f84\uff0c\u6ee1\u8db3\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5927\u7684\u8fb9\u6743\u5728\u6240\u6709 x \u5230 y \u7684\u7b80\u5355\u8def\u5f84\u4e2d\u662f\u6700\u5c0f\u7684\u3002 \u6839\u636e\u6700\u5c0f\u751f\u6210\u6811\u5b9a\u4e49\uff0cx \u5230 y \u7684\u6700\u5c0f\u74f6\u9888\u8def\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u7b49\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u4e0a x \u5230 y \u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u3002\u867d\u7136\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u552f\u4e00\uff0c\u4f46\u662f\u6bcf\u79cd\u6700\u5c0f\u751f\u6210\u6811 x \u5230 y \u8def\u5f84\u7684\u6700\u5927\u8fb9\u6743\u76f8\u540c\u4e14\u4e3a\u6700\u5c0f\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u79cd\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684 x \u5230 y \u7684\u8def\u5f84\u5747\u4e3a\u6700\u5c0f\u74f6\u9888\u8def\u3002 \u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u6700\u5c0f\u74f6\u9888\u8def\u90fd\u5b58\u5728\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u6ee1\u8db3\u5176\u4e3a\u6811\u4e0a x \u5230 y \u7684\u7b80\u5355\u8def\u5f84\u3002 \u4f8b\u5982\u4e0b\u56fe\uff1a 1 \u5230 4 \u7684\u6700\u5c0f\u74f6\u9888\u8def\u663e\u7136\u6709\u4ee5\u4e0b\u4e24\u6761\uff1a1-2-3-4\u30021-3-4\u3002 \u4f46\u662f\uff0c1-2 \u4e0d\u4f1a\u51fa\u73b0\u5728\u4efb\u610f\u4e00\u79cd\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u3002 \u5e94\u7528 \u00b6 \u7531\u4e8e\u6700\u5c0f\u74f6\u9888\u8def\u4e0d\u552f\u4e00\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4f1a\u8be2\u95ee\u6700\u5c0f\u74f6\u9888\u8def\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u6c42\u6700\u5c0f\u751f\u6210\u6811\u94fe\u4e0a\u7684 max max \u3002 \u500d\u589e\u3001\u6811\u5256\u90fd\u53ef\u4ee5\u89e3\u51b3\uff0c\u8fd9\u91cc\u4e0d\u518d\u5c55\u5f00\u3002 \u53c2\u8003\u8d44\u6599 \u00b6 \u56fe\u8bba OI Wiki","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"graph/MST/#_1","text":"\u6700\u5c0f\u751f\u6210\u6811\uff1a\u6211\u4eec\u5b9a\u4e49\u65e0\u5411\u8fde\u901a\u56fe\u7684 \u6700\u5c0f\u751f\u6210\u6811\uff08Minimum Spanning Tree\uff0cMST\uff09\u4e3a\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u751f\u6210\u6811\u3002 \u6ce8\u610f\uff1a\u53ea\u6709\u8fde\u901a\u56fe\u624d\u6709\u751f\u6210\u6811\uff0c\u800c\u5bf9\u4e8e\u975e\u8fde\u901a\u56fe\uff0c\u53ea\u5b58\u5728\u751f\u6210\u68ee\u6797\u3002","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"graph/MST/#kruskal","text":"\u6700\u4e3a\u5e38\u7528\u7684\u6700\u5c0f\u751f\u6210\u6811\u5199\u6cd5 \u601d\u60f3\uff1a\u8d2a\u5fc3\u7684\u52a0\u8fb9 \u590d\u6742\u5ea6\uff1a O(mlog(m)) O(mlog(m)) \u9002\u7528\u6761\u4ef6\uff1a\u9002\u7528\u4e8e\u7a00\u758f\u56fe \u7ed9\u5b9an\u4e2a\u70b9\u7684\u56fe\u548c\u82e5\u5e72\u6761\u8fb9\uff0c\u9996\u5148\u5c06\u6240\u6709\u8fb9\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5728\u5c06\u56fe\u4e2d\u6240\u6709\u8fb9\u6e05\u7a7a\uff0c\u679a\u4e3e\u6bcf\u4e00\u6761\u6392\u597d\u5e8f\u7684\u8fb9\uff0c\u5c06\u8fb9\u52a0\u5165\u56fe\u4e2d\uff0c\u82e5\u662f\u6210\u73af\uff0c\u5219\u4e0d\u80fd\u52a0\u8fd9\u6761\u8fb9\uff0c\u82e5\u662f\u65e0\u73af\uff0c\u5c31\u52a0\u4e0a\u8fd9\u6761\u8fb9\uff0c\u4e00\u76f4\u52a0\u5230\u56fe\u4e2d\u6709n-1\u6761\u8fb9\u4e3a\u6b62\u3002\u53ef\u4ee5\u8bc1\u660e\u6700\u540e\u7684\u56fe\u4e3a\u539f\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002 \u53c2\u8003\u4ee3\u7801\uff1a \u6ce8\u610f\u9700\u8981\u5e76\u67e5\u96c6\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct nod { int u , v , w ; } e [ 200005 ]; //\u8fd9\u91cc\u4e0d\u662f\u524d\u5411\u884c\u7684\u5b58\u8fb9\u65b9\u6cd5\uff0c\u53ea\u662f\u6b63\u957f\u7684\u5b58\u8fb9 bool cmp ( nod a , nod b ){ return a . w < b . w ; } int fa [ maxn ]; int get ( int x ){ if ( fa [ x ] == x ) return x ; else return fa [ x ] = get ( fa [ x ]); } bool merge ( int x , int y ){ int p = get ( x ); int q = get ( y ); if ( p != q ){ fa [ p ] = q ; return true ; } return false ; } \u4e3b\u51fd\u6570\u90e8\u5206 1 2 3 4 5 6 7 8 9 10 sort ( e , e + m , cmp ); //\u8d2a\u5fc3\u7684\u6392\u5e8f int ans = 0 , cnt = 0 ; for ( int i = 0 ; i < m ; i ++ ){ if ( cnt == n -1 ) break ; else if ( merge ( e [ i ]. u , e [ i ]. v )){ cnt ++ ; ans += e [ i ]. w ; } }","title":"Kruskal \u7b97\u6cd5"},{"location":"graph/MST/#prime","text":"\u601d\u60f3\uff1a\u8d2a\u5fc3\u7684\u52a0\u70b9 \u590d\u6742\u5ea6\uff1a O((n+m)log(n)) O((n+m)log(n)) \u9002\u7528\u6761\u4ef6\uff1a\u9002\u7528\u4e8e\u7a20\u5bc6\u56fe \u6ce8\u610f\u5982\u679c\u6211\u4eec\u66b4\u529b\u7ef4\u62a4\u7684\u590d\u6742\u5ea6\u662f O(n^2+m) O(n^2+m) \u8fd9\u91cc\u91c7\u7528\u4e86\u5806\u4f18\u5316,\u5927\u5bb6\u53ef\u4ee5\u7c7b\u6bd4Dijkstra\u7684\u5806\u4f18\u5316\u53bb\u7406\u89e3 \u7ef4\u62a4\u4e86\u4e00\u4e2a\u9009\u53d6\u70b9\u7684\u96c6\u5408\uff0c\u7136\u540e\u6bcf\u6b21\u627e\u51fa\u79bb\u8fd9\u4e2a\u96c6\u5408\u4e2d\u6240\u6709\u70b9\u4e2d\u6700\u8fd1\u7684\u4e00\u4e2a\u70b9\u52a0\u5165\u8be5\u96c6\u5408\uff0c\u6700\u7ec8\u5f97\u5230\u6700\u5c0f\u751f\u6210\u6811\u3002 \u53c2\u8003\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 struct Node { int pos , val ; bool operator < ( const Node & a ) const { return a . val < val ; } }; priority_queue < Node > q ; int dis [ 105 ]; void Prime ( int s ){ Node x , y ; dis [ s ] = 0 ; x . val = dis [ s ]; x . pos = s ; q . push ( x ); do { x = q . top (); q . pop (); int u = x . pos ; sum += dis [ u ]; dis [ u ] = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ if ( Map [ u ][ i ] + dis [ u ] < dis [ i ]){ dis [ i ] = Map [ u ][ i ] + dis [ u ]; y . val = dis [ i ]; y . pos = i ; q . push ( y ); } } } while ( ! q . empty ()); }","title":"Prime\u7b97\u6cd5"},{"location":"graph/MST/#_2","text":"","title":"\u6b21\u5c0f\u751f\u6210\u6811"},{"location":"graph/MST/#_3","text":"\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u6ee1\u8db3\u8fb9\u6743\u548c \u5927\u4e8e\u7b49\u4e8e \u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u548c\u7684\u751f\u6210\u6811","title":"\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811"},{"location":"graph/MST/#_4","text":"\u6c42\u51fa\u65e0\u5411\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811 T T \uff0c\u8bbe\u5176\u6743\u503c\u548c\u4e3a M M \u904d\u5386\u6bcf\u6761\u672a\u88ab\u9009\u4e2d\u7684\u8fb9e{u,v,w}\uff0c\u627e\u5230 T T \u4e2d u u \u5230 v v \u8def\u5f84\u4e0a\u8fb9\u6743\u6700\u5927\u7684\u4e00\u6761\u8fb9 e'={s,t,w'} e'={s,t,w'} \uff0c\u5219\u5728 T T \u4e2d\u4ee5 e e \u66ff\u6362 e' e' \uff0c\u53ef\u5f97\u4e00\u68f5\u6743\u503c\u548c\u4e3a M' = M + w - w' M' = M + w - w' \u7684\u751f\u6210\u6811 T' T' . \u5bf9\u6240\u6709\u66ff\u6362\u5f97\u5230\u7684\u7b54\u6848 M' M' \u53d6\u6700\u5c0f\u503c\u5373\u53ef \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u500d\u589e\u6765\u7ef4\u62a4\uff0c\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684 2^i 2^i \u7ea7\u7956\u5148\u53ca\u5230\u8fbe\u5176 2^i 2^i \u7ea7\u7956\u5148\u8def\u5f84\u4e0a\u6700\u5927\u7684\u8fb9\u6743\uff0c\u8fd9\u6837\u5728\u500d\u589e\u6c42 LCA \u7684\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u76f4\u63a5\u6c42\u5f97\u3002","title":"\u6c42\u89e3\u65b9\u6cd5"},{"location":"graph/MST/#_5","text":"\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u8fb9\u6743\u548c\u6700\u5c0f\u7684\u6ee1\u8db3\u8fb9\u6743\u548c \u4e25\u683c\u5927\u4e8e \u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6743\u548c\u7684\u751f\u6210\u6811 \u8003\u8651\u521a\u624d\u7684\u975e\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811\u6c42\u89e3\u8fc7\u7a0b\uff0c\u4e3a\u4ec0\u4e48\u6c42\u5f97\u7684\u89e3\u662f\u975e\u4e25\u683c\u7684\uff1f \u56e0\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u4fdd\u8bc1\u751f\u6210\u6811\u4e2d u u \u5230 v v \u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u6700\u5927\u503c\u4e00\u5b9a \u4e0d\u5927\u4e8e u u \u5176\u4ed6\u4ece v v \u5230 \u8def\u5f84\u7684\u8fb9\u6743\u6700\u5927\u503c\u3002\u6362\u8a00\u4e4b\uff0c\u5f53\u6211\u4eec\u7528\u4e8e\u66ff\u6362\u7684\u8fb9\u7684\u6743\u503c\u4e0e\u539f\u751f\u6210\u6811\u4e2d\u88ab\u66ff\u6362\u8fb9\u7684\u6743\u503c\u76f8\u7b49\u65f6\uff0c\u5f97\u5230\u7684\u6b21\u5c0f\u751f\u6210\u6811\u662f\u975e\u4e25\u683c\u7684\u3002 \u89e3\u51b3\u7684\u529e\u6cd5\u5f88\u81ea\u7136\uff1a\u6211\u4eec\u7ef4\u62a4\u5230 2^i 2^i \u7ea7\u7956\u5148\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u7684\u540c\u65f6\u7ef4\u62a4 \u4e25\u683c\u6b21\u5927\u8fb9\u6743 \uff0c\u5f53\u7528\u4e8e\u66ff\u6362\u7684\u8fb9\u7684\u6743\u503c\u4e0e\u539f\u751f\u6210\u6811\u4e2d\u8def\u5f84\u6700\u5927\u8fb9\u6743\u76f8\u7b49\u65f6\uff0c\u6211\u4eec\u7528\u4e25\u683c\u6b21\u5927\u503c\u6765\u66ff\u6362\u5373\u53ef\u3002 \u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u500d\u589e\u6c42\u89e3\uff0c\u590d\u6742\u5ea6 O(mlog(m)) O(mlog(m)) \u3002","title":"\u4e25\u683c\u6b21\u5c0f\u751f\u6210\u6811"},{"location":"graph/MST/#_6","text":"\u65e0\u5411\u56fe G G \u7684\u74f6\u9888\u751f\u6210\u6811\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u751f\u6210\u6811\uff0c\u5b83\u7684\u6700\u5927\u7684\u8fb9\u6743\u503c\u5728 G G \u7684\u6240\u6709\u751f\u6210\u6811\u4e2d\u6700\u5c0f\u3002","title":"\u74f6\u9888\u751f\u6210\u6811"},{"location":"graph/MST/#_7","text":"\u6700\u5c0f\u751f\u6210\u6811\u662f\u74f6\u9888\u751f\u6210\u6811\u7684\u5145\u5206\u4e0d\u5fc5\u8981\u6761\u4ef6\u3002\u5373\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u662f\u74f6\u9888\u751f\u6210\u6811\uff0c\u800c\u74f6\u9888\u751f\u6210\u6811\u4e0d\u4e00\u5b9a\u662f\u6700\u5c0f\u751f\u6210\u6811\u3002 problem POJ 2395 Out of Hay \u6c42\u6700\u5c0f\u751f\u6210\u6811\u89e3\u51b3","title":"\u6027\u8d28"},{"location":"graph/MST/#_8","text":"\u65e0\u5411\u56fe G G \u4e2d x \u5230 y \u7684\u6700\u5c0f\u74f6\u9888\u8def\u662f\u8fd9\u6837\u7684\u4e00\u7c7b\u7b80\u5355\u8def\u5f84\uff0c\u6ee1\u8db3\u8fd9\u6761\u8def\u5f84\u4e0a\u7684\u6700\u5927\u7684\u8fb9\u6743\u5728\u6240\u6709 x \u5230 y \u7684\u7b80\u5355\u8def\u5f84\u4e2d\u662f\u6700\u5c0f\u7684\u3002 \u6839\u636e\u6700\u5c0f\u751f\u6210\u6811\u5b9a\u4e49\uff0cx \u5230 y \u7684\u6700\u5c0f\u74f6\u9888\u8def\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u7b49\u4e8e\u6700\u5c0f\u751f\u6210\u6811\u4e0a x \u5230 y \u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u3002\u867d\u7136\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u552f\u4e00\uff0c\u4f46\u662f\u6bcf\u79cd\u6700\u5c0f\u751f\u6210\u6811 x \u5230 y \u8def\u5f84\u7684\u6700\u5927\u8fb9\u6743\u76f8\u540c\u4e14\u4e3a\u6700\u5c0f\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u79cd\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684 x \u5230 y \u7684\u8def\u5f84\u5747\u4e3a\u6700\u5c0f\u74f6\u9888\u8def\u3002 \u4f46\u662f\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u6700\u5c0f\u74f6\u9888\u8def\u90fd\u5b58\u5728\u4e00\u68f5\u6700\u5c0f\u751f\u6210\u6811\u6ee1\u8db3\u5176\u4e3a\u6811\u4e0a x \u5230 y \u7684\u7b80\u5355\u8def\u5f84\u3002 \u4f8b\u5982\u4e0b\u56fe\uff1a 1 \u5230 4 \u7684\u6700\u5c0f\u74f6\u9888\u8def\u663e\u7136\u6709\u4ee5\u4e0b\u4e24\u6761\uff1a1-2-3-4\u30021-3-4\u3002 \u4f46\u662f\uff0c1-2 \u4e0d\u4f1a\u51fa\u73b0\u5728\u4efb\u610f\u4e00\u79cd\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u3002","title":"\u6700\u5c0f\u74f6\u9888\u8def"},{"location":"graph/MST/#_9","text":"\u7531\u4e8e\u6700\u5c0f\u74f6\u9888\u8def\u4e0d\u552f\u4e00\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u4f1a\u8be2\u95ee\u6700\u5c0f\u74f6\u9888\u8def\u4e0a\u7684\u6700\u5927\u8fb9\u6743\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u6c42\u6700\u5c0f\u751f\u6210\u6811\u94fe\u4e0a\u7684 max max \u3002 \u500d\u589e\u3001\u6811\u5256\u90fd\u53ef\u4ee5\u89e3\u51b3\uff0c\u8fd9\u91cc\u4e0d\u518d\u5c55\u5f00\u3002","title":"\u5e94\u7528"},{"location":"graph/MST/#_10","text":"\u56fe\u8bba OI Wiki","title":"\u53c2\u8003\u8d44\u6599"},{"location":"graph/bipartite-graph/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a DcmTruman \uff0c zrz \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u4e8c\u5206\u5339\u914d \u00b6 \u4e8c\u5206\u56fe \u00b6 \u4e8c\u5206\u56fe\uff1a\u53c8\u79f0\u4e8c\u90e8\u56fe\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5982\u679c\u56fe\u4e2d\u70b9\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e24\u7ec4\uff0c\u5e76\u4e14\u4f7f\u5f97\u6240\u6709\u8fb9\u90fd\u8de8\u8d8a\u7ec4\u7684\u8fb9\u754c\uff0c\u5219\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u51c6\u786e\u5730\u8bf4\uff1a\u628a\u4e00\u4e2a\u56fe\u7684\u9876\u70b9\u5212\u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u96c6 U \u548c V \uff0c\u4f7f\u5f97\u6bcf\u4e00\u6761\u8fb9\u90fd\u5206\u522b\u8fde\u63a5U\u3001V\u4e2d\u7684\u9876\u70b9\u3002\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u5212\u5206\uff0c\u5219\u6b64\u56fe\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002U\u3001V\u53ef\u5206\u522b\u79f0\u5de6\u90e8\u548c\u53f3\u90e8\u3002 \u4e8c\u5206\u56fe\u7684\u4e00\u4e2a\u7b49\u4ef7\u5b9a\u4e49\u662f\uff1a\u4e0d\u542b\u6709\u300c\u542b\u5947\u6570\u6761\u8fb9\u7684\u73af\u300d\u7684\u56fe\u3002 \u4f8b\u9898 \u00b6 \u6709 n n \u4e2a\u4eba\uff0c\u5176\u4e2d\u6709 m m \u5bf9\u5173\u7cfb (x,y) (x,y) \u8868\u793ax\u548cy\u4e92\u76f8\u4ec7\u6068\uff0c x x \u548c y y \u4e0d\u80fd\u51fa\u73b0\u5728\u540c\u4e00\u4e2a\u573a\u5408\u3002\u95ee\uff0c\u80fd\u4e0d\u80fd\u5c06\u8fd9 n n \u4e2a\u4eba\uff0c\u5206\u6210\u4e24\u7ec4\u4e14\u6bcf\u7ec4\u4e4b\u95f4\u4efb\u610f\u4e24\u4e2a\u4eba\u90fd\u4e0d\u4ec7\u6068\uff1f \u67d3\u8272\u6cd5\u5224\u5b9a\uff1a \u5c1d\u8bd5\u7528\u9ed1\u767d\u4e24\u79cd\u989c\u8272\u6807\u8bb0\u56fe\u4e0a\u7684\u8282\u70b9\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9\u88ab\u6807\u8bb0\u540e\uff0c\u4ed6\u7684\u6240\u6709\u76f8\u90bb\u7684\u8282\u70b9\u5e94\u8be5\u88ab\u6807\u8bb0\u4e3a\u4e0e\u5b83\u76f8\u53cd\u7684\u989c\u8272\u3002\u5982\u679c\u6807\u8bb0\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u4e86\u51b2\u7a81\uff0c\u8bf4\u660e\u56fe\u4e2d\u5b58\u5728\u5947\u73af\u3002 dfs\u904d\u5386\uff0c\u590d\u6742\u5ea6 O(n+m) O(n+m) 1 2 3 4 5 6 7 8 9 10 11 12 bool dfs ( int now , int col ) { color [ now ] = col ; for ( int i = head [ now ]; ~ i ; i = edge [ i ]. next ){ int to = edge [ i ]. to ; if ( color [ now ] == color [ to ]) return false ; if ( ! color [ to ]){ if ( ! dfs ( to , 3 - col )) return false ; } } return true ; } \u5339\u914d \u00b6 \u5339\u914d\uff1a\u5728\u56fe\u8bba\u4e2d\uff0c\u4e00\u4e2a\u300c\u5339\u914d\u300d\uff08matching\uff09\u662f\u4e00\u4e2a \u8fb9\u7684\u96c6\u5408 \uff0c\u5176\u4e2d\u4efb\u610f\u4e24\u6761\u8fb9\u90fd\u6ca1\u6709\u516c\u5171\u9876\u70b9\u3002\u53ef\u4ee5\u5c06\u56fe\u4e2d\u8fb9\u5206\u4e3a\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u3002\u70b9\u5206\u4e3a\u5339\u914d\u70b9\uff0c\u975e\u5339\u914d\u70b9 \u6700\u5927\u5339\u914d\uff1a\u4e00\u4e2a\u56fe\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u542b\u5339\u914d\u8fb9\u6570\u6700\u591a\u7684\u5339\u914d\uff0c\u79f0\u4e3a\u8fd9\u4e2a\u56fe\u7684\u6700\u5927\u5339\u914d\u3002 \u5b8c\u7f8e\u5339\u914d\uff1a\u7ed9\u5b9a\u4e00\u5f20\u4e8c\u5206\u56fe\uff0c\u5176\u5de6\u53f3\u8282\u70b9\u6570\u76f8\u540c\uff0c\u5747\u4e3a N N \u4e2a\u8282\u70b9\u3002\u5982\u679c\u6700\u5927\u5339\u914d\u5305\u542b N N \u6761\u8fb9\uff0c\u5219\u79f0\u8be5\u4e8c\u5206\u56fe\u5305\u542b\u5b8c\u7f8e\u5339\u914d\u3002 \u4ea4\u66ff\u8def\uff1a\u4ea4\u9519\u8def\uff0c\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u2026\u5f62\u6210\u7684\u8def\u5f84\u53eb\u4ea4\u66ff\u8def\u3002 \u589e\u5e7f\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u5982\u679c\u9014\u5f84\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\uff08\u51fa\u53d1\u7684\u70b9\u4e0d\u7b97\uff09\uff0c\u5219\u8fd9\u6761\u4ea4\u66ff\u8def\u79f0\u4e3a\u589e\u5e7f\u8def\uff08agumenting path\uff09\u3002 \u601d\u8003\uff1a \u6709n\u4e2a\u4eba\uff0c\u82e5\u5e72\u7537\u751f\uff0c\u82e5\u5e72\u5973\u751f\uff0c\u5176\u4e2d\u7537\u5973\u4e4b\u95f4\u6709m\u5bf9\u5173\u7cfb(x,y)\uff0c\u8868\u793ax\u3001y\u4e4b\u95f4\u6709\u597d\u611f\uff0c\u95ee\u4f60\u6700\u591a\u80fd\u6311\u591a\u5c11\u5bf9\u4eba\uff0c\u4f7f\u5f97\u6bcf\u4e00\u5bf9\u90fd\u662f\u6709\u597d\u611f\u7684\uff08\u6bcf\u4e2a\u4eba\u53ea\u80fd\u88ab\u6311\u4e00\u6b21\uff09 how? \u00b6 \u5308\u7259\u5229\u7b97\u6cd5\uff1a O(nm) O(nm) \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u53ef\u4ee5\u8f6c\u6362\u6210\u7f51\u7edc\u6d41\u6a21\u578b\u3002 \u8bf4\u660e\uff1a \u5c06\u6e90\u70b9\u8fde\u4e0a\u5de6\u8fb9\u6240\u6709\u70b9\uff0c\u53f3\u8fb9\u6240\u6709\u70b9\u8fde\u4e0a\u6c47\u70b9\uff0c\u5bb9\u91cf\u7686\u4e3a1\u3002\u539f\u6765\u7684\u6bcf\u6761\u8fb9\u4ece\u5de6\u5f80\u53f3\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e5f\u7686\u4e3a1\uff0c\u6700\u5927\u6d41\u5373\u6700\u5927\u5339\u914d\u3002 \u4f7f\u7528 Dinic \u7b97\u6cd5 \u6c42\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\uff0c\u590d\u6742\u5ea6 O(\\sqrt{n}m) O(\\sqrt{n}m) \u5308\u7259\u5229\u7b97\u6cd5\u6982\u5ff5 \u00b6 \u56de\u987e\u4e24\u4e2a\u6982\u5ff5\uff1a \u4ea4\u66ff\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u2026\u5f62\u6210\u7684\u8def\u5f84\u53eb\u4ea4\u66ff\u8def\u3002 \u589e\u5e7f\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u5982\u679c\u9014\u5f84\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\uff08\u51fa\u53d1\u7684\u70b9\u4e0d\u7b97\uff09\uff0c\u5219\u8fd9\u6761\u4ea4\u66ff\u8def\u79f0\u4e3a\u589e\u5e7f\u8def\uff08agumenting path\uff09\u3002 \u6027\u8d28\uff1a \u589e\u5e7f\u8def\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\uff1a\u975e\u5339\u914d\u8fb9\u6bd4\u5339\u914d\u8fb9\u591a\u4e00\u6761\u3002\u56e0\u6b64\uff0c\u7814\u7a76\u589e\u5e7f\u8def\u7684\u610f\u4e49\u662f\u6539\u8fdb\u5339\u914d\u3002\u53ea\u8981\u628a\u589e\u5e7f\u8def\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u7684\u8eab\u4efd\u4ea4\u6362\u5373\u53ef\u3002\u7531\u4e8e\u4e2d\u95f4\u7684\u5339\u914d\u8282\u70b9\u4e0d\u5b58\u5728\u5176\u4ed6\u76f8\u8fde\u7684\u5339\u914d\u8fb9\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u4e0d\u4f1a\u7834\u574f\u5339\u914d\u7684\u6027\u8d28\u3002\u4ea4\u6362\u540e\uff0c\u56fe\u4e2d\u7684\u5339\u914d\u8fb9\u6570\u76ee\u6bd4\u539f\u6765\u591a\u4e86 1 \u6761\u3002 \u6709\u5982\u4e0b\u5b9a\u7406\uff1a \u4e8c\u5206\u56fe\u4e2d\u7684\u4e00\u7ec4\u5339\u914dS\u662f\u6700\u5927\u5339\u914d\uff0c\u5f53\u4e14\u4ec5\u5f53\u56fe\u4e2d\u4e0d\u5b58\u5728S\u589e\u5e7f\u8def \u5308\u7259\u5229\u7b97\u6cd5 \u00b6 \u8bbe S = \\varnothing S = \\varnothing \uff0c\u5373\u6240\u6709\u8fb9\u90fd\u662f\u975e\u5339\u914d\u8fb9 \u5bfb\u627e\u589e\u5e7f\u8def path \uff0c\u628a\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u7684\u5339\u914d\u72b6\u6001\u53d6\u53cd\uff0c\u5f97\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u5339\u914d S' S' \u3002 \u91cd\u590d\u7b2c2\u6b65\uff0c\u76f4\u81f3\u56fe\u4e2d\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\u3002 \u5173\u952e\u5728\u4e8e\u5982\u4f55\u627e\u5230\u589e\u5e7f\u8def\u3002\u5308\u7259\u5229\u7b97\u6cd5\u4f9d\u6b21\u5c1d\u8bd5\u7ed9\u6bcf\u4e00\u4e2a \u5de6\u90e8\u8282\u70b9 x x \u5bfb\u627e\u4e00\u4e2a\u5339\u914d\u7684\u53f3\u90e8\u8282\u70b9 y y \u3002\u53f3\u90e8\u70b9 y y \u80fd\u4e8e\u5de6\u90e8\u70b9 x x \uff0c\u5339\u914d\u9700\u8981\u6ee1\u8db3\u5982\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a y y \u672c\u8eab\u5c31\u662f\u975e\u5339\u914d\u70b9\uff0c\u6b64\u65f6 (x,y) (x,y) \u5c31\u662f\u975e\u5339\u914d\u8fb9\uff0c\u81ea\u5df1\u6784\u6210\u957f\u5ea6\u4e3a$ 1 $\u7684\u589e\u5e7f\u8def\u3002 y y \u5df2\u7ecf\u548c\u5de6\u90e8\u4e00\u8282\u70b9 x' x' \u5339\u914d\uff0c\u4f46\u662f \u4ece x' x' \u51fa\u53d1\u80fd\u627e\u5230\u53e6\u4e00\u4e2a\u53f3\u90e8\u70b9 y' y' \u4e0e\u4e4b\u5339\u914d\u3002 \u672c\u8d28\u6851\u4f7f\u7528\u7684\u8fd8\u662fdfs\u9012\u5f52\u7684\u4ece x x \u51fa\u53d1\u5bfb\u627e\u589e\u5e7f\u8def\uff0c\u56de\u6eaf\u65f6\u5c06\u8def\u5f84\u4e0a\u7684\u5339\u914d\u6807\u8bb0\u53d6\u53cd\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int vis [ maxn ]; vector < int > g [ maxn ]; int match [ maxn ]; bool dfs ( int x ){ for ( int i = 0 ; i < g [ x ]. size (); i ++ ){ int v = g [ x ][ i ]; if ( ! vis [ v ]){ vis [ v ] = 1 ; if ( ! match [ v ] || dfs ( match [ v ])){ match [ v ] = x ; return true ; } } } return false ; } 1 2 3 4 5 6 7 8 9 //\u4e3b\u51fd\u6570\u5185 int ans = 0 ; memset ( match , 0 , sizeof match ); for ( int i = 1 ; i <= n ; i ++ ){ memset ( vis , 0 , sizeof ( vis )); if ( dfs ( i )){ ans ++ ; } } \u8fdb\u9636 \u00b6 \u611f\u5174\u8da3\u81ea\u5df1\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b\uff1a \u591a\u91cd\u5339\u914d \u5e26\u6743\u5339\u914d \u6700\u4f18\u5339\u914d\uff08KM\u7b97\u6cd5\uff09 \u8986\u76d6\u548c\u72ec\u7acb\u96c6 \u00b6 \u6982\u5ff5\uff1a \u6700\u5c0f\u8fb9\u8986\u76d6\uff1a\u6700\u5c11\u7684\u8fb9\u8986\u76d6\u6240\u6709\u70b9 \u6700\u5c0f\u70b9\u8986\u76d6\uff1a\u6700\u5c11\u7684\u70b9\u8986\u76d6\u6240\u6709\u8fb9 \u6027\u8d28\uff1a \u4e8c\u5206\u56fe \u7684\u6700\u5927\u5339\u914d = \u6700\u5c0f\u70b9\u8986\u76d6 --\u300aKonig\u5b9a\u7406\u300b \u5bf9\u4e8e\u4e0d\u5b58\u5728\u5b64\u70b9\u7684\u4efb\u610f\u56fe \uff0c\u6700\u5927\u5339\u914d+\u6700\u5c0f\u8fb9\u8986\u76d6=\u9876\u70b9\u6570 \u6982\u5ff5\uff1a \u6700\u5927\u56e2&\u6700\u5927\u72ec\u7acb\u96c6\uff1a\u6700\u5927\u7684\u70b9\u96c6\uff0c\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u90fd\u6709\u8fb9/\u90fd\u6ca1\u8fb9 \u6027\u8d28\uff1a \u65e0\u5411\u56fe G G \uff0c\u7684\u6700\u5927\u56e2\u7b49\u4e8e\u5176\u8865\u56fe G' G' \u7684\u6700\u5927\u72ec\u7acb\u96c6 \u4efb\u610f\u56fe \u4e2d\uff0c\u6700\u5927\u72ec\u7acb\u96c6+\u6700\u5c0f\u70b9\u8986\u76d6=\u9876\u70b9\u6570 \u4e8c\u5206\u56fe \u4e2d\uff0c\u6700\u5927\u72ec\u7acb\u96c6 = \u9876\u70b9\u6570 - \u6700\u5927\u5339\u914d\u6570 \u4e8c\u5206\u56fe \u4e2d\uff0c\u6700\u5927\u72ec\u7acb\u96c6 = \u6700\u5c0f\u8fb9\u8986\u76d6 \u56fe\u8bba\u7684\u7cbe\u9ad3 \uff1a \u5efa\u56fe \u00b6 \u56e0\u4e3a\u75ab\u60c5\uff0c\u5927\u5bb6\u90fd\u4e0d\u60f3\u5728\u7535\u5f71\u9662\u79bb\u5f97\u592a\u8fd1\uff0c\u6bcf\u4e2a\u4ebax\u66fc\u54c8\u987f\u8ddd\u79bb\u5185\u90fd\u4e0d\u60f3\u6709\u5176\u4ed6\u4eba\uff0c\u95ee\u600e\u4e48\u5b89\u6392\u4f7f\u5f97\u505a\u7684\u4eba\u505a\u591a\uff1f \u4f8b\u98981 \u884c\u5217\u5efa\u8fb9 \u4f8b\u98982 \u7ed9\u4f60\u4e2a\u68cb\u76d8\uff0c\u68cb\u76d8\u4e0a\u67d0\u4e9b\u4f4d\u7f6e\u6709\u68cb\u5b50\uff0c\u6bcf\u884c\u6bcf\u5217\u6700\u591a\u53ea\u80fd\u9009\u4e00\u4e2a\u68cb\u5b50\uff0c\u8ba9\u4f60\u9009\u5c3d\u53ef\u80fd\u591a\u7684\u68cb\u5b50 awing \u4f8b\u98983 The 2021 ICPC Asia Shenyang Regional ContestEditorial \u4f8b\u98984 \u7ed9\u4e00\u4e2a\u6570k\uff0c\u95ee\u4ed6\u7684\u6b63\u6574\u6570\u500d\u6570\u4e2d\uff0c\uff08\u5341\u8fdb\u5236\u4e0b\uff09\u6bcf\u4e00\u4f4d\u7684\u548c\u6700\u5c0f\u662f\u591a\u5c11, 2\\leq k \\leq 10^{5} 2\\leq k \\leq 10^{5} \u4ece1\u5f00\u59cb \uff0c \u5efa\u7acb\u4e00\u4e2a\u6570x\u5230x+1\u548cx*10\u5206\u522b\u4e3a1\u548c0\u7684\u8fb9\uff0c\u6700\u540e\u627e\u5230\u6700\u5feb\u5230\u8fbe\u7684k\u7684\u500d\u6570\uff0c\u5373\u7b54\u6848\u6700\u77ed\u8def","title":"\u4e8c\u5206\u56fe"},{"location":"graph/bipartite-graph/#_1","text":"","title":"\u4e8c\u5206\u5339\u914d"},{"location":"graph/bipartite-graph/#_2","text":"\u4e8c\u5206\u56fe\uff1a\u53c8\u79f0\u4e8c\u90e8\u56fe\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5982\u679c\u56fe\u4e2d\u70b9\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e24\u7ec4\uff0c\u5e76\u4e14\u4f7f\u5f97\u6240\u6709\u8fb9\u90fd\u8de8\u8d8a\u7ec4\u7684\u8fb9\u754c\uff0c\u5219\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002\u51c6\u786e\u5730\u8bf4\uff1a\u628a\u4e00\u4e2a\u56fe\u7684\u9876\u70b9\u5212\u5206\u4e3a\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u96c6 U \u548c V \uff0c\u4f7f\u5f97\u6bcf\u4e00\u6761\u8fb9\u90fd\u5206\u522b\u8fde\u63a5U\u3001V\u4e2d\u7684\u9876\u70b9\u3002\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u5212\u5206\uff0c\u5219\u6b64\u56fe\u4e3a\u4e00\u4e2a\u4e8c\u5206\u56fe\u3002U\u3001V\u53ef\u5206\u522b\u79f0\u5de6\u90e8\u548c\u53f3\u90e8\u3002 \u4e8c\u5206\u56fe\u7684\u4e00\u4e2a\u7b49\u4ef7\u5b9a\u4e49\u662f\uff1a\u4e0d\u542b\u6709\u300c\u542b\u5947\u6570\u6761\u8fb9\u7684\u73af\u300d\u7684\u56fe\u3002","title":"\u4e8c\u5206\u56fe"},{"location":"graph/bipartite-graph/#_3","text":"\u6709 n n \u4e2a\u4eba\uff0c\u5176\u4e2d\u6709 m m \u5bf9\u5173\u7cfb (x,y) (x,y) \u8868\u793ax\u548cy\u4e92\u76f8\u4ec7\u6068\uff0c x x \u548c y y \u4e0d\u80fd\u51fa\u73b0\u5728\u540c\u4e00\u4e2a\u573a\u5408\u3002\u95ee\uff0c\u80fd\u4e0d\u80fd\u5c06\u8fd9 n n \u4e2a\u4eba\uff0c\u5206\u6210\u4e24\u7ec4\u4e14\u6bcf\u7ec4\u4e4b\u95f4\u4efb\u610f\u4e24\u4e2a\u4eba\u90fd\u4e0d\u4ec7\u6068\uff1f \u67d3\u8272\u6cd5\u5224\u5b9a\uff1a \u5c1d\u8bd5\u7528\u9ed1\u767d\u4e24\u79cd\u989c\u8272\u6807\u8bb0\u56fe\u4e0a\u7684\u8282\u70b9\uff0c\u5f53\u4e00\u4e2a\u8282\u70b9\u88ab\u6807\u8bb0\u540e\uff0c\u4ed6\u7684\u6240\u6709\u76f8\u90bb\u7684\u8282\u70b9\u5e94\u8be5\u88ab\u6807\u8bb0\u4e3a\u4e0e\u5b83\u76f8\u53cd\u7684\u989c\u8272\u3002\u5982\u679c\u6807\u8bb0\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u4e86\u51b2\u7a81\uff0c\u8bf4\u660e\u56fe\u4e2d\u5b58\u5728\u5947\u73af\u3002 dfs\u904d\u5386\uff0c\u590d\u6742\u5ea6 O(n+m) O(n+m) 1 2 3 4 5 6 7 8 9 10 11 12 bool dfs ( int now , int col ) { color [ now ] = col ; for ( int i = head [ now ]; ~ i ; i = edge [ i ]. next ){ int to = edge [ i ]. to ; if ( color [ now ] == color [ to ]) return false ; if ( ! color [ to ]){ if ( ! dfs ( to , 3 - col )) return false ; } } return true ; }","title":"\u4f8b\u9898"},{"location":"graph/bipartite-graph/#_4","text":"\u5339\u914d\uff1a\u5728\u56fe\u8bba\u4e2d\uff0c\u4e00\u4e2a\u300c\u5339\u914d\u300d\uff08matching\uff09\u662f\u4e00\u4e2a \u8fb9\u7684\u96c6\u5408 \uff0c\u5176\u4e2d\u4efb\u610f\u4e24\u6761\u8fb9\u90fd\u6ca1\u6709\u516c\u5171\u9876\u70b9\u3002\u53ef\u4ee5\u5c06\u56fe\u4e2d\u8fb9\u5206\u4e3a\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u3002\u70b9\u5206\u4e3a\u5339\u914d\u70b9\uff0c\u975e\u5339\u914d\u70b9 \u6700\u5927\u5339\u914d\uff1a\u4e00\u4e2a\u56fe\u6240\u6709\u5339\u914d\u4e2d\uff0c\u6240\u542b\u5339\u914d\u8fb9\u6570\u6700\u591a\u7684\u5339\u914d\uff0c\u79f0\u4e3a\u8fd9\u4e2a\u56fe\u7684\u6700\u5927\u5339\u914d\u3002 \u5b8c\u7f8e\u5339\u914d\uff1a\u7ed9\u5b9a\u4e00\u5f20\u4e8c\u5206\u56fe\uff0c\u5176\u5de6\u53f3\u8282\u70b9\u6570\u76f8\u540c\uff0c\u5747\u4e3a N N \u4e2a\u8282\u70b9\u3002\u5982\u679c\u6700\u5927\u5339\u914d\u5305\u542b N N \u6761\u8fb9\uff0c\u5219\u79f0\u8be5\u4e8c\u5206\u56fe\u5305\u542b\u5b8c\u7f8e\u5339\u914d\u3002 \u4ea4\u66ff\u8def\uff1a\u4ea4\u9519\u8def\uff0c\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u2026\u5f62\u6210\u7684\u8def\u5f84\u53eb\u4ea4\u66ff\u8def\u3002 \u589e\u5e7f\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u5982\u679c\u9014\u5f84\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\uff08\u51fa\u53d1\u7684\u70b9\u4e0d\u7b97\uff09\uff0c\u5219\u8fd9\u6761\u4ea4\u66ff\u8def\u79f0\u4e3a\u589e\u5e7f\u8def\uff08agumenting path\uff09\u3002 \u601d\u8003\uff1a \u6709n\u4e2a\u4eba\uff0c\u82e5\u5e72\u7537\u751f\uff0c\u82e5\u5e72\u5973\u751f\uff0c\u5176\u4e2d\u7537\u5973\u4e4b\u95f4\u6709m\u5bf9\u5173\u7cfb(x,y)\uff0c\u8868\u793ax\u3001y\u4e4b\u95f4\u6709\u597d\u611f\uff0c\u95ee\u4f60\u6700\u591a\u80fd\u6311\u591a\u5c11\u5bf9\u4eba\uff0c\u4f7f\u5f97\u6bcf\u4e00\u5bf9\u90fd\u662f\u6709\u597d\u611f\u7684\uff08\u6bcf\u4e2a\u4eba\u53ea\u80fd\u88ab\u6311\u4e00\u6b21\uff09","title":"\u5339\u914d"},{"location":"graph/bipartite-graph/#how","text":"\u5308\u7259\u5229\u7b97\u6cd5\uff1a O(nm) O(nm) \u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u53ef\u4ee5\u8f6c\u6362\u6210\u7f51\u7edc\u6d41\u6a21\u578b\u3002 \u8bf4\u660e\uff1a \u5c06\u6e90\u70b9\u8fde\u4e0a\u5de6\u8fb9\u6240\u6709\u70b9\uff0c\u53f3\u8fb9\u6240\u6709\u70b9\u8fde\u4e0a\u6c47\u70b9\uff0c\u5bb9\u91cf\u7686\u4e3a1\u3002\u539f\u6765\u7684\u6bcf\u6761\u8fb9\u4ece\u5de6\u5f80\u53f3\u8fde\u8fb9\uff0c\u5bb9\u91cf\u4e5f\u7686\u4e3a1\uff0c\u6700\u5927\u6d41\u5373\u6700\u5927\u5339\u914d\u3002 \u4f7f\u7528 Dinic \u7b97\u6cd5 \u6c42\u8be5\u7f51\u7edc\u7684\u6700\u5927\u6d41\uff0c\u590d\u6742\u5ea6 O(\\sqrt{n}m) O(\\sqrt{n}m)","title":"how?"},{"location":"graph/bipartite-graph/#_5","text":"\u56de\u987e\u4e24\u4e2a\u6982\u5ff5\uff1a \u4ea4\u66ff\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u4f9d\u6b21\u7ecf\u8fc7\u975e\u5339\u914d\u8fb9\u3001\u5339\u914d\u8fb9\u3001\u975e\u5339\u914d\u8fb9\u2026\u5f62\u6210\u7684\u8def\u5f84\u53eb\u4ea4\u66ff\u8def\u3002 \u589e\u5e7f\u8def\uff1a\u4ece\u4e00\u4e2a\u672a\u5339\u914d\u70b9\u51fa\u53d1\uff0c\u8d70\u4ea4\u66ff\u8def\uff0c\u5982\u679c\u9014\u5f84\u53e6\u4e00\u4e2a\u672a\u5339\u914d\u70b9\uff08\u51fa\u53d1\u7684\u70b9\u4e0d\u7b97\uff09\uff0c\u5219\u8fd9\u6761\u4ea4\u66ff\u8def\u79f0\u4e3a\u589e\u5e7f\u8def\uff08agumenting path\uff09\u3002 \u6027\u8d28\uff1a \u589e\u5e7f\u8def\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u70b9\uff1a\u975e\u5339\u914d\u8fb9\u6bd4\u5339\u914d\u8fb9\u591a\u4e00\u6761\u3002\u56e0\u6b64\uff0c\u7814\u7a76\u589e\u5e7f\u8def\u7684\u610f\u4e49\u662f\u6539\u8fdb\u5339\u914d\u3002\u53ea\u8981\u628a\u589e\u5e7f\u8def\u4e2d\u7684\u5339\u914d\u8fb9\u548c\u975e\u5339\u914d\u8fb9\u7684\u8eab\u4efd\u4ea4\u6362\u5373\u53ef\u3002\u7531\u4e8e\u4e2d\u95f4\u7684\u5339\u914d\u8282\u70b9\u4e0d\u5b58\u5728\u5176\u4ed6\u76f8\u8fde\u7684\u5339\u914d\u8fb9\uff0c\u6240\u4ee5\u8fd9\u6837\u505a\u4e0d\u4f1a\u7834\u574f\u5339\u914d\u7684\u6027\u8d28\u3002\u4ea4\u6362\u540e\uff0c\u56fe\u4e2d\u7684\u5339\u914d\u8fb9\u6570\u76ee\u6bd4\u539f\u6765\u591a\u4e86 1 \u6761\u3002 \u6709\u5982\u4e0b\u5b9a\u7406\uff1a \u4e8c\u5206\u56fe\u4e2d\u7684\u4e00\u7ec4\u5339\u914dS\u662f\u6700\u5927\u5339\u914d\uff0c\u5f53\u4e14\u4ec5\u5f53\u56fe\u4e2d\u4e0d\u5b58\u5728S\u589e\u5e7f\u8def","title":"\u5308\u7259\u5229\u7b97\u6cd5\u6982\u5ff5"},{"location":"graph/bipartite-graph/#_6","text":"\u8bbe S = \\varnothing S = \\varnothing \uff0c\u5373\u6240\u6709\u8fb9\u90fd\u662f\u975e\u5339\u914d\u8fb9 \u5bfb\u627e\u589e\u5e7f\u8def path \uff0c\u628a\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8fb9\u7684\u5339\u914d\u72b6\u6001\u53d6\u53cd\uff0c\u5f97\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u5339\u914d S' S' \u3002 \u91cd\u590d\u7b2c2\u6b65\uff0c\u76f4\u81f3\u56fe\u4e2d\u4e0d\u5b58\u5728\u589e\u5e7f\u8def\u3002 \u5173\u952e\u5728\u4e8e\u5982\u4f55\u627e\u5230\u589e\u5e7f\u8def\u3002\u5308\u7259\u5229\u7b97\u6cd5\u4f9d\u6b21\u5c1d\u8bd5\u7ed9\u6bcf\u4e00\u4e2a \u5de6\u90e8\u8282\u70b9 x x \u5bfb\u627e\u4e00\u4e2a\u5339\u914d\u7684\u53f3\u90e8\u8282\u70b9 y y \u3002\u53f3\u90e8\u70b9 y y \u80fd\u4e8e\u5de6\u90e8\u70b9 x x \uff0c\u5339\u914d\u9700\u8981\u6ee1\u8db3\u5982\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a y y \u672c\u8eab\u5c31\u662f\u975e\u5339\u914d\u70b9\uff0c\u6b64\u65f6 (x,y) (x,y) \u5c31\u662f\u975e\u5339\u914d\u8fb9\uff0c\u81ea\u5df1\u6784\u6210\u957f\u5ea6\u4e3a$ 1 $\u7684\u589e\u5e7f\u8def\u3002 y y \u5df2\u7ecf\u548c\u5de6\u90e8\u4e00\u8282\u70b9 x' x' \u5339\u914d\uff0c\u4f46\u662f \u4ece x' x' \u51fa\u53d1\u80fd\u627e\u5230\u53e6\u4e00\u4e2a\u53f3\u90e8\u70b9 y' y' \u4e0e\u4e4b\u5339\u914d\u3002 \u672c\u8d28\u6851\u4f7f\u7528\u7684\u8fd8\u662fdfs\u9012\u5f52\u7684\u4ece x x \u51fa\u53d1\u5bfb\u627e\u589e\u5e7f\u8def\uff0c\u56de\u6eaf\u65f6\u5c06\u8def\u5f84\u4e0a\u7684\u5339\u914d\u6807\u8bb0\u53d6\u53cd\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 int vis [ maxn ]; vector < int > g [ maxn ]; int match [ maxn ]; bool dfs ( int x ){ for ( int i = 0 ; i < g [ x ]. size (); i ++ ){ int v = g [ x ][ i ]; if ( ! vis [ v ]){ vis [ v ] = 1 ; if ( ! match [ v ] || dfs ( match [ v ])){ match [ v ] = x ; return true ; } } } return false ; } 1 2 3 4 5 6 7 8 9 //\u4e3b\u51fd\u6570\u5185 int ans = 0 ; memset ( match , 0 , sizeof match ); for ( int i = 1 ; i <= n ; i ++ ){ memset ( vis , 0 , sizeof ( vis )); if ( dfs ( i )){ ans ++ ; } }","title":"\u5308\u7259\u5229\u7b97\u6cd5"},{"location":"graph/bipartite-graph/#_7","text":"\u611f\u5174\u8da3\u81ea\u5df1\u53ef\u4ee5\u4e86\u89e3\u4e00\u4e0b\uff1a \u591a\u91cd\u5339\u914d \u5e26\u6743\u5339\u914d \u6700\u4f18\u5339\u914d\uff08KM\u7b97\u6cd5\uff09","title":"\u8fdb\u9636"},{"location":"graph/bipartite-graph/#_8","text":"\u6982\u5ff5\uff1a \u6700\u5c0f\u8fb9\u8986\u76d6\uff1a\u6700\u5c11\u7684\u8fb9\u8986\u76d6\u6240\u6709\u70b9 \u6700\u5c0f\u70b9\u8986\u76d6\uff1a\u6700\u5c11\u7684\u70b9\u8986\u76d6\u6240\u6709\u8fb9 \u6027\u8d28\uff1a \u4e8c\u5206\u56fe \u7684\u6700\u5927\u5339\u914d = \u6700\u5c0f\u70b9\u8986\u76d6 --\u300aKonig\u5b9a\u7406\u300b \u5bf9\u4e8e\u4e0d\u5b58\u5728\u5b64\u70b9\u7684\u4efb\u610f\u56fe \uff0c\u6700\u5927\u5339\u914d+\u6700\u5c0f\u8fb9\u8986\u76d6=\u9876\u70b9\u6570 \u6982\u5ff5\uff1a \u6700\u5927\u56e2&\u6700\u5927\u72ec\u7acb\u96c6\uff1a\u6700\u5927\u7684\u70b9\u96c6\uff0c\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u90fd\u6709\u8fb9/\u90fd\u6ca1\u8fb9 \u6027\u8d28\uff1a \u65e0\u5411\u56fe G G \uff0c\u7684\u6700\u5927\u56e2\u7b49\u4e8e\u5176\u8865\u56fe G' G' \u7684\u6700\u5927\u72ec\u7acb\u96c6 \u4efb\u610f\u56fe \u4e2d\uff0c\u6700\u5927\u72ec\u7acb\u96c6+\u6700\u5c0f\u70b9\u8986\u76d6=\u9876\u70b9\u6570 \u4e8c\u5206\u56fe \u4e2d\uff0c\u6700\u5927\u72ec\u7acb\u96c6 = \u9876\u70b9\u6570 - \u6700\u5927\u5339\u914d\u6570 \u4e8c\u5206\u56fe \u4e2d\uff0c\u6700\u5927\u72ec\u7acb\u96c6 = \u6700\u5c0f\u8fb9\u8986\u76d6","title":"\u8986\u76d6\u548c\u72ec\u7acb\u96c6"},{"location":"graph/bipartite-graph/#_9","text":"\u56e0\u4e3a\u75ab\u60c5\uff0c\u5927\u5bb6\u90fd\u4e0d\u60f3\u5728\u7535\u5f71\u9662\u79bb\u5f97\u592a\u8fd1\uff0c\u6bcf\u4e2a\u4ebax\u66fc\u54c8\u987f\u8ddd\u79bb\u5185\u90fd\u4e0d\u60f3\u6709\u5176\u4ed6\u4eba\uff0c\u95ee\u600e\u4e48\u5b89\u6392\u4f7f\u5f97\u505a\u7684\u4eba\u505a\u591a\uff1f \u4f8b\u98981 \u884c\u5217\u5efa\u8fb9 \u4f8b\u98982 \u7ed9\u4f60\u4e2a\u68cb\u76d8\uff0c\u68cb\u76d8\u4e0a\u67d0\u4e9b\u4f4d\u7f6e\u6709\u68cb\u5b50\uff0c\u6bcf\u884c\u6bcf\u5217\u6700\u591a\u53ea\u80fd\u9009\u4e00\u4e2a\u68cb\u5b50\uff0c\u8ba9\u4f60\u9009\u5c3d\u53ef\u80fd\u591a\u7684\u68cb\u5b50 awing \u4f8b\u98983 The 2021 ICPC Asia Shenyang Regional ContestEditorial \u4f8b\u98984 \u7ed9\u4e00\u4e2a\u6570k\uff0c\u95ee\u4ed6\u7684\u6b63\u6574\u6570\u500d\u6570\u4e2d\uff0c\uff08\u5341\u8fdb\u5236\u4e0b\uff09\u6bcf\u4e00\u4f4d\u7684\u548c\u6700\u5c0f\u662f\u591a\u5c11, 2\\leq k \\leq 10^{5} 2\\leq k \\leq 10^{5} \u4ece1\u5f00\u59cb \uff0c \u5efa\u7acb\u4e00\u4e2a\u6570x\u5230x+1\u548cx*10\u5206\u522b\u4e3a1\u548c0\u7684\u8fb9\uff0c\u6700\u540e\u627e\u5230\u6700\u5feb\u5230\u8fbe\u7684k\u7684\u500d\u6570\uff0c\u5373\u7b54\u6848\u6700\u77ed\u8def","title":"\u56fe\u8bba\u7684\u7cbe\u9ad3 \uff1a \u5efa\u56fe"},{"location":"graph/connected-components/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a zrz \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u5148\u7f6e\u77e5\u8bc6:dfs\u6811,\u56fe\u8bba\u57fa\u672c\u77e5\u8bc6 \u65e0\u5411\u56fe \u00b6 \u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u9876\u70b9 V_i V_i \u5230\u9876\u70b9 V_j V_j \u6709\u8def\u5f84\uff0c\u5219\u79f0\u9876\u70b9 V_i V_i \u548c V_j V_j \u8fde\u901a\u3002 \u5982\u679c\u65e0\u5411\u56fe\u4e2d\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u90fd\u8fde\u901a\uff0c\u5219\u79f0\u4e3a\u8fde\u901a\u56fe\u3002 \u5982\u679c\u4e0d\u662f\u8fde\u901a\u56fe\uff0c\u5219\u56fe\u4e2d\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u8fde\u901a\u5206\u91cf\u3002 \u91cd\u70b9\u533a\u5206\uff1a\u6781\u5927\u8fde\u901a\u5b50\u56fe \u548c \u6781\u5c0f\u8fde\u901a\u5b50\u56fe \u6781\u5927\u8fde\u901a\u5b50\u56fe\u662f\u65e0\u5411\u56fe\u7684\u8fde\u901a\u5206\u91cf\uff0c\u6781\u5927\u8981\u6c42\u8be5\u8fde\u901a\u5b50\u56fe\u5305\u542b\u5176\u6240\u6709\u7684\u8fb9\u3002 \u6781\u5c0f\u8fde\u901a\u5b50\u56fe\u662f\u65e2\u8981\u4fdd\u6301\u56fe\u8fde\u901a\uff0c\u53c8\u8981\u4f7f\u5f97\u8fb9\u6570\u6700\u5c11\u7684\u5b50\u56fe\u3002 \u8fdb\u4e00\u6b65\uff0c\u5230\u6709\u5411\u56fe\u4e2d\uff0c\u6982\u5ff5\u5c31\u53d8\u4e3a\u5f3a\u8fde\u901a\uff0c\u5f3a\u8fde\u901a\u56fe\uff0c\u5f3a\u8fde\u901a\u5206\u91cf \u6709\u5411\u56fe \u00b6 \u5728\u6709\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u4ece V_i V_i \u5230 V_j V_j \u548c \u4ece V_j V_j \u5230 V_i V_i \u4e4b\u95f4\u90fd\u6709\u8def\u5f84\uff0c\u5219\u79f0\u8fd9\u4e24\u4e2a\u9876\u70b9\u662f\u5f3a\u8fde\u901a\u7684 \u82e5\u56fe\u4e2d\u4efb\u4f55\u4e00\u5bf9\u9876\u70b9\u90fd\u662f\u5f3a\u8fde\u901a\u7684\uff0c\u5219\u79f0\u6b64\u56fe\u4e3a\u5f3a\u8fde\u901a\u56fe \u6709\u5411\u56fe\u4e2d\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u5206\u91cf \u57fa\u672c\u7684\u77e5\u8bc6 \u00b6 \u5224\u65ad\u56fe\u7684\u8fde\u901a\u6027\u65b9\u6cd5\uff08DFS\uff0cBFS\uff0c\u5e76\u67e5\u96c6\uff09 \u6709\u5411\u56feTarjan\u4e0e\u5f3a\u8fde\u901a\u5206\u91cf \u00b6 \u53c2\u8003 \u5f3a\u8054\u901a\u5206\u91cf \u65e0\u5411\u56fe\u6c42\u8fde\u901a\u5206\u91cf\uff0c\u5272\u70b9\uff08\u5173\u8282\u70b9\uff09 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5982\u679c\u628a\u4e00\u4e2a\u70b9\u5220\u9664\u540e\u8fd9\u4e2a\u56fe\u7684\u6781\u5927\u8fde\u901a\u5206\u91cf\u6570\u589e\u52a0\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u8fd9\u4e2a\u56fe\u7684\u5272\u70b9\uff08\u53c8\u79f0\u5272\u9876\uff09\u3002 \u5272\u70b9\u5224\u5b9a\u6cd5\u5219\uff1a \u82e5x\u4e0d\u662f\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9(dfs\u8d77\u70b9) \uff0c\u5219 x x \u662f\u5272\u70b9\u5f53\u4e14\u4ec5\u5f53\u641c\u7d22\u6811\u4e0a\u5b58\u5728 x x \u7684\u4e00\u4e2a\u5b50\u8282\u70b9 y y ,\u6ee1\u8db3\uff1a dfn[x] \\leq low[y] dfn[x] \\leq low[y] \u601d\u8003: \u4e3a\u4f55\u8d77\u70b9\u4e0d\u662f\u5272\u70b9 \u4e3a\u4f55\u8981\u6c42\u5c0f\u4e8e\u7b49\u4e8e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 vector < int > g [ maxn ]; int dfn [ maxn ], low [ maxn ]; int dep = 0 , child = 0 ; int cut [ maxn ]; int n , m ; void Tarjan ( int u , int fa ) { dfn [ u ] = low [ u ] =++ dep ; for ( int i = 0 ; i < g [ u ]. size (); i ++ ) { int v = g [ u ][ i ]; if ( ! dfn [ v ]) { Tarjan ( v , u ); low [ u ] = min ( low [ u ], low [ v ]); //if(u==root) child++; //\u5bf9\u4e8e\u6839\u7ed3\u70b9\u662f\u5426\u4e3a\u5272\u70b9\u7684\u5224\u5b9a\uff1a\u8bb0\u5f55\u5b50\u6811\u4e2a\u6570 if ( low [ v ] >= dfn [ u ]){ //\u6ce8\u610f\u5272\u70b9\u662f >= cut [ u ] ++ ; //\u6216\u8005\u7528iscut\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u4e3a\u5272\u70b9\u4f46\u662f\u6839\u8282\u70b9\u5f97\u7279\u5224 //\u5176\u4ed6\u7ed3\u70b9u\u82e5\u7b26\u5408\u8be5\u6761\u4ef6\uff0cu\u5c31\u662f\u5272\u70b9 } } else if ( v != fa ) low [ u ] = min ( low [ u ], dfn [ v ]); } } \u65e0\u5411\u56fe\u6c42\u8fde\u901a\u5206\u91cf\uff0c\u5272\u8fb9\uff08\u6865\uff09 \u00b6 \u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5982\u679c\u5220\u6389\u4e00\u6761\u8fb9\u540e\u56fe\u4e2d\u7684\u8fde\u901a\u5206\u91cf\u6570\u589e\u52a0\u4e86\uff0c\u5219\u79f0\u8fd9\u6761\u8fb9\u4e3a\u6865\u6216\u8005\u5272\u8fb9\u3002\u4e25\u8c28\u6765\u8bf4\uff0c\u5c31\u662f\uff1a\u5047\u8bbe\u6709\u8fde\u901a\u56fe G = \\{V,E\\} G = \\{V,E\\} \uff0c e e \u662f\u5176\u4e2d\u4e00\u6761\u8fb9\uff08\u5373 e\\in E e\\in E \uff09\uff0c\u5982\u679c G-e G-e \u662f\u4e0d\u8fde\u901a\u7684\uff0c\u5219\u8fb9 e e \u662f\u56fe G G \u7684\u4e00\u6761\u5272\u8fb9\uff08\u6865\uff09\u3002 \u5272\u8fb9\u5224\u5b9a\u6cd5\u5219\uff1a \u65e0\u5411\u8fb9 (x,y) (x,y) \u662f\u6865\uff0c\u5f53\u4e14\u4ec5\u5f53\u641c\u7d22\u6811\u4e0a\u5b58\u5728 x x \u7684\u4e00\u4e2a\u5b50\u8282\u70b9 y y ,\u6ee1\u8db3: dfn[x] < low[y] dfn[x] < low[y] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 const int N = 1005 ; const int maxn = N * N + 5 ; struct edge { int v , next , w ; } e [ maxn << 1 ]; int n , m ; int head [ N ], cnt ; int ans = INF ; void add ( int u , int v , int w ){ e [ cnt ]. v = v ; e [ cnt ]. w = w ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } int dfn [ N ], low [ N ]; int num = 0 ; void inits (){ // memset(head,-1,sizeof head); for ( int i = 0 ; i <= n ; i ++ ){ dfn [ i ] = low [ i ] = 0 ; head [ i ] = -1 ; } cnt = 0 ; num = 0 ; ans = INF ; } void Tarjan ( int x , int in_edge ){ dfn [ x ] = low [ x ] = ++ num ; for ( int i = head [ x ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; if ( ! dfn [ v ]){ Tarjan ( v , i ); low [ x ] = min ( low [ v ], low [ x ]); if ( low [ v ] > dfn [ x ]){ //\u6ce8\u610f\u8fd9\u91cc\u662f> ans = min ( e [ i ]. w , ans ); } } else if ( i != ( in_edge ^ 1 )) low [ x ] = min ( low [ x ], dfn [ v ]); //\u6210\u5bf9\u53d8\u6362\uff0c\u914d\u5408\u5b58\u8fb9\u4e0b\u6807\u4ece0\u5f00\u59cb } } \u4e3b\u51fd\u6570\u5185\uff0c\u5982\u679c\u56fe\u4e0d\u8fde\u901a\u5c31\u591a\u6b21Tarjan 1 Tarjan ( 1 , -1 ); \u53cc\u8054\u901a\u5206\u91cf \u00b6 \u5728\u4e00\u5f20\u8fde\u901a\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u70b9 u u \u548c v v \uff0c\u5982\u679c\u65e0\u8bba\u5220\u53bb\u54ea\u6761\u8fb9\uff08\u53ea\u80fd\u5220\u53bb\u4e00\u6761\uff09\u90fd\u4e0d\u80fd\u4f7f\u5b83\u4eec\u4e0d\u8fde\u901a\uff0c\u6211\u4eec\u5c31\u8bf4 u u \u548c v v \u8fb9\u53cc\u8fde\u901a\u3002 \u5728\u4e00\u5f20\u8fde\u901a\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u70b9 u u \u548c v v \uff0c\u5982\u679c\u65e0\u8bba\u5220\u53bb\u54ea\u4e2a\u70b9\uff08\u53ea\u80fd\u5220\u53bb\u4e00\u4e2a\uff0c\u4e14\u4e0d\u80fd\u5220 u u \u548c v v \u81ea\u5df1\uff09\u90fd\u4e0d\u80fd\u4f7f\u5b83\u4eec\u4e0d\u8fde\u901a\uff0c\u6211\u4eec\u5c31\u8bf4 u u \u548c v v \u70b9\u53cc\u8fde\u901a\u3002","title":"\u8fde\u901a\u5206\u91cf\u6982\u8ff0"},{"location":"graph/connected-components/#_1","text":"\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u9876\u70b9 V_i V_i \u5230\u9876\u70b9 V_j V_j \u6709\u8def\u5f84\uff0c\u5219\u79f0\u9876\u70b9 V_i V_i \u548c V_j V_j \u8fde\u901a\u3002 \u5982\u679c\u65e0\u5411\u56fe\u4e2d\u4efb\u610f\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u90fd\u8fde\u901a\uff0c\u5219\u79f0\u4e3a\u8fde\u901a\u56fe\u3002 \u5982\u679c\u4e0d\u662f\u8fde\u901a\u56fe\uff0c\u5219\u56fe\u4e2d\u7684\u6781\u5927\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u8fde\u901a\u5206\u91cf\u3002 \u91cd\u70b9\u533a\u5206\uff1a\u6781\u5927\u8fde\u901a\u5b50\u56fe \u548c \u6781\u5c0f\u8fde\u901a\u5b50\u56fe \u6781\u5927\u8fde\u901a\u5b50\u56fe\u662f\u65e0\u5411\u56fe\u7684\u8fde\u901a\u5206\u91cf\uff0c\u6781\u5927\u8981\u6c42\u8be5\u8fde\u901a\u5b50\u56fe\u5305\u542b\u5176\u6240\u6709\u7684\u8fb9\u3002 \u6781\u5c0f\u8fde\u901a\u5b50\u56fe\u662f\u65e2\u8981\u4fdd\u6301\u56fe\u8fde\u901a\uff0c\u53c8\u8981\u4f7f\u5f97\u8fb9\u6570\u6700\u5c11\u7684\u5b50\u56fe\u3002 \u8fdb\u4e00\u6b65\uff0c\u5230\u6709\u5411\u56fe\u4e2d\uff0c\u6982\u5ff5\u5c31\u53d8\u4e3a\u5f3a\u8fde\u901a\uff0c\u5f3a\u8fde\u901a\u56fe\uff0c\u5f3a\u8fde\u901a\u5206\u91cf","title":"\u65e0\u5411\u56fe"},{"location":"graph/connected-components/#_2","text":"\u5728\u6709\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u4ece V_i V_i \u5230 V_j V_j \u548c \u4ece V_j V_j \u5230 V_i V_i \u4e4b\u95f4\u90fd\u6709\u8def\u5f84\uff0c\u5219\u79f0\u8fd9\u4e24\u4e2a\u9876\u70b9\u662f\u5f3a\u8fde\u901a\u7684 \u82e5\u56fe\u4e2d\u4efb\u4f55\u4e00\u5bf9\u9876\u70b9\u90fd\u662f\u5f3a\u8fde\u901a\u7684\uff0c\u5219\u79f0\u6b64\u56fe\u4e3a\u5f3a\u8fde\u901a\u56fe \u6709\u5411\u56fe\u4e2d\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\u79f0\u4e3a\u6709\u5411\u56fe\u7684\u5f3a\u8fde\u901a\u5206\u91cf","title":"\u6709\u5411\u56fe"},{"location":"graph/connected-components/#_3","text":"\u5224\u65ad\u56fe\u7684\u8fde\u901a\u6027\u65b9\u6cd5\uff08DFS\uff0cBFS\uff0c\u5e76\u67e5\u96c6\uff09","title":"\u57fa\u672c\u7684\u77e5\u8bc6"},{"location":"graph/connected-components/#tarjan","text":"\u53c2\u8003 \u5f3a\u8054\u901a\u5206\u91cf","title":"\u6709\u5411\u56feTarjan\u4e0e\u5f3a\u8fde\u901a\u5206\u91cf"},{"location":"graph/connected-components/#_4","text":"\u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5982\u679c\u628a\u4e00\u4e2a\u70b9\u5220\u9664\u540e\u8fd9\u4e2a\u56fe\u7684\u6781\u5927\u8fde\u901a\u5206\u91cf\u6570\u589e\u52a0\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u662f\u8fd9\u4e2a\u56fe\u7684\u5272\u70b9\uff08\u53c8\u79f0\u5272\u9876\uff09\u3002 \u5272\u70b9\u5224\u5b9a\u6cd5\u5219\uff1a \u82e5x\u4e0d\u662f\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9(dfs\u8d77\u70b9) \uff0c\u5219 x x \u662f\u5272\u70b9\u5f53\u4e14\u4ec5\u5f53\u641c\u7d22\u6811\u4e0a\u5b58\u5728 x x \u7684\u4e00\u4e2a\u5b50\u8282\u70b9 y y ,\u6ee1\u8db3\uff1a dfn[x] \\leq low[y] dfn[x] \\leq low[y] \u601d\u8003: \u4e3a\u4f55\u8d77\u70b9\u4e0d\u662f\u5272\u70b9 \u4e3a\u4f55\u8981\u6c42\u5c0f\u4e8e\u7b49\u4e8e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 vector < int > g [ maxn ]; int dfn [ maxn ], low [ maxn ]; int dep = 0 , child = 0 ; int cut [ maxn ]; int n , m ; void Tarjan ( int u , int fa ) { dfn [ u ] = low [ u ] =++ dep ; for ( int i = 0 ; i < g [ u ]. size (); i ++ ) { int v = g [ u ][ i ]; if ( ! dfn [ v ]) { Tarjan ( v , u ); low [ u ] = min ( low [ u ], low [ v ]); //if(u==root) child++; //\u5bf9\u4e8e\u6839\u7ed3\u70b9\u662f\u5426\u4e3a\u5272\u70b9\u7684\u5224\u5b9a\uff1a\u8bb0\u5f55\u5b50\u6811\u4e2a\u6570 if ( low [ v ] >= dfn [ u ]){ //\u6ce8\u610f\u5272\u70b9\u662f >= cut [ u ] ++ ; //\u6216\u8005\u7528iscut\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u4e3a\u5272\u70b9\u4f46\u662f\u6839\u8282\u70b9\u5f97\u7279\u5224 //\u5176\u4ed6\u7ed3\u70b9u\u82e5\u7b26\u5408\u8be5\u6761\u4ef6\uff0cu\u5c31\u662f\u5272\u70b9 } } else if ( v != fa ) low [ u ] = min ( low [ u ], dfn [ v ]); } }","title":"\u65e0\u5411\u56fe\u6c42\u8fde\u901a\u5206\u91cf\uff0c\u5272\u70b9\uff08\u5173\u8282\u70b9\uff09"},{"location":"graph/connected-components/#_5","text":"\u5bf9\u4e8e\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5982\u679c\u5220\u6389\u4e00\u6761\u8fb9\u540e\u56fe\u4e2d\u7684\u8fde\u901a\u5206\u91cf\u6570\u589e\u52a0\u4e86\uff0c\u5219\u79f0\u8fd9\u6761\u8fb9\u4e3a\u6865\u6216\u8005\u5272\u8fb9\u3002\u4e25\u8c28\u6765\u8bf4\uff0c\u5c31\u662f\uff1a\u5047\u8bbe\u6709\u8fde\u901a\u56fe G = \\{V,E\\} G = \\{V,E\\} \uff0c e e \u662f\u5176\u4e2d\u4e00\u6761\u8fb9\uff08\u5373 e\\in E e\\in E \uff09\uff0c\u5982\u679c G-e G-e \u662f\u4e0d\u8fde\u901a\u7684\uff0c\u5219\u8fb9 e e \u662f\u56fe G G \u7684\u4e00\u6761\u5272\u8fb9\uff08\u6865\uff09\u3002 \u5272\u8fb9\u5224\u5b9a\u6cd5\u5219\uff1a \u65e0\u5411\u8fb9 (x,y) (x,y) \u662f\u6865\uff0c\u5f53\u4e14\u4ec5\u5f53\u641c\u7d22\u6811\u4e0a\u5b58\u5728 x x \u7684\u4e00\u4e2a\u5b50\u8282\u70b9 y y ,\u6ee1\u8db3: dfn[x] < low[y] dfn[x] < low[y] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 const int N = 1005 ; const int maxn = N * N + 5 ; struct edge { int v , next , w ; } e [ maxn << 1 ]; int n , m ; int head [ N ], cnt ; int ans = INF ; void add ( int u , int v , int w ){ e [ cnt ]. v = v ; e [ cnt ]. w = w ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } int dfn [ N ], low [ N ]; int num = 0 ; void inits (){ // memset(head,-1,sizeof head); for ( int i = 0 ; i <= n ; i ++ ){ dfn [ i ] = low [ i ] = 0 ; head [ i ] = -1 ; } cnt = 0 ; num = 0 ; ans = INF ; } void Tarjan ( int x , int in_edge ){ dfn [ x ] = low [ x ] = ++ num ; for ( int i = head [ x ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; if ( ! dfn [ v ]){ Tarjan ( v , i ); low [ x ] = min ( low [ v ], low [ x ]); if ( low [ v ] > dfn [ x ]){ //\u6ce8\u610f\u8fd9\u91cc\u662f> ans = min ( e [ i ]. w , ans ); } } else if ( i != ( in_edge ^ 1 )) low [ x ] = min ( low [ x ], dfn [ v ]); //\u6210\u5bf9\u53d8\u6362\uff0c\u914d\u5408\u5b58\u8fb9\u4e0b\u6807\u4ece0\u5f00\u59cb } } \u4e3b\u51fd\u6570\u5185\uff0c\u5982\u679c\u56fe\u4e0d\u8fde\u901a\u5c31\u591a\u6b21Tarjan 1 Tarjan ( 1 , -1 );","title":"\u65e0\u5411\u56fe\u6c42\u8fde\u901a\u5206\u91cf\uff0c\u5272\u8fb9\uff08\u6865\uff09"},{"location":"graph/connected-components/#_6","text":"\u5728\u4e00\u5f20\u8fde\u901a\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u70b9 u u \u548c v v \uff0c\u5982\u679c\u65e0\u8bba\u5220\u53bb\u54ea\u6761\u8fb9\uff08\u53ea\u80fd\u5220\u53bb\u4e00\u6761\uff09\u90fd\u4e0d\u80fd\u4f7f\u5b83\u4eec\u4e0d\u8fde\u901a\uff0c\u6211\u4eec\u5c31\u8bf4 u u \u548c v v \u8fb9\u53cc\u8fde\u901a\u3002 \u5728\u4e00\u5f20\u8fde\u901a\u7684\u65e0\u5411\u56fe\u4e2d\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u70b9 u u \u548c v v \uff0c\u5982\u679c\u65e0\u8bba\u5220\u53bb\u54ea\u4e2a\u70b9\uff08\u53ea\u80fd\u5220\u53bb\u4e00\u4e2a\uff0c\u4e14\u4e0d\u80fd\u5220 u u \u548c v v \u81ea\u5df1\uff09\u90fd\u4e0d\u80fd\u4f7f\u5b83\u4eec\u4e0d\u8fde\u901a\uff0c\u6211\u4eec\u5c31\u8bf4 u u \u548c v v \u70b9\u53cc\u8fde\u901a\u3002","title":"\u53cc\u8054\u901a\u5206\u91cf"},{"location":"graph/diameter-of-tree/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a zrz \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u5b9a\u4e49 \u00b6 \u56fe\u4e2d\u6240\u6709\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u503c\u5373\u4e3a\u300c\u76f4\u5f84\u300d\uff0c\u53ef\u4ee5\u7528\u4e24\u6b21 DFS \u6216\u8005\u6811\u5f62 DP \u7684\u65b9\u6cd5\u5728 O(n) O(n) \u65f6\u95f4\u6c42\u51fa\u6811\u7684\u76f4\u5f84\u3002 \u6811\u4e0adfs \u00b6 \u590d\u6742\u5ea6: O(n) O(n) \u9996\u5148\u5bf9\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\u505a DFS \u6c42\u51fa\u6700\u8fdc\u7684\u7ed3\u70b9\uff0c\u7136\u540e\u4ee5\u8fd9\u4e2a\u7ed3\u70b9\u4e3a\u6839\u7ed3\u70b9\u518d\u505a DFS \u5230\u8fbe\u53e6\u4e00\u4e2a\u6700\u8fdc\u7ed3\u70b9\u3002\u7b2c\u4e00\u6b21 DFS \u5230\u8fbe\u7684\u7ed3\u70b9\u53ef\u4ee5\u8bc1\u660e\u4e00\u5b9a\u662f\u8fd9\u4e2a\u56fe\u7684\u76f4\u5f84\u7684\u4e00\u7aef\uff0c\u7b2c\u4e8c\u6b21 DFS \u5c31\u4f1a\u8fbe\u5230\u53e6\u4e00\u7aef\u3002 \u8bf4\u660e\uff1a\u5bf9\u4e8e\u6811\u7684\u76f4\u5f84\u95ee\u9898\uff0c\u5982\u679c\u8981\u6c42\u6570\u76f4\u5f84\u7684\u5de6\u53f3\u7aef\u70b9\u548c\u6811\u76f4\u5f84\u7684\u4e2d\u70b9\u7528\u6811dp\u4e0d\u6613\u6c42\uff0c\u89e3\u6cd5\u662f\u4e24\u6b21dfs\u6216\u8005\u4e24\u6b21bfs \u6ce8\u610f\uff1a\u4e0d\u80fd\u5728\u5b58\u5728\u8d1f\u8fb9\u7684\u60c5\u51b5\u4e0b\u6c42\u76f4\u5f84: \u5927\u795e\u89e3\u91ca\uff1a\u56e0\u4e3a\u5728\u7b2c\u4e00\u6b21\u904d\u5386\u540e, \u6709\u7684\u8fb9\u53d8\u4e3a\u4e86 -1, \u7136\u540e\u4f60\u7b2c\u4e00\u6b21bfs\u6216dfs\u4f1a\u56e0\u4e3a\u9009\u53d6\u7684\u8d77\u70b9 s \u4e0d\u540c, \u800c\u5bfc\u81f4\u6c42\u51fa\u4e0d\u540c\u7684 \u6700\u8fdc\u70b9,\u90a3\u4e48\u4f60\u5728\u7528\u8fd9\u4e2a\u4e0d\u4e00\u5b9a\u6b63\u786e\u7684\u6700\u8fdc\u70b9\u6c42\u51fa\u7684 \u76f4\u5f84 \u4e5f\u53ef\u80fd\u662f\u9519\u8bef\u7684 P5536\u3010XR-3\u3011\u6838\u5fc3\u57ce\u5e02 \u6811\u578bdp \u00b6 \u590d\u6742\u5ea6: O(n) O(n) \u6211\u4eec\u4ece\u5982\u4e0b\u89d2\u5ea6\u8003\u8651\uff1a \u904d\u5386\u6811\u4e0a\u6bcf\u4e00\u4e2a\u70b9\uff08\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\uff0c\u5e76\u628a\u5b83\u770b\u4f5c\u6839\u8282\u70b9\uff09\u7ef4\u62a4\u6570\u7ec4D\uff0c\u6570\u7ec4D[x]\u8868\u793ax\u5230\u5b50\u6811\u6700\u8fdc\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u6211\u4eec\u4e00\u5b9a\u662f\u4ecev\uff08x\u7684\u5b50\u8282\u70b9\uff09\u8f6c\u79fb\u8fc7\u6765\u7684\uff0c\u6709D[x] = max(D[x],D[v]+w)\uff0c\u7136\u540e\u5c31\u597d\u529e\u4e86\uff0c\u5982\u679c\u6211\u4eec\u628ax\u770b\u4f5c\u6839\u8282\u70b9\uff0c\u76f4\u5f84\u5c31\u662fD[x]\u52a0\u4e00\u4e2a\u6b21\u957f\u8def\uff08\u5230\u6700\u5b50\u8282\u70b9\u7b2c\u4e8c\u8fdc\u7684\u8ddd\u79bb\uff09\u7136\u540e\u6709ans = max(ans,D[x]+D[v]+w) \u53ef\u7528\u4e8e\u6709\u8d1f\u6743\u8fb9\u6c42\u89e3\u76f4\u5f84\u7684\u95ee\u9898 \u6a21\u7248 1 2 3 4 5 6 7 8 9 10 11 12 int D [ N ]; int ans = 0 ; void dp ( int x , int fa ){ for ( int i = head [ x ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; int w = e [ i ]. w ; if ( v == fa ) continue ; dp ( v , x ); ans = max ( ans , D [ x ] + D [ v ] + w ); D [ x ] = max ( D [ x ], D [ v ] + w ); } } - \u6811\u76f4\u5f84","title":"\u6811\u76f4\u5f84"},{"location":"graph/diameter-of-tree/#_1","text":"\u56fe\u4e2d\u6240\u6709\u6700\u77ed\u8def\u5f84\u7684\u6700\u5927\u503c\u5373\u4e3a\u300c\u76f4\u5f84\u300d\uff0c\u53ef\u4ee5\u7528\u4e24\u6b21 DFS \u6216\u8005\u6811\u5f62 DP \u7684\u65b9\u6cd5\u5728 O(n) O(n) \u65f6\u95f4\u6c42\u51fa\u6811\u7684\u76f4\u5f84\u3002","title":"\u5b9a\u4e49"},{"location":"graph/diameter-of-tree/#dfs","text":"\u590d\u6742\u5ea6: O(n) O(n) \u9996\u5148\u5bf9\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\u505a DFS \u6c42\u51fa\u6700\u8fdc\u7684\u7ed3\u70b9\uff0c\u7136\u540e\u4ee5\u8fd9\u4e2a\u7ed3\u70b9\u4e3a\u6839\u7ed3\u70b9\u518d\u505a DFS \u5230\u8fbe\u53e6\u4e00\u4e2a\u6700\u8fdc\u7ed3\u70b9\u3002\u7b2c\u4e00\u6b21 DFS \u5230\u8fbe\u7684\u7ed3\u70b9\u53ef\u4ee5\u8bc1\u660e\u4e00\u5b9a\u662f\u8fd9\u4e2a\u56fe\u7684\u76f4\u5f84\u7684\u4e00\u7aef\uff0c\u7b2c\u4e8c\u6b21 DFS \u5c31\u4f1a\u8fbe\u5230\u53e6\u4e00\u7aef\u3002 \u8bf4\u660e\uff1a\u5bf9\u4e8e\u6811\u7684\u76f4\u5f84\u95ee\u9898\uff0c\u5982\u679c\u8981\u6c42\u6570\u76f4\u5f84\u7684\u5de6\u53f3\u7aef\u70b9\u548c\u6811\u76f4\u5f84\u7684\u4e2d\u70b9\u7528\u6811dp\u4e0d\u6613\u6c42\uff0c\u89e3\u6cd5\u662f\u4e24\u6b21dfs\u6216\u8005\u4e24\u6b21bfs \u6ce8\u610f\uff1a\u4e0d\u80fd\u5728\u5b58\u5728\u8d1f\u8fb9\u7684\u60c5\u51b5\u4e0b\u6c42\u76f4\u5f84: \u5927\u795e\u89e3\u91ca\uff1a\u56e0\u4e3a\u5728\u7b2c\u4e00\u6b21\u904d\u5386\u540e, \u6709\u7684\u8fb9\u53d8\u4e3a\u4e86 -1, \u7136\u540e\u4f60\u7b2c\u4e00\u6b21bfs\u6216dfs\u4f1a\u56e0\u4e3a\u9009\u53d6\u7684\u8d77\u70b9 s \u4e0d\u540c, \u800c\u5bfc\u81f4\u6c42\u51fa\u4e0d\u540c\u7684 \u6700\u8fdc\u70b9,\u90a3\u4e48\u4f60\u5728\u7528\u8fd9\u4e2a\u4e0d\u4e00\u5b9a\u6b63\u786e\u7684\u6700\u8fdc\u70b9\u6c42\u51fa\u7684 \u76f4\u5f84 \u4e5f\u53ef\u80fd\u662f\u9519\u8bef\u7684 P5536\u3010XR-3\u3011\u6838\u5fc3\u57ce\u5e02","title":"\u6811\u4e0adfs"},{"location":"graph/diameter-of-tree/#dp","text":"\u590d\u6742\u5ea6: O(n) O(n) \u6211\u4eec\u4ece\u5982\u4e0b\u89d2\u5ea6\u8003\u8651\uff1a \u904d\u5386\u6811\u4e0a\u6bcf\u4e00\u4e2a\u70b9\uff08\u4ece\u53f6\u5b50\u8282\u70b9\u5f00\u59cb\uff0c\u5e76\u628a\u5b83\u770b\u4f5c\u6839\u8282\u70b9\uff09\u7ef4\u62a4\u6570\u7ec4D\uff0c\u6570\u7ec4D[x]\u8868\u793ax\u5230\u5b50\u6811\u6700\u8fdc\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u6211\u4eec\u4e00\u5b9a\u662f\u4ecev\uff08x\u7684\u5b50\u8282\u70b9\uff09\u8f6c\u79fb\u8fc7\u6765\u7684\uff0c\u6709D[x] = max(D[x],D[v]+w)\uff0c\u7136\u540e\u5c31\u597d\u529e\u4e86\uff0c\u5982\u679c\u6211\u4eec\u628ax\u770b\u4f5c\u6839\u8282\u70b9\uff0c\u76f4\u5f84\u5c31\u662fD[x]\u52a0\u4e00\u4e2a\u6b21\u957f\u8def\uff08\u5230\u6700\u5b50\u8282\u70b9\u7b2c\u4e8c\u8fdc\u7684\u8ddd\u79bb\uff09\u7136\u540e\u6709ans = max(ans,D[x]+D[v]+w) \u53ef\u7528\u4e8e\u6709\u8d1f\u6743\u8fb9\u6c42\u89e3\u76f4\u5f84\u7684\u95ee\u9898 \u6a21\u7248 1 2 3 4 5 6 7 8 9 10 11 12 int D [ N ]; int ans = 0 ; void dp ( int x , int fa ){ for ( int i = head [ x ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; int w = e [ i ]. w ; if ( v == fa ) continue ; dp ( v , x ); ans = max ( ans , D [ x ] + D [ v ] + w ); D [ x ] = max ( D [ x ], D [ v ] + w ); } } - \u6811\u76f4\u5f84","title":"\u6811\u578bdp"},{"location":"graph/difference-constraint/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a DcmTruman \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6709\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898 \u00b6 \u82e5\u5e72\u53d8\u91cf \u53d8\u91cf\u5dee\u6765\u7ea6\u675f\u5173\u7cfb x_{1}-x_{2} > 1 x_{1}-x_{2} > 1 x_{2}-x_{3} > 2 x_{2}-x_{3} > 2 ... ... \u6c42\u89e3(\u4efb\u610f\u89e3\u3001\u4e00\u7ec4\u89e3\u3001\u6700\u5927\u6700\u5c0f\u89e3\uff09 \u600e\u4e48\u505a\uff1f \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf \u662f\u4e00\u79cd\u7279\u6b8a\u7684 n n \u5143\u4e00\u6b21\u4e0d\u7b49\u5f0f\u7ec4\uff0c\u5b83\u5305\u542b n n \u4e2a\u53d8\u91cf x_1,x_2,...,x_n x_1,x_2,...,x_n \u4ee5\u53ca m m \u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6\u662f\u7531\u4e24\u4e2a\u5176\u4e2d\u7684\u53d8\u91cf\u505a\u5dee\u6784\u6210\u7684\uff0c\u5f62\u5982 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \uff0c\u5176\u4e2d c_k c_k \u662f\u5e38\u6570\uff08\u53ef\u4ee5\u662f\u975e\u8d1f\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u8d1f\u6570\uff09\u3002\u6211\u4eec\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\uff1a\u6c42\u4e00\u7ec4\u89e3 x_1=a_1,x_2=a_2,...,x_n=a_n x_1=a_1,x_2=a_2,...,x_n=a_n \uff0c\u4f7f\u5f97\u6240\u6709\u7684\u7ea6\u675f\u6761\u4ef6\u5f97\u5230\u6ee1\u8db3\uff0c\u5426\u5219\u5224\u65ad\u51fa\u65e0\u89e3\u3002 \u8fd8\u8bb0\u5f97\u6700\u77ed\u8def\u5417\uff1f \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \u90fd\u53ef\u4ee5\u53d8\u5f62\u6210 x_i\\leq x_j+c_k x_i\\leq x_j+c_k \uff0c\u8fd9\u4e0e\u5355\u6e90\u6700\u77ed\u8def\u4e2d\u7684\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f dist[y]\\leq dist[x]+z dist[y]\\leq dist[x]+z \u975e\u5e38\u76f8\u4f3c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u53d8\u91cf x_i x_i \u770b\u505a\u56fe\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \uff0c\u4ece\u7ed3\u70b9 j j \u5411\u7ed3\u70b9 i i \u8fde\u4e00\u6761\u957f\u5ea6\u4e3a c_k c_k \u7684\u6709\u5411\u8fb9\u3002 \u5177\u4f53\u505a\u6cd5 \u00b6 \u8bbe dist[0]=0 dist[0]=0 \u5e76\u5411\u6bcf\u4e00\u4e2a\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u8dd1\u5355\u6e90\u6700\u77ed\u8def\uff0c\u82e5\u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\uff0c\u5219\u7ed9\u5b9a\u7684\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u65e0\u89e3\uff0c\u5426\u5219\uff0c x_i=dist[i] x_i=dist[i] \u4e3a\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u4e00\u7ec4\u89e3\u3002 \u4e00\u822c\u4f7f\u7528 Bellman-Ford \u6216\u961f\u5217\u4f18\u5316\u7684 Bellman-Ford\uff08\u4fd7\u79f0 SPFA\uff0c\u5728\u67d0\u4e9b\u968f\u673a\u56fe\u8dd1\u5f97\u5f88\u5feb\uff09\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u73af\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nm) O(nm) \u3002 \u4f8b\u9898 luogu P1993 \u5c0f K \u7684\u519c\u573a \u00b6 \u9898\u76ee\u5927\u610f\uff1a\u6c42\u89e3\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\uff0c\u6709 m m \u6761\u7ea6\u675f\u6761\u4ef6\uff0c\u6bcf\u6761\u90fd\u4e3a\u5f62\u5982 x_a-x_b\\geq c_k x_a-x_b\\geq c_k \uff0c x_a-x_b\\leq c_k x_a-x_b\\leq c_k \u6216 x_a=x_b x_a=x_b \u7684\u5f62\u5f0f\uff0c\u5224\u65ad\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u6709\u6ca1\u6709\u89e3\u3002 \u9898\u610f \u8f6c\u5316 \u8fde\u8fb9 x_a - x_b \\geq c x_a - x_b \\geq c x_b - x_a \\leq -c x_b - x_a \\leq -c add(a, b, -c); x_a - x_b < c x_a - x_b < c x_a - x_b \\leq c-1 x_a - x_b \\leq c-1 add(b, a, c-1); x_a = x_b x_a = x_b x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 add(b, a, 0), add(a, b, 0); \u6700\u957f\u8fb9\u7248\u672c \u00b6 \u4e5f\u53ef\u4ee5\u6539\u6210 \\ge \\ge ,\u4e0d\u8fc7\u8981\u6c42\u6700\u957f\u8def\uff0c\u521d\u59cb\u503c-INF \u9898\u610f \u8f6c\u5316 \u8fde\u8fb9 x_a - x_b \\leq c x_a - x_b \\leq c x_b - x_a \\geq -c x_b - x_a \\geq -c add(a, b, -c); x_a - x_b > c x_a - x_b > c x_a - x_b \\geq c+1 x_a - x_b \\geq c+1 add(b, a, c+1); x_a = x_b x_a = x_b x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 add(b, a, 0), add(a, b, 0); \u6709\u4e00\u6761\u7ebf\u6bb5\uff0c1\u5230n\uff0cn\u4e2a\u4f4d\u7f6e\uff0c\u4f60\u6709m\u4e2a\u68cb\u5b50\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u653e\u4e00\u4e9b\u68cb\u5b50\uff0c\u7ed9\u4f60q\u4e2a\u533a\u95f4\u6761\u4ef6 a,b,c a,b,c \uff0c\u8868\u793a [a,b] [a,b] \u533a\u95f4\u6700\u5c11\u8981\u6709c\u4e2a\u68cb\u5b50\uff0c\u95ee\u4f60\u81f3\u5c11\u8981\u7528\u591a\u5c11\u4e2a\u68cb\u5b50 d_{i} d_{i} \u8868\u793a\u524di\u4e2a\u4f4d\u7f6e\u7684\u68cb\u5b50\u4e2a\u6570\uff0c\u5bf9\u4e8e\u6761\u4ef6\uff0c\u5219\u662f d_{b}-d_{a-1} \\ge c d_{b}-d_{a-1} \\ge c d_{i+1} - d_{i} \\ge 0 d_{i+1} - d_{i} \\ge 0 d_{n} - d_{0} \\le m d_{n} - d_{0} \\le m \u4e8c\u5206+\u5dee\u5206\u7ea6\u675fspfa\u5224\u65ad\u662f\u5426\u6709\u89e3","title":"\u5dee\u5206\u7ea6\u675f"},{"location":"graph/difference-constraint/#_1","text":"\u82e5\u5e72\u53d8\u91cf \u53d8\u91cf\u5dee\u6765\u7ea6\u675f\u5173\u7cfb x_{1}-x_{2} > 1 x_{1}-x_{2} > 1 x_{2}-x_{3} > 2 x_{2}-x_{3} > 2 ... ... \u6c42\u89e3(\u4efb\u610f\u89e3\u3001\u4e00\u7ec4\u89e3\u3001\u6700\u5927\u6700\u5c0f\u89e3\uff09 \u600e\u4e48\u505a\uff1f \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf \u662f\u4e00\u79cd\u7279\u6b8a\u7684 n n \u5143\u4e00\u6b21\u4e0d\u7b49\u5f0f\u7ec4\uff0c\u5b83\u5305\u542b n n \u4e2a\u53d8\u91cf x_1,x_2,...,x_n x_1,x_2,...,x_n \u4ee5\u53ca m m \u4e2a\u7ea6\u675f\u6761\u4ef6\uff0c\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6\u662f\u7531\u4e24\u4e2a\u5176\u4e2d\u7684\u53d8\u91cf\u505a\u5dee\u6784\u6210\u7684\uff0c\u5f62\u5982 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \uff0c\u5176\u4e2d c_k c_k \u662f\u5e38\u6570\uff08\u53ef\u4ee5\u662f\u975e\u8d1f\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u8d1f\u6570\uff09\u3002\u6211\u4eec\u8981\u89e3\u51b3\u7684\u95ee\u9898\u662f\uff1a\u6c42\u4e00\u7ec4\u89e3 x_1=a_1,x_2=a_2,...,x_n=a_n x_1=a_1,x_2=a_2,...,x_n=a_n \uff0c\u4f7f\u5f97\u6240\u6709\u7684\u7ea6\u675f\u6761\u4ef6\u5f97\u5230\u6ee1\u8db3\uff0c\u5426\u5219\u5224\u65ad\u51fa\u65e0\u89e3\u3002 \u8fd8\u8bb0\u5f97\u6700\u77ed\u8def\u5417\uff1f \u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \u90fd\u53ef\u4ee5\u53d8\u5f62\u6210 x_i\\leq x_j+c_k x_i\\leq x_j+c_k \uff0c\u8fd9\u4e0e\u5355\u6e90\u6700\u77ed\u8def\u4e2d\u7684\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f dist[y]\\leq dist[x]+z dist[y]\\leq dist[x]+z \u975e\u5e38\u76f8\u4f3c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e2a\u53d8\u91cf x_i x_i \u770b\u505a\u56fe\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7ea6\u675f\u6761\u4ef6 x_i-x_j\\leq c_k x_i-x_j\\leq c_k \uff0c\u4ece\u7ed3\u70b9 j j \u5411\u7ed3\u70b9 i i \u8fde\u4e00\u6761\u957f\u5ea6\u4e3a c_k c_k \u7684\u6709\u5411\u8fb9\u3002","title":"\u5047\u8bbe\u6211\u4eec\u73b0\u5728\u6709\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898"},{"location":"graph/difference-constraint/#_2","text":"\u8bbe dist[0]=0 dist[0]=0 \u5e76\u5411\u6bcf\u4e00\u4e2a\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u8dd1\u5355\u6e90\u6700\u77ed\u8def\uff0c\u82e5\u56fe\u4e2d\u5b58\u5728\u8d1f\u73af\uff0c\u5219\u7ed9\u5b9a\u7684\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u65e0\u89e3\uff0c\u5426\u5219\uff0c x_i=dist[i] x_i=dist[i] \u4e3a\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u7684\u4e00\u7ec4\u89e3\u3002 \u4e00\u822c\u4f7f\u7528 Bellman-Ford \u6216\u961f\u5217\u4f18\u5316\u7684 Bellman-Ford\uff08\u4fd7\u79f0 SPFA\uff0c\u5728\u67d0\u4e9b\u968f\u673a\u56fe\u8dd1\u5f97\u5f88\u5feb\uff09\u5224\u65ad\u56fe\u4e2d\u662f\u5426\u5b58\u5728\u8d1f\u73af\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nm) O(nm) \u3002","title":"\u5177\u4f53\u505a\u6cd5"},{"location":"graph/difference-constraint/#luogu-p1993-k","text":"\u9898\u76ee\u5927\u610f\uff1a\u6c42\u89e3\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\uff0c\u6709 m m \u6761\u7ea6\u675f\u6761\u4ef6\uff0c\u6bcf\u6761\u90fd\u4e3a\u5f62\u5982 x_a-x_b\\geq c_k x_a-x_b\\geq c_k \uff0c x_a-x_b\\leq c_k x_a-x_b\\leq c_k \u6216 x_a=x_b x_a=x_b \u7684\u5f62\u5f0f\uff0c\u5224\u65ad\u8be5\u5dee\u5206\u7ea6\u675f\u7cfb\u7edf\u6709\u6ca1\u6709\u89e3\u3002 \u9898\u610f \u8f6c\u5316 \u8fde\u8fb9 x_a - x_b \\geq c x_a - x_b \\geq c x_b - x_a \\leq -c x_b - x_a \\leq -c add(a, b, -c); x_a - x_b < c x_a - x_b < c x_a - x_b \\leq c-1 x_a - x_b \\leq c-1 add(b, a, c-1); x_a = x_b x_a = x_b x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 add(b, a, 0), add(a, b, 0);","title":"\u4f8b\u9898 luogu P1993 \u5c0f K \u7684\u519c\u573a"},{"location":"graph/difference-constraint/#_3","text":"\u4e5f\u53ef\u4ee5\u6539\u6210 \\ge \\ge ,\u4e0d\u8fc7\u8981\u6c42\u6700\u957f\u8def\uff0c\u521d\u59cb\u503c-INF \u9898\u610f \u8f6c\u5316 \u8fde\u8fb9 x_a - x_b \\leq c x_a - x_b \\leq c x_b - x_a \\geq -c x_b - x_a \\geq -c add(a, b, -c); x_a - x_b > c x_a - x_b > c x_a - x_b \\geq c+1 x_a - x_b \\geq c+1 add(b, a, c+1); x_a = x_b x_a = x_b x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 x_a - x_b \\leq 0, \\space x_b - x_a \\leq 0 add(b, a, 0), add(a, b, 0); \u6709\u4e00\u6761\u7ebf\u6bb5\uff0c1\u5230n\uff0cn\u4e2a\u4f4d\u7f6e\uff0c\u4f60\u6709m\u4e2a\u68cb\u5b50\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u653e\u4e00\u4e9b\u68cb\u5b50\uff0c\u7ed9\u4f60q\u4e2a\u533a\u95f4\u6761\u4ef6 a,b,c a,b,c \uff0c\u8868\u793a [a,b] [a,b] \u533a\u95f4\u6700\u5c11\u8981\u6709c\u4e2a\u68cb\u5b50\uff0c\u95ee\u4f60\u81f3\u5c11\u8981\u7528\u591a\u5c11\u4e2a\u68cb\u5b50 d_{i} d_{i} \u8868\u793a\u524di\u4e2a\u4f4d\u7f6e\u7684\u68cb\u5b50\u4e2a\u6570\uff0c\u5bf9\u4e8e\u6761\u4ef6\uff0c\u5219\u662f d_{b}-d_{a-1} \\ge c d_{b}-d_{a-1} \\ge c d_{i+1} - d_{i} \\ge 0 d_{i+1} - d_{i} \\ge 0 d_{n} - d_{0} \\le m d_{n} - d_{0} \\le m \u4e8c\u5206+\u5dee\u5206\u7ea6\u675fspfa\u5224\u65ad\u662f\u5426\u6709\u89e3","title":"\u6700\u957f\u8fb9\u7248\u672c"},{"location":"graph/euler/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a zrz \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u6b27\u62c9\u901a\u8def\uff0c\u6b27\u62c9\u56de\u8def \u00b6 \u6b27\u62c9\u901a\u8def : \u901a\u8fc7\u56fe\u4e2d\u6bcf\u6761\u8fb9\u4e14\u53ea\u901a\u8fc7\u4e00\u6b21\uff0c\u5e76\u4e14\u7ecf\u8fc7\u6bcf\u4e00\u9876\u70b9\u7684\u901a\u8def \u6b27\u62c9\u56de\u8def : \u901a\u8fc7\u56fe\u4e2d\u6bcf\u6761\u8fb9\u4e14\u53ea\u901a\u8fc7\u4e00\u6b21\uff0c\u5e76\u4e14\u7ecf\u8fc7\u6bcf\u4e00\u9876\u70b9\u7684\u56de\u8def \u6709\u5411\u56fe\u7684\u57fa\u56fe \uff1a\u5ffd\u7565\u6709\u5411\u56fe\u6240\u6709\u8fb9\u7684\u65b9\u5411\uff0c\u5f97\u5230\u7684\u65e0\u5411\u56fe\u79f0\u4e3a\u8be5\u6709\u5411\u56fe\u7684\u57fa\u56fe\u3002 \u65e0\u5411\u56fe \u00b6 G\u662f\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u5219\u79f0\u7ecf\u8fc7G\u7684\u6bcf\u6761\u8fb9\u4e00\u6b21\u5e76\u4e14\u4ec5\u4e00\u6b21\u7684\u8def\u5f84\u4e3a\u6b27\u62c9\u901a\u8def\uff1b \u5982\u679c\u6b27\u62c9\u901a\u8def\u662f\u56de\u8def\uff08\u8d77\u70b9\u548c\u7ec8\u70b9\u662f\u540c\u4e00\u4e2a\u9876\u70b9\uff09\uff0c\u5219\u79f0\u6b64\u56de\u8def\u662f\u6b27\u62c9\u56de\u8def \u5177\u6709\u6b27\u62c9\u56de\u8def\u7684\u65e0\u5411\u56feG\u6210\u4e3a\u6b27\u62c9\u56fe \u5b9a\u7406 \u65e0\u5411\u56feG\u5b58\u5728\u6b27\u62c9\u901a\u8def\u7684\u5145\u8981\u6761\u4ef6\u662f\uff1aG\u4e3a\u8fde\u901a\u56fe\uff0c\u5e76\u4e14G\u4ec5\u6709\u4e24\u4e2a\u5947\u5ea6\u7ed3\u70b9\uff08\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u9876\u70b9\uff09\u6216\u8005\u65e0\u5947\u5ea6\u7ed3\u70b9\u3002 \u63a8\u8bba \uff081\uff09 \u5f53G\u662f\u4ec5\u6709\u4e24\u4e2a\u5947\u5ea6\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u65f6\uff0cG\u7684\u6b27\u62c9\u901a\u8def\u5fc5\u4ee5\u6b64\u4e24\u4e2a\u7ed3\u70b9\u4e3a\u7aef\u70b9\uff1b \uff082\uff09\u5f53G\u662f\u65e0\u5947\u5ea6\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u65f6\uff0cG\u5fc5\u6709\u6b27\u62c9\u56de\u8def \uff083\uff09G\u4e3a\u6b27\u62c9\u56fe\uff08\u5b58\u5728\u6b27\u62c9\u56de\u8def\uff09\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u662f G\u4e3a\u65e0\u5947\u5ea6\u7ed3\u70b9\u7684\u8fde\u901a\u56fe \u6709\u5411\u56fe \u00b6 \uff081\uff09\u8bbeD\u662f\u6709\u5411\u56fe\uff0cD\u7684\u57fa\u56fe\u8fde\u901a\uff0c\u5219\u79f0\u7ecf\u8fc7D\u7684\u6bcf\u6761\u8fb9\u4e00\u6b21\u5e76\u4e14\u4ec5\u6709\u4e00\u6b21\u7684\u6709\u5411\u8def\u5f84\u4e3a \u6709\u5411\u6b27\u62c9\u901a\u8def \uff082\uff09\u5982\u679c\u6709\u5411\u6b27\u62c9\u901a\u8def\u662f\u6709\u5411\u56de\u8def\uff0c\u5219\u79f0\u6b64\u6709\u5411\u56de\u8def\u4e3a \u6709\u5411\u6b27\u62c9\u56de\u8def \uff083\uff09\u5177\u6709\u6709\u5411\u6b27\u62c9\u56de\u8def\u7684\u56feD\u79f0\u4e3a\u6709\u5411\u6b27\u62c9\u56fe \uff08\u6709\u5411\u56fe\uff09 \u5b9a\u7406 \u6709\u5411\u56feD\u5b58\u5728\u6b27\u62c9\u901a\u8def\u7684\u5145\u8981\u6761\u4ef6\u662f\uff1aD\u4e3a\u6709\u5411\u56fe\uff0cD\u7684\u57fa\u56fe\u8fde\u901a\uff0c\u5e76\u4e14\u6240\u6709\u9876\u70b9\u7684\u51fa\u5ea6\u4e0e\u5165\u5ea6\u76f8\u7b49\uff1b\u6216\u8005 \u9664\u4e24\u4e2a\u9876\u70b9\u5916\uff0c\u5176\u4f59\u9876\u70b9\u7684\u51fa\u5ea6\u4e0e\u5165\u5ea6\u90fd\u76f8\u7b49\uff0c\u800c\u8fd9\u4e24\u4e2a\u9876\u70b9\u4e2d\u4e00\u4e2a\u9876\u70b9\u7684\u51fa\u5ea6\u4e0e\u5165\u5ea6\u4e4b\u5dee\u4e3a1\uff0c\u53e6\u4e00\u4e2a\u9876\u70b9\u7684\u51fa\u5ea6\u4e0e\u5165\u5ea6\u4e4b\u5dee\u4e3a-1. \u63a8\u8bba \uff081\uff09\u5f53D\u9664\u51fa\u3001\u5165\u5ea6\u4e4b\u5dee\u4e3a1\uff0c-1\u7684\u4e24\u4e2a\u9876\u70b9\u4e4b\u5916\uff0c\u5176\u4f59\u9876\u70b9\u7684\u51fa\u5ea6\u4e0e\u5165\u5ea6\u76f8\u7b49\u65f6\uff0cD\u7684\u6709\u5411\u6b27\u62c9\u901a\u8def\u5fc5\u4ee5\u51fa\u3001\u5165\u5ea6\u4e4b\u5dee\u4e3a1\u7684\u9876\u70b9\u4f5c\u4e3a\u59cb\u70b9\uff0c\u4ee5\u51fa\u3001\u5165\u5ea6\u4e4b\u5dee\u4e3a-1\u7684\u9876\u70b9\u4f5c\u4e3a\u7ec8\u70b9\u3002 \uff082\uff09\u5f53D\u7684\u6240\u6709\u9876\u70b9\u7684\u51fa\u3001\u5165\u5ea6\u90fd\u76f8\u7b49\u65f6\uff0cD\u4e2d\u5b58\u5728\u6709\u5411\u6b27\u62c9\u56de\u8def\u3002 \uff083\uff09\u6709\u5411\u56feD\u4e3a\u6709\u5411\u6b27\u62c9\u56fe\u7684\u5145\u8981\u6761\u4ef6\u662f D\u7684\u57fa\u56fe\u4e3a\u8fde\u901a\u56fe\uff0c\u5e76\u4e14\u6240\u6709\u9876\u70b9\u7684\u51fa\u3001\u5165\u5ea6\u90fd\u76f8\u7b49\u3002 \u6c42\u89e3\u6b27\u62c9\u56de\u8def\u901a\u8fc7dfs\u6216\u5e76\u67e5\u96c6\u6c42\u89e3 \u00b6 UVA-10054 \u9898\u610f\uff1a\u6709\u4e00\u5806\u73e0\u5b50\uff0c\u6bcf\u4e2a\u73e0\u5b50\u6709\u4e24\u4e2a\u989c\u8272\uff0c\u6211\u4eec\u9700\u8981\u4ece\u4e2d\u627e\u51fa\u6765\u4e00\u4e9b\u73e0\u5b50\u628a\u5b83\u7a7f\u6210\u4e00\u4e32\uff0c\u6bcf\u4e24\u4e2a\u73e0\u5b50\u76f8\u5bf9\u7684\u989c\u8272\u76f8\u540c \u6211\u4eec\u628a\u6bcf\u4e2a\u73e0\u5b50\u770b\u6574\u4e00\u4e2a\u8fb9\uff0c\u4e24\u4e2a\u989c\u8272\u770b\u6210\u8282\u70b9\uff0c\u5c31\u662f\u770b\u770b\u7ed9\u5b9a\u7684\u8fb9\u53c8\u6ca1\u6709\u6b27\u62c9\u56de\u8def \u65e2\u7136\u95ee\u4f60\u6709\u65e0\u6b27\u62c9\u56de\u8def\u90a3\u5c31\u6b27\u62c9\u5b9a\u7406\u5224\u65ad\u6709\u6ca1\u6709\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\uff08\u5982\u679c\u662f\u5bfb\u627e\u6b27\u62c9\u901a\u8def\u7684\u8bdd\u9700\u8981\u4e24\u4e2a\u6216\u6ca1\u6709\u5947\u6570\u5ea6\u7684\u70b9\uff09 \u5982\u679c\u5168\u4e3a\u5076\u6570\u5ea6\u7684\u70b9\uff0c\u5c31\u80af\u5b9a\u6709\u6b27\u62c9\u56de\u8def\uff0c\u76f4\u63a5\u7206\u641c\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ce8\u610f\u4f1a\u53c8\u91cd\u8fb9\u7684\u60c5\u51b5\uff0c\u7136\u540e\u56e0\u4e3a\u4f60\u4e5f\u4e0d\u77e5\u90531-50\u4e4b\u5185\u7684\u90a3\u4e2a\u70b9\u5728\u56fe\u5185\u4f7f\u7528\uff0c\u6240\u4ee5 \u6211\u4eec\u76f4\u63a5\u5168\u641c\u4e00\u4e0b\uff0c\u641c\u5b8c\u4e00\u5b9a\u662f\u6240\u6709\u7684\u70b9\u90fd\u7528\u5b8c\u4e86\u6240\u4ee5\u4e0d\u4f1a\u518d\u641c\u4e86\u3002\uff08\u6700\u540efor\u5faa\u73af\u7684\u89e3\u91ca \u56e0\u4e3a\u662f\u4e00\u6761\u8def\u4e00\u8def\u641c\u4e0b\u53bb\u5c31\u53ef\u4ee5\u4e86\u6240\u4ee5\u4e0d\u7528\u8003\u8651\u56de\u6eaf\u7684vis\u95ee\u9898\uff0c\u7136\u540e\u4e5f\u4e0d\u8981\u8003\u8651\u5b58\u8def\u5f84\uff0c\u56de\u6eaf\u662f\u8f93\u51fa\u5c31\u597d\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #include <bits/stdc++.h> #define INF 0x3f3f3f3f using namespace std ; const int maxn = 105 ; int n ; int g [ maxn ][ maxn ]; int d [ maxn ]; int st , flag = 0 ; void dfs ( int u ){ for ( int v = 1 ; v <= 50 ; v ++ ){ if ( g [ u ][ v ]){ g [ u ][ v ] -- ; g [ v ][ u ] -- ; dfs ( v ); printf ( \"%d %d \\n \" , v , u ); //\u6ce8\u610f\u987a\u5e8f\u662f\u5012\u8fc7\u6765\u7684 } } } void inits (){ memset ( g , 0 , sizeof ( g )); memset ( vis , 0 , sizeof ( vis )); memset ( d , 0 , sizeof ( d )); ans . clear (); flag = 0 ; } int main (){ int t ; cin >> t ; for ( int o = 1 ; o <= t ; o ++ ){ scanf ( \"%d\" , & n ); inits (); printf ( \"Case #%d \\n \" , o ); for ( int i = 0 ; i < n ; i ++ ){ int u , v ; scanf ( \"%d%d\" , & u , & v ); g [ u ][ v ] ++ ; g [ v ][ u ] ++ ; d [ u ] ++ ; d [ v ] ++ ; } for ( int i = 1 ; i <= 50 ; i ++ ){ if ( d [ i ] & 1 ){ flag = 1 ; break ; } } if ( flag ){ printf ( \"some beads may be lost \\n\\n \" ); } else { for ( int i = 1 ; i <= 50 ; i ++ ){ dfs ( i ); } cout << endl ; } } }","title":"Euler"},{"location":"graph/euler/#_1","text":"\u6b27\u62c9\u901a\u8def : \u901a\u8fc7\u56fe\u4e2d\u6bcf\u6761\u8fb9\u4e14\u53ea\u901a\u8fc7\u4e00\u6b21\uff0c\u5e76\u4e14\u7ecf\u8fc7\u6bcf\u4e00\u9876\u70b9\u7684\u901a\u8def \u6b27\u62c9\u56de\u8def : \u901a\u8fc7\u56fe\u4e2d\u6bcf\u6761\u8fb9\u4e14\u53ea\u901a\u8fc7\u4e00\u6b21\uff0c\u5e76\u4e14\u7ecf\u8fc7\u6bcf\u4e00\u9876\u70b9\u7684\u56de\u8def \u6709\u5411\u56fe\u7684\u57fa\u56fe \uff1a\u5ffd\u7565\u6709\u5411\u56fe\u6240\u6709\u8fb9\u7684\u65b9\u5411\uff0c\u5f97\u5230\u7684\u65e0\u5411\u56fe\u79f0\u4e3a\u8be5\u6709\u5411\u56fe\u7684\u57fa\u56fe\u3002","title":"\u6b27\u62c9\u901a\u8def\uff0c\u6b27\u62c9\u56de\u8def"},{"location":"graph/euler/#_2","text":"G\u662f\u8fde\u901a\u65e0\u5411\u56fe\uff0c\u5219\u79f0\u7ecf\u8fc7G\u7684\u6bcf\u6761\u8fb9\u4e00\u6b21\u5e76\u4e14\u4ec5\u4e00\u6b21\u7684\u8def\u5f84\u4e3a\u6b27\u62c9\u901a\u8def\uff1b \u5982\u679c\u6b27\u62c9\u901a\u8def\u662f\u56de\u8def\uff08\u8d77\u70b9\u548c\u7ec8\u70b9\u662f\u540c\u4e00\u4e2a\u9876\u70b9\uff09\uff0c\u5219\u79f0\u6b64\u56de\u8def\u662f\u6b27\u62c9\u56de\u8def \u5177\u6709\u6b27\u62c9\u56de\u8def\u7684\u65e0\u5411\u56feG\u6210\u4e3a\u6b27\u62c9\u56fe \u5b9a\u7406 \u65e0\u5411\u56feG\u5b58\u5728\u6b27\u62c9\u901a\u8def\u7684\u5145\u8981\u6761\u4ef6\u662f\uff1aG\u4e3a\u8fde\u901a\u56fe\uff0c\u5e76\u4e14G\u4ec5\u6709\u4e24\u4e2a\u5947\u5ea6\u7ed3\u70b9\uff08\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u9876\u70b9\uff09\u6216\u8005\u65e0\u5947\u5ea6\u7ed3\u70b9\u3002 \u63a8\u8bba \uff081\uff09 \u5f53G\u662f\u4ec5\u6709\u4e24\u4e2a\u5947\u5ea6\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u65f6\uff0cG\u7684\u6b27\u62c9\u901a\u8def\u5fc5\u4ee5\u6b64\u4e24\u4e2a\u7ed3\u70b9\u4e3a\u7aef\u70b9\uff1b \uff082\uff09\u5f53G\u662f\u65e0\u5947\u5ea6\u7ed3\u70b9\u7684\u8fde\u901a\u56fe\u65f6\uff0cG\u5fc5\u6709\u6b27\u62c9\u56de\u8def \uff083\uff09G\u4e3a\u6b27\u62c9\u56fe\uff08\u5b58\u5728\u6b27\u62c9\u56de\u8def\uff09\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u662f G\u4e3a\u65e0\u5947\u5ea6\u7ed3\u70b9\u7684\u8fde\u901a\u56fe","title":"\u65e0\u5411\u56fe"},{"location":"graph/euler/#_3","text":"\uff081\uff09\u8bbeD\u662f\u6709\u5411\u56fe\uff0cD\u7684\u57fa\u56fe\u8fde\u901a\uff0c\u5219\u79f0\u7ecf\u8fc7D\u7684\u6bcf\u6761\u8fb9\u4e00\u6b21\u5e76\u4e14\u4ec5\u6709\u4e00\u6b21\u7684\u6709\u5411\u8def\u5f84\u4e3a \u6709\u5411\u6b27\u62c9\u901a\u8def \uff082\uff09\u5982\u679c\u6709\u5411\u6b27\u62c9\u901a\u8def\u662f\u6709\u5411\u56de\u8def\uff0c\u5219\u79f0\u6b64\u6709\u5411\u56de\u8def\u4e3a \u6709\u5411\u6b27\u62c9\u56de\u8def \uff083\uff09\u5177\u6709\u6709\u5411\u6b27\u62c9\u56de\u8def\u7684\u56feD\u79f0\u4e3a\u6709\u5411\u6b27\u62c9\u56fe \uff08\u6709\u5411\u56fe\uff09 \u5b9a\u7406 \u6709\u5411\u56feD\u5b58\u5728\u6b27\u62c9\u901a\u8def\u7684\u5145\u8981\u6761\u4ef6\u662f\uff1aD\u4e3a\u6709\u5411\u56fe\uff0cD\u7684\u57fa\u56fe\u8fde\u901a\uff0c\u5e76\u4e14\u6240\u6709\u9876\u70b9\u7684\u51fa\u5ea6\u4e0e\u5165\u5ea6\u76f8\u7b49\uff1b\u6216\u8005 \u9664\u4e24\u4e2a\u9876\u70b9\u5916\uff0c\u5176\u4f59\u9876\u70b9\u7684\u51fa\u5ea6\u4e0e\u5165\u5ea6\u90fd\u76f8\u7b49\uff0c\u800c\u8fd9\u4e24\u4e2a\u9876\u70b9\u4e2d\u4e00\u4e2a\u9876\u70b9\u7684\u51fa\u5ea6\u4e0e\u5165\u5ea6\u4e4b\u5dee\u4e3a1\uff0c\u53e6\u4e00\u4e2a\u9876\u70b9\u7684\u51fa\u5ea6\u4e0e\u5165\u5ea6\u4e4b\u5dee\u4e3a-1. \u63a8\u8bba \uff081\uff09\u5f53D\u9664\u51fa\u3001\u5165\u5ea6\u4e4b\u5dee\u4e3a1\uff0c-1\u7684\u4e24\u4e2a\u9876\u70b9\u4e4b\u5916\uff0c\u5176\u4f59\u9876\u70b9\u7684\u51fa\u5ea6\u4e0e\u5165\u5ea6\u76f8\u7b49\u65f6\uff0cD\u7684\u6709\u5411\u6b27\u62c9\u901a\u8def\u5fc5\u4ee5\u51fa\u3001\u5165\u5ea6\u4e4b\u5dee\u4e3a1\u7684\u9876\u70b9\u4f5c\u4e3a\u59cb\u70b9\uff0c\u4ee5\u51fa\u3001\u5165\u5ea6\u4e4b\u5dee\u4e3a-1\u7684\u9876\u70b9\u4f5c\u4e3a\u7ec8\u70b9\u3002 \uff082\uff09\u5f53D\u7684\u6240\u6709\u9876\u70b9\u7684\u51fa\u3001\u5165\u5ea6\u90fd\u76f8\u7b49\u65f6\uff0cD\u4e2d\u5b58\u5728\u6709\u5411\u6b27\u62c9\u56de\u8def\u3002 \uff083\uff09\u6709\u5411\u56feD\u4e3a\u6709\u5411\u6b27\u62c9\u56fe\u7684\u5145\u8981\u6761\u4ef6\u662f D\u7684\u57fa\u56fe\u4e3a\u8fde\u901a\u56fe\uff0c\u5e76\u4e14\u6240\u6709\u9876\u70b9\u7684\u51fa\u3001\u5165\u5ea6\u90fd\u76f8\u7b49\u3002","title":"\u6709\u5411\u56fe"},{"location":"graph/euler/#dfs","text":"UVA-10054 \u9898\u610f\uff1a\u6709\u4e00\u5806\u73e0\u5b50\uff0c\u6bcf\u4e2a\u73e0\u5b50\u6709\u4e24\u4e2a\u989c\u8272\uff0c\u6211\u4eec\u9700\u8981\u4ece\u4e2d\u627e\u51fa\u6765\u4e00\u4e9b\u73e0\u5b50\u628a\u5b83\u7a7f\u6210\u4e00\u4e32\uff0c\u6bcf\u4e24\u4e2a\u73e0\u5b50\u76f8\u5bf9\u7684\u989c\u8272\u76f8\u540c \u6211\u4eec\u628a\u6bcf\u4e2a\u73e0\u5b50\u770b\u6574\u4e00\u4e2a\u8fb9\uff0c\u4e24\u4e2a\u989c\u8272\u770b\u6210\u8282\u70b9\uff0c\u5c31\u662f\u770b\u770b\u7ed9\u5b9a\u7684\u8fb9\u53c8\u6ca1\u6709\u6b27\u62c9\u56de\u8def \u65e2\u7136\u95ee\u4f60\u6709\u65e0\u6b27\u62c9\u56de\u8def\u90a3\u5c31\u6b27\u62c9\u5b9a\u7406\u5224\u65ad\u6709\u6ca1\u6709\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\uff08\u5982\u679c\u662f\u5bfb\u627e\u6b27\u62c9\u901a\u8def\u7684\u8bdd\u9700\u8981\u4e24\u4e2a\u6216\u6ca1\u6709\u5947\u6570\u5ea6\u7684\u70b9\uff09 \u5982\u679c\u5168\u4e3a\u5076\u6570\u5ea6\u7684\u70b9\uff0c\u5c31\u80af\u5b9a\u6709\u6b27\u62c9\u56de\u8def\uff0c\u76f4\u63a5\u7206\u641c\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ce8\u610f\u4f1a\u53c8\u91cd\u8fb9\u7684\u60c5\u51b5\uff0c\u7136\u540e\u56e0\u4e3a\u4f60\u4e5f\u4e0d\u77e5\u90531-50\u4e4b\u5185\u7684\u90a3\u4e2a\u70b9\u5728\u56fe\u5185\u4f7f\u7528\uff0c\u6240\u4ee5 \u6211\u4eec\u76f4\u63a5\u5168\u641c\u4e00\u4e0b\uff0c\u641c\u5b8c\u4e00\u5b9a\u662f\u6240\u6709\u7684\u70b9\u90fd\u7528\u5b8c\u4e86\u6240\u4ee5\u4e0d\u4f1a\u518d\u641c\u4e86\u3002\uff08\u6700\u540efor\u5faa\u73af\u7684\u89e3\u91ca \u56e0\u4e3a\u662f\u4e00\u6761\u8def\u4e00\u8def\u641c\u4e0b\u53bb\u5c31\u53ef\u4ee5\u4e86\u6240\u4ee5\u4e0d\u7528\u8003\u8651\u56de\u6eaf\u7684vis\u95ee\u9898\uff0c\u7136\u540e\u4e5f\u4e0d\u8981\u8003\u8651\u5b58\u8def\u5f84\uff0c\u56de\u6eaf\u662f\u8f93\u51fa\u5c31\u597d\u4e86 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #include <bits/stdc++.h> #define INF 0x3f3f3f3f using namespace std ; const int maxn = 105 ; int n ; int g [ maxn ][ maxn ]; int d [ maxn ]; int st , flag = 0 ; void dfs ( int u ){ for ( int v = 1 ; v <= 50 ; v ++ ){ if ( g [ u ][ v ]){ g [ u ][ v ] -- ; g [ v ][ u ] -- ; dfs ( v ); printf ( \"%d %d \\n \" , v , u ); //\u6ce8\u610f\u987a\u5e8f\u662f\u5012\u8fc7\u6765\u7684 } } } void inits (){ memset ( g , 0 , sizeof ( g )); memset ( vis , 0 , sizeof ( vis )); memset ( d , 0 , sizeof ( d )); ans . clear (); flag = 0 ; } int main (){ int t ; cin >> t ; for ( int o = 1 ; o <= t ; o ++ ){ scanf ( \"%d\" , & n ); inits (); printf ( \"Case #%d \\n \" , o ); for ( int i = 0 ; i < n ; i ++ ){ int u , v ; scanf ( \"%d%d\" , & u , & v ); g [ u ][ v ] ++ ; g [ v ][ u ] ++ ; d [ u ] ++ ; d [ v ] ++ ; } for ( int i = 1 ; i <= 50 ; i ++ ){ if ( d [ i ] & 1 ){ flag = 1 ; break ; } } if ( flag ){ printf ( \"some beads may be lost \\n\\n \" ); } else { for ( int i = 1 ; i <= 50 ; i ++ ){ dfs ( i ); } cout << endl ; } } }","title":"\u6c42\u89e3\u6b27\u62c9\u56de\u8def\u901a\u8fc7dfs\u6216\u5e76\u67e5\u96c6\u6c42\u89e3"},{"location":"graph/shortest-path/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a zrz \uff0c LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 Djikstra \u5355\u6e90\u6700\u77ed\u8def \u00b6 \u9002\u7528\u6761\u4ef6\uff1a\u65e0\u8d1f\u6743\u8fb9 \u7b97\u6cd5\u601d\u60f3\uff1a \u8d2a\u5fc3 \u590d\u6742\u5ea6\uff1a O(mlog(n)) O(mlog(n)) \u4ecebfs\u6f14\u5316\u800c\u6765\uff0c\u662f\u6700\u77ed\u8def\u6700\u597d\u7684\u7b97\u6cd5\uff0c\uff08\u662f\u4f18\u5148\u961f\u5217\u7684bfs\uff0c\u6211\u4eec\u6bcf\u6b21\u5bfb\u627e\u7684\u70b9\u5c31\u662f\u5f53\u4e0b\u6700\u597d\u7684\uff0c\u8d2a\u5fc3\u5730\u6269\u5927\u56fe\u4e2d\u7684\u70b9 \u6bcf\u6b21\u627e\u5230\u7684num\u5c31\u662f\u5728vis\u96c6\u5408\u4e2d\u80fd\u5230\u8fbe\u7684\u4e14\u79bb\u6e90\u70b9 s s \u6700\u8fd1\u7684\u70b9\uff0c\u5b83\u7684\u6700\u77ed\u8def\u5c31\u53ef\u4ee5\u786e\u8ba4\u3002 \u4e00\u4e2a\u70b9\u53ef\u4ee5\u8fdb\u961f\u591a\u6b21\uff0c\u4f46\u662f\u53d6\u51fa\u6765\u53ea\u6709\u5269\u4e0b\u7684\u5728\u961f\u4f0d\u4e2d\u4f5c\u5e9f\uff08\u56e0\u4e3avis\u7f6e\u4e3a1\u4e86) PS\uff1a \u53ef\u4ee5\u7528P\u6570\u7ec4\u8bb0\u5f55\u8def\u5f84\uff0cp[i]\u5c31\u662f\u8bb0\u5f55\u5230\u6269\u5c55\u5230i\u70b9\u7684\u9876\u70b9 \u5728\u65e0\u5411\u56fe\u4e0d\u53ef\u4ee5\u6709\u8d1f\u6743\u8fb9\uff0c\u4e5f\u4e0d\u80fd\u6709\u8d1f\u5708 \u90bb\u63a5\u77e9\u9635\u7248 \u590d\u6742\u5ea6 O(n^2) O(n^2) \u90bb\u63a5\u77e9\u9635\u7248\u6a21\u677f\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 int a [ 1003 ][ 1003 ]; //\u5b58\u56fe int d [ maxn ]; //\u5b58\u8ddd\u79bb int p [ maxn ]; //\u53ef\u4ee5\u7528\u6765\u6c42\u4e00\u4e2a\u8def\u5f84 int vis [ maxn ]; //\u7ef4\u62a4\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u6700\u77ed\u8def\u7684\u70b9\u96c6 void dijkstra ( int s ){ memset ( d , INF , sizeof ( d )); d [ s ] = 0 ; for ( int i = 0 ; i < n ; i ++ ){ //\u603b\u5171\u5faa\u73afn\u6b21\uff0c\u56e0\u4e3a\u6211\u4eec\u6c42n\u4e2a\u70b9\u7684\u6700\u77ed\u8def\uff0c\u6bcf\u6b21\u5faa\u73af\u5fc5\u6c42\u51fa\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def int num = -1 , minn = INF ; for ( int j = 1 ; j <= n ; j ++ ){ if ( ! vis [ j ] && d [ j ] < minn ){ num = j ; minn = d [ j ]; } } vis [ num ] = 1 ; //\u6bcf\u6b21\u9009\u51fa\u7684\u70b9\u80af\u5b9a\u662f\u6700\u77ed\u8def for ( int j = 1 ; j <= n ; j ++ ){ if ( ! vis [ j ]){ d [ j ] = min ( d [ j ], d [ num ] + a [ num ][ j ]); } } } } \u94fe\u5f0f\u524d\u5411\u661f\u7248 \u94fe\u5f0f\u524d\u5411\u661f\u7248\uff0c\u5efa\u8bae\u4f7f\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 struct dis { int id , d ; bool operator < ( const dis & x ) const { //\u4f18\u5148\u5217\u5bf9\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u6392\u961f\u89c4\u5219\uff0c\u6ce8\u610f\u5185\u90e8\u5982\u679c\u662f>\u53f7\u662f\u6700\u5c0f\u7684\u5728\u961f\u5934 return d > x . d ; } }; int vis [ maxn ]; int d [ maxn ]; //\u4e5f\u8981\u4e00\u4e2ad\u6570\u7ec4 struct edge { int v , w , next ; } e [ maxn << 1 ]; int cnt , head [ maxn ]; void add ( int u , int v , int w ){ e [ cnt ]. v = v ; e [ cnt ]. w = w ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } void dijkstra ( int s ){ memset ( d , INF , sizeof ( d )); priority_queue < dis > q ; dis ss = { s , 0 }; q . push ( ss ); d [ s ] = 0 ; while ( ! q . empty ()){ dis now = q . top (); q . pop (); if ( vis [ now . id ]) continue ; //\u5982\u679c\u5df2\u7ecf\u51fa\u8fc7\u961f\u4e86\u5c31\u4e0d\u7528\u5728\u770b\u4e86 vis [ now . id ] = 1 ; for ( int i = head [ now . id ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; if ( d [ v ] > now . d + e [ i ]. w ){ d [ v ] = now . d + e [ i ]. w ; dis nx = { v , d [ v ]}; q . push ( nx ); } } } } Bellman-Ford\u4e0eSPFA \u00b6 \u7b97\u6cd5\u601d\u60f3\uff1a \u591a\u6b21\u8fed\u4ee3\u6536\u655b\u7b54\u6848 \u590d\u6742\u5ea6\uff1a O(n^2) O(n^2) Bellman-Ford\uff0c\u5927\u591a\u6570\u4e66\u4e0a\u5c31\u8bf4\u662f\u8fed\u4ee3\u6269\u5c55\uff0c\u6807\u53f7\u4fee\u6b63\uff0c\u5176\u5b9e\u5f88\u96be\u7406\u89e3\u3002\u5927\u81f4\u6d41\u7a0b\u5c31\u662f\u4eceu\u51fa\u53d1\u5148\u627e\u8ddd\u79bb\u4e3a1\u7684\u70b9\uff0c\u6211\u4eec\u628a\u8fd9\u4e9b\u70b9\u7684\u8ddd\u79bb\u66f4\u65b0\uff0c\u518d\u627e\u8ddd\u79bb\u4e3a2\u6761\u8fb9\u7684\u70b9\uff0c\u4ece\u8ddd\u79bb\u4e3a1\u6761\u8fb9\u7684\u70b9\u63a8\u8fc7\u6765\uff0c\u7136\u540e\u8ddd\u79bb\u4e3a3\u7684\u3002\u3002\u3002\u4ece\u5176\u4ed6\u7684\u70b9\u63a8\u8fc7\u6765\uff0c\u7c7b\u4f3c\u52a8\u6001\u89c4\u5212\u7684 floyd \u601d\u60f3\u3002 \u84dd\u4e66\u4e0a\u6709\u53e6\u4e00\u4e2a\u8bf4\u6cd5\uff0c\u5c31\u662f\u6240\u6709\u70b9\u6ee1\u8db3\u4e09\u89d2\u4e0d\u7b49\u5f0f\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4ece\u5173\u4e8e\u6e90\u70b9\u6700\u8fd1\u7684\u70b9\u5f00\u59cb\u63a8\uff0c\u7136\u540e\u63a8\u5230\u5176\u4ed6\u6240\u6709\u8fb9. SPFA\u5176\u5b9e\u662fBellman-Ford\u7684\u961f\u5217\u4f18\u5316\u65b9\u6cd5\uff08\u5728\u56fd\u5185\u6bd4\u8f83\u6d41\u884c\uff09\uff0c\u56e0\u4e3a\u6211\u4eec\u627e\u4e0b\u4e00\u5c42\u8fb9\u65f6\uff0c\u961f\u5217\u4e2d\u7684\u70b9\u5c31\u662f\u5168\u90e8\u5e26\u6269\u5c55\u7684\u8fb9\uff0c\uff08\u5982\u679c\u6211\u4eec\u4e0d\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u8981\u626b\u5230\u5176\u4ed6\u6240\u6709\u8fb9\uff09 PS : 1.\u53ef\u4ee5\u5224\u65ad\u8d1f\u6743\u73af\uff0c\u5dee\u5206\u7ea6\u675f\u9700\u8981 2.\u590d\u6742\u5ea6\u6bd4\u8f83\u7384\u5b66\uff0c\u80fd\u4e0d\u7528\u5c31\u4e0d\u7528 3.\u53ef\u4ee5\u7528\u4e8e\u6c42\u6700\u957f\u8def\uff0c\u6bd4\u5982\u6211\u4eec\u628a\u8fb9\u6743\u5168\u90e8\u53d6\u8d1f\uff0c\u7136\u540e\u8dd1\u6700\u77ed\u8def\uff0c\u7ed3\u679c\u53d6\u8d1f\u5c31\u662f\u6700\u957f\u8def 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int dis [ N ], vis [ N ], ct [ N ]; queue < int > q ; //\u961f\u5217\u548c\u6570\u7ec4\u8bb0\u5f97\u521d\u59cb\u5316 int SPFA ( int s , int h ){ //h\u5176\u5b9e\u4e5f\u4e0d\u9700\u8981\uff0c\u6211\u5199\u7684\u8fd9\u9053\u9898\u9700\u8981 q . push ( s ); vis [ s ] = 1 ; ct [ s ] = 1 ; dis [ s ] = 0 ; mxh [ s ] = h ; while ( ! q . empty ()){ int now = q . front (); q . pop (); vis [ now ] = 0 ; for ( int i = head [ now ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; int w = e [ i ]. w ; int limt = e [ i ]. limt ; if ( mxh [ v ] < min ( mxh [ now ], limt )){ //\u6309\u7167\u6700\u77ed\u8def\u7684\u5316\u8fd9\u91cc\u8981\u4fee\u6539\u8f6c\u79fb\u65b9\u7a0b mxh [ v ] = min ( mxh [ now ], limt ); if ( ! vis [ v ]){ ct [ v ] ++ ; vis [ v ] = 1 ; q . push ( v ); if ( ct [ v ] > n ) return 1 ; //\u9519\u8bef\u8fd4\u56de } } } } return 0 ; } Floyd \u00b6 \u9002\u7528\u6761\u4ef6\uff1a\u53ef\u4ee5\u6c42\u51fa\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def \u7b97\u6cd5\u601d\u60f3\uff1adp \u6700\u5916\u5c42\u679a\u4e3e\u53ef\u5229\u7528\u7684\u524dk\u4e2a\u8282\u70b9\uff0c\u4e4b\u540e\u5229\u7528\u65b0\u52a0\u5165\u7684\u8282\u70b9\u6765\u66f4\u65b0\u5176\u4ed6\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def \u5176\u5b9e\u548cBellman-Ford\u5f88\u50cf\uff0c\u53ea\u4e0d\u8fc7\u524d\u8005\u56fa\u5b9a\u4e86\u539f\u70b9 \u590d\u6742\u5ea6 O(n^3) O(n^3) Floyd\u4e00\u822c\u4e0d\u9700\u8981\u6a21\u7248\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u8bb0\u5f55\u8def\u5f84\u7684\u65b9\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 vector < int > path ; int pos [ N ][ N ]; //\u8bb0\u5f55\u8def\u5f84\u8868\u793ai\u4e0ej\u7ecf\u8fc7\u9700\u8981\u7ecf\u8fc7\u7684\u7f16\u53f7\u6700\u5927\u70b9\uff08k\uff09 void get_path ( int x , int y ){ //\u9012\u5f52\u627e\u8def\uff0c\u52a0\u4e0ax\u4e0ey\u5c31\u80fd\u83b7\u5f97\u6574\u4e2a\u8def\u5f84 if ( pos [ x ][ y ] == 0 ) return ; get_path ( x , pos [ x ][ y ]); path . push_back ( pos [ x ][ y ]); get_path ( pos [ x ][ y ], y ); } for ( int k = 1 ; k <= n ; k ++ ){ for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 1 ; j <= n ; j ++ ){ if ( d [ i ][ j ] > d [ i ][ k ] + d [ k ][ j ]){ d [ i ][ j ] = d [ i ][ k ] + d [ k ][ j ]; pos [ i ][ j ] = k ; } } } } \u5176\u4ed6\u5e94\u7528 \u00b6 \u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4e0d\u4f1a\u51fa\u73b0\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u6a21\u677f\u9898\uff0c\u4f46\u5408\u7406\u5229\u7528\u8fd9\u4e9b\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5f88\u591a\u5947\u5999\u7684\u5e94\u7528\u3002 \u6700\u77ed\u8def\u5f84\u7edf\u8ba1 \u00b6 \u9996\u5148\u8981\u5f3a\u8c03\u7684\u662f\uff0cDijkstra\u89e3\u51b3\u7684\u662f \u5355\u6e90 \u6700\u77ed\u8def\u95ee\u9898\uff0c\u5c3d\u7ba1\u5b83\u7ecf\u5e38\u88ab\u7528\u6765\u6c42\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u7528 Dijkstra \u53ef\u4ee5\u679a\u4e3e\u4e24\u70b9\u4e4b\u95f4\u6240\u6709\u7684\u6700\u77ed\u8def\u4ee5\u53ca\u6570\u91cf\u3002\u9996\u5148\u9700\u8981\u5148\u8dd1\u4e00\u904d\u6240\u6709\u70b9\u5230\u76ee\u6807\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6 d[i] \uff0c\u7136\u540e\u4ece\u8d77\u70b9\u51fa\u53d1\uff0c\u53ea\u6cbf d[i] = d[j] + w[i][j] \u7684\u8fb9\u8d70\uff0c\u8fd9\u6837\u8d70\u51fa\u6765\u7684\u4e00\u5b9a\u662f\u6700\u77ed\u8def\u3002\u5728\u8d70\u7684\u540c\u65f6\uff0c\u663e\u7136\u6709 cnt[i] = sum{cnt[i] | cnt[j]=d[j]+w[i][j]} \uff0c\u5373\u53ef\u5b8c\u6210\u8ba1\u6570\u3002 \u5224\u8d1f\u73af \u00b6 Bellman-Ford \u7b97\u6cd5\u6700\u7ecf\u5178\u7684\u5e94\u7528\u3002\u5982\u679c\u8fed\u4ee3 n-1 n-1 \u6b21\u4ecd\u5b58\u5728\u677e\u5f1b\u64cd\u4f5c\uff0c\u5219\u8bf4\u660e\u4e00\u5b9a\u5b58\u5728\u8d1f\u73af\u3002 \u8bf7\u6ce8\u610f\uff0c\u5982\u679cBellman-Ford\u8bf4\u660e\u4e0d\u5b58\u5728\u8d1f\u73af\uff0c\u53ea\u80fd\u8bf4\u660e\u4ece\u6e90\u70b9\u51fa\u53d1\u65e0\u6cd5\u5230\u8fbe\u8d1f\u73af\uff0c\u4f46\u4e0d\u4e00\u5b9a\u662f\u6574\u4e2a\u56fe\u4e2d\u6ca1\u6709\u8d1f\u73af\u3002 \u5dee\u5206\u7ea6\u675f \u00b6 \u8be6\u89c1 CUC-ACM wiki - \u5dee\u5206\u7ea6\u675f \u6700\u5c0f\u73af \u00b6 \u4e0d\u8981\u60f3\u7740dfs\u4e71\u641e\u8fc7\u6700\u5c0f\u73af\uff0c\u5982\u679c\u51fa\u73b0\u73af\u5957\u73af\uff0c\u8fd9\u79cd\u60c5\u51b5\uff0cdfs\u6807\u8bb0\u6df1\u5ea6\uff0c\u5224\u73af\u662f\u4e0d\u53ef\u53d6\u7684\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u96c6\u5408\u5927\u5c0f\u4e5f\u4e0d\u53ef\u53d6\uff0cdfs\u641c\u7d22\u5230\u81ea\u8eab\u4e5f\u4e0d\u53ef\u53d6\u3002 \u66b4\u529b\u601d\u60f3 \u6211\u4eec\u679a\u4e3e\u6bcf\u6761\u8fb9 e\\{u, v, w\\} e\\{u, v, w\\} \uff0c\u4ece\u56fe\u4e2d\u5220\u9664\u8fd9\u6761\u8fb9 e e \uff0c\u518d\u4ece v v \u5230 u u \u4f7f\u7528dijkstra\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u7136\u540e\u5c06\u6700\u77ed\u8def\u7d2f\u52a0 w w \u5f97\u5230\u73af\u7684\u5927\u5c0f\uff0c\u6700\u540e\u7d2f\u8ba1\u4e00\u4e0b\u6700\u5c0f\uff0c\u590d\u6742\u5ea6 O(m*(m+n)log(n)) O(m*(m+n)log(n)) \uff0c\u6ce8\u610f\u8fd9\u79cd\u65b9\u6cd5\u5728\u7a00\u758f\u56fe\u7684\u7ed3\u679c\u597d\u4e8eFloyd\u3002 Floyd \u6211\u4eec\u7ed9\u51fa\u4e00\u79cd\u590d\u6742\u5ea6\u6bd4\u8f83\u5927\u7684\u7b97\u6cd5\uff0cFloyd\u7b97\u6cd5\uff1a \u4f17\u6240\u5468\u77e5\uff0cFloyd\u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u7684\u8fc7\u7a0b\u662f\u4e09\u91cd\u5faa\u73af\u3002\u5f53\u6700\u5916\u5c42\u6070\u597d\u5faa\u73af\u5230 k k \u65f6\uff0c\u4ee3\u8868\u7740\u76ee\u524d\u6240\u6c42\u51fa\u7684\u6700\u77ed\u8def\u6240\u542b\u7684\u70b9\u96c6\u4e3a [1,k] [1,k] ,\u5728\u7b2ck\u6b21\u5faa\u73af\u65f6 dp[i][j] dp[i][j] \u662fi\u5230j\u7684\u6700\u77ed\u8def\uff0c\u5e76\u4e14\u4e0d\u7ecf\u8fc7k,\u6211\u4eec\u770bk\u8fd9\u4e2a\u70b9\uff0c\u4ed6\u7ecf\u8fc7\u4e86\u4e24\u4e2a\u70b9\uff0c\u7136\u540e\u8fd9\u4e24\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u662f dp[i][j] dp[i][j] \uff0c\u90a3\u8bf4\u660e\u7ecf\u8fc7\u81f3\u5c11\u6709k,i,j\u4e09\u4e2a\u70b9\u7684\u6700\u5c0f\u73af\u5c31\u53ef\u4ee5\u6c42\u51fa\u6765\u4e86\u3002 \u590d\u6742\u5ea6 O(n^3) O(n^3) ps:\u6ce8\u610f\u521d\u59cb\u5316dp\u6570\u7ec4\u7684\u503c \u4f8b\u9898 \u00b6 Shortest Cycle \u9898\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <bits/stdc++.h> #define INF 0x3f3f3f3f using namespace std ; typedef long long ll ; const int maxn = 1e5 + 5 ; ll a [ maxn ]; ll g [ 200 ][ 200 ]; ll dp [ 200 ][ 200 ]; ll ans = INF ; int main (){ int n ; int cnt = 0 ; scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ){ ll x ; scanf ( \"%lld\" , & x ); if ( x != 0 ) a [ cnt ++ ] = x ; } if ( cnt > 64 * 2 ){ printf ( \"3 \\n \" ); return 0 ; } for ( int i = 0 ; i < cnt ; i ++ ){ for ( int j = 0 ; j < cnt ; j ++ ){ dp [ i ][ j ] = 100 ; g [ i ][ j ] = 100 ; } } for ( int i = 0 ; i < cnt ; i ++ ){ dp [ i ][ i ] = 0 ; for ( int j = 0 ; j < i ; j ++ ){ if (( a [ i ] & a [ j ]) != 0 ){ g [ i ][ j ] = g [ j ][ i ] = 1 ; dp [ i ][ j ] = dp [ j ][ i ] = 1 ; } } } for ( int k = 0 ; k < cnt ; k ++ ){ for ( int i = 0 ; i < k ; i ++ ){ for ( int j = i + 1 ; j < cnt ; j ++ ){ ans = min ( ans , dp [ i ][ j ] + g [ i ][ k ] + g [ k ][ j ]); } } for ( int i = 0 ; i < cnt ; i ++ ){ for ( int j = 0 ; j < cnt ; j ++ ){ dp [ i ][ j ] = min ( dp [ i ][ j ], dp [ i ][ k ] + dp [ k ][ j ]); } } } if ( ans >= 100 ){ cout << -1 << endl ; } else cout << ans << endl ; } P1629 \u90ae\u9012\u5458\u9001\u4fe1 \u9898\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 #include <bits/stdc++.h> #define INF 0x3f3f3f3f using namespace std ; typedef long long ll ; const int maxn = 1e3 + 5 ; int n , m ; struct node { int id ; //\u70b9\u7684\u7f16\u53f7 int d ; //\u5230\u8d77\u70b9\u7684\u8ddd\u79bb bool operator < ( const node b ) const { return d > b . d ; } }; int dis [ maxn ]; int g [ maxn ][ maxn ]; int vis [ maxn ]; struct Ques { int u , v , w ; } ques [ 100005 ]; void dijkstra ( int s ){ priority_queue < node > q ; dis [ s ] = 0 ; node nod ; nod . id = s ; nod . d = 0 ; q . push ( nod ); while ( ! q . empty ()){ int u = q . top (). id ; q . pop (); if ( vis [ u ]) continue ; vis [ u ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ){ if ( dis [ i ] >= dis [ u ] + g [ u ][ i ]){ dis [ i ] = dis [ u ] + g [ u ][ i ]; node nxt ; nxt . id = i ; nxt . d = dis [ i ]; q . push ( nxt ); } } } } int main (){ memset ( dis , INF , sizeof ( dis )); memset ( g , INF , sizeof ( g )); //\u521d\u59cb\u5316\u7684\u6ce8\u610f cin >> n >> m ; for ( int i = 0 ; i < m ; i ++ ){ scanf ( \"%d%d%d\" , & ques [ i ]. u , & ques [ i ]. v , & ques [ i ]. w ); g [ ques [ i ]. u ][ ques [ i ]. v ] = min ( ques [ i ]. w , g [ ques [ i ]. u ][ ques [ i ]. v ]); //\u91cd\u8fb9\u7684\u5751 } dijkstra ( 1 ); ll ans = 0 ; for ( int i = 2 ; i <= n ; i ++ ){ ans += dis [ i ]; } // cout<<ans<<endl; memset ( dis , INF , sizeof ( dis )); memset ( g , INF , sizeof ( g )); memset ( vis , 0 , sizeof ( vis )); for ( int i = 0 ; i < m ; i ++ ){ g [ ques [ i ]. v ][ ques [ i ]. u ] = min ( ques [ i ]. w , g [ ques [ i ]. v ][ ques [ i ]. u ]); } dijkstra ( 1 ); for ( int i = 2 ; i <= n ; i ++ ){ ans += dis [ i ]; } cout << ans ; }","title":"\u6700\u77ed\u8def"},{"location":"graph/shortest-path/#djikstra","text":"\u9002\u7528\u6761\u4ef6\uff1a\u65e0\u8d1f\u6743\u8fb9 \u7b97\u6cd5\u601d\u60f3\uff1a \u8d2a\u5fc3 \u590d\u6742\u5ea6\uff1a O(mlog(n)) O(mlog(n)) \u4ecebfs\u6f14\u5316\u800c\u6765\uff0c\u662f\u6700\u77ed\u8def\u6700\u597d\u7684\u7b97\u6cd5\uff0c\uff08\u662f\u4f18\u5148\u961f\u5217\u7684bfs\uff0c\u6211\u4eec\u6bcf\u6b21\u5bfb\u627e\u7684\u70b9\u5c31\u662f\u5f53\u4e0b\u6700\u597d\u7684\uff0c\u8d2a\u5fc3\u5730\u6269\u5927\u56fe\u4e2d\u7684\u70b9 \u6bcf\u6b21\u627e\u5230\u7684num\u5c31\u662f\u5728vis\u96c6\u5408\u4e2d\u80fd\u5230\u8fbe\u7684\u4e14\u79bb\u6e90\u70b9 s s \u6700\u8fd1\u7684\u70b9\uff0c\u5b83\u7684\u6700\u77ed\u8def\u5c31\u53ef\u4ee5\u786e\u8ba4\u3002 \u4e00\u4e2a\u70b9\u53ef\u4ee5\u8fdb\u961f\u591a\u6b21\uff0c\u4f46\u662f\u53d6\u51fa\u6765\u53ea\u6709\u5269\u4e0b\u7684\u5728\u961f\u4f0d\u4e2d\u4f5c\u5e9f\uff08\u56e0\u4e3avis\u7f6e\u4e3a1\u4e86) PS\uff1a \u53ef\u4ee5\u7528P\u6570\u7ec4\u8bb0\u5f55\u8def\u5f84\uff0cp[i]\u5c31\u662f\u8bb0\u5f55\u5230\u6269\u5c55\u5230i\u70b9\u7684\u9876\u70b9 \u5728\u65e0\u5411\u56fe\u4e0d\u53ef\u4ee5\u6709\u8d1f\u6743\u8fb9\uff0c\u4e5f\u4e0d\u80fd\u6709\u8d1f\u5708 \u90bb\u63a5\u77e9\u9635\u7248 \u590d\u6742\u5ea6 O(n^2) O(n^2) \u90bb\u63a5\u77e9\u9635\u7248\u6a21\u677f\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 int a [ 1003 ][ 1003 ]; //\u5b58\u56fe int d [ maxn ]; //\u5b58\u8ddd\u79bb int p [ maxn ]; //\u53ef\u4ee5\u7528\u6765\u6c42\u4e00\u4e2a\u8def\u5f84 int vis [ maxn ]; //\u7ef4\u62a4\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u6700\u77ed\u8def\u7684\u70b9\u96c6 void dijkstra ( int s ){ memset ( d , INF , sizeof ( d )); d [ s ] = 0 ; for ( int i = 0 ; i < n ; i ++ ){ //\u603b\u5171\u5faa\u73afn\u6b21\uff0c\u56e0\u4e3a\u6211\u4eec\u6c42n\u4e2a\u70b9\u7684\u6700\u77ed\u8def\uff0c\u6bcf\u6b21\u5faa\u73af\u5fc5\u6c42\u51fa\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def int num = -1 , minn = INF ; for ( int j = 1 ; j <= n ; j ++ ){ if ( ! vis [ j ] && d [ j ] < minn ){ num = j ; minn = d [ j ]; } } vis [ num ] = 1 ; //\u6bcf\u6b21\u9009\u51fa\u7684\u70b9\u80af\u5b9a\u662f\u6700\u77ed\u8def for ( int j = 1 ; j <= n ; j ++ ){ if ( ! vis [ j ]){ d [ j ] = min ( d [ j ], d [ num ] + a [ num ][ j ]); } } } } \u94fe\u5f0f\u524d\u5411\u661f\u7248 \u94fe\u5f0f\u524d\u5411\u661f\u7248\uff0c\u5efa\u8bae\u4f7f\u7528 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 struct dis { int id , d ; bool operator < ( const dis & x ) const { //\u4f18\u5148\u5217\u5bf9\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u6392\u961f\u89c4\u5219\uff0c\u6ce8\u610f\u5185\u90e8\u5982\u679c\u662f>\u53f7\u662f\u6700\u5c0f\u7684\u5728\u961f\u5934 return d > x . d ; } }; int vis [ maxn ]; int d [ maxn ]; //\u4e5f\u8981\u4e00\u4e2ad\u6570\u7ec4 struct edge { int v , w , next ; } e [ maxn << 1 ]; int cnt , head [ maxn ]; void add ( int u , int v , int w ){ e [ cnt ]. v = v ; e [ cnt ]. w = w ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } void dijkstra ( int s ){ memset ( d , INF , sizeof ( d )); priority_queue < dis > q ; dis ss = { s , 0 }; q . push ( ss ); d [ s ] = 0 ; while ( ! q . empty ()){ dis now = q . top (); q . pop (); if ( vis [ now . id ]) continue ; //\u5982\u679c\u5df2\u7ecf\u51fa\u8fc7\u961f\u4e86\u5c31\u4e0d\u7528\u5728\u770b\u4e86 vis [ now . id ] = 1 ; for ( int i = head [ now . id ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; if ( d [ v ] > now . d + e [ i ]. w ){ d [ v ] = now . d + e [ i ]. w ; dis nx = { v , d [ v ]}; q . push ( nx ); } } } }","title":"Djikstra \u5355\u6e90\u6700\u77ed\u8def"},{"location":"graph/shortest-path/#bellman-fordspfa","text":"\u7b97\u6cd5\u601d\u60f3\uff1a \u591a\u6b21\u8fed\u4ee3\u6536\u655b\u7b54\u6848 \u590d\u6742\u5ea6\uff1a O(n^2) O(n^2) Bellman-Ford\uff0c\u5927\u591a\u6570\u4e66\u4e0a\u5c31\u8bf4\u662f\u8fed\u4ee3\u6269\u5c55\uff0c\u6807\u53f7\u4fee\u6b63\uff0c\u5176\u5b9e\u5f88\u96be\u7406\u89e3\u3002\u5927\u81f4\u6d41\u7a0b\u5c31\u662f\u4eceu\u51fa\u53d1\u5148\u627e\u8ddd\u79bb\u4e3a1\u7684\u70b9\uff0c\u6211\u4eec\u628a\u8fd9\u4e9b\u70b9\u7684\u8ddd\u79bb\u66f4\u65b0\uff0c\u518d\u627e\u8ddd\u79bb\u4e3a2\u6761\u8fb9\u7684\u70b9\uff0c\u4ece\u8ddd\u79bb\u4e3a1\u6761\u8fb9\u7684\u70b9\u63a8\u8fc7\u6765\uff0c\u7136\u540e\u8ddd\u79bb\u4e3a3\u7684\u3002\u3002\u3002\u4ece\u5176\u4ed6\u7684\u70b9\u63a8\u8fc7\u6765\uff0c\u7c7b\u4f3c\u52a8\u6001\u89c4\u5212\u7684 floyd \u601d\u60f3\u3002 \u84dd\u4e66\u4e0a\u6709\u53e6\u4e00\u4e2a\u8bf4\u6cd5\uff0c\u5c31\u662f\u6240\u6709\u70b9\u6ee1\u8db3\u4e09\u89d2\u4e0d\u7b49\u5f0f\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u4ece\u5173\u4e8e\u6e90\u70b9\u6700\u8fd1\u7684\u70b9\u5f00\u59cb\u63a8\uff0c\u7136\u540e\u63a8\u5230\u5176\u4ed6\u6240\u6709\u8fb9. SPFA\u5176\u5b9e\u662fBellman-Ford\u7684\u961f\u5217\u4f18\u5316\u65b9\u6cd5\uff08\u5728\u56fd\u5185\u6bd4\u8f83\u6d41\u884c\uff09\uff0c\u56e0\u4e3a\u6211\u4eec\u627e\u4e0b\u4e00\u5c42\u8fb9\u65f6\uff0c\u961f\u5217\u4e2d\u7684\u70b9\u5c31\u662f\u5168\u90e8\u5e26\u6269\u5c55\u7684\u8fb9\uff0c\uff08\u5982\u679c\u6211\u4eec\u4e0d\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u8981\u626b\u5230\u5176\u4ed6\u6240\u6709\u8fb9\uff09 PS : 1.\u53ef\u4ee5\u5224\u65ad\u8d1f\u6743\u73af\uff0c\u5dee\u5206\u7ea6\u675f\u9700\u8981 2.\u590d\u6742\u5ea6\u6bd4\u8f83\u7384\u5b66\uff0c\u80fd\u4e0d\u7528\u5c31\u4e0d\u7528 3.\u53ef\u4ee5\u7528\u4e8e\u6c42\u6700\u957f\u8def\uff0c\u6bd4\u5982\u6211\u4eec\u628a\u8fb9\u6743\u5168\u90e8\u53d6\u8d1f\uff0c\u7136\u540e\u8dd1\u6700\u77ed\u8def\uff0c\u7ed3\u679c\u53d6\u8d1f\u5c31\u662f\u6700\u957f\u8def 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 int dis [ N ], vis [ N ], ct [ N ]; queue < int > q ; //\u961f\u5217\u548c\u6570\u7ec4\u8bb0\u5f97\u521d\u59cb\u5316 int SPFA ( int s , int h ){ //h\u5176\u5b9e\u4e5f\u4e0d\u9700\u8981\uff0c\u6211\u5199\u7684\u8fd9\u9053\u9898\u9700\u8981 q . push ( s ); vis [ s ] = 1 ; ct [ s ] = 1 ; dis [ s ] = 0 ; mxh [ s ] = h ; while ( ! q . empty ()){ int now = q . front (); q . pop (); vis [ now ] = 0 ; for ( int i = head [ now ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; int w = e [ i ]. w ; int limt = e [ i ]. limt ; if ( mxh [ v ] < min ( mxh [ now ], limt )){ //\u6309\u7167\u6700\u77ed\u8def\u7684\u5316\u8fd9\u91cc\u8981\u4fee\u6539\u8f6c\u79fb\u65b9\u7a0b mxh [ v ] = min ( mxh [ now ], limt ); if ( ! vis [ v ]){ ct [ v ] ++ ; vis [ v ] = 1 ; q . push ( v ); if ( ct [ v ] > n ) return 1 ; //\u9519\u8bef\u8fd4\u56de } } } } return 0 ; }","title":"Bellman-Ford\u4e0eSPFA"},{"location":"graph/shortest-path/#floyd","text":"\u9002\u7528\u6761\u4ef6\uff1a\u53ef\u4ee5\u6c42\u51fa\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def \u7b97\u6cd5\u601d\u60f3\uff1adp \u6700\u5916\u5c42\u679a\u4e3e\u53ef\u5229\u7528\u7684\u524dk\u4e2a\u8282\u70b9\uff0c\u4e4b\u540e\u5229\u7528\u65b0\u52a0\u5165\u7684\u8282\u70b9\u6765\u66f4\u65b0\u5176\u4ed6\u8282\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def \u5176\u5b9e\u548cBellman-Ford\u5f88\u50cf\uff0c\u53ea\u4e0d\u8fc7\u524d\u8005\u56fa\u5b9a\u4e86\u539f\u70b9 \u590d\u6742\u5ea6 O(n^3) O(n^3) Floyd\u4e00\u822c\u4e0d\u9700\u8981\u6a21\u7248\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u8bb0\u5f55\u8def\u5f84\u7684\u65b9\u6cd5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 vector < int > path ; int pos [ N ][ N ]; //\u8bb0\u5f55\u8def\u5f84\u8868\u793ai\u4e0ej\u7ecf\u8fc7\u9700\u8981\u7ecf\u8fc7\u7684\u7f16\u53f7\u6700\u5927\u70b9\uff08k\uff09 void get_path ( int x , int y ){ //\u9012\u5f52\u627e\u8def\uff0c\u52a0\u4e0ax\u4e0ey\u5c31\u80fd\u83b7\u5f97\u6574\u4e2a\u8def\u5f84 if ( pos [ x ][ y ] == 0 ) return ; get_path ( x , pos [ x ][ y ]); path . push_back ( pos [ x ][ y ]); get_path ( pos [ x ][ y ], y ); } for ( int k = 1 ; k <= n ; k ++ ){ for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 1 ; j <= n ; j ++ ){ if ( d [ i ][ j ] > d [ i ][ k ] + d [ k ][ j ]){ d [ i ][ j ] = d [ i ][ k ] + d [ k ][ j ]; pos [ i ][ j ] = k ; } } } }","title":"Floyd"},{"location":"graph/shortest-path/#_1","text":"\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4e0d\u4f1a\u51fa\u73b0\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u6a21\u677f\u9898\uff0c\u4f46\u5408\u7406\u5229\u7528\u8fd9\u4e9b\u7b97\u6cd5\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5f88\u591a\u5947\u5999\u7684\u5e94\u7528\u3002","title":"\u5176\u4ed6\u5e94\u7528"},{"location":"graph/shortest-path/#_2","text":"\u9996\u5148\u8981\u5f3a\u8c03\u7684\u662f\uff0cDijkstra\u89e3\u51b3\u7684\u662f \u5355\u6e90 \u6700\u77ed\u8def\u95ee\u9898\uff0c\u5c3d\u7ba1\u5b83\u7ecf\u5e38\u88ab\u7528\u6765\u6c42\u4e24\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u3002 \u7528 Dijkstra \u53ef\u4ee5\u679a\u4e3e\u4e24\u70b9\u4e4b\u95f4\u6240\u6709\u7684\u6700\u77ed\u8def\u4ee5\u53ca\u6570\u91cf\u3002\u9996\u5148\u9700\u8981\u5148\u8dd1\u4e00\u904d\u6240\u6709\u70b9\u5230\u76ee\u6807\u70b9\u7684\u6700\u77ed\u8def\u957f\u5ea6 d[i] \uff0c\u7136\u540e\u4ece\u8d77\u70b9\u51fa\u53d1\uff0c\u53ea\u6cbf d[i] = d[j] + w[i][j] \u7684\u8fb9\u8d70\uff0c\u8fd9\u6837\u8d70\u51fa\u6765\u7684\u4e00\u5b9a\u662f\u6700\u77ed\u8def\u3002\u5728\u8d70\u7684\u540c\u65f6\uff0c\u663e\u7136\u6709 cnt[i] = sum{cnt[i] | cnt[j]=d[j]+w[i][j]} \uff0c\u5373\u53ef\u5b8c\u6210\u8ba1\u6570\u3002","title":"\u6700\u77ed\u8def\u5f84\u7edf\u8ba1"},{"location":"graph/shortest-path/#_3","text":"Bellman-Ford \u7b97\u6cd5\u6700\u7ecf\u5178\u7684\u5e94\u7528\u3002\u5982\u679c\u8fed\u4ee3 n-1 n-1 \u6b21\u4ecd\u5b58\u5728\u677e\u5f1b\u64cd\u4f5c\uff0c\u5219\u8bf4\u660e\u4e00\u5b9a\u5b58\u5728\u8d1f\u73af\u3002 \u8bf7\u6ce8\u610f\uff0c\u5982\u679cBellman-Ford\u8bf4\u660e\u4e0d\u5b58\u5728\u8d1f\u73af\uff0c\u53ea\u80fd\u8bf4\u660e\u4ece\u6e90\u70b9\u51fa\u53d1\u65e0\u6cd5\u5230\u8fbe\u8d1f\u73af\uff0c\u4f46\u4e0d\u4e00\u5b9a\u662f\u6574\u4e2a\u56fe\u4e2d\u6ca1\u6709\u8d1f\u73af\u3002","title":"\u5224\u8d1f\u73af"},{"location":"graph/shortest-path/#_4","text":"\u8be6\u89c1 CUC-ACM wiki - \u5dee\u5206\u7ea6\u675f","title":"\u5dee\u5206\u7ea6\u675f"},{"location":"graph/shortest-path/#_5","text":"\u4e0d\u8981\u60f3\u7740dfs\u4e71\u641e\u8fc7\u6700\u5c0f\u73af\uff0c\u5982\u679c\u51fa\u73b0\u73af\u5957\u73af\uff0c\u8fd9\u79cd\u60c5\u51b5\uff0cdfs\u6807\u8bb0\u6df1\u5ea6\uff0c\u5224\u73af\u662f\u4e0d\u53ef\u53d6\u7684\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u96c6\u5408\u5927\u5c0f\u4e5f\u4e0d\u53ef\u53d6\uff0cdfs\u641c\u7d22\u5230\u81ea\u8eab\u4e5f\u4e0d\u53ef\u53d6\u3002 \u66b4\u529b\u601d\u60f3 \u6211\u4eec\u679a\u4e3e\u6bcf\u6761\u8fb9 e\\{u, v, w\\} e\\{u, v, w\\} \uff0c\u4ece\u56fe\u4e2d\u5220\u9664\u8fd9\u6761\u8fb9 e e \uff0c\u518d\u4ece v v \u5230 u u \u4f7f\u7528dijkstra\u8dd1\u4e00\u6b21\u6700\u77ed\u8def\uff0c\u7136\u540e\u5c06\u6700\u77ed\u8def\u7d2f\u52a0 w w \u5f97\u5230\u73af\u7684\u5927\u5c0f\uff0c\u6700\u540e\u7d2f\u8ba1\u4e00\u4e0b\u6700\u5c0f\uff0c\u590d\u6742\u5ea6 O(m*(m+n)log(n)) O(m*(m+n)log(n)) \uff0c\u6ce8\u610f\u8fd9\u79cd\u65b9\u6cd5\u5728\u7a00\u758f\u56fe\u7684\u7ed3\u679c\u597d\u4e8eFloyd\u3002 Floyd \u6211\u4eec\u7ed9\u51fa\u4e00\u79cd\u590d\u6742\u5ea6\u6bd4\u8f83\u5927\u7684\u7b97\u6cd5\uff0cFloyd\u7b97\u6cd5\uff1a \u4f17\u6240\u5468\u77e5\uff0cFloyd\u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u7684\u8fc7\u7a0b\u662f\u4e09\u91cd\u5faa\u73af\u3002\u5f53\u6700\u5916\u5c42\u6070\u597d\u5faa\u73af\u5230 k k \u65f6\uff0c\u4ee3\u8868\u7740\u76ee\u524d\u6240\u6c42\u51fa\u7684\u6700\u77ed\u8def\u6240\u542b\u7684\u70b9\u96c6\u4e3a [1,k] [1,k] ,\u5728\u7b2ck\u6b21\u5faa\u73af\u65f6 dp[i][j] dp[i][j] \u662fi\u5230j\u7684\u6700\u77ed\u8def\uff0c\u5e76\u4e14\u4e0d\u7ecf\u8fc7k,\u6211\u4eec\u770bk\u8fd9\u4e2a\u70b9\uff0c\u4ed6\u7ecf\u8fc7\u4e86\u4e24\u4e2a\u70b9\uff0c\u7136\u540e\u8fd9\u4e24\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u662f dp[i][j] dp[i][j] \uff0c\u90a3\u8bf4\u660e\u7ecf\u8fc7\u81f3\u5c11\u6709k,i,j\u4e09\u4e2a\u70b9\u7684\u6700\u5c0f\u73af\u5c31\u53ef\u4ee5\u6c42\u51fa\u6765\u4e86\u3002 \u590d\u6742\u5ea6 O(n^3) O(n^3) ps:\u6ce8\u610f\u521d\u59cb\u5316dp\u6570\u7ec4\u7684\u503c","title":"\u6700\u5c0f\u73af"},{"location":"graph/shortest-path/#_6","text":"Shortest Cycle \u9898\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 #include <bits/stdc++.h> #define INF 0x3f3f3f3f using namespace std ; typedef long long ll ; const int maxn = 1e5 + 5 ; ll a [ maxn ]; ll g [ 200 ][ 200 ]; ll dp [ 200 ][ 200 ]; ll ans = INF ; int main (){ int n ; int cnt = 0 ; scanf ( \"%d\" , & n ); for ( int i = 0 ; i < n ; i ++ ){ ll x ; scanf ( \"%lld\" , & x ); if ( x != 0 ) a [ cnt ++ ] = x ; } if ( cnt > 64 * 2 ){ printf ( \"3 \\n \" ); return 0 ; } for ( int i = 0 ; i < cnt ; i ++ ){ for ( int j = 0 ; j < cnt ; j ++ ){ dp [ i ][ j ] = 100 ; g [ i ][ j ] = 100 ; } } for ( int i = 0 ; i < cnt ; i ++ ){ dp [ i ][ i ] = 0 ; for ( int j = 0 ; j < i ; j ++ ){ if (( a [ i ] & a [ j ]) != 0 ){ g [ i ][ j ] = g [ j ][ i ] = 1 ; dp [ i ][ j ] = dp [ j ][ i ] = 1 ; } } } for ( int k = 0 ; k < cnt ; k ++ ){ for ( int i = 0 ; i < k ; i ++ ){ for ( int j = i + 1 ; j < cnt ; j ++ ){ ans = min ( ans , dp [ i ][ j ] + g [ i ][ k ] + g [ k ][ j ]); } } for ( int i = 0 ; i < cnt ; i ++ ){ for ( int j = 0 ; j < cnt ; j ++ ){ dp [ i ][ j ] = min ( dp [ i ][ j ], dp [ i ][ k ] + dp [ k ][ j ]); } } } if ( ans >= 100 ){ cout << -1 << endl ; } else cout << ans << endl ; } P1629 \u90ae\u9012\u5458\u9001\u4fe1 \u9898\u89e3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 #include <bits/stdc++.h> #define INF 0x3f3f3f3f using namespace std ; typedef long long ll ; const int maxn = 1e3 + 5 ; int n , m ; struct node { int id ; //\u70b9\u7684\u7f16\u53f7 int d ; //\u5230\u8d77\u70b9\u7684\u8ddd\u79bb bool operator < ( const node b ) const { return d > b . d ; } }; int dis [ maxn ]; int g [ maxn ][ maxn ]; int vis [ maxn ]; struct Ques { int u , v , w ; } ques [ 100005 ]; void dijkstra ( int s ){ priority_queue < node > q ; dis [ s ] = 0 ; node nod ; nod . id = s ; nod . d = 0 ; q . push ( nod ); while ( ! q . empty ()){ int u = q . top (). id ; q . pop (); if ( vis [ u ]) continue ; vis [ u ] = 1 ; for ( int i = 1 ; i <= n ; i ++ ){ if ( dis [ i ] >= dis [ u ] + g [ u ][ i ]){ dis [ i ] = dis [ u ] + g [ u ][ i ]; node nxt ; nxt . id = i ; nxt . d = dis [ i ]; q . push ( nxt ); } } } } int main (){ memset ( dis , INF , sizeof ( dis )); memset ( g , INF , sizeof ( g )); //\u521d\u59cb\u5316\u7684\u6ce8\u610f cin >> n >> m ; for ( int i = 0 ; i < m ; i ++ ){ scanf ( \"%d%d%d\" , & ques [ i ]. u , & ques [ i ]. v , & ques [ i ]. w ); g [ ques [ i ]. u ][ ques [ i ]. v ] = min ( ques [ i ]. w , g [ ques [ i ]. u ][ ques [ i ]. v ]); //\u91cd\u8fb9\u7684\u5751 } dijkstra ( 1 ); ll ans = 0 ; for ( int i = 2 ; i <= n ; i ++ ){ ans += dis [ i ]; } // cout<<ans<<endl; memset ( dis , INF , sizeof ( dis )); memset ( g , INF , sizeof ( g )); memset ( vis , 0 , sizeof ( vis )); for ( int i = 0 ; i < m ; i ++ ){ g [ ques [ i ]. v ][ ques [ i ]. u ] = min ( ques [ i ]. w , g [ ques [ i ]. v ][ ques [ i ]. u ]); } dijkstra ( 1 ); for ( int i = 2 ; i <= n ; i ++ ){ ans += dis [ i ]; } cout << ans ; }","title":"\u4f8b\u9898"},{"location":"graph/strongly-connected-components/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a zrz \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u5f3a\u8fde\u901a \u00b6 \u5728\u6709\u5411\u56feG\u4e2d\uff0c\u5982\u679c\u4e24\u70b9\u4e92\u76f8\u53ef\u8fbe\uff0c\u5219\u79f0\u8fd9\u4e24\u4e2a\u70b9\u5f3a\u8fde\u901a\uff0c\u5982\u679cG\u4e2d\u4efb\u610f\u4e24\u70b9\u4e92\u76f8\u53ef\u8fbe\uff0c\u5219\u79f0G\u662f\u5f3a\u8fde\u901a\u56fe\u3002 \u7b80\u5355\u6027\u8d28 \u00b6 \u4e00\u4e2a\u6709\u5411\u56fe\u662f\u5f3a\u8fde\u901a\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53G\u4e2d\u6709\u4e00\u4e2a\u56de\u8def\uff08\u73af\uff09\uff0c\u5b83\u81f3\u5c11\u5305\u542b\u6bcf\u4e2a\u8282\u70b9\u4e00\u6b21\u3002 \u975e\u5f3a\u8fde\u901a\u6709\u5411\u56fe\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\uff0c\u79f0\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf\uff08SCC\u5373Strongly Connected Componenet\uff09\u3002 1\uff0c2\uff0c3\uff0c4\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c5\u548c6\u662f\u53e6\u4e24\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf Tarjan \u7b97\u6cd5 \u00b6 Tarjan\u7b80\u4ecb \u00b6 Robert E. Tarjan\uff08\u7f57\u4f2f\u7279\u00b7\u5854\u626c\uff0c1948~\uff09\uff0c\u751f\u4e8e\u7f8e\u56fd\u52a0\u5dde\u6ce2\u83ab\u7eb3\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u3002 Tarjan \u53d1\u660e\u4e86\u5f88\u591a\u7b97\u6cd5\u7ed3\u6784\u3002\u4e0d\u5c11\u4ed6\u53d1\u660e\u7684\u7b97\u6cd5\u90fd\u4ee5\u4ed6\u7684\u540d\u5b57\u547d\u540d\uff0c\u4ee5\u81f3\u4e8e\u6709\u65f6\u4f1a\u8ba9\u4eba\u6df7\u6dc6\u51e0\u79cd\u4e0d\u540c\u7684\u7b97\u6cd5\u3002\u6bd4\u5982\u6c42\u5404\u79cd\u8fde\u901a\u5206\u91cf\u7684 Tarjan \u7b97\u6cd5\uff0c\u6c42 LCA\uff08Lowest Common Ancestor\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\uff09\u7684 Tarjan \u7b97\u6cd5\u3002\u5e76\u67e5\u96c6\u3001Splay\u3001Toptree \u4e5f\u662f Tarjan \u53d1\u660e\u7684\u3002 \u6211\u4eec\u8fd9\u91cc\u8981\u4ecb\u7ecd\u7684\u662f\u5728\u6709\u5411\u56fe\u4e2d\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u7684 Tarjan \u7b97\u6cd5\u3002 DFS \u751f\u6210\u6811 \u00b6 \u5728\u4ecb\u7ecd\u8be5\u7b97\u6cd5\u4e4b\u524d\uff0c\u5148\u6765\u4e86\u89e3 DFS \u751f\u6210\u6811\uff0c\u6211\u4eec\u4ee5\u4e0b\u9762\u7684\u6709\u5411\u56fe\u4e3a\u4f8b\uff1a \u6709\u5411\u56fe\u7684 DFS \u751f\u6210\u6811\u4e3b\u8981\u6709 4 \u79cd\u8fb9\uff08\u4e0d\u4e00\u5b9a\u5168\u90e8\u51fa\u73b0\uff09\uff1a \u6811\u8fb9\uff08tree edge\uff09\uff1a\u793a\u610f\u56fe\u4e2d\u4ee5\u9ed1\u8272\u8fb9\u8868\u793a\uff0c\u6bcf\u6b21\u641c\u7d22\u627e\u5230\u4e00\u4e2a\u8fd8\u6ca1\u6709\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\u7684\u65f6\u5019\u5c31\u5f62\u6210\u4e86\u4e00\u6761\u6811\u8fb9\u3002 \u56de\u8fb9\uff08back edge\uff09\uff1a\u793a\u610f\u56fe\u4e2d\u4ee5\u7ea2\u8272\u8fb9\u8868\u793a\uff08\u5373 7 -> 1 \uff09\uff0c\u6307\u5411\u7956\u5148\u7ed3\u70b9\u7684\u8fb9\u3002 \u6a2a\u53c9\u8fb9\uff08cross edge\uff09\uff1a\u793a\u610f\u56fe\u4e2d\u4ee5\u84dd\u8272\u8fb9\u8868\u793a\uff08\u5373 9 -> 7 \uff09\uff0c\u5b83\u4e3b\u8981\u662f\u5728\u641c\u7d22\u7684\u65f6\u5019\u9047\u5230\u4e86\u4e00\u4e2a\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\uff0c\u4f46\u662f\u8fd9\u4e2a\u7ed3\u70b9 \u5e76\u4e0d\u662f \u5f53\u524d\u7ed3\u70b9\u7684\u7956\u5148\u3002 \u524d\u5411\u8fb9\uff08forward edge\uff09\uff1a\u793a\u610f\u56fe\u4e2d\u4ee5\u7eff\u8272\u8fb9\u8868\u793a\uff08\u5373 3 -> 6 \uff09\uff0c\u5b83\u662f\u5728\u641c\u7d22\u7684\u65f6\u5019\u9047\u5230\u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u7684\u65f6\u5019\u5f62\u6210\u7684\u3002 \u6211\u4eec\u8003\u8651 DFS \u751f\u6210\u6811\u4e0e\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u6709\u5982\u4e0b\u7ed3\u8bba: \u5982\u679c\u7ed3\u70b9 \u662f\u67d0\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5728\u641c\u7d22\u6811\u4e2d\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5176\u4f59\u7ed3\u70b9\u80af\u5b9a\u662f\u5728\u641c\u7d22\u6811\u4e2d\u4ee5 \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u3002\u7ed3\u70b9 \u88ab\u79f0\u4e3a\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u3002 Tarjan \u00b6 Tarjan\u7684\u672c\u8d28\u5c31\u662f\u5728dfs\u65f6\u7ef4\u62a4\u4e00\u4e9b\u53d8\u91cf\uff0c\u5e76\u6839\u636e\u53d8\u91cf\u7684\u503c\u8fdb\u884c\u64cd\u4f5c \u7ef4\u62a4\u5982\u4e0b\u53d8\u91cf: dfn[u] \uff1adfs\u65f6\u8fbe\u5230\u9876\u70b9u\u7684\u6b21\u5e8f\u53f7\uff08\u65f6\u95f4\u6233\uff09dfs\u5e8f low[u] \uff1a\u4ece u u \u51fa\u53d1\u7684dfs\u6811\u4e2d \u6700\u5c0f\u7684\u6b21\u5e8f\u53f7,\u8ffd\u6eaf\u503c \u5f00\u59cb\u65f6\u5bf9\u4efb\u610f\u9876\u70b9 u u \uff0c\u5148\u5c06\u9876\u70b9 u u \u5165\u6808\uff0c\u7ed9\u5176\u52a0\u4e0a\u65f6\u95f4\u6233 dfn[u]=low[u]=++num dfn[u]=low[u]=++num \u626b\u63cf u u \u80fd\u5230\u8fbe\u7684\u9876\u70b9 v v \uff0c\u5982\u679cv\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219 dfs(v) dfs(v) \u5916\u52a0 low[u]=min(low[u],low[v]) low[u]=min(low[u],low[v]) \uff0c\u5982\u679cv\u5728\u6808 low[u]=min(low[u],dfn[v]) low[u]=min(low[u],dfn[v]) \uff0c \u626b\u63cf\u5b8c v v \u4ee5\u540e\uff0c\u5982\u679c dfn[u]=low[u] dfn[u]=low[u] \uff0c\u5219\u5c06\u4ece\u6808\u9876\u5230u\u4e4b\u95f4\u7684\u70b9\u51fa\u6808\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e9b\u70b9\u7684low\u503c\u4e00\u6837\uff0c\u4e14\u53ea\u6709\u201c\u6e90\u5934\u201d\u5904\u7684 low = dfn low = dfn \u4ee3\u7801 \u65f6\u95f4\u590d\u6742\u5ea6: O(n*m) O(n*m) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 //\u58f0\u660e\u53d8\u91cf #define ms(a,v) memset(a,v,sizeof(a)) int n , m ; const int maxn = 10005 ; //\u70b9\u6570 int head [ maxn ], cnt = 0 ; struct { int u , v , next ; } e [ 100005 ]; void add ( int u , int v ){ e [ cnt ]. u = u ; e [ cnt ]. v = v ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } int low [ maxn ], dfn [ maxn ], vis [ maxn ]; //vis\u6570\u7ec4\u662f\u8bb0\u5f55\u70b9\u662f\u5426\u5728\u6808\u5185 dfn\u662f\u8bb0\u5f55\u6bcf\u4e2a\u70b9dfs\u5e8f stack < int > s ; int num = 0 ; //dfs\u5e8f\u8ba1\u6570\uff0c\u6216\u8005\u7406\u89e3\u4e3a\u65f6\u95f4\u6233 int lis_num = 0 ; //\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570 int tag [ maxn ]; //tag\u662f\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u5c5e\u4e8e\u51e0\u53f7\u8fde\u901a\u5206\u91cf 1 2 3 4 5 6 7 8 9 //\u521d\u59cb\u5316\u4ee3\u7801 void inits (){ lis_num = 0 ; num = 0 ; cnt = 0 ; ms ( head , -1 ); ms ( vis , 0 ); ms ( tag , 0 ); ms ( dfn , 0 ); ms ( low , 0 ); } Tarjan 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 void Tarjan ( int now ){ s . push ( now ); //\u6808\u53ef\u4ee5\u6570\u7ec4\u4ee3\u66ff vis [ now ] = 1 ; dfn [ now ] = low [ now ] = ++ num ; for ( int i = head [ now ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; if ( ! dfn [ v ]){ Tarjan ( v ); low [ now ] = min ( low [ now ], low [ v ]); } else if ( vis [ v ]){ low [ now ] = min ( low [ now ], dfn [ v ]); } } if ( dfn [ now ] == low [ now ]){ //\u51fa\u6808 lis_num ++ ; int t ; do { t = s . top (); vis [ t ] = 0 ; tag [ t ] = lis_num ; //\u8fd9\u4e2a\u53ef\u4ee5\u6ca1\u6709\u5982\u679c\u4e0d\u9700\u8981\u8bb0\u5f55\u8054\u901a\u5206\u91cf\u7684\u5e8f\u53f7 s . pop (); } while ( t != now ); } } \u7f29\u70b9 \u00b6 \u601d\u8003\uff1a \u5bf9\u4e00\u5f20\u56fe\u7528tarjan\u7b97\u6cd5\u5904\u7406\u8fc7\u540e\uff0c\u53ef\u4ee5\u628a\u6709\u5411\u6709\u73af\u56fe\u4e2d\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u5176\u4e2d\u7684\u6bcf\u4e24\u4e2a\u70b9\u90fd\u4e92\u76f8\u53ef\u8fbe\uff09\u770b\u4f5c\u662f\u4e00\u4e2a\u65b0\u7684\u70b9\uff0c\u6700\u7ec8\u5efa\u7acb\u8d77\u4e00\u5f20\u65b0\u7684\u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09\u3002 \u6709\u5411\u65e0\u73af\u56fe\u5fc5\u5b9a\u4e0d\u662f\u5f3a\u8fde\u901a\u7684\uff0c\uff08\u7531\u5f3a\u8fde\u901a\u7684\u5b9a\u7406\u53ef\u8bc1\uff09\u3002 \u4ee3\u7801 \u53ef\u7528\u4e8eDAG\u7684\u7f29\u70b9\uff08\u6709\u522b\u4e8e\u5e76\u67e5\u96c6\u7684\u7f29\u70b9\uff09 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 for ( int i = 1 ; i <= n ; i ++ ) { int sz = g [ i ]. size (); for ( int j = 0 ; j < sz ; j ++ ) { int v = g [ i ][ j ]; if ( color [ v ] != color [ i ]) { du [ color [ i ]] ++ ; //\u5728\u8fd9\u91cc\u53ef\u4ee5\u5efa\u4e00\u4e2a\u65b0\u7684\u56fe } } cnt [ color [ i ]] ++ ; //\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u5206\u91cf\u7684\u70b9\u6570 } \u53c2\u8003\u4f8b\u9898 \u00b6 problem \u5b66\u6821\u7f51\u7edc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 #include <bits/stdc++.h> #define ms(a,v) memset(a,v,sizeof(a)) using namespace std; int n; const int maxn = 105; //\u70b9\u6570 int head[maxn],cnt = 0; struct { int v,next; }e[100005]; void add(int u,int v){ e[cnt].v = v; e[cnt].next = head[u]; head[u] = cnt++; } int low[maxn],dfn[maxn],vis[maxn]; stack<int> s; int num = 0;//dfs\u5e8f\u8ba1\u6570\uff0c\u6216\u8005\u7406\u89e3\u4e3a\u65f6\u95f4\u6233 int lis_num = 0;//\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570 int tag[maxn];//tag\u662f\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u5c5e\u4e8e\u51e0\u53f7\u8fde\u901a\u5206\u91cf int in[maxn],ot[maxn]; void Tarjan(int now){ s.push(now);//\u6808\u53ef\u4ee5\u6570\u7ec4\u4ee3\u66ff vis[now] = 1; dfn[now] = low[now]= ++num; for(int i=head[now];~i;i=e[i].next){ int v = e[i].v; if(!dfn[v]){ Tarjan(v); low[now] = min(low[now],low[v]); } else if(vis[v]){ low[now] = min(low[now],dfn[v]); } } if(dfn[now]==low[now]){//\u51fa\u6808 lis_num++; int t; do{ t = s.top(); vis[t] = 0; tag[t] = lis_num;//\u8fd9\u4e2a\u53ef\u4ee5\u6ca1\u6709\u5982\u679c\u4e0d\u9700\u8981\u8bb0\u5f55\u8054\u901a\u5206\u91cf\u7684\u5e8f\u53f7 s.pop(); }while(t!=now); } } int main(){ cin>>n; ms(head,-1); for(int i = 1; i <= n;i++){ int x; while(1){ scanf(\"%d\",&x); if(x==0)break; add(i,x); } } for(int i = 1;i <= n;i++)if(!dfn[i]){ Tarjan(i); } for(int i = 1; i <= n; i++){ for(int j = head[i]; ~j; j = e[j].next) { int v = e[j].v; if(tag[v] != tag[i]) { in[tag[v]]++; ot[tag[i]]++; } } } int a = 0,b = 0; for(int i = 1;i <= lis_num; i++){ if(in[i] == 0)a ++; if(ot[i] == 0)b ++; } if(lis_num == 1)printf(\"1\\n0\"); else printf(\"%d\\n%d\\n\",a,max(a,b)); } \u53c2\u8003\u8d44\u6599 \u00b6 \u56fe\u8bba OI Wiki","title":"\u5f3a\u8054\u901a\u5206\u91cf"},{"location":"graph/strongly-connected-components/#_1","text":"\u5728\u6709\u5411\u56feG\u4e2d\uff0c\u5982\u679c\u4e24\u70b9\u4e92\u76f8\u53ef\u8fbe\uff0c\u5219\u79f0\u8fd9\u4e24\u4e2a\u70b9\u5f3a\u8fde\u901a\uff0c\u5982\u679cG\u4e2d\u4efb\u610f\u4e24\u70b9\u4e92\u76f8\u53ef\u8fbe\uff0c\u5219\u79f0G\u662f\u5f3a\u8fde\u901a\u56fe\u3002","title":"\u5f3a\u8fde\u901a"},{"location":"graph/strongly-connected-components/#_2","text":"\u4e00\u4e2a\u6709\u5411\u56fe\u662f\u5f3a\u8fde\u901a\u7684\uff0c\u5f53\u4e14\u4ec5\u5f53G\u4e2d\u6709\u4e00\u4e2a\u56de\u8def\uff08\u73af\uff09\uff0c\u5b83\u81f3\u5c11\u5305\u542b\u6bcf\u4e2a\u8282\u70b9\u4e00\u6b21\u3002 \u975e\u5f3a\u8fde\u901a\u6709\u5411\u56fe\u7684\u6781\u5927\u5f3a\u8fde\u901a\u5b50\u56fe\uff0c\u79f0\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf\uff08SCC\u5373Strongly Connected Componenet\uff09\u3002 1\uff0c2\uff0c3\uff0c4\u662f\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c5\u548c6\u662f\u53e6\u4e24\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf","title":"\u7b80\u5355\u6027\u8d28"},{"location":"graph/strongly-connected-components/#tarjan","text":"","title":"Tarjan \u7b97\u6cd5"},{"location":"graph/strongly-connected-components/#tarjan_1","text":"Robert E. Tarjan\uff08\u7f57\u4f2f\u7279\u00b7\u5854\u626c\uff0c1948~\uff09\uff0c\u751f\u4e8e\u7f8e\u56fd\u52a0\u5dde\u6ce2\u83ab\u7eb3\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u3002 Tarjan \u53d1\u660e\u4e86\u5f88\u591a\u7b97\u6cd5\u7ed3\u6784\u3002\u4e0d\u5c11\u4ed6\u53d1\u660e\u7684\u7b97\u6cd5\u90fd\u4ee5\u4ed6\u7684\u540d\u5b57\u547d\u540d\uff0c\u4ee5\u81f3\u4e8e\u6709\u65f6\u4f1a\u8ba9\u4eba\u6df7\u6dc6\u51e0\u79cd\u4e0d\u540c\u7684\u7b97\u6cd5\u3002\u6bd4\u5982\u6c42\u5404\u79cd\u8fde\u901a\u5206\u91cf\u7684 Tarjan \u7b97\u6cd5\uff0c\u6c42 LCA\uff08Lowest Common Ancestor\uff0c\u6700\u8fd1\u516c\u5171\u7956\u5148\uff09\u7684 Tarjan \u7b97\u6cd5\u3002\u5e76\u67e5\u96c6\u3001Splay\u3001Toptree \u4e5f\u662f Tarjan \u53d1\u660e\u7684\u3002 \u6211\u4eec\u8fd9\u91cc\u8981\u4ecb\u7ecd\u7684\u662f\u5728\u6709\u5411\u56fe\u4e2d\u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u7684 Tarjan \u7b97\u6cd5\u3002","title":"Tarjan\u7b80\u4ecb"},{"location":"graph/strongly-connected-components/#dfs","text":"\u5728\u4ecb\u7ecd\u8be5\u7b97\u6cd5\u4e4b\u524d\uff0c\u5148\u6765\u4e86\u89e3 DFS \u751f\u6210\u6811\uff0c\u6211\u4eec\u4ee5\u4e0b\u9762\u7684\u6709\u5411\u56fe\u4e3a\u4f8b\uff1a \u6709\u5411\u56fe\u7684 DFS \u751f\u6210\u6811\u4e3b\u8981\u6709 4 \u79cd\u8fb9\uff08\u4e0d\u4e00\u5b9a\u5168\u90e8\u51fa\u73b0\uff09\uff1a \u6811\u8fb9\uff08tree edge\uff09\uff1a\u793a\u610f\u56fe\u4e2d\u4ee5\u9ed1\u8272\u8fb9\u8868\u793a\uff0c\u6bcf\u6b21\u641c\u7d22\u627e\u5230\u4e00\u4e2a\u8fd8\u6ca1\u6709\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\u7684\u65f6\u5019\u5c31\u5f62\u6210\u4e86\u4e00\u6761\u6811\u8fb9\u3002 \u56de\u8fb9\uff08back edge\uff09\uff1a\u793a\u610f\u56fe\u4e2d\u4ee5\u7ea2\u8272\u8fb9\u8868\u793a\uff08\u5373 7 -> 1 \uff09\uff0c\u6307\u5411\u7956\u5148\u7ed3\u70b9\u7684\u8fb9\u3002 \u6a2a\u53c9\u8fb9\uff08cross edge\uff09\uff1a\u793a\u610f\u56fe\u4e2d\u4ee5\u84dd\u8272\u8fb9\u8868\u793a\uff08\u5373 9 -> 7 \uff09\uff0c\u5b83\u4e3b\u8981\u662f\u5728\u641c\u7d22\u7684\u65f6\u5019\u9047\u5230\u4e86\u4e00\u4e2a\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u7ed3\u70b9\uff0c\u4f46\u662f\u8fd9\u4e2a\u7ed3\u70b9 \u5e76\u4e0d\u662f \u5f53\u524d\u7ed3\u70b9\u7684\u7956\u5148\u3002 \u524d\u5411\u8fb9\uff08forward edge\uff09\uff1a\u793a\u610f\u56fe\u4e2d\u4ee5\u7eff\u8272\u8fb9\u8868\u793a\uff08\u5373 3 -> 6 \uff09\uff0c\u5b83\u662f\u5728\u641c\u7d22\u7684\u65f6\u5019\u9047\u5230\u5b50\u6811\u4e2d\u7684\u7ed3\u70b9\u7684\u65f6\u5019\u5f62\u6210\u7684\u3002 \u6211\u4eec\u8003\u8651 DFS \u751f\u6210\u6811\u4e0e\u5f3a\u8fde\u901a\u5206\u91cf\u4e4b\u95f4\u7684\u5173\u7cfb\u3002 \u6709\u5982\u4e0b\u7ed3\u8bba: \u5982\u679c\u7ed3\u70b9 \u662f\u67d0\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5728\u641c\u7d22\u6811\u4e2d\u9047\u5230\u7684\u7b2c\u4e00\u4e2a\u7ed3\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u5176\u4f59\u7ed3\u70b9\u80af\u5b9a\u662f\u5728\u641c\u7d22\u6811\u4e2d\u4ee5 \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u3002\u7ed3\u70b9 \u88ab\u79f0\u4e3a\u8fd9\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u6839\u3002","title":"DFS \u751f\u6210\u6811"},{"location":"graph/strongly-connected-components/#tarjan_2","text":"Tarjan\u7684\u672c\u8d28\u5c31\u662f\u5728dfs\u65f6\u7ef4\u62a4\u4e00\u4e9b\u53d8\u91cf\uff0c\u5e76\u6839\u636e\u53d8\u91cf\u7684\u503c\u8fdb\u884c\u64cd\u4f5c \u7ef4\u62a4\u5982\u4e0b\u53d8\u91cf: dfn[u] \uff1adfs\u65f6\u8fbe\u5230\u9876\u70b9u\u7684\u6b21\u5e8f\u53f7\uff08\u65f6\u95f4\u6233\uff09dfs\u5e8f low[u] \uff1a\u4ece u u \u51fa\u53d1\u7684dfs\u6811\u4e2d \u6700\u5c0f\u7684\u6b21\u5e8f\u53f7,\u8ffd\u6eaf\u503c \u5f00\u59cb\u65f6\u5bf9\u4efb\u610f\u9876\u70b9 u u \uff0c\u5148\u5c06\u9876\u70b9 u u \u5165\u6808\uff0c\u7ed9\u5176\u52a0\u4e0a\u65f6\u95f4\u6233 dfn[u]=low[u]=++num dfn[u]=low[u]=++num \u626b\u63cf u u \u80fd\u5230\u8fbe\u7684\u9876\u70b9 v v \uff0c\u5982\u679cv\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219 dfs(v) dfs(v) \u5916\u52a0 low[u]=min(low[u],low[v]) low[u]=min(low[u],low[v]) \uff0c\u5982\u679cv\u5728\u6808 low[u]=min(low[u],dfn[v]) low[u]=min(low[u],dfn[v]) \uff0c \u626b\u63cf\u5b8c v v \u4ee5\u540e\uff0c\u5982\u679c dfn[u]=low[u] dfn[u]=low[u] \uff0c\u5219\u5c06\u4ece\u6808\u9876\u5230u\u4e4b\u95f4\u7684\u70b9\u51fa\u6808\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e9b\u70b9\u7684low\u503c\u4e00\u6837\uff0c\u4e14\u53ea\u6709\u201c\u6e90\u5934\u201d\u5904\u7684 low = dfn low = dfn \u4ee3\u7801 \u65f6\u95f4\u590d\u6742\u5ea6: O(n*m) O(n*m) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 //\u58f0\u660e\u53d8\u91cf #define ms(a,v) memset(a,v,sizeof(a)) int n , m ; const int maxn = 10005 ; //\u70b9\u6570 int head [ maxn ], cnt = 0 ; struct { int u , v , next ; } e [ 100005 ]; void add ( int u , int v ){ e [ cnt ]. u = u ; e [ cnt ]. v = v ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ++ ; } int low [ maxn ], dfn [ maxn ], vis [ maxn ]; //vis\u6570\u7ec4\u662f\u8bb0\u5f55\u70b9\u662f\u5426\u5728\u6808\u5185 dfn\u662f\u8bb0\u5f55\u6bcf\u4e2a\u70b9dfs\u5e8f stack < int > s ; int num = 0 ; //dfs\u5e8f\u8ba1\u6570\uff0c\u6216\u8005\u7406\u89e3\u4e3a\u65f6\u95f4\u6233 int lis_num = 0 ; //\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570 int tag [ maxn ]; //tag\u662f\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u5c5e\u4e8e\u51e0\u53f7\u8fde\u901a\u5206\u91cf 1 2 3 4 5 6 7 8 9 //\u521d\u59cb\u5316\u4ee3\u7801 void inits (){ lis_num = 0 ; num = 0 ; cnt = 0 ; ms ( head , -1 ); ms ( vis , 0 ); ms ( tag , 0 ); ms ( dfn , 0 ); ms ( low , 0 ); } Tarjan 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 void Tarjan ( int now ){ s . push ( now ); //\u6808\u53ef\u4ee5\u6570\u7ec4\u4ee3\u66ff vis [ now ] = 1 ; dfn [ now ] = low [ now ] = ++ num ; for ( int i = head [ now ]; ~ i ; i = e [ i ]. next ){ int v = e [ i ]. v ; if ( ! dfn [ v ]){ Tarjan ( v ); low [ now ] = min ( low [ now ], low [ v ]); } else if ( vis [ v ]){ low [ now ] = min ( low [ now ], dfn [ v ]); } } if ( dfn [ now ] == low [ now ]){ //\u51fa\u6808 lis_num ++ ; int t ; do { t = s . top (); vis [ t ] = 0 ; tag [ t ] = lis_num ; //\u8fd9\u4e2a\u53ef\u4ee5\u6ca1\u6709\u5982\u679c\u4e0d\u9700\u8981\u8bb0\u5f55\u8054\u901a\u5206\u91cf\u7684\u5e8f\u53f7 s . pop (); } while ( t != now ); } }","title":"Tarjan"},{"location":"graph/strongly-connected-components/#_3","text":"\u601d\u8003\uff1a \u5bf9\u4e00\u5f20\u56fe\u7528tarjan\u7b97\u6cd5\u5904\u7406\u8fc7\u540e\uff0c\u53ef\u4ee5\u628a\u6709\u5411\u6709\u73af\u56fe\u4e2d\u6bcf\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\uff08\u5176\u4e2d\u7684\u6bcf\u4e24\u4e2a\u70b9\u90fd\u4e92\u76f8\u53ef\u8fbe\uff09\u770b\u4f5c\u662f\u4e00\u4e2a\u65b0\u7684\u70b9\uff0c\u6700\u7ec8\u5efa\u7acb\u8d77\u4e00\u5f20\u65b0\u7684\u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09\u3002 \u6709\u5411\u65e0\u73af\u56fe\u5fc5\u5b9a\u4e0d\u662f\u5f3a\u8fde\u901a\u7684\uff0c\uff08\u7531\u5f3a\u8fde\u901a\u7684\u5b9a\u7406\u53ef\u8bc1\uff09\u3002 \u4ee3\u7801 \u53ef\u7528\u4e8eDAG\u7684\u7f29\u70b9\uff08\u6709\u522b\u4e8e\u5e76\u67e5\u96c6\u7684\u7f29\u70b9\uff09 \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 for ( int i = 1 ; i <= n ; i ++ ) { int sz = g [ i ]. size (); for ( int j = 0 ; j < sz ; j ++ ) { int v = g [ i ][ j ]; if ( color [ v ] != color [ i ]) { du [ color [ i ]] ++ ; //\u5728\u8fd9\u91cc\u53ef\u4ee5\u5efa\u4e00\u4e2a\u65b0\u7684\u56fe } } cnt [ color [ i ]] ++ ; //\u7edf\u8ba1\u6bcf\u4e00\u4e2a\u5206\u91cf\u7684\u70b9\u6570 }","title":"\u7f29\u70b9"},{"location":"graph/strongly-connected-components/#_4","text":"problem \u5b66\u6821\u7f51\u7edc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 #include <bits/stdc++.h> #define ms(a,v) memset(a,v,sizeof(a)) using namespace std; int n; const int maxn = 105; //\u70b9\u6570 int head[maxn],cnt = 0; struct { int v,next; }e[100005]; void add(int u,int v){ e[cnt].v = v; e[cnt].next = head[u]; head[u] = cnt++; } int low[maxn],dfn[maxn],vis[maxn]; stack<int> s; int num = 0;//dfs\u5e8f\u8ba1\u6570\uff0c\u6216\u8005\u7406\u89e3\u4e3a\u65f6\u95f4\u6233 int lis_num = 0;//\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u4e2a\u6570 int tag[maxn];//tag\u662f\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u5c5e\u4e8e\u51e0\u53f7\u8fde\u901a\u5206\u91cf int in[maxn],ot[maxn]; void Tarjan(int now){ s.push(now);//\u6808\u53ef\u4ee5\u6570\u7ec4\u4ee3\u66ff vis[now] = 1; dfn[now] = low[now]= ++num; for(int i=head[now];~i;i=e[i].next){ int v = e[i].v; if(!dfn[v]){ Tarjan(v); low[now] = min(low[now],low[v]); } else if(vis[v]){ low[now] = min(low[now],dfn[v]); } } if(dfn[now]==low[now]){//\u51fa\u6808 lis_num++; int t; do{ t = s.top(); vis[t] = 0; tag[t] = lis_num;//\u8fd9\u4e2a\u53ef\u4ee5\u6ca1\u6709\u5982\u679c\u4e0d\u9700\u8981\u8bb0\u5f55\u8054\u901a\u5206\u91cf\u7684\u5e8f\u53f7 s.pop(); }while(t!=now); } } int main(){ cin>>n; ms(head,-1); for(int i = 1; i <= n;i++){ int x; while(1){ scanf(\"%d\",&x); if(x==0)break; add(i,x); } } for(int i = 1;i <= n;i++)if(!dfn[i]){ Tarjan(i); } for(int i = 1; i <= n; i++){ for(int j = head[i]; ~j; j = e[j].next) { int v = e[j].v; if(tag[v] != tag[i]) { in[tag[v]]++; ot[tag[i]]++; } } } int a = 0,b = 0; for(int i = 1;i <= lis_num; i++){ if(in[i] == 0)a ++; if(ot[i] == 0)b ++; } if(lis_num == 1)printf(\"1\\n0\"); else printf(\"%d\\n%d\\n\",a,max(a,b)); }","title":"\u53c2\u8003\u4f8b\u9898"},{"location":"graph/strongly-connected-components/#_5","text":"\u56fe\u8bba OI Wiki","title":"\u53c2\u8003\u8d44\u6599"},{"location":"graph/topological-sorting/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a zrz \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u524d\u7f6e\u77e5\u8bc6\uff1a\u56fe\u8bba\u57fa\u672c\u6982\u5ff5 \u6709\u5411\u65e0\u73af\u56fe \u00b6 \u8fb9\u6709\u5411\uff0c\u65e0\u73af\u3002 \u82f1\u6587\u540d\u53eb Directed Acyclic Graph\uff0c\u7f29\u5199\u662f DAG\u3002 \u7b80\u5355\u6027\u8d28 \u00b6 \u80fd \u62d3\u6251\u6392\u5e8f \u7684\u56fe\uff0c\u4e00\u5b9a\u662f\u6709\u5411\u65e0\u73af\u56fe\uff1b \u6709\u5411\u65e0\u73af\u56fe\uff0c\u4e00\u5b9a\u80fd\u62d3\u6251\u6392\u5e8f\uff1b (\u5f52\u7eb3\u6cd5)\u5047\u8bbe\u8282\u70b9\u6570\u4e0d\u8d85\u8fc7 k k \u7684 \u6709\u5411\u65e0\u73af\u56fe\u90fd\u80fd\u62d3\u6251\u6392\u5e8f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8282\u70b9\u6570\u7b49\u4e8e k k \u7684\uff0c\u8003\u8651\u6267\u884c\u62d3\u6251\u6392\u5e8f\u7b2c\u4e00\u6b65\u4e4b\u540e\u7684\u60c5\u5f62\u5373\u53ef\u3002 \u62d3\u6251\u6392\u5e8f \u00b6 \u7b80\u8981\u4ecb\u7ecd\uff1a \u00b6 \u601d\u8003\uff1a\u52a0\u5165\u6211\u4eec\u62ff\u5230\u5982\u4e0b\u5173\u7cfb\u7684\u8868\uff0c\u6211\u4eec\u8981\u5982\u4f55\u6392\u8bfe\u5462\uff1f \u8bfe\u7a0b\u4ee3\u53f7 \u8bfe\u7a0b\u540d\u79f0 \u5148\u4fee\u8bfe C1 \u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u7840 \u65e0 C2 \u79bb\u6563\u6570\u5b66 C1 C3 \u6570\u636e\u7ed3\u6784 C1,C2 C4 \u9ad8\u7b49\u6570\u5b66 \u65e0 C5 \u7ebf\u6027\u4ee3\u6570 C4 C6 \u666e\u901a\u7269\u7406\u5b66 C4 C7 \u7f16\u8bd1\u539f\u7406 C1,C2 C8 \u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406 C6,C3 \u56fe\u8868\u793a: \u6240\u8c13\u62d3\u6251\u6392\u5e8f\uff0c\u5c31\u662f\u6839\u636e\u6709\u5411\u56fe\u4e2d\u7684\u504f\u5e8f\u5173\u7cfb\uff0c\u5bf9\u56fe\u4e2d\u7684\u8282\u70b9\u8fdb\u884c\u6392\u5e8f\u3002\u5bf9\u4e8e\u56fe\u4e2d\u7684\u4f8b\u5b50\u800c\u8a00\uff0c\u6392\u8bfe\u8001\u5e08\u7684\u4efb\u52a1\u662f\uff1a\u6839\u636e\u8bfe\u7a0b\u4e4b\u7684\u5148\u4fee\u5173\u7cfb\uff0c\u6bcf\u4e2a\u5b66\u671f\u5408\u7406\u5b89\u6392\u8bfe\u7a0b\uff0c\u4fdd\u8bc1\u6bcf\u95e8\u8bfe\u7684\u5148\u4fee\u8bfe\u90fd\u5fc5\u987b\u5b89\u6392\u5728\u8fd9\u95e8\u8bfe\u7684\u524d\u9762\u3002 \u6982\u5ff5\uff1a \u00b6 \u5bf9\u4e8e\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe(DAG)\u800c\u8a00\uff0c\u8be5\u56fe\u7684\u62d3\u6251\u6392\u5e8f\u662f\u4e00\u4e2a\u7531\u8be5\u56fe\u6240\u6709\u9876\u70b9\u7ec4\u6210\u7684\u7ebf\u6027\u5e8f\u5217\u3002\u4f7f\u5f97\u56fe\u4e2d\u4efb\u610f\u4e00\u5bf9\u9876\u70b9 u u \u548c v v \uff0c\u82e5\u5b58\u5728\u8fb9 \u4ece u u \u6307\u5411 v v \uff0c\u5219u\u5728\u7ebf\u6027\u5e8f\u5217\u4e2d\u51fa\u73b0\u5728 v v \u4e4b\u524d\u3002 \u5bf9\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe(Directed Acyclic Graph\u7b80\u79f0DAG)\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u662f\u5c06G\u4e2d\u6240\u6709\u9876\u70b9\u6392\u6210\u4e00\u4e2a\u7ebf\u6027\u5e8f\u5217\uff0c\u4f7f\u5f97\u56fe\u4e2d\u4efb\u610f\u4e00\u5bf9\u9876\u70b9u\u548cv\uff0c\u82e5\u8fb9 (u,v) \\in E(G) (u,v) \\in E(G) \uff0c\u5219u\u5728\u7ebf\u6027\u5e8f\u5217\u4e2d\u51fa\u73b0\u5728v\u4e4b\u524d\u3002 \u600e\u6837\u6c42\u62d3\u6251\u5e8f \u00b6 \u4ece DAG \u56fe\u4e2d\u9009\u62e9\u4e00\u4e2a \u6ca1\u6709\u524d\u9a71\uff08\u5373\u5165\u5ea6\u4e3a0 \u7684\u9876\u70b9\u5e76\u8f93\u51fa\u3002 \u4ece\u56fe\u4e2d\u5220\u9664\u8be5\u9876\u70b9\u548c\u6240\u6709\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u6709\u5411\u8fb9\u3002 \u91cd\u590d 1 \u548c 2 \u76f4\u5230\u5f53\u524d\u7684 DAG \u56fe\u4e3a\u7a7a\u6216\u5f53\u524d\u56fe\u4e2d\u4e0d\u5b58\u5728\u65e0\u524d\u9a71\u7684\u9876\u70b9\u4e3a\u6b62\u3002\u540e\u4e00\u79cd\u60c5\u51b5\u8bf4\u660e\u6709\u5411\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u73af\u3002 \u6392\u5e8f\u7ed3\u679c\uff1a1->2->4->3->5 \u73af\uff1f \u00b6 \u5728\u4e0a\u8ff0\u4ee3\u7801\u540e\u52a0\u4e00\u4e2a\u5224\u65ad\uff1a 1 if(ct < n)return ; ct \u8868\u793a\u6392\u597d\u5e8f\u7684\u70b9\u7684\u4e2a\u6570\uff0c ct < n \u8bf4\u660e\u6709\u7684\u70b9\u5165\u5ea6\u59cb\u7ec8\u4e0d\u4e3a\u96f6 \u4f8b\u5982: \u62d3\u6251\u5e8f\u6a21\u7248 \u00b6 \u590d\u6742\u5ea6: O(n+m) O(n+m) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // \u9884\u5148\u5904\u7406in\u6570\u7ec4\uff0cans \u662f\u5b58\u50a8\u62d3\u6251\u5e8f\u7684\u6570\u7ec4\uff0c\u5982\u679c\u8981\u65b9\u4fbf\u67e5\u627e\uff0c\u518d\u52a0\u4e00\u4e2apos\u6570\u7ec4 vector < int > g [ maxn ]; //\u8fd9\u91cc\u6211\u7528\u7684\u662fvector\u5b58\u7684\u56fe queue < int > q ; for ( int i = 1 ; i <= n ; i ++ ){ if ( in [ i ] == 0 ){ q . push ( i ); } } int ct = 0 ; while ( ! q . empty ()){ int f = q . front (); q . pop (); ans [ ++ ct ] = f ; pos [ f ] = ct ; for ( int i = 0 ; i < g [ f ]. size (); i ++ ){ int v = g [ f ][ i ]; in [ v ] -- ; if ( in [ v ] == 0 ){ q . push ( v ); } } } if ( ct < n ) \u8fd9\u91cc\u5982\u679c\u6210\u7acb\u8bf4\u660e\u56fe\u662f\u6709\u73af\u7684\u6240\u4ee5\u65e0\u6cd5\u6392\u5e8f \u94fe\u5f0f\u524d\u5411\u884c\u7684\u62d3\u6251\u6392\u5e8f\u7248\u672c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 struct node { int to , next ; } e [ maxn << 1 ]; void init (){ vec . clear (); cnt = tot = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ pos [ i ] = deg [ i ] = head [ i ] = 0 ; } } void add ( int u , int v ){ e [ ++ cnt ]. to = v ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ; } //\u4e3b\u51fd\u6570\u90e8\u5206 while ( ! que . empty ()){ int x = que . front (); que . pop (); pos [ x ] =++ tot ; for ( int i = head [ x ]; i ; i = e [ i ]. next ){ deg [ e [ i ]. to ] -- ; if ( deg [ e [ i ]. to ] == 0 ){ que . push ( e [ i ]. to ); } } } if ( tot != n ){ //\u6709\u73af printf ( \"NO \\n \" ); } else { \u5982\u4f55\u7ef4\u62a4\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u62d3\u6251\u5e8f \u00b6 \u4ec0\u4e48\u662f\u6700\u5c0f\u5b50\u5178\u5e8f\uff1f \u4ee5\u4e0a\u56fe\u4e3a\u4f8b\uff0c\u5b58\u5728\u4e24\u79cd\u89e3\uff1a 1 2 4 3 2 1 4 3 \u7b80\u5355\u7684\u7406\u89e3\u65b9\u6cd5\u662f\uff0c\u628a\u4e24\u79cd\u89e3\u770b\u4f5c\u4e24\u4e2a\u6570\u5b571243 \u548c 2143\uff0c\u5c0f\u7684\u90a3\u4e2a\u6570\u5bf9\u5e94\u7684\u6392\u5217\u5c31\u662f\u5b57\u5178\u5e8f\u504f\u5c0f\u7684\u3002 \u601d\u8003\uff1a\u5982\u4f55\u7ef4\u62a4\u5462 problem U107394 \u62d3\u6251\u6392\u5e8f\u6a21\u677f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #include <bits/stdc++.h> using namespace std; const int maxn = 1e5+5; int in[maxn]; vector<int>g[maxn]; int ans[maxn]; int num = 0; int main(){ int n,m; scanf(\"%d%d\",&n,&m); for(int i = 0 ;i < m ;i++){ int x,y;scanf(\"%d%d\",&x,&y); in[y]+=1; g[x].push_back(y); } priority_queue<int,vector<int>,greater<int> >q; for(int i = 1;i <= n;i++){ if(in[i]==0)q.push(i); } while(!q.empty()){ int f = q.top(); q.pop(); ans[num++] = f; for(int i = 0 ;i < g[f].size(); i++){ int v = g[f][i]; in[v]--; if(!in[v]){ q.push(v); } } } for(int i = 0;i < num;i++){ printf(\"%d \",ans[i]); } } problem Directing Edges problem B-Rank of Tetris \u53c2\u8003\u8d44\u6599 \u00b6 \u56fe\u8bba OI Wiki","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"graph/topological-sorting/#_1","text":"\u8fb9\u6709\u5411\uff0c\u65e0\u73af\u3002 \u82f1\u6587\u540d\u53eb Directed Acyclic Graph\uff0c\u7f29\u5199\u662f DAG\u3002","title":"\u6709\u5411\u65e0\u73af\u56fe"},{"location":"graph/topological-sorting/#_2","text":"\u80fd \u62d3\u6251\u6392\u5e8f \u7684\u56fe\uff0c\u4e00\u5b9a\u662f\u6709\u5411\u65e0\u73af\u56fe\uff1b \u6709\u5411\u65e0\u73af\u56fe\uff0c\u4e00\u5b9a\u80fd\u62d3\u6251\u6392\u5e8f\uff1b (\u5f52\u7eb3\u6cd5)\u5047\u8bbe\u8282\u70b9\u6570\u4e0d\u8d85\u8fc7 k k \u7684 \u6709\u5411\u65e0\u73af\u56fe\u90fd\u80fd\u62d3\u6251\u6392\u5e8f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8282\u70b9\u6570\u7b49\u4e8e k k \u7684\uff0c\u8003\u8651\u6267\u884c\u62d3\u6251\u6392\u5e8f\u7b2c\u4e00\u6b65\u4e4b\u540e\u7684\u60c5\u5f62\u5373\u53ef\u3002","title":"\u7b80\u5355\u6027\u8d28"},{"location":"graph/topological-sorting/#_3","text":"","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"graph/topological-sorting/#_4","text":"\u601d\u8003\uff1a\u52a0\u5165\u6211\u4eec\u62ff\u5230\u5982\u4e0b\u5173\u7cfb\u7684\u8868\uff0c\u6211\u4eec\u8981\u5982\u4f55\u6392\u8bfe\u5462\uff1f \u8bfe\u7a0b\u4ee3\u53f7 \u8bfe\u7a0b\u540d\u79f0 \u5148\u4fee\u8bfe C1 \u7a0b\u5e8f\u8bbe\u8ba1\u57fa\u7840 \u65e0 C2 \u79bb\u6563\u6570\u5b66 C1 C3 \u6570\u636e\u7ed3\u6784 C1,C2 C4 \u9ad8\u7b49\u6570\u5b66 \u65e0 C5 \u7ebf\u6027\u4ee3\u6570 C4 C6 \u666e\u901a\u7269\u7406\u5b66 C4 C7 \u7f16\u8bd1\u539f\u7406 C1,C2 C8 \u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406 C6,C3 \u56fe\u8868\u793a: \u6240\u8c13\u62d3\u6251\u6392\u5e8f\uff0c\u5c31\u662f\u6839\u636e\u6709\u5411\u56fe\u4e2d\u7684\u504f\u5e8f\u5173\u7cfb\uff0c\u5bf9\u56fe\u4e2d\u7684\u8282\u70b9\u8fdb\u884c\u6392\u5e8f\u3002\u5bf9\u4e8e\u56fe\u4e2d\u7684\u4f8b\u5b50\u800c\u8a00\uff0c\u6392\u8bfe\u8001\u5e08\u7684\u4efb\u52a1\u662f\uff1a\u6839\u636e\u8bfe\u7a0b\u4e4b\u7684\u5148\u4fee\u5173\u7cfb\uff0c\u6bcf\u4e2a\u5b66\u671f\u5408\u7406\u5b89\u6392\u8bfe\u7a0b\uff0c\u4fdd\u8bc1\u6bcf\u95e8\u8bfe\u7684\u5148\u4fee\u8bfe\u90fd\u5fc5\u987b\u5b89\u6392\u5728\u8fd9\u95e8\u8bfe\u7684\u524d\u9762\u3002","title":"\u7b80\u8981\u4ecb\u7ecd\uff1a"},{"location":"graph/topological-sorting/#_5","text":"\u5bf9\u4e8e\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe(DAG)\u800c\u8a00\uff0c\u8be5\u56fe\u7684\u62d3\u6251\u6392\u5e8f\u662f\u4e00\u4e2a\u7531\u8be5\u56fe\u6240\u6709\u9876\u70b9\u7ec4\u6210\u7684\u7ebf\u6027\u5e8f\u5217\u3002\u4f7f\u5f97\u56fe\u4e2d\u4efb\u610f\u4e00\u5bf9\u9876\u70b9 u u \u548c v v \uff0c\u82e5\u5b58\u5728\u8fb9 \u4ece u u \u6307\u5411 v v \uff0c\u5219u\u5728\u7ebf\u6027\u5e8f\u5217\u4e2d\u51fa\u73b0\u5728 v v \u4e4b\u524d\u3002 \u5bf9\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe(Directed Acyclic Graph\u7b80\u79f0DAG)\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u662f\u5c06G\u4e2d\u6240\u6709\u9876\u70b9\u6392\u6210\u4e00\u4e2a\u7ebf\u6027\u5e8f\u5217\uff0c\u4f7f\u5f97\u56fe\u4e2d\u4efb\u610f\u4e00\u5bf9\u9876\u70b9u\u548cv\uff0c\u82e5\u8fb9 (u,v) \\in E(G) (u,v) \\in E(G) \uff0c\u5219u\u5728\u7ebf\u6027\u5e8f\u5217\u4e2d\u51fa\u73b0\u5728v\u4e4b\u524d\u3002","title":"\u6982\u5ff5\uff1a"},{"location":"graph/topological-sorting/#_6","text":"\u4ece DAG \u56fe\u4e2d\u9009\u62e9\u4e00\u4e2a \u6ca1\u6709\u524d\u9a71\uff08\u5373\u5165\u5ea6\u4e3a0 \u7684\u9876\u70b9\u5e76\u8f93\u51fa\u3002 \u4ece\u56fe\u4e2d\u5220\u9664\u8be5\u9876\u70b9\u548c\u6240\u6709\u4ee5\u5b83\u4e3a\u8d77\u70b9\u7684\u6709\u5411\u8fb9\u3002 \u91cd\u590d 1 \u548c 2 \u76f4\u5230\u5f53\u524d\u7684 DAG \u56fe\u4e3a\u7a7a\u6216\u5f53\u524d\u56fe\u4e2d\u4e0d\u5b58\u5728\u65e0\u524d\u9a71\u7684\u9876\u70b9\u4e3a\u6b62\u3002\u540e\u4e00\u79cd\u60c5\u51b5\u8bf4\u660e\u6709\u5411\u56fe\u4e2d\u5fc5\u7136\u5b58\u5728\u73af\u3002 \u6392\u5e8f\u7ed3\u679c\uff1a1->2->4->3->5","title":"\u600e\u6837\u6c42\u62d3\u6251\u5e8f"},{"location":"graph/topological-sorting/#_7","text":"\u5728\u4e0a\u8ff0\u4ee3\u7801\u540e\u52a0\u4e00\u4e2a\u5224\u65ad\uff1a 1 if(ct < n)return ; ct \u8868\u793a\u6392\u597d\u5e8f\u7684\u70b9\u7684\u4e2a\u6570\uff0c ct < n \u8bf4\u660e\u6709\u7684\u70b9\u5165\u5ea6\u59cb\u7ec8\u4e0d\u4e3a\u96f6 \u4f8b\u5982:","title":"\u73af\uff1f"},{"location":"graph/topological-sorting/#_8","text":"\u590d\u6742\u5ea6: O(n+m) O(n+m) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // \u9884\u5148\u5904\u7406in\u6570\u7ec4\uff0cans \u662f\u5b58\u50a8\u62d3\u6251\u5e8f\u7684\u6570\u7ec4\uff0c\u5982\u679c\u8981\u65b9\u4fbf\u67e5\u627e\uff0c\u518d\u52a0\u4e00\u4e2apos\u6570\u7ec4 vector < int > g [ maxn ]; //\u8fd9\u91cc\u6211\u7528\u7684\u662fvector\u5b58\u7684\u56fe queue < int > q ; for ( int i = 1 ; i <= n ; i ++ ){ if ( in [ i ] == 0 ){ q . push ( i ); } } int ct = 0 ; while ( ! q . empty ()){ int f = q . front (); q . pop (); ans [ ++ ct ] = f ; pos [ f ] = ct ; for ( int i = 0 ; i < g [ f ]. size (); i ++ ){ int v = g [ f ][ i ]; in [ v ] -- ; if ( in [ v ] == 0 ){ q . push ( v ); } } } if ( ct < n ) \u8fd9\u91cc\u5982\u679c\u6210\u7acb\u8bf4\u660e\u56fe\u662f\u6709\u73af\u7684\u6240\u4ee5\u65e0\u6cd5\u6392\u5e8f \u94fe\u5f0f\u524d\u5411\u884c\u7684\u62d3\u6251\u6392\u5e8f\u7248\u672c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 struct node { int to , next ; } e [ maxn << 1 ]; void init (){ vec . clear (); cnt = tot = 0 ; for ( int i = 1 ; i <= n ; i ++ ){ pos [ i ] = deg [ i ] = head [ i ] = 0 ; } } void add ( int u , int v ){ e [ ++ cnt ]. to = v ; e [ cnt ]. next = head [ u ]; head [ u ] = cnt ; } //\u4e3b\u51fd\u6570\u90e8\u5206 while ( ! que . empty ()){ int x = que . front (); que . pop (); pos [ x ] =++ tot ; for ( int i = head [ x ]; i ; i = e [ i ]. next ){ deg [ e [ i ]. to ] -- ; if ( deg [ e [ i ]. to ] == 0 ){ que . push ( e [ i ]. to ); } } } if ( tot != n ){ //\u6709\u73af printf ( \"NO \\n \" ); } else {","title":"\u62d3\u6251\u5e8f\u6a21\u7248"},{"location":"graph/topological-sorting/#_9","text":"\u4ec0\u4e48\u662f\u6700\u5c0f\u5b50\u5178\u5e8f\uff1f \u4ee5\u4e0a\u56fe\u4e3a\u4f8b\uff0c\u5b58\u5728\u4e24\u79cd\u89e3\uff1a 1 2 4 3 2 1 4 3 \u7b80\u5355\u7684\u7406\u89e3\u65b9\u6cd5\u662f\uff0c\u628a\u4e24\u79cd\u89e3\u770b\u4f5c\u4e24\u4e2a\u6570\u5b571243 \u548c 2143\uff0c\u5c0f\u7684\u90a3\u4e2a\u6570\u5bf9\u5e94\u7684\u6392\u5217\u5c31\u662f\u5b57\u5178\u5e8f\u504f\u5c0f\u7684\u3002 \u601d\u8003\uff1a\u5982\u4f55\u7ef4\u62a4\u5462 problem U107394 \u62d3\u6251\u6392\u5e8f\u6a21\u677f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #include <bits/stdc++.h> using namespace std; const int maxn = 1e5+5; int in[maxn]; vector<int>g[maxn]; int ans[maxn]; int num = 0; int main(){ int n,m; scanf(\"%d%d\",&n,&m); for(int i = 0 ;i < m ;i++){ int x,y;scanf(\"%d%d\",&x,&y); in[y]+=1; g[x].push_back(y); } priority_queue<int,vector<int>,greater<int> >q; for(int i = 1;i <= n;i++){ if(in[i]==0)q.push(i); } while(!q.empty()){ int f = q.top(); q.pop(); ans[num++] = f; for(int i = 0 ;i < g[f].size(); i++){ int v = g[f][i]; in[v]--; if(!in[v]){ q.push(v); } } } for(int i = 0;i < num;i++){ printf(\"%d \",ans[i]); } } problem Directing Edges problem B-Rank of Tetris","title":"\u5982\u4f55\u7ef4\u62a4\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u62d3\u6251\u5e8f"},{"location":"graph/topological-sorting/#_10","text":"\u56fe\u8bba OI Wiki","title":"\u53c2\u8003\u8d44\u6599"},{"location":"math/ball-in-box/","text":"Copyright \u672c\u9875\u9762\u8f6c\u8f7d\u4e8e \u5f53\u5c0f\u7403\u9047\u4e0a\u76d2\u5b50 \u3002 \u524d\u7f6e\u77e5\u8bc6 \u00b6 \u7ec4\u5408\u6570 \uff1a\u4ece n n \u4e2a\u7269\u54c1\u91cc\u9009\u51fa m m \u4e2a\u7269\u54c1\u8fdb\u884c\u7ec4\u5408\u7684\u65b9\u6848\u6570\u3002 C_{n}^{m}=\\frac{n!}{m!\\cdot (n-m)!} C_{n}^{m}=\\frac{n!}{m!\\cdot (n-m)!} \u6392\u5217\u6570 \uff1a\u4ece n n \u4e2a\u7269\u54c1\u91cc\u9009\u51fa m m \u4e2a\u7269\u54c1\u8fdb\u884c\u6392\u5217\u7684\u65b9\u6848\u6570\u3002 A_{n}^{m}=\\frac{n!}{(n-m)!} A_{n}^{m}=\\frac{n!}{(n-m)!} \u5706\u6392\u5217 \uff1a\u4e00\u4e2a n n \u4e2a\u5143\u7d20\u6784\u6210\u7684\u96c6\u5408\uff0c\u4ece\u4e2d\u9009\u51fa m m \u4e2a\u5143\u7d20\u6784\u6210\u4e00\u4e2a\u73af\u7684\u65b9\u6848\u6570\u3002 Q_{n}^{m}=\\frac{A_{n}^{m}}{m} Q_{n}^{m}=\\frac{A_{n}^{m}}{m} \u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570 \uff1a\u7528 n n \u4e2a\u5143\u7d20\u7ec4\u6210 m m \u4e2a\u73af\u7684\u65b9\u6848\u6570\u3002 s_{n}^{m}=s_{n-1}^{m-1}+(n-1)\\cdot s_{n-1}^{m} s_{n}^{m}=s_{n-1}^{m-1}+(n-1)\\cdot s_{n-1}^{m} \u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570 \uff1a\u628a\u4e00\u4e2a\u5927\u5c0f\u4e3a n n \u7684\u96c6\u5408\u5212\u5206\u6210 m m \u4e2a\u975e\u7a7a\u96c6\u5408\u7684\u65b9\u6848\u6570\uff0c\u96c6\u5408\u5185\u90e8\u65e0\u5e8f\u3002 S_{n}^{m}=S_{n-1}^{m-1}+m\\cdot S_{n-1}^{m} S_{n}^{m}=S_{n-1}^{m-1}+m\\cdot S_{n-1}^{m} 1.\u7403\u76f8\u540c\uff0c\u76d2\u5b50\u4e0d\u540c\uff0c\u4e0d\u80fd\u6709\u7a7a\u76d2 \u00b6 \u5c31\u662f\u628a n n \u4e2a\u7403\u5206\u6210 m m \u4efd\uff0c\u6bcf\u4e00\u4efd\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u63d2 m\u22121 m\u22121 \u4e2a\u677f\u5373\u53ef\u3002 ans=C_{n-1}^{m-1} ans=C_{n-1}^{m-1} 2.\u7403\u76f8\u540c\uff0c\u76d2\u5b50\u4e0d\u540c\uff0c\u53ef\u4ee5\u6709\u7a7a\u76d2 \u00b6 \u628a n n \u4e2a\u7403\u5206\u6210 m m \u4efd\uff0c\u6bcf\u4e00\u4efd\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u518d\u589e\u52a0 m m \u4e2a\u7403\uff0c\u63d2 m-1 m-1 \u4e2a\u677f\uff0c\u6bcf\u4e00\u4efd\u518d\u62ff\u8d70\u4e00\u4e2a\u7403\u5373\u53ef\u3002 ans=C_{n+m-1}^{m-1} ans=C_{n+m-1}^{m-1} 3.\u7403\u4e0d\u540c\uff0c\u76d2\u5b50\u4e0d\u540c\uff0c\u53ef\u4ee5\u6709\u7a7a\u76d2 \u00b6 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7403\uff0c\u4f60\u90fd\u53ef\u4ee5\u653e\u5230[1,m]\u7684\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e,\u7531\u4e8e\u7403\u4e0d\u540c\uff0c\u6240\u4ee5\u7403\u4e0e\u7403\u4e4b\u95f4\u662f\u72ec\u7acb\u7684\u3002 ans=m^{n} ans=m^{n} 4.\u7403\u4e0d\u540c\uff0c\u76d2\u5b50\u76f8\u540c\uff0c\u4e0d\u80fd\u6709\u7a7a\u76d2 \u00b6 \u76f8\u5f53\u4e8e\u628a n n \u4e2a\u5143\u7d20\u7684\u96c6\u5408\u5212\u5206\u6210 m m \u4efd\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570 ans=S_{n}^{m} ans=S_{n}^{m} \u8fd9\u4e2a\u505a\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^{2}) O(n^{2}) \u7684 \u5176\u5b9e\u8fd9\u4e2a\u5c31\u662f\u95ee\u98985\u7684\u7b54\u6848\u9664\u4ee5 m! m! \u3002 5.\u7403\u4e0d\u540c\uff0c\u76d2\u5b50\u4e0d\u540c\uff0c\u4e0d\u80fd\u6709\u7a7a\u76d2 \u00b6 \u516c\u5f0f\u8868\u793a\u662f ans=m!\\cdot S_n^m ans=m!\\cdot S_n^m 6.\u7403\u4e0d\u540c\uff0c\u76d2\u5b50\u76f8\u540c\uff0c\u53ef\u4ee5\u6709\u7a7a\u76d2 \u00b6 \u56e0\u4e3a\u53ef\u4ee5\u6709\u7a7a\u76d2\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u6b21\u4e00\u5171\u7528\u4e86\u51e0\u4e2a\u76d2\u5b50\uff0c\u7136\u540e\u628a\u76f8\u5e94\u7684\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u52a0\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86 ans=\\sum_{i=0}^{m}S[n][i] ans=\\sum_{i=0}^{m}S[n][i] \u8fd9\u79cd\u6570\u4e5f\u53ebBell\u6570\u3002 Bell\u6570\u7684\u5b9a\u4e49 \uff1a\u7b2c n n \u4e2aBell\u6570\u8868\u793a\u96c6\u5408[1,2,3,...,n]\u7684\u5212\u5206\u65b9\u6848\u6570 B_{n}=\\sum_{m=1}^{n}S[n][m] B_{n}=\\sum_{m=1}^{n}S[n][m] 7.\u7403\u76f8\u540c\uff0c\u76d2\u5b50\u76f8\u540c\uff0c\u53ef\u4ee5\u6709\u7a7a\u76d2 \u00b6 \u8bbe f[n][m] \u8868\u793a n n \u4e2a\u7403\u653e\u5230 m m \u4e2a\u76d2\u5b50\u91cc\u7684\u65b9\u6848\u6570 if(n==0||m==1) f[n][m]=1 if(n==0||m==1) f[n][m]=1 if(n < m) f[n][m]=f[n][n] if(n < m) f[n][m]=f[n][n] $$if(n>=m) f[n][m]=f[n\u2212m][m]+f[n][m\u22121] $$ \u5982\u679c\u7403\u6bd4\u76d2\u5b50\u591a\uff0c\u5206\u4e3a\u653e\u6ee1\u548c\u4e0d\u653e\u6ee1\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba \u7b49\u4ef7\u4e8e\u81ea\u7136\u6570\u62c6\u5206\u95ee\u9898 8.\u7403\u76f8\u540c\uff0c\u76d2\u5b50\u76f8\u540c\uff0c\u4e0d\u80fd\u6709\u7a7a\u76d2 \u00b6 \u6211\u4eec\u9996\u5148\u5728\u6240\u6709\u7684\u76d2\u5b50\u4e2d\u653e\u4e00\u4e2a\u7403\uff0c\u5c31\u8f6c\u5316\u6210\u4e86\u95ee\u98987 ans=f[n\u2212m][m] ans=f[n\u2212m][m] \uff08\u6709\u5174\u8da3\u7684\u540c\u5b66\u8bf7\u81ea\u884c\u641c\u7d22\u201c\u6bcd\u51fd\u6570/\u751f\u6210\u51fd\u6570\u201d\uff09","title":"\u5f53\u5c0f\u7403\u9047\u4e0a\u76d2\u5b50"},{"location":"math/ball-in-box/#_1","text":"\u7ec4\u5408\u6570 \uff1a\u4ece n n \u4e2a\u7269\u54c1\u91cc\u9009\u51fa m m \u4e2a\u7269\u54c1\u8fdb\u884c\u7ec4\u5408\u7684\u65b9\u6848\u6570\u3002 C_{n}^{m}=\\frac{n!}{m!\\cdot (n-m)!} C_{n}^{m}=\\frac{n!}{m!\\cdot (n-m)!} \u6392\u5217\u6570 \uff1a\u4ece n n \u4e2a\u7269\u54c1\u91cc\u9009\u51fa m m \u4e2a\u7269\u54c1\u8fdb\u884c\u6392\u5217\u7684\u65b9\u6848\u6570\u3002 A_{n}^{m}=\\frac{n!}{(n-m)!} A_{n}^{m}=\\frac{n!}{(n-m)!} \u5706\u6392\u5217 \uff1a\u4e00\u4e2a n n \u4e2a\u5143\u7d20\u6784\u6210\u7684\u96c6\u5408\uff0c\u4ece\u4e2d\u9009\u51fa m m \u4e2a\u5143\u7d20\u6784\u6210\u4e00\u4e2a\u73af\u7684\u65b9\u6848\u6570\u3002 Q_{n}^{m}=\\frac{A_{n}^{m}}{m} Q_{n}^{m}=\\frac{A_{n}^{m}}{m} \u7b2c\u4e00\u7c7b\u65af\u7279\u6797\u6570 \uff1a\u7528 n n \u4e2a\u5143\u7d20\u7ec4\u6210 m m \u4e2a\u73af\u7684\u65b9\u6848\u6570\u3002 s_{n}^{m}=s_{n-1}^{m-1}+(n-1)\\cdot s_{n-1}^{m} s_{n}^{m}=s_{n-1}^{m-1}+(n-1)\\cdot s_{n-1}^{m} \u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570 \uff1a\u628a\u4e00\u4e2a\u5927\u5c0f\u4e3a n n \u7684\u96c6\u5408\u5212\u5206\u6210 m m \u4e2a\u975e\u7a7a\u96c6\u5408\u7684\u65b9\u6848\u6570\uff0c\u96c6\u5408\u5185\u90e8\u65e0\u5e8f\u3002 S_{n}^{m}=S_{n-1}^{m-1}+m\\cdot S_{n-1}^{m} S_{n}^{m}=S_{n-1}^{m-1}+m\\cdot S_{n-1}^{m}","title":"\u524d\u7f6e\u77e5\u8bc6"},{"location":"math/ball-in-box/#1","text":"\u5c31\u662f\u628a n n \u4e2a\u7403\u5206\u6210 m m \u4efd\uff0c\u6bcf\u4e00\u4efd\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u63d2 m\u22121 m\u22121 \u4e2a\u677f\u5373\u53ef\u3002 ans=C_{n-1}^{m-1} ans=C_{n-1}^{m-1}","title":"1.\u7403\u76f8\u540c\uff0c\u76d2\u5b50\u4e0d\u540c\uff0c\u4e0d\u80fd\u6709\u7a7a\u76d2"},{"location":"math/ball-in-box/#2","text":"\u628a n n \u4e2a\u7403\u5206\u6210 m m \u4efd\uff0c\u6bcf\u4e00\u4efd\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u518d\u589e\u52a0 m m \u4e2a\u7403\uff0c\u63d2 m-1 m-1 \u4e2a\u677f\uff0c\u6bcf\u4e00\u4efd\u518d\u62ff\u8d70\u4e00\u4e2a\u7403\u5373\u53ef\u3002 ans=C_{n+m-1}^{m-1} ans=C_{n+m-1}^{m-1}","title":"2.\u7403\u76f8\u540c\uff0c\u76d2\u5b50\u4e0d\u540c\uff0c\u53ef\u4ee5\u6709\u7a7a\u76d2"},{"location":"math/ball-in-box/#3","text":"\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7403\uff0c\u4f60\u90fd\u53ef\u4ee5\u653e\u5230[1,m]\u7684\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e,\u7531\u4e8e\u7403\u4e0d\u540c\uff0c\u6240\u4ee5\u7403\u4e0e\u7403\u4e4b\u95f4\u662f\u72ec\u7acb\u7684\u3002 ans=m^{n} ans=m^{n}","title":"3.\u7403\u4e0d\u540c\uff0c\u76d2\u5b50\u4e0d\u540c\uff0c\u53ef\u4ee5\u6709\u7a7a\u76d2"},{"location":"math/ball-in-box/#4","text":"\u76f8\u5f53\u4e8e\u628a n n \u4e2a\u5143\u7d20\u7684\u96c6\u5408\u5212\u5206\u6210 m m \u4efd\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570 ans=S_{n}^{m} ans=S_{n}^{m} \u8fd9\u4e2a\u505a\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^{2}) O(n^{2}) \u7684 \u5176\u5b9e\u8fd9\u4e2a\u5c31\u662f\u95ee\u98985\u7684\u7b54\u6848\u9664\u4ee5 m! m! \u3002","title":"4.\u7403\u4e0d\u540c\uff0c\u76d2\u5b50\u76f8\u540c\uff0c\u4e0d\u80fd\u6709\u7a7a\u76d2"},{"location":"math/ball-in-box/#5","text":"\u516c\u5f0f\u8868\u793a\u662f ans=m!\\cdot S_n^m ans=m!\\cdot S_n^m","title":"5.\u7403\u4e0d\u540c\uff0c\u76d2\u5b50\u4e0d\u540c\uff0c\u4e0d\u80fd\u6709\u7a7a\u76d2"},{"location":"math/ball-in-box/#6","text":"\u56e0\u4e3a\u53ef\u4ee5\u6709\u7a7a\u76d2\uff0c\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u6bcf\u6b21\u4e00\u5171\u7528\u4e86\u51e0\u4e2a\u76d2\u5b50\uff0c\u7136\u540e\u628a\u76f8\u5e94\u7684\u7b2c\u4e8c\u7c7b\u65af\u7279\u6797\u6570\u52a0\u8d77\u6765\u5c31\u53ef\u4ee5\u4e86 ans=\\sum_{i=0}^{m}S[n][i] ans=\\sum_{i=0}^{m}S[n][i] \u8fd9\u79cd\u6570\u4e5f\u53ebBell\u6570\u3002 Bell\u6570\u7684\u5b9a\u4e49 \uff1a\u7b2c n n \u4e2aBell\u6570\u8868\u793a\u96c6\u5408[1,2,3,...,n]\u7684\u5212\u5206\u65b9\u6848\u6570 B_{n}=\\sum_{m=1}^{n}S[n][m] B_{n}=\\sum_{m=1}^{n}S[n][m]","title":"6.\u7403\u4e0d\u540c\uff0c\u76d2\u5b50\u76f8\u540c\uff0c\u53ef\u4ee5\u6709\u7a7a\u76d2"},{"location":"math/ball-in-box/#7","text":"\u8bbe f[n][m] \u8868\u793a n n \u4e2a\u7403\u653e\u5230 m m \u4e2a\u76d2\u5b50\u91cc\u7684\u65b9\u6848\u6570 if(n==0||m==1) f[n][m]=1 if(n==0||m==1) f[n][m]=1 if(n < m) f[n][m]=f[n][n] if(n < m) f[n][m]=f[n][n] $$if(n>=m) f[n][m]=f[n\u2212m][m]+f[n][m\u22121] $$ \u5982\u679c\u7403\u6bd4\u76d2\u5b50\u591a\uff0c\u5206\u4e3a\u653e\u6ee1\u548c\u4e0d\u653e\u6ee1\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba \u7b49\u4ef7\u4e8e\u81ea\u7136\u6570\u62c6\u5206\u95ee\u9898","title":"7.\u7403\u76f8\u540c\uff0c\u76d2\u5b50\u76f8\u540c\uff0c\u53ef\u4ee5\u6709\u7a7a\u76d2"},{"location":"math/ball-in-box/#8","text":"\u6211\u4eec\u9996\u5148\u5728\u6240\u6709\u7684\u76d2\u5b50\u4e2d\u653e\u4e00\u4e2a\u7403\uff0c\u5c31\u8f6c\u5316\u6210\u4e86\u95ee\u98987 ans=f[n\u2212m][m] ans=f[n\u2212m][m] \uff08\u6709\u5174\u8da3\u7684\u540c\u5b66\u8bf7\u81ea\u884c\u641c\u7d22\u201c\u6bcd\u51fd\u6570/\u751f\u6210\u51fd\u6570\u201d\uff09","title":"8.\u7403\u76f8\u540c\uff0c\u76d2\u5b50\u76f8\u540c\uff0c\u4e0d\u80fd\u6709\u7a7a\u76d2"},{"location":"math/combinatorics/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a LyuLumos \uff0c xyw5vplus1 \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u7ec4\u5408\u6570\u5b66 \u00b6 \u7ec4\u5408\u6570\u7684\u5b9a\u4e49 \u00b6 \u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\uff0c\u4efb\u53d6 m m ( m\\leq n m\\leq n ) \u4e2a\u5143\u7d20\u7ec4\u6210\u4e00\u4e2a\u96c6\u5408\uff0c\u53eb\u505a\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m \u4e2a\u5143\u7d20\u7684\u4e00\u4e2a\u7ec4\u5408\uff1b\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m ( m\\leq n m\\leq n ) \u4e2a\u5143\u7d20\u7684\u6240\u6709\u7ec4\u5408\u7684\u4e2a\u6570\uff0c\u53eb\u505a\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m \u4e2a\u5143\u7d20\u7684\u7ec4\u5408\u6570\u3002\u7528\u7b26\u53f7 \\mathrm C_n^m \\mathrm C_n^m \u6765\u8868\u793a\u3002 \u6570\u5b66\u4e0a\u7528 \\displaystyle \\binom{n}{m} \\displaystyle \\binom{n}{m} \u8868\u793a C_n^m C_n^m \u7ec4\u5408\u6570\u8ba1\u7b97\u516c\u5f0f \\displaystyle \\binom{n}{m}= \\frac{\\mathrm A_n^m}{m!} = \\frac{n!}{m!(n - m)!} \\displaystyle \\binom{n}{m}= \\frac{\\mathrm A_n^m}{m!} = \\frac{n!}{m!(n - m)!} \u6027\u8d28 \u00b6 \u5728\u6b64\u4ecb\u7ecd\u4e00\u4e9b\u7ec4\u5408\u6570\u7684\u6027\u8d28\u3002 \\binom{n}{m}=\\binom{n}{n-m} \uff08\u5bf9\u79f0\u6027\uff09 \\binom{n}{m}=\\binom{n}{n-m} \uff08\u5bf9\u79f0\u6027\uff09 \\binom{n}{k} = \\frac{n}{k} \\binom{n-1}{k-1} \uff08\u5b9a\u4e49\uff09 \\binom{n}{k} = \\frac{n}{k} \\binom{n-1}{k-1} \uff08\u5b9a\u4e49\uff09 \\binom{n}{m}=\\binom{n-1}{m}+\\binom{n-1}{m-1} \uff08\u9012\u63a8\u5f0f\uff09 \\binom{n}{m}=\\binom{n-1}{m}+\\binom{n-1}{m-1} \uff08\u9012\u63a8\u5f0f\uff09 \\binom{n}{0}+\\binom{n}{1}+\\cdots+\\binom{n}{n}=\\sum_{i=0}^n\\binom{n}{i}=2^n \uff08\u6a2a\u5411\u6c42\u548c\uff09 \\binom{n}{0}+\\binom{n}{1}+\\cdots+\\binom{n}{n}=\\sum_{i=0}^n\\binom{n}{i}=2^n \uff08\u6a2a\u5411\u6c42\u548c\uff09 \\sum_{i=0}^n(-1)^i\\binom{n}{i}=0 \uff08\u5e26\u6743\u6a2a\u5411\u6c42\u548c\uff09 \\sum_{i=0}^n(-1)^i\\binom{n}{i}=0 \uff08\u5e26\u6743\u6a2a\u5411\u6c42\u548c\uff09 \\sum_{l=0}^n\\binom{l}{k} = \\binom{n+1}{k+1}\uff08\u659c\u5411\u6c42\u548c\uff09 \\sum_{l=0}^n\\binom{l}{k} = \\binom{n+1}{k+1}\uff08\u659c\u5411\u6c42\u548c\uff09 \\sum_{i=0}^m \\binom{n}{i}\\binom{m}{m-i} = \\binom{m+n}{m}\\ \\ \\ (n \\geq m) \\sum_{i=0}^m \\binom{n}{i}\\binom{m}{m-i} = \\binom{m+n}{m}\\ \\ \\ (n \\geq m) \\binom{n}{r}\\binom{r}{k} = \\binom{n}{k}\\binom{n-k}{r-k} \\binom{n}{r}\\binom{r}{k} = \\binom{n}{k}\\binom{n-k}{r-k} \\sum_{k=1}^m\\binom{m}{k}\\binom{n}{k}=\\binom{m+n}{m} \\sum_{k=1}^m\\binom{m}{k}\\binom{n}{k}=\\binom{m+n}{m} \\sum_{i=0}^n\\binom{n-i}{i}=F_{n+1}\uff0cF_n\u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7b2cn\u9879 \\sum_{i=0}^n\\binom{n-i}{i}=F_{n+1}\uff0cF_n\u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7b2cn\u9879 \u6c42\u7ec4\u5408\u6570 \u00b6 \u5f15\u7406\uff1a\u7531\u5362\u5361\u65af\u5b9a\u7406 \u00b6 \\large\\tbinom{sp+q}{tp+r} = \\tbinom{s}{t}\\tbinom{q}{r} (mod \\,p)\uff0cp\u4e3a\u7d20\u6570 \\large\\tbinom{sp+q}{tp+r} = \\tbinom{s}{t}\\tbinom{q}{r} (mod \\,p)\uff0cp\u4e3a\u7d20\u6570 \u5219\u6709 \\large\\tbinom{n}{m}\\, mod \\,p=\\tbinom{n/p}{m/p}\\tbinom{n \\,mod\\, p}{m \\,mod\\, p}\\, mod\\, p \\large\\tbinom{n}{m}\\, mod \\,p=\\tbinom{n/p}{m/p}\\tbinom{n \\,mod\\, p}{m \\,mod\\, p}\\, mod\\, p \u590d\u6742\u5ea6 O(log_pn\\cdot p) O(log_pn\\cdot p) \uff0c\u6253\u8868\u590d\u6742\u5ea6\u53ef\u964d\u81f3 O(log_pn+p) O(log_pn+p) \u5b9e\u73b0 \u00b6 \u6839\u636e\u5b9a\u4e49\u5b9e\u73b0 \u00b6 \u590d\u6742\u5ea6 O(n) O(n) \u3002\u7531\u4e8e\u5206\u5b50\u8fc7\u5927\uff0cint\u8303\u56f4\u5185\u53ea\u80fd\u8ba1\u7b97\u5230C(29,15)\uff0c\u5982\u679c\u53ea\u7528\u9636\u4e58\u53ea\u80fd\u8ba1\u7b97\u5230C(20,10)\u3002 \u6768\u8f89\u4e09\u89d2\u6253\u8868 \u00b6 \u590d\u6742\u5ea6 O(n^2) O(n^2) 1 2 3 4 5 for ( i = 0 ; i < n ; i ++ ) a [ i ][ 0 ] = a [ i ][ i ] = 1 ; for ( i = 2 ; i < n ; i ++ ) for ( j = 1 ; j < i ; j ++ ) a [ i ][ j ] = a [ i -1 ][ j -1 ] + a [ i -1 ][ j ]; \u7279\u522b\u6ce8\u610f\uff1aC(30,15)=155117520\uff0cC(64,32)=1.83x10^18 \u5362\u5361\u65af\u5b9a\u7406 \u00b6 p\u662f\u5c0f\u7d20\u6570\uff081e5\uff09\u65f6\u4f7f\u7528\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ll qpow ( ll a , ll n ); ll C ( ll n , ll m ){ if ( n < m ) return 0 ; if ( m > n - m ) m = n - m ; ll a = 1 , b = 1 ; for ( int i = 0 ; i < m ; i ++ ){ a = ( a * ( n - i )) % p ; b = ( b * ( i + 1 )) % p ; } return a * qpow ( b , p -2 ) % p ; //\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143 } ll Lucas ( ll n , ll m ){ if ( m == 0 ) return 1 ; return Lucas ( n / p , m / p ) * C ( n % p , m % p ) % p ; } \u9884\u5904\u7406\u9636\u4e58\u9006\u5143\u8868\u3002 \u00b6 \u4f7f\u7528\u5b9a\u4e49\u5f0f C(n,m)=n!/(m!*(n-m)!) \u3002 (1) \u7528O(n)\u7684\u65f6\u95f4\u9884\u5904\u7406\u9006\u5143\u8868 inv[n]\u3002 (2) \u9884\u5904\u7406\u9636\u4e58\u8868 fac[n]=(fac[n-1]*n)%p=(n!)%p \u3002 (3) \u9884\u5904\u7406\u9636\u4e58\u7684\u9006\u5143\u8868 invfac[n]=(invfac[n-1]*inv[n])%p \u3002 \u8ba1\u7b97\u8fc7\u7a0b\uff1a C(n,m)=(fac[n]*(invfac[m]*invfac[n-m]%p))%p \u3002 \u6ce8\u610f\uff1a\u9700\u8981\u4e24\u6b21\u53d6\u6a21\u9632\u6b62\u6ea2\u51fa\u3002 \u5e94\u7528 \u00b6 \u52a0\u6cd5\u539f\u7406\u548c\u4e58\u6cd5\u539f\u7406 \u00b6 \u52a0\u6cd5\u539f\u7406 \u5b8c\u6210\u4e00\u4e2a\u5de5\u7a0b\u53ef\u4ee5\u6709 n n \u7c7b\u529e\u6cd5\uff0c a_i(1 \\le i \\le n) a_i(1 \\le i \\le n) \u4ee3\u8868\u7b2c i i \u7c7b\u65b9\u6cd5\u7684\u6570\u76ee\u3002\u90a3\u4e48\u5b8c\u6210\u8fd9\u4ef6\u4e8b\u5171\u6709 S=a_1+a_2+\\cdots +a_n S=a_1+a_2+\\cdots +a_n \u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u3002 \u4e58\u6cd5\u539f\u7406 \u5b8c\u6210\u4e00\u4e2a\u5de5\u7a0b\u9700\u8981\u5206 n n \u4e2a\u6b65\u9aa4\uff0c a_i(1 \\le i \\le n) a_i(1 \\le i \\le n) \u4ee3\u8868\u7b2c i i \u4e2a\u6b65\u9aa4\u7684\u4e0d\u540c\u65b9\u6cd5\u6570\u76ee\u3002\u90a3\u4e48\u5b8c\u6210\u8fd9\u4ef6\u4e8b\u5171\u6709 S = a_1 \\times a_2 \\times \\cdots \\times a_n S = a_1 \\times a_2 \\times \\cdots \\times a_n \u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u3002","title":"\u7ec4\u5408\u6570\u5b66"},{"location":"math/combinatorics/#_1","text":"","title":"\u7ec4\u5408\u6570\u5b66"},{"location":"math/combinatorics/#_2","text":"\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\uff0c\u4efb\u53d6 m m ( m\\leq n m\\leq n ) \u4e2a\u5143\u7d20\u7ec4\u6210\u4e00\u4e2a\u96c6\u5408\uff0c\u53eb\u505a\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m \u4e2a\u5143\u7d20\u7684\u4e00\u4e2a\u7ec4\u5408\uff1b\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m ( m\\leq n m\\leq n ) \u4e2a\u5143\u7d20\u7684\u6240\u6709\u7ec4\u5408\u7684\u4e2a\u6570\uff0c\u53eb\u505a\u4ece n n \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u53d6\u51fa m m \u4e2a\u5143\u7d20\u7684\u7ec4\u5408\u6570\u3002\u7528\u7b26\u53f7 \\mathrm C_n^m \\mathrm C_n^m \u6765\u8868\u793a\u3002 \u6570\u5b66\u4e0a\u7528 \\displaystyle \\binom{n}{m} \\displaystyle \\binom{n}{m} \u8868\u793a C_n^m C_n^m \u7ec4\u5408\u6570\u8ba1\u7b97\u516c\u5f0f \\displaystyle \\binom{n}{m}= \\frac{\\mathrm A_n^m}{m!} = \\frac{n!}{m!(n - m)!} \\displaystyle \\binom{n}{m}= \\frac{\\mathrm A_n^m}{m!} = \\frac{n!}{m!(n - m)!}","title":"\u7ec4\u5408\u6570\u7684\u5b9a\u4e49"},{"location":"math/combinatorics/#_3","text":"\u5728\u6b64\u4ecb\u7ecd\u4e00\u4e9b\u7ec4\u5408\u6570\u7684\u6027\u8d28\u3002 \\binom{n}{m}=\\binom{n}{n-m} \uff08\u5bf9\u79f0\u6027\uff09 \\binom{n}{m}=\\binom{n}{n-m} \uff08\u5bf9\u79f0\u6027\uff09 \\binom{n}{k} = \\frac{n}{k} \\binom{n-1}{k-1} \uff08\u5b9a\u4e49\uff09 \\binom{n}{k} = \\frac{n}{k} \\binom{n-1}{k-1} \uff08\u5b9a\u4e49\uff09 \\binom{n}{m}=\\binom{n-1}{m}+\\binom{n-1}{m-1} \uff08\u9012\u63a8\u5f0f\uff09 \\binom{n}{m}=\\binom{n-1}{m}+\\binom{n-1}{m-1} \uff08\u9012\u63a8\u5f0f\uff09 \\binom{n}{0}+\\binom{n}{1}+\\cdots+\\binom{n}{n}=\\sum_{i=0}^n\\binom{n}{i}=2^n \uff08\u6a2a\u5411\u6c42\u548c\uff09 \\binom{n}{0}+\\binom{n}{1}+\\cdots+\\binom{n}{n}=\\sum_{i=0}^n\\binom{n}{i}=2^n \uff08\u6a2a\u5411\u6c42\u548c\uff09 \\sum_{i=0}^n(-1)^i\\binom{n}{i}=0 \uff08\u5e26\u6743\u6a2a\u5411\u6c42\u548c\uff09 \\sum_{i=0}^n(-1)^i\\binom{n}{i}=0 \uff08\u5e26\u6743\u6a2a\u5411\u6c42\u548c\uff09 \\sum_{l=0}^n\\binom{l}{k} = \\binom{n+1}{k+1}\uff08\u659c\u5411\u6c42\u548c\uff09 \\sum_{l=0}^n\\binom{l}{k} = \\binom{n+1}{k+1}\uff08\u659c\u5411\u6c42\u548c\uff09 \\sum_{i=0}^m \\binom{n}{i}\\binom{m}{m-i} = \\binom{m+n}{m}\\ \\ \\ (n \\geq m) \\sum_{i=0}^m \\binom{n}{i}\\binom{m}{m-i} = \\binom{m+n}{m}\\ \\ \\ (n \\geq m) \\binom{n}{r}\\binom{r}{k} = \\binom{n}{k}\\binom{n-k}{r-k} \\binom{n}{r}\\binom{r}{k} = \\binom{n}{k}\\binom{n-k}{r-k} \\sum_{k=1}^m\\binom{m}{k}\\binom{n}{k}=\\binom{m+n}{m} \\sum_{k=1}^m\\binom{m}{k}\\binom{n}{k}=\\binom{m+n}{m} \\sum_{i=0}^n\\binom{n-i}{i}=F_{n+1}\uff0cF_n\u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7b2cn\u9879 \\sum_{i=0}^n\\binom{n-i}{i}=F_{n+1}\uff0cF_n\u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7b2cn\u9879","title":"\u6027\u8d28"},{"location":"math/combinatorics/#_4","text":"","title":"\u6c42\u7ec4\u5408\u6570"},{"location":"math/combinatorics/#_5","text":"\\large\\tbinom{sp+q}{tp+r} = \\tbinom{s}{t}\\tbinom{q}{r} (mod \\,p)\uff0cp\u4e3a\u7d20\u6570 \\large\\tbinom{sp+q}{tp+r} = \\tbinom{s}{t}\\tbinom{q}{r} (mod \\,p)\uff0cp\u4e3a\u7d20\u6570 \u5219\u6709 \\large\\tbinom{n}{m}\\, mod \\,p=\\tbinom{n/p}{m/p}\\tbinom{n \\,mod\\, p}{m \\,mod\\, p}\\, mod\\, p \\large\\tbinom{n}{m}\\, mod \\,p=\\tbinom{n/p}{m/p}\\tbinom{n \\,mod\\, p}{m \\,mod\\, p}\\, mod\\, p \u590d\u6742\u5ea6 O(log_pn\\cdot p) O(log_pn\\cdot p) \uff0c\u6253\u8868\u590d\u6742\u5ea6\u53ef\u964d\u81f3 O(log_pn+p) O(log_pn+p)","title":"\u5f15\u7406\uff1a\u7531\u5362\u5361\u65af\u5b9a\u7406"},{"location":"math/combinatorics/#_6","text":"","title":"\u5b9e\u73b0"},{"location":"math/combinatorics/#_7","text":"\u590d\u6742\u5ea6 O(n) O(n) \u3002\u7531\u4e8e\u5206\u5b50\u8fc7\u5927\uff0cint\u8303\u56f4\u5185\u53ea\u80fd\u8ba1\u7b97\u5230C(29,15)\uff0c\u5982\u679c\u53ea\u7528\u9636\u4e58\u53ea\u80fd\u8ba1\u7b97\u5230C(20,10)\u3002","title":"\u6839\u636e\u5b9a\u4e49\u5b9e\u73b0"},{"location":"math/combinatorics/#_8","text":"\u590d\u6742\u5ea6 O(n^2) O(n^2) 1 2 3 4 5 for ( i = 0 ; i < n ; i ++ ) a [ i ][ 0 ] = a [ i ][ i ] = 1 ; for ( i = 2 ; i < n ; i ++ ) for ( j = 1 ; j < i ; j ++ ) a [ i ][ j ] = a [ i -1 ][ j -1 ] + a [ i -1 ][ j ]; \u7279\u522b\u6ce8\u610f\uff1aC(30,15)=155117520\uff0cC(64,32)=1.83x10^18","title":"\u6768\u8f89\u4e09\u89d2\u6253\u8868"},{"location":"math/combinatorics/#_9","text":"p\u662f\u5c0f\u7d20\u6570\uff081e5\uff09\u65f6\u4f7f\u7528\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ll qpow ( ll a , ll n ); ll C ( ll n , ll m ){ if ( n < m ) return 0 ; if ( m > n - m ) m = n - m ; ll a = 1 , b = 1 ; for ( int i = 0 ; i < m ; i ++ ){ a = ( a * ( n - i )) % p ; b = ( b * ( i + 1 )) % p ; } return a * qpow ( b , p -2 ) % p ; //\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143 } ll Lucas ( ll n , ll m ){ if ( m == 0 ) return 1 ; return Lucas ( n / p , m / p ) * C ( n % p , m % p ) % p ; }","title":"\u5362\u5361\u65af\u5b9a\u7406"},{"location":"math/combinatorics/#_10","text":"\u4f7f\u7528\u5b9a\u4e49\u5f0f C(n,m)=n!/(m!*(n-m)!) \u3002 (1) \u7528O(n)\u7684\u65f6\u95f4\u9884\u5904\u7406\u9006\u5143\u8868 inv[n]\u3002 (2) \u9884\u5904\u7406\u9636\u4e58\u8868 fac[n]=(fac[n-1]*n)%p=(n!)%p \u3002 (3) \u9884\u5904\u7406\u9636\u4e58\u7684\u9006\u5143\u8868 invfac[n]=(invfac[n-1]*inv[n])%p \u3002 \u8ba1\u7b97\u8fc7\u7a0b\uff1a C(n,m)=(fac[n]*(invfac[m]*invfac[n-m]%p))%p \u3002 \u6ce8\u610f\uff1a\u9700\u8981\u4e24\u6b21\u53d6\u6a21\u9632\u6b62\u6ea2\u51fa\u3002","title":"\u9884\u5904\u7406\u9636\u4e58\u9006\u5143\u8868\u3002"},{"location":"math/combinatorics/#_11","text":"","title":"\u5e94\u7528"},{"location":"math/combinatorics/#_12","text":"\u52a0\u6cd5\u539f\u7406 \u5b8c\u6210\u4e00\u4e2a\u5de5\u7a0b\u53ef\u4ee5\u6709 n n \u7c7b\u529e\u6cd5\uff0c a_i(1 \\le i \\le n) a_i(1 \\le i \\le n) \u4ee3\u8868\u7b2c i i \u7c7b\u65b9\u6cd5\u7684\u6570\u76ee\u3002\u90a3\u4e48\u5b8c\u6210\u8fd9\u4ef6\u4e8b\u5171\u6709 S=a_1+a_2+\\cdots +a_n S=a_1+a_2+\\cdots +a_n \u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u3002 \u4e58\u6cd5\u539f\u7406 \u5b8c\u6210\u4e00\u4e2a\u5de5\u7a0b\u9700\u8981\u5206 n n \u4e2a\u6b65\u9aa4\uff0c a_i(1 \\le i \\le n) a_i(1 \\le i \\le n) \u4ee3\u8868\u7b2c i i \u4e2a\u6b65\u9aa4\u7684\u4e0d\u540c\u65b9\u6cd5\u6570\u76ee\u3002\u90a3\u4e48\u5b8c\u6210\u8fd9\u4ef6\u4e8b\u5171\u6709 S = a_1 \\times a_2 \\times \\cdots \\times a_n S = a_1 \\times a_2 \\times \\cdots \\times a_n \u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u3002","title":"\u52a0\u6cd5\u539f\u7406\u548c\u4e58\u6cd5\u539f\u7406"},{"location":"math/fft/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u6982\u8ff0 \u00b6 \u4e2d\u6587\u540d\uff1a\u5feb\u901f(\u79bb\u6563)\u5085\u91cc\u53f6\u53d8\u6362 \u4f5c\u7528 : \u4ee5 O(nlogn) O(nlogn) \u7684\u590d\u6742\u5ea6\u8ba1\u7b97\u591a\u9879\u5f0f\u4e58\u6cd5 \u524d\u7f6e\u77e5\u8bc6 \u00b6 \u591a\u9879\u5f0f\u7684\u7cfb\u6570\u8868\u8fbe\u548c\u70b9\u503c\u8868\u8fbe \u00b6 \u7cfb\u6570\u8868\u8fbe\uff1a F(x)=\u2211_{i=0}^{n}a_i x^i F(x)=\u2211_{i=0}^{n}a_i x^i \uff0c\u5982 F(x)=x^2+x+1 F(x)=x^2+x+1 \u70b9\u503c\u8868\u8fbe\uff1a X={x_0,x_1,...x_n} X={x_0,x_1,...x_n} \u4ee3\u5165\u591a\u9879\u5f0f F(x) F(x) \uff0c\u5f97\u5230\u7684 n+1 n+1 \u4e2a\u70b9\u5206\u522b\u4e3a (x_0,y_0)(x_1,y_1)...(x_n,y_n) (x_0,y_0)(x_1,y_1)...(x_n,y_n) \u5b9a\u7406 \u00b6 \u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\uff0c (n+1) (n+1) \u4e2a\u70b9\u503c\u5bf9\u5c31\u80fd\u786e\u5b9a\u4e00\u4e2a n n \u6b21\u591a\u9879\u5f0f\u7684\u5168\u90e8\u7cfb\u6570\u3002 \u6bd4\u5982\uff0c\u53ea\u8981\u77e5\u9053\u4e24\u4e2a\u70b9\u7684\u5750\u6807\u5c31\u53ef\u4ee5\u901a\u8fc7\u5f85\u5b9a\u7cfb\u6570\u6cd5\u786e\u5b9a\u4e4b\u524d\u7684\u65b9\u7a0b\u3002 \u5f53\u6b21\u6570\u6bd4\u8f83\u9ad8\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7\u62c9\u683c\u6717\u65e5\u63d2\u503c\u6cd5\u8fdb\u884c\u786e\u5b9a\u3002 \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8ba1\u7b97\u4e24\u4e2a n n \u6b21\u591a\u9879\u5f0f\u76f8\u4e58\u53ea\u8981\u53d6 2n+1 2n+1 \u4e2a\u70b9\u8fdb\u884c\u5206\u522b\u8ba1\u7b97\u5c31\u884c\u4e86\u3002 \u4f46\u662f\uff0c\u5982\u679c\u968f\u4fbf\u53d6\u8fd9\u4e9b\u70b9\uff0c\u590d\u6742\u5ea6\u4ecd\u4e3a O(n^2) O(n^2) \u3002 \u5355\u4f4d\u6839 \u00b6 \u5728\u590d\u5e73\u9762\u4e0a\uff0c\u4ee5\u539f\u70b9\u4e3a\u5706\u5fc3\uff0c1\u4e3a\u534a\u5f84\u4f5c\u5706\uff0c\u6240\u5f97\u7684\u5706\u53eb\u5355\u4f4d\u5706\u3002\u4ee5\u5706\u70b9\u4e3a\u8d77\u70b9\uff0c\u5706\u7684 n n \u7b49\u5206\u70b9\u4e3a\u7ec8\u70b9\uff0c\u505a n n \u4e2a\u5411\u91cf\uff0c\u8bbe\u5e45\u89d2\u4e3a\u6b63\u4e14\u6700\u5c0f\u7684\u5411\u91cf\u5bf9\u5e94\u7684\u590d\u6570\u4e3a \u03c9_n \u03c9_n \uff0c\u79f0\u4e3a n n \u6b21\u5355\u4f4d\u6839\u3002 \u5728\u4ee3\u6570\u4e2d\uff0c\u82e5 z^n=1 z^n=1 \uff0c\u6211\u4eec\u628a z z \u79f0\u4e3a n n \u6b21\u5355\u4f4d\u6839\u3002 \u6027\u8d28 \u00b6 \u8bbe n n \u4e3a2\u7684\u6574\u6570\u6b21\u5e42 \\omega_{2n}^{2k} = \\omega_{n}^{k} \\omega_{2n}^{2k} = \\omega_{n}^{k} \u2003 (\u5bf9\u5e94\u7684\u5411\u91cf\u76f8\u540c) \\omega_{n}^{k + \\frac{n}{2}} = -\\omega_{n}^{k} \\omega_{n}^{k + \\frac{n}{2}} = -\\omega_{n}^{k} \u2003\uff08\u5bf9\u5e94\u7684\u5411\u91cf\u7b49\u5927\u53cd\u5411\uff09 \u501f\u52a9\u56fe\u53ef\u4ee5\u66f4\u597d\u7684\u7406\u89e3\u3002 \u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362 \u00b6 \u65f6\u95f4\u590d\u6742\u5ea6 O(nlog_2n) O(nlog_2n) \u7406\u8bba \u00b6 \u8bbe\u51fd\u6570 FL(x)=f_0+f_2x+...+f_{n-2}x^{n/2-1} FL(x)=f_0+f_2x+...+f_{n-2}x^{n/2-1} FR(x)=f_1+f_3x+...+f_{n-1}x^{n/2-1} FR(x)=f_1+f_3x+...+f_{n-1}x^{n/2-1} \u5219\u6709 F(x)=FL(x^2)+xFR(x^2) F(x)=FL(x^2)+xFR(x^2) \u4ee3\u5165 \u03c9^k_n \u03c9^k_n \u3001 \u03c9_n^{k+n/2} \u03c9_n^{k+n/2} \uff0c\u7ecf\u8ba1\u7b97\u5316\u7b80 F(\u03c9^k_n)=FL(\u03c9^k_{n/2})+\u03c9^k_nFR(\u03c9^k_{n/2}) F(\u03c9^k_n)=FL(\u03c9^k_{n/2})+\u03c9^k_nFR(\u03c9^k_{n/2}) F(\u03c9_n^{k+n/2})=FL(\u03c9_{n/2}^k)\u2212\u03c9_n^kFR(\u03c9_{n/2}^k) F(\u03c9_n^{k+n/2})=FL(\u03c9_{n/2}^k)\u2212\u03c9_n^kFR(\u03c9_{n/2}^k) \u5982\u679c\u6211\u4eec\u77e5\u9053\u4e24\u4e2a\u591a\u9879\u5f0f FL(x) FL(x) \u548c FR(x) FR(x) \u5206\u522b\u5728 \u03c9^0_{n/2},\u03c9^1_{n/2},\u03c9^2_{n/2},...,\u03c9^{n/2-1}_{n/2} \u03c9^0_{n/2},\u03c9^1_{n/2},\u03c9^2_{n/2},...,\u03c9^{n/2-1}_{n/2} \u7684\u70b9\u503c\u8868\u793a\uff0c\u5c31\u53ef\u4ee5 O(n) O(n) \u6c42\u51fa F(x) \u5728 \u03c9^0_{n},\u03c9^1_{n},\u03c9^2_{n},...,\u03c9^{n-1}_{n} F(x) \u5728 \u03c9^0_{n},\u03c9^1_{n},\u03c9^2_{n},...,\u03c9^{n-1}_{n} \u5904\u7684\u70b9\u503c\u8868\u793a\u3002 \u7528\u5206\u6cbb\u6cd5\u6c42\u4e0b\u53bb\u3002 \u628aDFT\u4e2d\u7684 \u03c9^1_n \u03c9^1_n \u6362\u6210 \u03c9^{-1}_n \u03c9^{-1}_n \uff0c\u505a\u5b8c\u4e4b\u540e\u9664\u4ee5 n n \u5373\u53ef\u5b9e\u73b0IDFT\u3002DFT/IDFT\u6838\u5fc3\u4ee3\u7801\u53ef\u4ee5\u590d\u7528\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void fft ( CP * f , bool flag ) { // flag=-1\u4e3aIDFT for ( int p = 2 ; p <= n ; p <<= 1 ) { int len = p >> 1 ; CP tG ( cos ( 2 * Pi / p ), sin ( 2 * Pi / p )); if ( ! flag ) tG . y *= -1 ; for ( int k = 0 ; k < n ; k += p ) { CP buf ( 1 , 0 ); for ( int l = k ; l < k + len ; l ++ ) { CP tt = buf * f [ len + l ]; f [ len + l ] = f [ l ] - tt ; // (1) f [ l ] = f [ l ] + tt ; // (2) buf = buf * tG ; //\u5f97\u5230\u4e0b\u4e00\u4e2a[\u53cd]\u5355\u4f4d\u6839 } } } } \u5173\u4e8eIFFT\u7684\u8bc1\u660e\u6709\u5f88\u591a\uff0c\u76f8\u5bf9\u6765\u8bf4\u4e5f\u6bd4\u8f83\u590d\u6742\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u6570\u5b66\u4e0a\u7684\u7406\u89e3\u3002 \\left(\\begin{array}{ccccc} x_{0}^{0} & x_{0}^{1} & x_{0}^{2} & \\ldots & x_{0}^{n-1} \\\\ x_{1}^{0} & x_{1}^{1} & x_{1}^{2} & \\ldots & x_{1}^{n-1} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ x_{n-1}^{0} & x_{n-1}^{1} & x_{n-1}^{2} & \\ldots & x_{n-1}^{n-1} \\end{array}\\right)\\left(\\begin{array}{c} a_{0} \\\\ a_{1} \\\\ \\ldots \\\\ a_{n-1} \\end{array}\\right)=\\left(\\begin{array}{c} y_{0} \\\\ y_{1} \\\\ \\ldots \\\\ \\ldots \\\\ y_{n-1} \\end{array}\\right) \\\\ \\left(\\begin{array}{ccccc} x_{0}^{0} & x_{0}^{1} & x_{0}^{2} & \\ldots & x_{0}^{n-1} \\\\ x_{1}^{0} & x_{1}^{1} & x_{1}^{2} & \\ldots & x_{1}^{n-1} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ x_{n-1}^{0} & x_{n-1}^{1} & x_{n-1}^{2} & \\ldots & x_{n-1}^{n-1} \\end{array}\\right)\\left(\\begin{array}{c} a_{0} \\\\ a_{1} \\\\ \\ldots \\\\ a_{n-1} \\end{array}\\right)=\\left(\\begin{array}{c} y_{0} \\\\ y_{1} \\\\ \\ldots \\\\ \\ldots \\\\ y_{n-1} \\end{array}\\right) \\\\ \u6211\u4eec\u628a\u4e0a\u8ff0\u77e9\u9635\u62bd\u8c61\u6210 WA=B WA=B \u3002 \u5219 A=W^{-1}B A=W^{-1}B \u90a3\u4e48\u5176\u5b9e\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u8303\u5fb7\u8499\u5fb7\u77e9\u9635\u6c42\u9006\u3002 W=\\left(\\begin{array}{ccccc} (w_n^{0})^{0} & (w_n^{0})^{1} & (w_n^{0})^{2} & \\ldots & (w_n^{0})^{n-1} \\\\ (w_n^{1})^{0} & (w_n^{1})^{1} & (w_n^{1})^{2} & \\ldots & (w_n^{1})^{n-1} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ (w_n^{n-1})^{0} & (w_n^{n-1})^{1} & (w_n^{n-1})^{2} & \\ldots & (w_n^{n-1})^{n-1} \\\\ \\end{array}\\right)= \\left(\\begin{array}{ccccc} 1 & 1 & 1 & \\ldots & 1 \\\\ 1 & w_n^{1\\times 1} & w_n^{1\\times 2} & \\ldots & w_n^{1\\times (n-1)} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ 1 & w_n^{(n-1)\\times 1} & w_n^{(n-1)\\times 2} & \\ldots & w_n^{(n-1)\\times (n-1)} \\\\ \\end{array}\\right) \\\\ W=\\left(\\begin{array}{ccccc} (w_n^{0})^{0} & (w_n^{0})^{1} & (w_n^{0})^{2} & \\ldots & (w_n^{0})^{n-1} \\\\ (w_n^{1})^{0} & (w_n^{1})^{1} & (w_n^{1})^{2} & \\ldots & (w_n^{1})^{n-1} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ (w_n^{n-1})^{0} & (w_n^{n-1})^{1} & (w_n^{n-1})^{2} & \\ldots & (w_n^{n-1})^{n-1} \\\\ \\end{array}\\right)= \\left(\\begin{array}{ccccc} 1 & 1 & 1 & \\ldots & 1 \\\\ 1 & w_n^{1\\times 1} & w_n^{1\\times 2} & \\ldots & w_n^{1\\times (n-1)} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ 1 & w_n^{(n-1)\\times 1} & w_n^{(n-1)\\times 2} & \\ldots & w_n^{(n-1)\\times (n-1)} \\\\ \\end{array}\\right) \\\\ W^{-1}=\\frac{1}{n}\\left(\\begin{array}{ccccc} 1 & 1 & 1 & \\ldots & 1 \\\\ 1 & w_n^{-1\\times 1} & w_n^{-1\\times 2} & \\ldots & w_n^{-1\\times (n-1)} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ 1 & w_n^{-(n-1)\\times 1} & w_n^{-(n-1)\\times 2} & \\ldots & w_n^{-(n-1)\\times (n-1)} \\\\ \\end{array}\\right) \\\\ W^{-1}=\\frac{1}{n}\\left(\\begin{array}{ccccc} 1 & 1 & 1 & \\ldots & 1 \\\\ 1 & w_n^{-1\\times 1} & w_n^{-1\\times 2} & \\ldots & w_n^{-1\\times (n-1)} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ 1 & w_n^{-(n-1)\\times 1} & w_n^{-(n-1)\\times 2} & \\ldots & w_n^{-(n-1)\\times (n-1)} \\\\ \\end{array}\\right) \\\\ \u89c2\u5bdf\u53d1\u73b0\uff0c\u53ea\u9700\u8981\u53d8\u6362\u6307\u6570\u7684\u6b63\u8d1f\uff0c\u518d\u4e58 \\frac{1}{n} \\frac{1}{n} \uff0cIFFT\u548cFFT\u7684\u6d41\u7a0b\u5c31\u5b8c\u5168\u4e00\u81f4\u4e86\u3002 \u70b9\u503c\u8868\u793a\u548c\u7cfb\u6570\u8868\u793a\u4e4b\u95f4\u7684\u8f6c\u6362 \u00b6 \u4f18\u5316\uff1a\u8774\u8776\u53d8\u6362 \u00b6 \u8981\u6c42\u7684\u5e8f\u5217\u5b9e\u9645\u662f\u539f\u5e8f\u5217\u4e0b\u6807\u7684\u4e8c\u8fdb\u5236\u53cd\u8f6c\u3002 \u4f18\u5316\uff1a\u4e09\u6b21\u53d8\u4e24\u6b21 \u00b6 \u6839\u636e (a+bi)(c+di)==ac\u2212bd+adi+bci (a+bi)(c+di)==ac\u2212bd+adi+bci \u8981\u6c42 F(x)G(x) F(x)G(x) \uff0c\u8bbe\u590d\u591a\u9879\u5f0f P(x)=F(x)+G(x)i P(x)=F(x)+G(x)i , \u5219 P(x)^2==F(x)^2-G(x)^2+2F(x)G(x)i P(x)^2==F(x)^2-G(x)^2+2F(x)G(x)i \u53d1\u73b0 P(x)^2 P(x)^2 \u7684\u865a\u90e8\u4e3a 2F(x)G(x) 2F(x)G(x) \u4e5f\u5c31\u662f\u8bf4\u6c42\u51fa P(x)^2 P(x)^2 \u4e4b\u540e,\u628a\u5b83\u7684\u865a\u90e8\u9664\u4ee52\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <algorithm> #include <cmath> #include <cstdio> #define Maxn 1350000 using namespace std ; const double Pi = acos ( -1 ); inline int read () { register char ch = 0 ; while ( ch < 48 || ch > 57 ) ch = getchar (); return ch - '0' ; } int n , m ; struct CP { CP ( double xx = 0 , double yy = 0 ) { x = xx , y = yy ; } double x , y ; CP operator + ( CP const & B ) const { return CP ( x + B . x , y + B . y ); } CP operator - ( CP const & B ) const { return CP ( x - B . x , y - B . y ); } CP operator * ( CP const & B ) const { return CP ( x * B . x - y * B . y , x * B . y + y * B . x ); } } f [ Maxn << 1 ]; //\u53ea\u7528\u4e86\u4e00\u4e2a\u590d\u6570\u6570\u7ec4 int tr [ Maxn << 1 ]; void fft ( CP * f , bool flag ) { for ( int i = 0 ; i < n ; i ++ ) if ( i < tr [ i ]) swap ( f [ i ], f [ tr [ i ]]); for ( int p = 2 ; p <= n ; p <<= 1 ) { int len = p >> 1 ; CP tG ( cos ( 2 * Pi / p ), sin ( 2 * Pi / p )); if ( ! flag ) tG . y *= -1 ; for ( int k = 0 ; k < n ; k += p ) { CP buf ( 1 , 0 ); for ( int l = k ; l < k + len ; l ++ ) { CP tt = buf * f [ len + l ]; f [ len + l ] = f [ l ] - tt ; f [ l ] = f [ l ] + tt ; buf = buf * tG ; } } } } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i <= n ; i ++ ) f [ i ]. x = read (); for ( int i = 0 ; i <= m ; i ++ ) f [ i ]. y = read (); for ( m += n , n = 1 ; n <= m ; n <<= 1 ); for ( int i = 0 ; i < n ; i ++ ) tr [ i ] = ( tr [ i >> 1 ] >> 1 ) | (( i & 1 ) ? n >> 1 : 0 ); fft ( f , 1 ); for ( int i = 0 ; i < n ; ++ i ) f [ i ] = f [ i ] * f [ i ]; fft ( f , 0 ); for ( int i = 0 ; i <= m ; ++ i ) printf ( \"%d \" , ( int )( f [ i ]. y / n / 2 + 0.49 )); return 0 ; } \u5176\u4ed6 \u00b6 \u5c3d\u7ba1FFT\u4f18\u4e8e\u6734\u7d20\u7b97\u6cd5\uff0c\u4f46\u662f\u7531\u4e8e\u5e38\u6570\u8fc7\u5927\uff08\u590d\u6570\u80cc\u540e\u662f\u6d6e\u70b9\u6570\u8fd0\u7b97\uff09\uff0c\u540c\u65f6\u8fd8\u6709\u7cbe\u5ea6\u7684\u9650\u5236\uff0c\u6240\u4ee5\u6570\u8bba\u4e2d\u4ecd\u6709\u5176\u4ed6\u7684\u7b97\u6cd5\u5982NTT\uff08\u5feb\u901f\u6570\u8bba\u53d8\u6362\uff09\uff0c\u4f9b\u5927\u5bb6\u540e\u7eed\u5b66\u4e60\u3002 \u4f8b\u9898 \u00b6 \u6d1b\u8c37P3803 \u591a\u9879\u5f0f\u4e58\u6cd5 \u53c2\u8003\u8d44\u6599 \u00b6 FFT\u5b66\u4e60\u7b14\u8bb0 \u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\u8be6\u89e3","title":"FFT"},{"location":"math/fft/#_1","text":"\u4e2d\u6587\u540d\uff1a\u5feb\u901f(\u79bb\u6563)\u5085\u91cc\u53f6\u53d8\u6362 \u4f5c\u7528 : \u4ee5 O(nlogn) O(nlogn) \u7684\u590d\u6742\u5ea6\u8ba1\u7b97\u591a\u9879\u5f0f\u4e58\u6cd5","title":"\u6982\u8ff0"},{"location":"math/fft/#_2","text":"","title":"\u524d\u7f6e\u77e5\u8bc6"},{"location":"math/fft/#_3","text":"\u7cfb\u6570\u8868\u8fbe\uff1a F(x)=\u2211_{i=0}^{n}a_i x^i F(x)=\u2211_{i=0}^{n}a_i x^i \uff0c\u5982 F(x)=x^2+x+1 F(x)=x^2+x+1 \u70b9\u503c\u8868\u8fbe\uff1a X={x_0,x_1,...x_n} X={x_0,x_1,...x_n} \u4ee3\u5165\u591a\u9879\u5f0f F(x) F(x) \uff0c\u5f97\u5230\u7684 n+1 n+1 \u4e2a\u70b9\u5206\u522b\u4e3a (x_0,y_0)(x_1,y_1)...(x_n,y_n) (x_0,y_0)(x_1,y_1)...(x_n,y_n)","title":"\u591a\u9879\u5f0f\u7684\u7cfb\u6570\u8868\u8fbe\u548c\u70b9\u503c\u8868\u8fbe"},{"location":"math/fft/#_4","text":"\u5728\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\uff0c (n+1) (n+1) \u4e2a\u70b9\u503c\u5bf9\u5c31\u80fd\u786e\u5b9a\u4e00\u4e2a n n \u6b21\u591a\u9879\u5f0f\u7684\u5168\u90e8\u7cfb\u6570\u3002 \u6bd4\u5982\uff0c\u53ea\u8981\u77e5\u9053\u4e24\u4e2a\u70b9\u7684\u5750\u6807\u5c31\u53ef\u4ee5\u901a\u8fc7\u5f85\u5b9a\u7cfb\u6570\u6cd5\u786e\u5b9a\u4e4b\u524d\u7684\u65b9\u7a0b\u3002 \u5f53\u6b21\u6570\u6bd4\u8f83\u9ad8\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7\u62c9\u683c\u6717\u65e5\u63d2\u503c\u6cd5\u8fdb\u884c\u786e\u5b9a\u3002 \u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8ba1\u7b97\u4e24\u4e2a n n \u6b21\u591a\u9879\u5f0f\u76f8\u4e58\u53ea\u8981\u53d6 2n+1 2n+1 \u4e2a\u70b9\u8fdb\u884c\u5206\u522b\u8ba1\u7b97\u5c31\u884c\u4e86\u3002 \u4f46\u662f\uff0c\u5982\u679c\u968f\u4fbf\u53d6\u8fd9\u4e9b\u70b9\uff0c\u590d\u6742\u5ea6\u4ecd\u4e3a O(n^2) O(n^2) \u3002","title":"\u5b9a\u7406"},{"location":"math/fft/#_5","text":"\u5728\u590d\u5e73\u9762\u4e0a\uff0c\u4ee5\u539f\u70b9\u4e3a\u5706\u5fc3\uff0c1\u4e3a\u534a\u5f84\u4f5c\u5706\uff0c\u6240\u5f97\u7684\u5706\u53eb\u5355\u4f4d\u5706\u3002\u4ee5\u5706\u70b9\u4e3a\u8d77\u70b9\uff0c\u5706\u7684 n n \u7b49\u5206\u70b9\u4e3a\u7ec8\u70b9\uff0c\u505a n n \u4e2a\u5411\u91cf\uff0c\u8bbe\u5e45\u89d2\u4e3a\u6b63\u4e14\u6700\u5c0f\u7684\u5411\u91cf\u5bf9\u5e94\u7684\u590d\u6570\u4e3a \u03c9_n \u03c9_n \uff0c\u79f0\u4e3a n n \u6b21\u5355\u4f4d\u6839\u3002 \u5728\u4ee3\u6570\u4e2d\uff0c\u82e5 z^n=1 z^n=1 \uff0c\u6211\u4eec\u628a z z \u79f0\u4e3a n n \u6b21\u5355\u4f4d\u6839\u3002","title":"\u5355\u4f4d\u6839"},{"location":"math/fft/#_6","text":"\u8bbe n n \u4e3a2\u7684\u6574\u6570\u6b21\u5e42 \\omega_{2n}^{2k} = \\omega_{n}^{k} \\omega_{2n}^{2k} = \\omega_{n}^{k} \u2003 (\u5bf9\u5e94\u7684\u5411\u91cf\u76f8\u540c) \\omega_{n}^{k + \\frac{n}{2}} = -\\omega_{n}^{k} \\omega_{n}^{k + \\frac{n}{2}} = -\\omega_{n}^{k} \u2003\uff08\u5bf9\u5e94\u7684\u5411\u91cf\u7b49\u5927\u53cd\u5411\uff09 \u501f\u52a9\u56fe\u53ef\u4ee5\u66f4\u597d\u7684\u7406\u89e3\u3002","title":"\u6027\u8d28"},{"location":"math/fft/#_7","text":"\u65f6\u95f4\u590d\u6742\u5ea6 O(nlog_2n) O(nlog_2n)","title":"\u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362"},{"location":"math/fft/#_8","text":"\u8bbe\u51fd\u6570 FL(x)=f_0+f_2x+...+f_{n-2}x^{n/2-1} FL(x)=f_0+f_2x+...+f_{n-2}x^{n/2-1} FR(x)=f_1+f_3x+...+f_{n-1}x^{n/2-1} FR(x)=f_1+f_3x+...+f_{n-1}x^{n/2-1} \u5219\u6709 F(x)=FL(x^2)+xFR(x^2) F(x)=FL(x^2)+xFR(x^2) \u4ee3\u5165 \u03c9^k_n \u03c9^k_n \u3001 \u03c9_n^{k+n/2} \u03c9_n^{k+n/2} \uff0c\u7ecf\u8ba1\u7b97\u5316\u7b80 F(\u03c9^k_n)=FL(\u03c9^k_{n/2})+\u03c9^k_nFR(\u03c9^k_{n/2}) F(\u03c9^k_n)=FL(\u03c9^k_{n/2})+\u03c9^k_nFR(\u03c9^k_{n/2}) F(\u03c9_n^{k+n/2})=FL(\u03c9_{n/2}^k)\u2212\u03c9_n^kFR(\u03c9_{n/2}^k) F(\u03c9_n^{k+n/2})=FL(\u03c9_{n/2}^k)\u2212\u03c9_n^kFR(\u03c9_{n/2}^k) \u5982\u679c\u6211\u4eec\u77e5\u9053\u4e24\u4e2a\u591a\u9879\u5f0f FL(x) FL(x) \u548c FR(x) FR(x) \u5206\u522b\u5728 \u03c9^0_{n/2},\u03c9^1_{n/2},\u03c9^2_{n/2},...,\u03c9^{n/2-1}_{n/2} \u03c9^0_{n/2},\u03c9^1_{n/2},\u03c9^2_{n/2},...,\u03c9^{n/2-1}_{n/2} \u7684\u70b9\u503c\u8868\u793a\uff0c\u5c31\u53ef\u4ee5 O(n) O(n) \u6c42\u51fa F(x) \u5728 \u03c9^0_{n},\u03c9^1_{n},\u03c9^2_{n},...,\u03c9^{n-1}_{n} F(x) \u5728 \u03c9^0_{n},\u03c9^1_{n},\u03c9^2_{n},...,\u03c9^{n-1}_{n} \u5904\u7684\u70b9\u503c\u8868\u793a\u3002 \u7528\u5206\u6cbb\u6cd5\u6c42\u4e0b\u53bb\u3002 \u628aDFT\u4e2d\u7684 \u03c9^1_n \u03c9^1_n \u6362\u6210 \u03c9^{-1}_n \u03c9^{-1}_n \uff0c\u505a\u5b8c\u4e4b\u540e\u9664\u4ee5 n n \u5373\u53ef\u5b9e\u73b0IDFT\u3002DFT/IDFT\u6838\u5fc3\u4ee3\u7801\u53ef\u4ee5\u590d\u7528\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 void fft ( CP * f , bool flag ) { // flag=-1\u4e3aIDFT for ( int p = 2 ; p <= n ; p <<= 1 ) { int len = p >> 1 ; CP tG ( cos ( 2 * Pi / p ), sin ( 2 * Pi / p )); if ( ! flag ) tG . y *= -1 ; for ( int k = 0 ; k < n ; k += p ) { CP buf ( 1 , 0 ); for ( int l = k ; l < k + len ; l ++ ) { CP tt = buf * f [ len + l ]; f [ len + l ] = f [ l ] - tt ; // (1) f [ l ] = f [ l ] + tt ; // (2) buf = buf * tG ; //\u5f97\u5230\u4e0b\u4e00\u4e2a[\u53cd]\u5355\u4f4d\u6839 } } } } \u5173\u4e8eIFFT\u7684\u8bc1\u660e\u6709\u5f88\u591a\uff0c\u76f8\u5bf9\u6765\u8bf4\u4e5f\u6bd4\u8f83\u590d\u6742\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u6570\u5b66\u4e0a\u7684\u7406\u89e3\u3002 \\left(\\begin{array}{ccccc} x_{0}^{0} & x_{0}^{1} & x_{0}^{2} & \\ldots & x_{0}^{n-1} \\\\ x_{1}^{0} & x_{1}^{1} & x_{1}^{2} & \\ldots & x_{1}^{n-1} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ x_{n-1}^{0} & x_{n-1}^{1} & x_{n-1}^{2} & \\ldots & x_{n-1}^{n-1} \\end{array}\\right)\\left(\\begin{array}{c} a_{0} \\\\ a_{1} \\\\ \\ldots \\\\ a_{n-1} \\end{array}\\right)=\\left(\\begin{array}{c} y_{0} \\\\ y_{1} \\\\ \\ldots \\\\ \\ldots \\\\ y_{n-1} \\end{array}\\right) \\\\ \\left(\\begin{array}{ccccc} x_{0}^{0} & x_{0}^{1} & x_{0}^{2} & \\ldots & x_{0}^{n-1} \\\\ x_{1}^{0} & x_{1}^{1} & x_{1}^{2} & \\ldots & x_{1}^{n-1} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ x_{n-1}^{0} & x_{n-1}^{1} & x_{n-1}^{2} & \\ldots & x_{n-1}^{n-1} \\end{array}\\right)\\left(\\begin{array}{c} a_{0} \\\\ a_{1} \\\\ \\ldots \\\\ a_{n-1} \\end{array}\\right)=\\left(\\begin{array}{c} y_{0} \\\\ y_{1} \\\\ \\ldots \\\\ \\ldots \\\\ y_{n-1} \\end{array}\\right) \\\\ \u6211\u4eec\u628a\u4e0a\u8ff0\u77e9\u9635\u62bd\u8c61\u6210 WA=B WA=B \u3002 \u5219 A=W^{-1}B A=W^{-1}B \u90a3\u4e48\u5176\u5b9e\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u8303\u5fb7\u8499\u5fb7\u77e9\u9635\u6c42\u9006\u3002 W=\\left(\\begin{array}{ccccc} (w_n^{0})^{0} & (w_n^{0})^{1} & (w_n^{0})^{2} & \\ldots & (w_n^{0})^{n-1} \\\\ (w_n^{1})^{0} & (w_n^{1})^{1} & (w_n^{1})^{2} & \\ldots & (w_n^{1})^{n-1} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ (w_n^{n-1})^{0} & (w_n^{n-1})^{1} & (w_n^{n-1})^{2} & \\ldots & (w_n^{n-1})^{n-1} \\\\ \\end{array}\\right)= \\left(\\begin{array}{ccccc} 1 & 1 & 1 & \\ldots & 1 \\\\ 1 & w_n^{1\\times 1} & w_n^{1\\times 2} & \\ldots & w_n^{1\\times (n-1)} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ 1 & w_n^{(n-1)\\times 1} & w_n^{(n-1)\\times 2} & \\ldots & w_n^{(n-1)\\times (n-1)} \\\\ \\end{array}\\right) \\\\ W=\\left(\\begin{array}{ccccc} (w_n^{0})^{0} & (w_n^{0})^{1} & (w_n^{0})^{2} & \\ldots & (w_n^{0})^{n-1} \\\\ (w_n^{1})^{0} & (w_n^{1})^{1} & (w_n^{1})^{2} & \\ldots & (w_n^{1})^{n-1} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ (w_n^{n-1})^{0} & (w_n^{n-1})^{1} & (w_n^{n-1})^{2} & \\ldots & (w_n^{n-1})^{n-1} \\\\ \\end{array}\\right)= \\left(\\begin{array}{ccccc} 1 & 1 & 1 & \\ldots & 1 \\\\ 1 & w_n^{1\\times 1} & w_n^{1\\times 2} & \\ldots & w_n^{1\\times (n-1)} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ 1 & w_n^{(n-1)\\times 1} & w_n^{(n-1)\\times 2} & \\ldots & w_n^{(n-1)\\times (n-1)} \\\\ \\end{array}\\right) \\\\ W^{-1}=\\frac{1}{n}\\left(\\begin{array}{ccccc} 1 & 1 & 1 & \\ldots & 1 \\\\ 1 & w_n^{-1\\times 1} & w_n^{-1\\times 2} & \\ldots & w_n^{-1\\times (n-1)} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ 1 & w_n^{-(n-1)\\times 1} & w_n^{-(n-1)\\times 2} & \\ldots & w_n^{-(n-1)\\times (n-1)} \\\\ \\end{array}\\right) \\\\ W^{-1}=\\frac{1}{n}\\left(\\begin{array}{ccccc} 1 & 1 & 1 & \\ldots & 1 \\\\ 1 & w_n^{-1\\times 1} & w_n^{-1\\times 2} & \\ldots & w_n^{-1\\times (n-1)} \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ \\ldots & \\ldots & \\ldots & \\ldots & \\ldots \\\\ 1 & w_n^{-(n-1)\\times 1} & w_n^{-(n-1)\\times 2} & \\ldots & w_n^{-(n-1)\\times (n-1)} \\\\ \\end{array}\\right) \\\\ \u89c2\u5bdf\u53d1\u73b0\uff0c\u53ea\u9700\u8981\u53d8\u6362\u6307\u6570\u7684\u6b63\u8d1f\uff0c\u518d\u4e58 \\frac{1}{n} \\frac{1}{n} \uff0cIFFT\u548cFFT\u7684\u6d41\u7a0b\u5c31\u5b8c\u5168\u4e00\u81f4\u4e86\u3002","title":"\u7406\u8bba"},{"location":"math/fft/#_9","text":"","title":"\u70b9\u503c\u8868\u793a\u548c\u7cfb\u6570\u8868\u793a\u4e4b\u95f4\u7684\u8f6c\u6362"},{"location":"math/fft/#_10","text":"\u8981\u6c42\u7684\u5e8f\u5217\u5b9e\u9645\u662f\u539f\u5e8f\u5217\u4e0b\u6807\u7684\u4e8c\u8fdb\u5236\u53cd\u8f6c\u3002","title":"\u4f18\u5316\uff1a\u8774\u8776\u53d8\u6362"},{"location":"math/fft/#_11","text":"\u6839\u636e (a+bi)(c+di)==ac\u2212bd+adi+bci (a+bi)(c+di)==ac\u2212bd+adi+bci \u8981\u6c42 F(x)G(x) F(x)G(x) \uff0c\u8bbe\u590d\u591a\u9879\u5f0f P(x)=F(x)+G(x)i P(x)=F(x)+G(x)i , \u5219 P(x)^2==F(x)^2-G(x)^2+2F(x)G(x)i P(x)^2==F(x)^2-G(x)^2+2F(x)G(x)i \u53d1\u73b0 P(x)^2 P(x)^2 \u7684\u865a\u90e8\u4e3a 2F(x)G(x) 2F(x)G(x) \u4e5f\u5c31\u662f\u8bf4\u6c42\u51fa P(x)^2 P(x)^2 \u4e4b\u540e,\u628a\u5b83\u7684\u865a\u90e8\u9664\u4ee52\u5373\u53ef\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <algorithm> #include <cmath> #include <cstdio> #define Maxn 1350000 using namespace std ; const double Pi = acos ( -1 ); inline int read () { register char ch = 0 ; while ( ch < 48 || ch > 57 ) ch = getchar (); return ch - '0' ; } int n , m ; struct CP { CP ( double xx = 0 , double yy = 0 ) { x = xx , y = yy ; } double x , y ; CP operator + ( CP const & B ) const { return CP ( x + B . x , y + B . y ); } CP operator - ( CP const & B ) const { return CP ( x - B . x , y - B . y ); } CP operator * ( CP const & B ) const { return CP ( x * B . x - y * B . y , x * B . y + y * B . x ); } } f [ Maxn << 1 ]; //\u53ea\u7528\u4e86\u4e00\u4e2a\u590d\u6570\u6570\u7ec4 int tr [ Maxn << 1 ]; void fft ( CP * f , bool flag ) { for ( int i = 0 ; i < n ; i ++ ) if ( i < tr [ i ]) swap ( f [ i ], f [ tr [ i ]]); for ( int p = 2 ; p <= n ; p <<= 1 ) { int len = p >> 1 ; CP tG ( cos ( 2 * Pi / p ), sin ( 2 * Pi / p )); if ( ! flag ) tG . y *= -1 ; for ( int k = 0 ; k < n ; k += p ) { CP buf ( 1 , 0 ); for ( int l = k ; l < k + len ; l ++ ) { CP tt = buf * f [ len + l ]; f [ len + l ] = f [ l ] - tt ; f [ l ] = f [ l ] + tt ; buf = buf * tG ; } } } } int main () { scanf ( \"%d%d\" , & n , & m ); for ( int i = 0 ; i <= n ; i ++ ) f [ i ]. x = read (); for ( int i = 0 ; i <= m ; i ++ ) f [ i ]. y = read (); for ( m += n , n = 1 ; n <= m ; n <<= 1 ); for ( int i = 0 ; i < n ; i ++ ) tr [ i ] = ( tr [ i >> 1 ] >> 1 ) | (( i & 1 ) ? n >> 1 : 0 ); fft ( f , 1 ); for ( int i = 0 ; i < n ; ++ i ) f [ i ] = f [ i ] * f [ i ]; fft ( f , 0 ); for ( int i = 0 ; i <= m ; ++ i ) printf ( \"%d \" , ( int )( f [ i ]. y / n / 2 + 0.49 )); return 0 ; }","title":"\u4f18\u5316\uff1a\u4e09\u6b21\u53d8\u4e24\u6b21"},{"location":"math/fft/#_12","text":"\u5c3d\u7ba1FFT\u4f18\u4e8e\u6734\u7d20\u7b97\u6cd5\uff0c\u4f46\u662f\u7531\u4e8e\u5e38\u6570\u8fc7\u5927\uff08\u590d\u6570\u80cc\u540e\u662f\u6d6e\u70b9\u6570\u8fd0\u7b97\uff09\uff0c\u540c\u65f6\u8fd8\u6709\u7cbe\u5ea6\u7684\u9650\u5236\uff0c\u6240\u4ee5\u6570\u8bba\u4e2d\u4ecd\u6709\u5176\u4ed6\u7684\u7b97\u6cd5\u5982NTT\uff08\u5feb\u901f\u6570\u8bba\u53d8\u6362\uff09\uff0c\u4f9b\u5927\u5bb6\u540e\u7eed\u5b66\u4e60\u3002","title":"\u5176\u4ed6"},{"location":"math/fft/#_13","text":"\u6d1b\u8c37P3803 \u591a\u9879\u5f0f\u4e58\u6cd5","title":"\u4f8b\u9898"},{"location":"math/fft/#_14","text":"FFT\u5b66\u4e60\u7b14\u8bb0 \u5feb\u901f\u5085\u91cc\u53f6\u53d8\u6362\u8be6\u89e3","title":"\u53c2\u8003\u8d44\u6599"},{"location":"math/num-sequence/","text":"Copyright \u672c\u9875\u9762\u6590\u6ce2\u90a3\u5951\u6570\u5217\u90e8\u5206\u8f6c\u8f7d\u4e8e \u6570\u5217-OI Wiki \u3002 \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a LyuLumos \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u00b6 \u5b9a\u4e49 \u00b6 \u6590\u6ce2\u90a3\u5951\u6570\u5217\uff08The Fibonacci sequence\uff09\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a F_0 = 0, F_1 = 1, F_n = F_{n-1} + F_{n-2} F_0 = 0, F_1 = 1, F_n = F_{n-1} + F_{n-2} \u8be5\u6570\u5217\u7684\u524d\u51e0\u9879\u5982\u4e0b\uff1a 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... \u6027\u8d28 \u00b6 \u6590\u6ce2\u90a3\u5951\u6570\u5217\u62e5\u6709\u8bb8\u591a\u6709\u8da3\u7684\u6027\u8d28\uff0c\u8fd9\u91cc\u5217\u4e3e\u51fa\u4e00\u90e8\u5206\u7b80\u5355\u7684\u6027\u8d28\uff1a \u5361\u897f\u5c3c\u6027\u8d28\uff1a F_{n-1} F_{n+1} - F_n^2 = (-1)^n F_{n-1} F_{n+1} - F_n^2 = (-1)^n \u3002 \u9644\u52a0\u6027\u8d28\uff1a F_{n+k} = F_k F_{n+1} + F_{k-1} F_n F_{n+k} = F_k F_{n+1} + F_{k-1} F_n \u3002 \u53d6\u4e0a\u4e00\u6761\u6027\u8d28\u4e2d k = n k = n \uff0c\u6211\u4eec\u5f97\u5230 F_{2n} = F_n (F_{n+1} + F_{n-1}) F_{2n} = F_n (F_{n+1} + F_{n-1}) \u3002 \u7531\u4e0a\u4e00\u6761\u6027\u8d28\u53ef\u4ee5\u5f52\u7eb3\u8bc1\u660e\uff0c \\forall k\\in \\mathbb{N},F_n|F_{nk} \\forall k\\in \\mathbb{N},F_n|F_{nk} \u3002 \u4e0a\u8ff0\u6027\u8d28\u53ef\u9006\uff0c\u5373 \\forall F_a|F_b,a|b \\forall F_a|F_b,a|b \u3002 GCD \u6027\u8d28\uff1a (F_m, F_n) = F_{(m, n)} (F_m, F_n) = F_{(m, n)} \u3002 \u4ee5\u6590\u6ce2\u90a3\u5951\u6570\u5217\u76f8\u90bb\u4e24\u9879\u4f5c\u4e3a\u8f93\u5165\u4f1a\u4f7f\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u8fbe\u5230\u6700\u574f\u590d\u6742\u5ea6\u3002 \u9f50\u80af\u591a\u592b\u5b9a\u7406\uff1a\u4efb\u4f55\u81ea\u7136\u6570 n n \u53ef\u4ee5\u88ab\u552f\u4e00\u5730\u8868\u793a\u6210\u4e00\u4e9b\u4e92\u4e0d\u76f8\u90bb\u6590\u6ce2\u90a3\u5951\u6570\u7684\u548c\u3002 \u6590\u6ce2\u90a3\u5951\u6570\u5217\u901a\u9879\u516c\u5f0f \u00b6 \u7b2c n n \u4e2a\u6590\u6ce2\u90a3\u5951\u6570\u53ef\u4ee5\u5728 \\Theta (n) \\Theta (n) \u7684\u65f6\u95f4\u5185\u4f7f\u7528\u9012\u63a8\u516c\u5f0f\u8ba1\u7b97\u3002\u4f46\u6211\u4eec\u4ecd\u6709\u66f4\u5feb\u901f\u7684\u65b9\u6cd5\u8ba1\u7b97\u3002 \u89e3\u6790\u89e3 \u00b6 F_n = \\frac{\\left(\\frac{1 + \\sqrt{5}}{2}\\right)^n - \\left(\\frac{1 - \\sqrt{5}}{2}\\right)^n}{\\sqrt{5}} F_n = \\frac{\\left(\\frac{1 + \\sqrt{5}}{2}\\right)^n - \\left(\\frac{1 - \\sqrt{5}}{2}\\right)^n}{\\sqrt{5}} \u8fd9\u516c\u5f0f\u5728\u8ba1\u7b97\u7684\u65f6\u4faf\u8981\u6c42\u6781\u9ad8\u7684\u7cbe\u786e\u5ea6\uff0c\u56e0\u6b64\u5728\u5b9e\u8df5\u4e2d\u5f88\u5c11\u7528\u5230\u3002\u4f46\u662f\u8bf7\u4e0d\u8981\u5ffd\u89c6\uff01\u7ed3\u5408\u6a21\u610f\u4e49\u4e0b\u4e8c\u6b21\u5269\u4f59\u548c\u9006\u5143\u7684\u6982\u5ff5\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u516c\u5f0f\u4ecd\u662f\u6709\u7528\u7684\u3002 \u77e9\u9635\u5f62\u5f0f \u00b6 \u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u9012\u63a8\u53ef\u4ee5\u7528\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f\u8868\u8fbe\uff1a \\begin{bmatrix}F_{n-1} & F_{n} \\cr\\end{bmatrix} = \\begin{bmatrix}F_{n-2} & F_{n-1} \\cr\\end{bmatrix} \\cdot \\begin{bmatrix}0 & 1 \\cr 1 & 1 \\cr\\end{bmatrix} \\begin{bmatrix}F_{n-1} & F_{n} \\cr\\end{bmatrix} = \\begin{bmatrix}F_{n-2} & F_{n-1} \\cr\\end{bmatrix} \\cdot \\begin{bmatrix}0 & 1 \\cr 1 & 1 \\cr\\end{bmatrix} \u8bbe P = \\begin{bmatrix}0 & 1 \\cr 1 & 1 \\cr\\end{bmatrix} P = \\begin{bmatrix}0 & 1 \\cr 1 & 1 \\cr\\end{bmatrix} \uff0c\u6211\u4eec\u5f97\u5230 \\begin{bmatrix}F_n & F_{n+1} \\cr\\end{bmatrix} = \\begin{bmatrix}F_0 & F_1 \\cr\\end{bmatrix} \\cdot P^n \\begin{bmatrix}F_n & F_{n+1} \\cr\\end{bmatrix} = \\begin{bmatrix}F_0 & F_1 \\cr\\end{bmatrix} \\cdot P^n \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u77e9\u9635\u5feb\u901f\u5e42\u5728 \\Theta(\\log n) \\Theta(\\log n) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002 \u601d\u8003 \u00b6 \u90a3\u5e7f\u4e49\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff08\u6ee1\u8db3\u901a\u9879\u516c\u5f0f\u4f46\u662f\u6570\u503c\u4e0d\u540c\uff09\u5462\uff1f \u5361\u7279\u5170\u6570\u5217 \u00b6 \u5b9a\u4e49 \u00b6 Catalan\u6570\u5b9a\u4e49\u5982\u4e0b\uff1a f_0=1,\\,\\,f_n = \\sum_{i=0}^{n-1}f(i)\\cdot f(n-i-1), n \\in N_+ f_0=1,\\,\\,f_n = \\sum_{i=0}^{n-1}f(i)\\cdot f(n-i-1), n \\in N_+ \u8be5\u6570\u5217\u7684\u524d\u51e0\u9879\u5982\u4e0b\uff1a 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012 ...... 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012 ...... \u9012\u63a8\u516c\u5f0f \u00b6 f(n) = \\frac{1}{n+1}\\tbinom{2n}{n} f(n) = \\frac{1}{n+1}\\tbinom{2n}{n} f(n) = \\tbinom{2n}{n}-\\tbinom{2n}{n-1} f(n) = \\tbinom{2n}{n}-\\tbinom{2n}{n-1} // \u63a8\u8350 f(n) = \\sum_{i=0}^{n-1}f(i)\u00d7f(n-i-1) f(n) = \\sum_{i=0}^{n-1}f(i)\u00d7f(n-i-1) f(n) = \\frac{f(n-1)\u00d7(4n-2)}{n+1} f(n) = \\frac{f(n-1)\u00d7(4n-2)}{n+1} \u5e94\u7528 \u00b6 \u4e8c\u53c9\u6811\u7684\u8ba1\u6570\u95ee\u9898\uff1a\u5df2\u77e5\u4e8c\u53c9\u6811\u6709 n n \u4e2a\u7ed3\u70b9\uff0c\u6c42\u80fd\u6784\u6210\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u4e8c\u53c9\u6811\u3002 \u62ec\u53f7\u5316\u95ee\u9898\uff1a\u4e00\u4e2a\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f\u7531()\u5305\u56f4\uff0c()\u53ef\u4ee5\u5d4c\u5957\u548c\u8fde\u63a5\uff0c\u5982\uff1a(())()\u4e5f\u662f\u5408\u6cd5\u8868\u8fbe\u5f0f\uff0c\u73b0\u7ed9\u51fa n n \u5bf9\u62ec\u53f7\uff0c\u6c42\u53ef\u4ee5\u7ec4\u6210\u7684\u5408\u6cd5\u8868\u8fbe\u5f0f\u7684\u4e2a\u6570\u3002 \u5212\u5206\u95ee\u9898\uff1a\u5c06\u4e00\u4e2a\u51f8 n+2 n+2 \u591a\u8fb9\u5f62\u533a\u57df\u5206\u6210\u4e09\u89d2\u5f62\u533a\u57df\u7684\u65b9\u6cd5\u6570\u3002 \u51fa\u6808\u95ee\u9898\uff1a\u4e00\u4e2a\u6808\u7684\u8fdb\u6808\u5e8f\u5217\u4e3a 1,2,3,..n 1,2,3,..n \uff0c\u6c42\u4e0d\u540c\u7684\u51fa\u6808\u5e8f\u5217\u6709\u591a\u5c11\u79cd\u3002 \u8def\u5f84\u95ee\u9898\uff1a\u5728 n\\cdot n n\\cdot n \u7684\u65b9\u683c\u5730\u56fe\u4e2d\uff0c\u4ece\u4e00\u4e2a\u89d2\u5230\u53e6\u5916\u4e00\u4e2a\u89d2\uff0c\u6c42\u4e0d\u8de8\u8d8a\u5bf9\u89d2\u7ebf\u7684\u8def\u5f84\u6570\u6709\u591a\u5c11\u79cd\u3002 \u63e1\u624b\u95ee\u9898\uff1a 2n 2n \u4e2a\u4eba\u5747\u5300\u5750\u5728\u4e00\u4e2a\u5706\u684c\u8fb9\u4e0a\uff0c\u67d0\u4e2a\u65f6\u523b\u6240\u6709\u4eba\u540c\u65f6\u4e0e\u53e6\u4e00\u4e2a\u4eba\u63e1\u624b\uff0c\u8981\u6c42\u624b\u4e4b\u95f4\u4e0d\u80fd\u4ea4\u53c9\uff0c\u6c42\u5171\u6709\u591a\u5c11\u79cd\u63e1\u624b\u65b9\u6cd5\u3002 \u4f8b\u9898 \u00b6 \u5b97\u8001\u5e08\u7684\u5f71\u54cd\u529b\uff082020\u725b\u5ba2\u5bd2\u5047\u7b97\u6cd5\u57fa\u7840\u96c6\u8bad\u84251-J 2300\uff09 zls\u5728\u4f17\u4eba\u9f50\u5fc3\u534f\u529b\u4e0b\uff0c\u5f71\u54cd\u529b\u8d8a\u6765\u8d8a\u5927\u4e86\uff01 \u5df2\u77e5\u7b2c\u4e00\u5929\u5f71\u54cd\u529b\u4e3a x x \uff0c\u7b2c\u4e8c\u5929\u5f71\u54cd\u529b\u4e3a y y \uff0c\u4ece\u7b2c\u4e09\u5929\u5f00\u59cb\uff0c\u6bcf\u4e00\u5929\u7684\u5f71\u54cd\u529b\u4e3a\u524d\u4e24\u5929\u5f71\u54cd\u529b\u7684\u4e58\u79ef\u518d\u4e58\u4ee5 a a \u7684 b b \u6b21\u65b9\u3002 \u7528\u6570\u5b66\u8bed\u8a00\u63cf\u8ff0\u662f\uff1a\u8bbe\u7b2c i i \u5929\u7684\u5f71\u54cd\u529b\u4e3a f(i) f(i) \uff0c\u90a3\u4e48 f(1)=x f(1)=x \uff0c f(2)=y f(2)=y \uff0c\u5bf9\u4e8e i>2 i>2 \uff0c f(i)=f(i-1)\\cdot f(i-2)\\cdot a^b f(i)=f(i-1)\\cdot f(i-2)\\cdot a^b \u3002 \u6211\u4eec\u60f3\u77e5\u9053zls\u7b2c n n \u5929\u5f71\u54cd\u529b\u662f\u591a\u5c11\uff1f\uff08 1\\leq n,a,b,x,y\\leq 10^{12} 1\\leq n,a,b,x,y\\leq 10^{12} \uff09 \u56e0\u4e3azls\u7684\u5f71\u54cd\u529b\u5b9e\u5728\u662f\u592a\u5927\u4e86\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8f93\u51fa\u5176\u5bf9 1000000007 \u6a21\u7684\u503c\u5c31\u53ef\u4ee5\u4e86\u3002 \u89e3\u9898\u601d\u8def \u663e\u7136\u6709 f(n)=x^{F_{n-2}}y^{F_{n-1}}a^{(F_{n-1}-1)b} f(n)=x^{F_{n-2}}y^{F_{n-1}}a^{(F_{n-1}-1)b} \u77e9\u9635\u5feb\u901f\u5e42+\u5feb\u901f\u5e42+\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143\u89e3\u51b3","title":"\u6570\u5217"},{"location":"math/num-sequence/#_1","text":"","title":"\u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"math/num-sequence/#_2","text":"\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff08The Fibonacci sequence\uff09\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a F_0 = 0, F_1 = 1, F_n = F_{n-1} + F_{n-2} F_0 = 0, F_1 = 1, F_n = F_{n-1} + F_{n-2} \u8be5\u6570\u5217\u7684\u524d\u51e0\u9879\u5982\u4e0b\uff1a 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...","title":"\u5b9a\u4e49"},{"location":"math/num-sequence/#_3","text":"\u6590\u6ce2\u90a3\u5951\u6570\u5217\u62e5\u6709\u8bb8\u591a\u6709\u8da3\u7684\u6027\u8d28\uff0c\u8fd9\u91cc\u5217\u4e3e\u51fa\u4e00\u90e8\u5206\u7b80\u5355\u7684\u6027\u8d28\uff1a \u5361\u897f\u5c3c\u6027\u8d28\uff1a F_{n-1} F_{n+1} - F_n^2 = (-1)^n F_{n-1} F_{n+1} - F_n^2 = (-1)^n \u3002 \u9644\u52a0\u6027\u8d28\uff1a F_{n+k} = F_k F_{n+1} + F_{k-1} F_n F_{n+k} = F_k F_{n+1} + F_{k-1} F_n \u3002 \u53d6\u4e0a\u4e00\u6761\u6027\u8d28\u4e2d k = n k = n \uff0c\u6211\u4eec\u5f97\u5230 F_{2n} = F_n (F_{n+1} + F_{n-1}) F_{2n} = F_n (F_{n+1} + F_{n-1}) \u3002 \u7531\u4e0a\u4e00\u6761\u6027\u8d28\u53ef\u4ee5\u5f52\u7eb3\u8bc1\u660e\uff0c \\forall k\\in \\mathbb{N},F_n|F_{nk} \\forall k\\in \\mathbb{N},F_n|F_{nk} \u3002 \u4e0a\u8ff0\u6027\u8d28\u53ef\u9006\uff0c\u5373 \\forall F_a|F_b,a|b \\forall F_a|F_b,a|b \u3002 GCD \u6027\u8d28\uff1a (F_m, F_n) = F_{(m, n)} (F_m, F_n) = F_{(m, n)} \u3002 \u4ee5\u6590\u6ce2\u90a3\u5951\u6570\u5217\u76f8\u90bb\u4e24\u9879\u4f5c\u4e3a\u8f93\u5165\u4f1a\u4f7f\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u8fbe\u5230\u6700\u574f\u590d\u6742\u5ea6\u3002 \u9f50\u80af\u591a\u592b\u5b9a\u7406\uff1a\u4efb\u4f55\u81ea\u7136\u6570 n n \u53ef\u4ee5\u88ab\u552f\u4e00\u5730\u8868\u793a\u6210\u4e00\u4e9b\u4e92\u4e0d\u76f8\u90bb\u6590\u6ce2\u90a3\u5951\u6570\u7684\u548c\u3002","title":"\u6027\u8d28"},{"location":"math/num-sequence/#_4","text":"\u7b2c n n \u4e2a\u6590\u6ce2\u90a3\u5951\u6570\u53ef\u4ee5\u5728 \\Theta (n) \\Theta (n) \u7684\u65f6\u95f4\u5185\u4f7f\u7528\u9012\u63a8\u516c\u5f0f\u8ba1\u7b97\u3002\u4f46\u6211\u4eec\u4ecd\u6709\u66f4\u5feb\u901f\u7684\u65b9\u6cd5\u8ba1\u7b97\u3002","title":"\u6590\u6ce2\u90a3\u5951\u6570\u5217\u901a\u9879\u516c\u5f0f"},{"location":"math/num-sequence/#_5","text":"F_n = \\frac{\\left(\\frac{1 + \\sqrt{5}}{2}\\right)^n - \\left(\\frac{1 - \\sqrt{5}}{2}\\right)^n}{\\sqrt{5}} F_n = \\frac{\\left(\\frac{1 + \\sqrt{5}}{2}\\right)^n - \\left(\\frac{1 - \\sqrt{5}}{2}\\right)^n}{\\sqrt{5}} \u8fd9\u516c\u5f0f\u5728\u8ba1\u7b97\u7684\u65f6\u4faf\u8981\u6c42\u6781\u9ad8\u7684\u7cbe\u786e\u5ea6\uff0c\u56e0\u6b64\u5728\u5b9e\u8df5\u4e2d\u5f88\u5c11\u7528\u5230\u3002\u4f46\u662f\u8bf7\u4e0d\u8981\u5ffd\u89c6\uff01\u7ed3\u5408\u6a21\u610f\u4e49\u4e0b\u4e8c\u6b21\u5269\u4f59\u548c\u9006\u5143\u7684\u6982\u5ff5\uff0c\u5728\u4e00\u4e9b\u60c5\u51b5\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u516c\u5f0f\u4ecd\u662f\u6709\u7528\u7684\u3002","title":"\u89e3\u6790\u89e3"},{"location":"math/num-sequence/#_6","text":"\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u9012\u63a8\u53ef\u4ee5\u7528\u77e9\u9635\u4e58\u6cd5\u7684\u5f62\u5f0f\u8868\u8fbe\uff1a \\begin{bmatrix}F_{n-1} & F_{n} \\cr\\end{bmatrix} = \\begin{bmatrix}F_{n-2} & F_{n-1} \\cr\\end{bmatrix} \\cdot \\begin{bmatrix}0 & 1 \\cr 1 & 1 \\cr\\end{bmatrix} \\begin{bmatrix}F_{n-1} & F_{n} \\cr\\end{bmatrix} = \\begin{bmatrix}F_{n-2} & F_{n-1} \\cr\\end{bmatrix} \\cdot \\begin{bmatrix}0 & 1 \\cr 1 & 1 \\cr\\end{bmatrix} \u8bbe P = \\begin{bmatrix}0 & 1 \\cr 1 & 1 \\cr\\end{bmatrix} P = \\begin{bmatrix}0 & 1 \\cr 1 & 1 \\cr\\end{bmatrix} \uff0c\u6211\u4eec\u5f97\u5230 \\begin{bmatrix}F_n & F_{n+1} \\cr\\end{bmatrix} = \\begin{bmatrix}F_0 & F_1 \\cr\\end{bmatrix} \\cdot P^n \\begin{bmatrix}F_n & F_{n+1} \\cr\\end{bmatrix} = \\begin{bmatrix}F_0 & F_1 \\cr\\end{bmatrix} \\cdot P^n \u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u77e9\u9635\u5feb\u901f\u5e42\u5728 \\Theta(\\log n) \\Theta(\\log n) \u7684\u65f6\u95f4\u5185\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002","title":"\u77e9\u9635\u5f62\u5f0f"},{"location":"math/num-sequence/#_7","text":"\u90a3\u5e7f\u4e49\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff08\u6ee1\u8db3\u901a\u9879\u516c\u5f0f\u4f46\u662f\u6570\u503c\u4e0d\u540c\uff09\u5462\uff1f","title":"\u601d\u8003"},{"location":"math/num-sequence/#_8","text":"","title":"\u5361\u7279\u5170\u6570\u5217"},{"location":"math/num-sequence/#_9","text":"Catalan\u6570\u5b9a\u4e49\u5982\u4e0b\uff1a f_0=1,\\,\\,f_n = \\sum_{i=0}^{n-1}f(i)\\cdot f(n-i-1), n \\in N_+ f_0=1,\\,\\,f_n = \\sum_{i=0}^{n-1}f(i)\\cdot f(n-i-1), n \\in N_+ \u8be5\u6570\u5217\u7684\u524d\u51e0\u9879\u5982\u4e0b\uff1a 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012 ...... 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012 ......","title":"\u5b9a\u4e49"},{"location":"math/num-sequence/#_10","text":"f(n) = \\frac{1}{n+1}\\tbinom{2n}{n} f(n) = \\frac{1}{n+1}\\tbinom{2n}{n} f(n) = \\tbinom{2n}{n}-\\tbinom{2n}{n-1} f(n) = \\tbinom{2n}{n}-\\tbinom{2n}{n-1} // \u63a8\u8350 f(n) = \\sum_{i=0}^{n-1}f(i)\u00d7f(n-i-1) f(n) = \\sum_{i=0}^{n-1}f(i)\u00d7f(n-i-1) f(n) = \\frac{f(n-1)\u00d7(4n-2)}{n+1} f(n) = \\frac{f(n-1)\u00d7(4n-2)}{n+1}","title":"\u9012\u63a8\u516c\u5f0f"},{"location":"math/num-sequence/#_11","text":"\u4e8c\u53c9\u6811\u7684\u8ba1\u6570\u95ee\u9898\uff1a\u5df2\u77e5\u4e8c\u53c9\u6811\u6709 n n \u4e2a\u7ed3\u70b9\uff0c\u6c42\u80fd\u6784\u6210\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u4e8c\u53c9\u6811\u3002 \u62ec\u53f7\u5316\u95ee\u9898\uff1a\u4e00\u4e2a\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f\u7531()\u5305\u56f4\uff0c()\u53ef\u4ee5\u5d4c\u5957\u548c\u8fde\u63a5\uff0c\u5982\uff1a(())()\u4e5f\u662f\u5408\u6cd5\u8868\u8fbe\u5f0f\uff0c\u73b0\u7ed9\u51fa n n \u5bf9\u62ec\u53f7\uff0c\u6c42\u53ef\u4ee5\u7ec4\u6210\u7684\u5408\u6cd5\u8868\u8fbe\u5f0f\u7684\u4e2a\u6570\u3002 \u5212\u5206\u95ee\u9898\uff1a\u5c06\u4e00\u4e2a\u51f8 n+2 n+2 \u591a\u8fb9\u5f62\u533a\u57df\u5206\u6210\u4e09\u89d2\u5f62\u533a\u57df\u7684\u65b9\u6cd5\u6570\u3002 \u51fa\u6808\u95ee\u9898\uff1a\u4e00\u4e2a\u6808\u7684\u8fdb\u6808\u5e8f\u5217\u4e3a 1,2,3,..n 1,2,3,..n \uff0c\u6c42\u4e0d\u540c\u7684\u51fa\u6808\u5e8f\u5217\u6709\u591a\u5c11\u79cd\u3002 \u8def\u5f84\u95ee\u9898\uff1a\u5728 n\\cdot n n\\cdot n \u7684\u65b9\u683c\u5730\u56fe\u4e2d\uff0c\u4ece\u4e00\u4e2a\u89d2\u5230\u53e6\u5916\u4e00\u4e2a\u89d2\uff0c\u6c42\u4e0d\u8de8\u8d8a\u5bf9\u89d2\u7ebf\u7684\u8def\u5f84\u6570\u6709\u591a\u5c11\u79cd\u3002 \u63e1\u624b\u95ee\u9898\uff1a 2n 2n \u4e2a\u4eba\u5747\u5300\u5750\u5728\u4e00\u4e2a\u5706\u684c\u8fb9\u4e0a\uff0c\u67d0\u4e2a\u65f6\u523b\u6240\u6709\u4eba\u540c\u65f6\u4e0e\u53e6\u4e00\u4e2a\u4eba\u63e1\u624b\uff0c\u8981\u6c42\u624b\u4e4b\u95f4\u4e0d\u80fd\u4ea4\u53c9\uff0c\u6c42\u5171\u6709\u591a\u5c11\u79cd\u63e1\u624b\u65b9\u6cd5\u3002","title":"\u5e94\u7528"},{"location":"math/num-sequence/#_12","text":"\u5b97\u8001\u5e08\u7684\u5f71\u54cd\u529b\uff082020\u725b\u5ba2\u5bd2\u5047\u7b97\u6cd5\u57fa\u7840\u96c6\u8bad\u84251-J 2300\uff09 zls\u5728\u4f17\u4eba\u9f50\u5fc3\u534f\u529b\u4e0b\uff0c\u5f71\u54cd\u529b\u8d8a\u6765\u8d8a\u5927\u4e86\uff01 \u5df2\u77e5\u7b2c\u4e00\u5929\u5f71\u54cd\u529b\u4e3a x x \uff0c\u7b2c\u4e8c\u5929\u5f71\u54cd\u529b\u4e3a y y \uff0c\u4ece\u7b2c\u4e09\u5929\u5f00\u59cb\uff0c\u6bcf\u4e00\u5929\u7684\u5f71\u54cd\u529b\u4e3a\u524d\u4e24\u5929\u5f71\u54cd\u529b\u7684\u4e58\u79ef\u518d\u4e58\u4ee5 a a \u7684 b b \u6b21\u65b9\u3002 \u7528\u6570\u5b66\u8bed\u8a00\u63cf\u8ff0\u662f\uff1a\u8bbe\u7b2c i i \u5929\u7684\u5f71\u54cd\u529b\u4e3a f(i) f(i) \uff0c\u90a3\u4e48 f(1)=x f(1)=x \uff0c f(2)=y f(2)=y \uff0c\u5bf9\u4e8e i>2 i>2 \uff0c f(i)=f(i-1)\\cdot f(i-2)\\cdot a^b f(i)=f(i-1)\\cdot f(i-2)\\cdot a^b \u3002 \u6211\u4eec\u60f3\u77e5\u9053zls\u7b2c n n \u5929\u5f71\u54cd\u529b\u662f\u591a\u5c11\uff1f\uff08 1\\leq n,a,b,x,y\\leq 10^{12} 1\\leq n,a,b,x,y\\leq 10^{12} \uff09 \u56e0\u4e3azls\u7684\u5f71\u54cd\u529b\u5b9e\u5728\u662f\u592a\u5927\u4e86\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8f93\u51fa\u5176\u5bf9 1000000007 \u6a21\u7684\u503c\u5c31\u53ef\u4ee5\u4e86\u3002 \u89e3\u9898\u601d\u8def \u663e\u7136\u6709 f(n)=x^{F_{n-2}}y^{F_{n-1}}a^{(F_{n-1}-1)b} f(n)=x^{F_{n-2}}y^{F_{n-1}}a^{(F_{n-1}-1)b} \u77e9\u9635\u5feb\u901f\u5e42+\u5feb\u901f\u5e42+\u8d39\u9a6c\u5c0f\u5b9a\u7406\u6c42\u9006\u5143\u89e3\u51b3","title":"\u4f8b\u9898"},{"location":"math/number-theory/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a Purplepurple \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u8d28\u6570 \u00b6 \u7d20\u6570\u95f4\u9694-Prime gap \u00b6 The first 60 prime gaps are: 1, 2, 2, 4, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 14, 4, 6, 2, 10, 2, 6, 6, 4, 6, 6, 2, 10, 2, 4, 2, 12, 12, 4, 2, 4, 6, 2, 10, 6, 6, 6, 2, 6, 4, 2 \u6709\u65e0\u7a77\u5bf9\u7d20\u6570\uff0c\u4e4b\u95f4\u5b58\u5728\u7740\u4e00\u5b9a\u7684\u95f4\u9694\u3002\u95f4\u9694\u4ece\u88ab\u8bc1\u660e\u4e3a7000\u4e07\u4ee5\u5185\uff0c\u4e00\u76f4\u5230\u5982\u4eca\u7684246\u3002\u5982\u679c\u8be5\u5e38\u6570\u6539\u8fdb\u52302\uff0c\u76f8\u5f53\u4e8e\u8bc1\u660e\u5b6a\u751f\u7d20\u6570\u731c\u60f3 \u7d20\u6570\u4e4b\u95f4\u95f4\u9694\u53ef\u4ee5\u6709\u591a\u8fdc\uff0c The 80 known maximal prime gaps \u7d20\u6570\u5b9a\u7406-Prime Number Theorem \u00b6 \u8d28\u6570\u5206\u5e03\u5bc6\u5ea6 \u4e0d\u8d85\u8fc7x\u7684\u8d28\u6570\u7684\u603b\u6570\u03c0(x)\u8fd1\u4f3c\u4e8ex/ln(x) \u03c0(2)=1\uff0c\u03c0(3.5)=2\uff0c\u03c0(10)=4 \u7d20\u6570\u7b5b\u6cd5 \u00b6 \u6c42 1 1 \u5230 n n \u4e4b\u95f4\u5185\u7684\u6240\u6709\u7d20\u6570 \u65b9\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6 sqrt(n) sqrt(n) \u7684\u5224\u522b O(n*sqrt(n)) O(n*sqrt(n)) \u666e\u901a\u7b5b / \u57c3\u6c0f\u7b5b\u6cd5 O(nloglogn) O(nloglogn) \u7ebf\u6027\u7b5b / \u6b27\u62c9\u7b5b\u6cd5 O(n) O(n) \u7d20\u6570\u6d4b\u8bd5-Miller Rabin \u00b6 \u54e5\u5fb7\u5df4\u8d6b\u731c\u60f3\uff1a\u4efb\u4f55\u5927\u4e8e2\u7684\u5076\u6570\u90fd\u80fd\u591f\u5199\u6210\u4e24\u4e2a\u8d28\u6570\u76f8\u52a0\u7684\u5f62\u5f0f \u5f53\u9898\u76ee\u7ed9\u51fa\u7684\u5076\u6570\u8fbe\u5230 10^{18} 10^{18} \uff0c\u6b64\u65f6\u7684\u8d28\u6570\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u7528\u4e0a\u8ff0\u7684\u7b5b\u6cd5\u53ef\u80fd\u4f1a\u8d85\u65f6\uff0c\u7528Miller Rabin\u5feb\u901f\u5224\u65ad\u4e00\u4e2a <2^{63} <2^{63} \u7684\u6570\u662f\u4e0d\u662f\u7d20\u6570 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(klog_2(n)) O(klog_2(n)) \uff0c n n \u4e3a\u68c0\u6d4b\u7684\u6570\u503c\uff0c k k \u4e3a\u81ea\u5df1\u8bbe\u5b9a\u7684\u68c0\u6d4b\u7684\u6b21\u6570 \u4e0d\u786e\u5b9a\u7b97\u6cd5\uff0c\u5355\u6b21\u6d4b\u8bd5\u6709\u4e0d\u8d85\u8fc7 \\frac{1}{4} \\frac{1}{4} \u7684\u6982\u7387\u4f1a\u5c06\u4e00\u4e2a\u5408\u6570\u8bef\u5224\u4e3a\u4e00\u4e2a\u7d20\u6570 \u4f9d\u636e \u00b6 \u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f0<a<p\uff0c\u6709a^{p\u22121}\u22611(modp) \u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f0<a<p\uff0c\u6709a^{p\u22121}\u22611(modp) \u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u4e14x^2\u22611(modp)\uff0c\u90a3\u4e48x\u22611 (modp)\u548cx\u2261p\u22121(modp)\u4e2d\u7684\u4e00\u4e2a\u6210\u7acb \u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u4e14x^2\u22611(modp)\uff0c\u90a3\u4e48x\u22611 (modp)\u548cx\u2261p\u22121(modp)\u4e2d\u7684\u4e00\u4e2a\u6210\u7acb \u7b97\u6cd5\u8fc7\u7a0b \u00b6 \u5076\u6570\u30010\u30011\u30012\u76f4\u63a5\u5224\u65ad \u5047\u8bbe\u8981\u6d4b\u8bd5\u7684\u6570\u4e3a n n \uff0c\u9009\u53d6\u6574\u6570 r r \u548c\u5947\u6570 d d \uff0c\u6ee1\u8db3 n-1=2^rd n-1=2^rd \u9009\u53d6 a \\in (1,...,n-1) a \\in (1,...,n-1) \u5982\u679c a^d=1(modn) a^d=1(modn) \u6216\u8005 a^d=n-1(modn) a^d=n-1(modn) \uff0c\u5373\u6ee1\u8db3\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\uff0c\u5219\u8c03\u56deStep 3\u7ee7\u7eed\u9a8c\u8bc1 \u5bf9\u4e8e i=0,...,r-1 i=0,...,r-1 \uff0c\u9a8c\u8bc1 a^{2^id} a^{2^id} \u662f\u5426\u6ee1\u8db3 a^{2^id}=n-1(modn) a^{2^id}=n-1(modn) \uff0c\u6ee1\u8db3\u5219\u8df3\u56deStep 3\u7ee7\u7eed\u9a8c\u8bc1\uff0c\u4e0d\u6ee1\u8db3\u5219 n n \u4e3a\u5408\u6570 \u7ecf\u8fc7 k k \u6b21\u9a8c\u8bc1\u540e\uff0c n n \u53ef\u80fd\u662f\u7d20\u6570 \u5b9e\u9a8c\u7684\u4f2a\u7801\u5982\u4e0b\u6240\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Input #1: n > 3, an odd integer to be tested for primality Input #2: k, the number of rounds of testing to perform Output: \u201ccomposite\u201d if n is found to be composite, \u201cprobably prime\u201d otherwise write n as 2^r\u00b7d + 1 with d odd (by factoring out powers of 2 from n \u2212 1) WitnessLoop: repeat k times: pick a random integer a in the range [2, n \u2212 2] x \u2190 a^d mod n if x = 1 or x = n \u2212 1 then continue WitnessLoop repeat r \u2212 1 times: x \u2190 x^2 mod n if x = n \u2212 1 then continue WitnessLoop return \u201ccomposite\u201d return \u201cprobably prime\u201d video tutorial Miller Rabin\u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 typedef unsigned long long ll ; //typedef long long ll; //ll*ll\u53ef\u80fd\u4f1a\u6ea2\u51fa\uff0c\u6240\u4ee5\u4e58\u6cd5\u5316\u52a0\u6cd5 /* ************************************************* * Miller_Rabin \u7b97\u6cd5\u8fdb\u884c\u7d20\u6570\u6d4b\u8bd5 * \u901f\u5ea6\u5feb\u53ef\u4ee5\u5224\u65ad\u4e00\u4e2a < 2^63 \u7684\u6570\u662f\u4e0d\u662f\u7d20\u6570 * **************************************************/ #include <time.h> #include <stdlib.h> const int S = 8 ; //\u968f\u673a\u7b97\u6cd5\u5224\u5b9a\u6b21\u6570\u4e00\u822c 8\uff5e10 \u5c31\u591f\u4e86 // \u8ba1\u7b97 ret = (a*b)%c a,b,c < 2^63 ll mult_mod ( ll a , ll b , ll c ){ a %= c ; b %= c ; ll ret = 0 ; ll tmp = a ; while ( b ){ if ( b & 1 ){ ret += tmp ; if ( ret > c ) ret -= c ; //\u76f4\u63a5\u53d6\u6a21\u6162\u5f97\u591a } tmp <<= 1 ; if ( tmp > c ) tmp -= c ; b >>= 1 ; } return ret ; } // \u8ba1\u7b97 ret = (a^n)%mod ll pow_mod ( ll a , ll n , ll mod ){ ll ret = 1 ; ll tmp = a % mod ; while ( n ){ if ( n & 1 ) ret = mult_mod ( ret , tmp , mod ); tmp = mult_mod ( tmp , tmp , mod ); n >>= 1 ; } return ret ; } // \u901a\u8fc7 a^(n-1)=1(modn)\u6765\u5224\u65ad n \u662f\u4e0d\u662f\u7d20\u6570 // n - 1 = x * (2^t) // \u4e2d\u95f4\u4f7f\u7528\u4e8c\u6b21\u5224\u65ad // \u662f\u5408\u6570\u8fd4\u56de true, \u4e0d\u4e00\u5b9a\u662f\u5408\u6570\u8fd4\u56de false bool check ( ll a , ll n , ll x , ll t ){ ll ret = pow_mod ( a , x , n ); ll last = ret ; for ( int i = 1 ; i <= t ; i ++ ){ ret = mult_mod ( ret , ret , n ); if ( ret == 1 && last != 1 && last != n -1 ) return true ; //\u5408\u6570 last = ret ; } if ( ret != 1 ) return true ; // \u8d39\u9a6c\u5c0f\u5b9a\u7406 else return false ; } //************************************************** // Miller_Rabin \u7b97\u6cd5 // \u662f\u7d20\u6570\u8fd4\u56de true,(\u53ef\u80fd\u662f\u4f2a\u7d20\u6570) // \u4e0d\u662f\u7d20\u6570\u8fd4\u56de false //************************************************** bool Miller_Rabin ( ll n ){ if ( n < 2 ) return false ; if ( n == 2 ) return true ; if ( ( n & 1 ) == 0 ) return false ; //\u5076\u6570 ll x = n - 1 ; ll t = 0 ; while ( ( x & 1 ) == 0 ){ x >>= 1 ; t ++ ;} srand ( time ( NULL )); /* *************** */ for ( int i = 0 ; i < S ; i ++ ){ ll a = rand () % ( n -1 ) + 1 ; if ( check ( a , n , x , t ) ) return false ; } return true ; } \u5927\u6570\u7684\u8d28\u56e0\u5b50\u5206\u89e3-Pollard-Rho \u00b6 O(n^{\\frac{1}{4}}) O(n^{\\frac{1}{4}}) \u7684\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u8ba1\u7b97\u5408\u6570 n n \u7684\u67d0\u4e2a\u975e\u5e73\u51e1\u56e0\u5b50(\u5e73\u51e1\u56e0\u5b50\u6307 1 1 \u548c n n \uff0c\u975e\u5e73\u51e1\u56e0\u5b50\u6307 x \\in [2,n-1]\uff0cn mod x=0 x \\in [2,n-1]\uff0cn mod x=0 ) \u8bd5\u9664\u6cd5\uff1a n n \u7684\u56e0\u6570\u5bf9\u79f0\u5206\u5e03\uff0c\u904d\u5386\u533a\u95f4 [1,\\sqrt N] [1,\\sqrt N] \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\sqrt N) O(\\sqrt N) \u4e0d\u76f4\u63a5\u5bfb\u627e\u56e0\u5b50\uff0c\u800c\u662f\u5bfb\u627e\u56e0\u5b50\u7684\u500d\u6570\uff0c\u7136\u540e\u901a\u8fc7GCD\u627e\u5230\u56e0\u5b50\u672c\u8eab \u601d\u8def \u00b6 \u5bf9\u4e8e N\u2a7e10^{18} N\u2a7e10^{18} \uff0c\u4f7f\u7528 \u968f\u673a\u7b97\u6cd5 -\u731c\u56e0\u6570 \u7ec4\u5408\u968f\u673a\u91c7\u6837-\u751f\u65e5\u6096\u8bba\uff1a\u6ee1\u8db3\u7b54\u6848\u7684\u7ec4\u5408\u6bd4\u5355\u4e2a\u4e2a\u4f53\u8981\u591a\u4e00\u4e9b \u5047\u5982\u4e00\u4e2a\u73ed\u4e0a\u6709 k k \u4e2a\u4eba\uff0c\u5982\u679c\u627e\u5230\u4e00\u4e2a\u4eba\u7684\u751f\u65e5\u662fx\u6708x\u65e5\uff0c\u8fd9\u4e2a\u6982\u7387\u4f1a\u76f8\u5f53\u4f4e\uff1b\u5982\u679c\u60f3\u627e\u4e24\u4e2a\u751f\u65e5\u76f8\u540c\uff0c\u5f53 k=23 k=23 \uff0c\u4e24\u4e2a\u4eba\u5728\u540c\u4e00\u5929\u751f\u65e5\u7684\u6982\u7387\u81f3\u5c11\u6709 50\\% 50\\% \uff0c k=60 k=60 \u65f6\uff0c\u751f\u65e5\u6709\u91cd\u590d\u7684\u73b0\u8c61\u7684\u6982\u7387 \\text{P}(k) \u22480.9999 \\text{P}(k) \u22480.9999 \u6700\u5927\u516c\u7ea6\u6570\u4e00\u5b9a\u662f\u67d0\u4e2a\u6570\u7684\u7ea6\u6570\u3002\u901a\u8fc7\u9009\u62e9\u9002\u5f53\u7684 k k \u4f7f\u5f97 \\gcd(k,n)>1 \\gcd(k,n)>1 \uff0c\u5219\u6c42\u5f97\u7684 \\gcd(k,n) \\gcd(k,n) \u662f n n \u7684\u7ea6\u6570\u3002\u5219\u9009\u53d6\u4e00\u7ec4\u6570 x_1,x_2,x_3,...x_n x_1,x_2,x_3,...x_n \uff0c\u82e5\u6709 gcd(|x_i-x_j|,n)>1 gcd(|x_i-x_j|,n)>1 \uff0c\u5219\u79f0 gcd(|x_i-x_j|,n) gcd(|x_i-x_j|,n) \u662f n n \u7684\u4e00\u4e2a\u56e0\u5b50\u3002 \u6784\u9020\u4e00\u4e2a \u4f2a\u968f\u673a\u6570\u5e8f\u5217 \uff0c\u7136\u540e\u53d6\u76f8\u90bb\u7684\u4e24\u9879\u6765\u6c42gcd\u3002Pollard\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u51fd\u6570: f(x)=(x^2+c)\\mod N f(x)=(x^2+c)\\mod N \u5176\u4e2dc\u662f\u4e00\u4e2a\u968f\u673a\u7684\u5e38\u6570\u3002\u9009\u53d6 x_1 x_1 \uff0c\u4ee4 x_2=f(x_1),x_3=f(x_2),...,x_i=f(x_{i-1}) x_2=f(x_1),x_3=f(x_2),...,x_i=f(x_{i-1}) Floyd\u5224\u5708\u3002\u5728\u4e00\u5b9a\u8303\u56f4\u5185\uff0c\u8fd9\u4e2a\u6570\u5217\u662f\u968f\u673a\u7684\uff1b\u4f46\u4e5f\u6709\u6b7b\u5faa\u73af\u7684\u60c5\u51b5\u3002\u9f9f\u5154\u8d5b\u8dd1\uff1a\u5154\u5b50\u6bd4\u4e4c\u9f9f\u5feb\u4e00\u500d\uff0c\u540c\u8d77\u70b9\u540c\u65f6\u5f00\u59cb\uff0c\u5f53\u5154\u5b50\u201c\u8ffd\u4e0a\u201d\u4e4c\u9f9f\u65f6\uff0c\u5154\u5b50\u4e00\u5b9a\u8dd1\u4e86\u521a\u597d\u4e00\u5708\u3002 brent\u5224\u73af(\u66f4\u9ad8\u6548) kuangbin\u7684\u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 //************************************************** // Miller_Rabin \u7b97\u6cd5 // \u662f\u7d20\u6570\u8fd4\u56de true,(\u53ef\u80fd\u662f\u4f2a\u7d20\u6570) // \u4e0d\u662f\u7d20\u6570\u8fd4\u56de false //************************************************** bool Miller_Rabin ( ll n ){ if ( n < 2 ) return false ; if ( n == 2 ) return true ; if ( ( n & 1 ) == 0 ) return false ; //\u5076\u6570 ll x = n - 1 ; ll t = 0 ; while ( ( x & 1 ) == 0 ){ x >>= 1 ; t ++ ;} srand ( time ( NULL )); /* *************** */ for ( int i = 0 ; i < S ; i ++ ){ ll a = rand () % ( n -1 ) + 1 ; if ( check ( a , n , x , t ) ) return false ; } return true ; } //********************************************** // pollard_rho \u7b97\u6cd5\u8fdb\u884c\u8d28\u56e0\u7d20\u5206\u89e3 //********************************************* ll factor [ 100 ]; //\u8d28\u56e0\u7d20\u5206\u89e3\u7ed3\u679c\uff08\u521a\u8fd4\u56de\u65f6\u65f6\u65e0\u5e8f\u7684\uff09 int tol ; //\u8d28\u56e0\u7d20\u7684\u4e2a\u6570\uff0c\u7f16\u53f7 0\uff5etol-1 ll gcd ( ll a , ll b ){ ll t ; while ( b ){ t = a ; a = b ; b = t % b ; } if ( a >= 0 ) return a ; else return - a ; } //\u627e\u51fa\u4e00\u4e2a\u56e0\u5b50 ll pollard_rho ( ll x , ll c ){ ll i = 1 , k = 2 ; srand ( time ( NULL )); ll x0 = rand () % ( x -1 ) + 1 ; ll y = x0 ; while ( 1 ){ i ++ ; x0 = ( mult_mod ( x0 , x0 , x ) + c ) % x ; //\u4e0d\u65ad\u8c03\u6574x2 ll d = gcd ( y - x0 , x ); if ( d != 1 && d != x ) return d ; //\u627e\u5230\u56e0\u5b50\uff0c\u8fd4\u56de if ( y == x0 ) return x ; //\u5224\u5708 \u51fa\u73b0\u5faa\u73af\uff0c\u8fd4\u56de if ( i == k ){ y = x0 ; k += k ;} } } // \u5bf9 n \u8fdb\u884c\u7d20\u56e0\u5b50\u5206\u89e3\uff0c\u5b58\u5165 factor. k \u8bbe\u7f6e\u4e3a 107 \u5de6\u53f3\u5373\u53ef // \u5982\u679cn \u672c\u8eab\u5c31\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5c06 n \u5b58\u653e\u5728 factor \u4fbf\u53ef\u7ed3\u675f\u5e76\u8fd4\u56de // \u5982\u679c n \u4e0d\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u901a\u8fc7 pollard_rho()\u51fd\u6570 \u627e\u5230 n \u7684\u4e00\u4e2a\u56e0\u5b50 p(\u4e0d\u4e00\u5b9a\u662f\u7d20\u56e0\u5b50)\uff0c\u9012\u5f52 findFac(p)\u548c findFac(n/p) void findfac ( ll n , int k ){ if ( n == 1 ) return ; //\u9012\u5f52\u51fa\u53e3 if ( Miller_Rabin ( n )) { factor [ tol ++ ] = n ; return ; } ll p = n ; int c = k ; //\u503c\u53d8\u5316\uff0c\u9632\u6b62\u6b7b\u5faa\u73af while ( p >= n ) // \u6539\u53d8\u5e38\u6570c\uff0c\u4e0d\u65ad\u627e\u56e0\u5b50\uff0c\u8fd4\u56den\u8bf4\u660e\u6ca1\u627e\u5230 p = pollard_rho ( p , c -- ); findfac ( p , k ); findfac ( n / p , k ); } \u6d1b\u8c37 P4718\u3010\u6a21\u677f\u3011Pollard-Rho\u7b97\u6cd5 TLE-\u9898\u89e3\u7684\u535a\u5ba2\u4e2d\u6709\u4e00\u6b65\u6b65\u4f18\u5316\u7684\u8fc7\u7a0b \u6b27\u62c9\u964d\u5e42 \u00b6 \u80cc\u666f \u00b6 \u7ed9\u4e09\u4e2a\u6b63\u6574\u6570\uff0c a,m,b a,m,b \uff0c\u9700\u8981\u6c42\uff1a a^b mod m a^b mod m \u6570\u636e\u8303\u56f4\uff1a 1\\le a \\le 10^9\uff0c1\\le b \\le 10^{20000000}\uff0c1\\le m \\le 10^8 1\\le a \\le 10^9\uff0c1\\le b \\le 10^{20000000}\uff0c1\\le m \\le 10^8 \u6307\u6570\u7206\u70b8 \u7406\u8bba\u4f9d\u636e \u00b6 \u6b27\u62c9\u5b9a\u7406\uff1a a^{\\varphi(p)}\u22611 \\ mod \\ p\uff0ca\u548cp\u4e92\u8d28 a^{\\varphi(p)}\u22611 \\ mod \\ p\uff0ca\u548cp\u4e92\u8d28 \u62d3\u5c55\u6b27\u62c9\u964d\u5e42 a^b\\equiv \\begin{cases} a^{b\\bmod\\varphi(p)},&\\gcd(a,p)=1\\\\ a^b,&\\gcd(a,p)\\ne1,b<\\varphi(p)\\\\ a^{b\\bmod\\varphi(p)+\\varphi(p)},&\\gcd(a,p)\\ne1,b\\ge\\varphi(p) \\end{cases} \\pmod p a^b\\equiv \\begin{cases} a^{b\\bmod\\varphi(p)},&\\gcd(a,p)=1\\\\ a^b,&\\gcd(a,p)\\ne1,b<\\varphi(p)\\\\ a^{b\\bmod\\varphi(p)+\\varphi(p)},&\\gcd(a,p)\\ne1,b\\ge\\varphi(p) \\end{cases} \\pmod p \u5047\u8bbe k=\\frac{b}{\\varphi(p)},h=bmod\\varphi(p) k=\\frac{b}{\\varphi(p)},h=bmod\\varphi(p) \uff0c\u5219 a^b=a^{k*\\varphi(p)+h}=(a^{\\varphi(p)})^k*a^h=a^h(modp) a^b=a^{k*\\varphi(p)+h}=(a^{\\varphi(p)})^k*a^h=a^h(modp) \u6b27\u62c9\u964d\u5e42\u516c\u5f0f\u7684\u8bc1\u660e \u4ee3\u7801\u6a21\u677f \u00b6 \u6c42\u5355\u4e2a\u6570\u7684\u6b27\u62c9\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 long long eular ( long long n ){ long long ans = n ; for ( int i = 2 ; i * i <= n ; i ++ ){ if ( n % i == 0 ){ ans -= ans / i ; while ( n % i == 0 ) n /= i ; } } if ( n > 1 ) ans \u2212 = ans / n ; return ans ; } \u62d3\u5c55\u6b27\u62c9\u51fd\u6570 \u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8bfb\u5165\u5927\u6570\uff0c\u5904\u7406\u5f97\u5230 bmod\\varphi(p) bmod\\varphi(p) \u9700\u8981\u5224\u65ad b b \u548c \\varphi(p) \\varphi(p) \u7684\u5927\u5c0f\uff0c\u5426\u5219\u4f1a\u51fa\u9519 \u6d1b\u8c37 P5091 \u6a21\u677f\u9898 1 2 3 4 5 6 7 8 9 // char b[maxn] ll ans = 0 ; c = eular ( p ); ll len = strlen ( b ); for ( ll i = 0 ; i < len ; i ++ ) ans = ( ans * 10 + b [ i ] - '0' ) % c ; ans += p ; // \u5feb\u901f\u5e42\u8ba1\u7b97 a\u662f\u5e95\u6570\uff0cans\u662f\u6307\u6570\uff0cp\u662f\u6a21\u6570 qPow ( a , ans , p ); \u6b27\u62c9\u51fd\u6570\u5e38\u7528\u6027\u8d28\u548c\u516c\u5f0f \u00b6 \u5bf9\u4e8e\u8d28\u6570p\uff0c\\varphi(p)=p-1 \u5bf9\u4e8e\u8d28\u6570p\uff0c\\varphi(p)=p-1 \\sum_{d|n}\\varphi(d)=n\\quad\uff0c\u5305\u62ec1\u548cn\u672c\u8eab \\sum_{d|n}\\varphi(d)=n\\quad\uff0c\u5305\u62ec1\u548cn\u672c\u8eab \\sum_{gcd(d,n)==1}d=\\varphi(n)*n/2 \\sum_{gcd(d,n)==1}d=\\varphi(n)*n/2 \\sum_{i=1}^{n-1}gcd(i,n)=\\sum_{d|n}d\\varphi(n|d) \\sum_{i=1}^{n-1}gcd(i,n)=\\sum_{d|n}d\\varphi(n|d) \u82e5p\u4e3a\u8d28\u6570\uff0cn=p^k,\\varphi(n)=p^k-p^{k-1} \u82e5p\u4e3a\u8d28\u6570\uff0cn=p^k,\\varphi(n)=p^k-p^{k-1} \u79ef\u6027\u6027\u8d28\uff1a\u82e5m,n\u4e92\u8d28\uff0c\\varphi(m*n)=\\varphi(m)*\\varphi(n) \u79ef\u6027\u6027\u8d28\uff1a\u82e5m,n\u4e92\u8d28\uff0c\\varphi(m*n)=\\varphi(m)*\\varphi(n) RSA\uff1a\u516c\u94a5\u5bc6\u7801\u7b97\u6cd5 \u00b6 \u7b97\u6cd5\u6d41\u7a0b \u00b6 \u968f\u673a\u9009\u62e9\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u8d28\u6570p\u548cq \u968f\u673a\u9009\u62e9\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u8d28\u6570p\u548cq \u8ba1\u7b97p\u548cq\u7684\u4e58\u79efn \u8ba1\u7b97p\u548cq\u7684\u4e58\u79efn \u8ba1\u7b97n\u7684\u6b27\u62c9\u51fd\u6570\u03c6(n)=(p-1)(q-1) \u8ba1\u7b97n\u7684\u6b27\u62c9\u51fd\u6570\u03c6(n)=(p-1)(q-1) \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6574\u6570e\uff0c\u6ee1\u8db31<e<\u03c6(n)\uff0c\u4e14e\u4e0e\u03c6(n)\u4e92\u8d28 \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6574\u6570e\uff0c\u6ee1\u8db31<e<\u03c6(n)\uff0c\u4e14e\u4e0e\u03c6(n)\u4e92\u8d28 \u6c42\u51fa\u6574\u6570d\uff0c\u4f7f\u5f97ed \u2261 1 (mod \u03c6(n)) \u6c42\u51fa\u6574\u6570d\uff0c\u4f7f\u5f97ed \u2261 1 (mod \u03c6(n)) (n,e)\u4e3a\u516c\u94a5\uff0cd\u4e3a\u79c1\u94a5 (n,e)\u4e3a\u516c\u94a5\uff0cd\u4e3a\u79c1\u94a5 \u52a0\u5bc6\uff1a\u660e\u6587\u6d88\u606f\u4e3am\uff0c\u6ee1\u8db30<m<n\uff0c\u8ba1\u7b97\u5bc6\u6587c=m^e mod n \u52a0\u5bc6\uff1a\u660e\u6587\u6d88\u606f\u4e3am\uff0c\u6ee1\u8db30<m<n\uff0c\u8ba1\u7b97\u5bc6\u6587c=m^e mod n \u89e3\u5bc6\uff1a\u63a5\u53d7\u5230\u5bc6\u6587\u6d88\u606f\u4e3ac\uff0c\u89e3\u5bc6\u660e\u6587\u6d88\u606fm=c^d mod n \u89e3\u5bc6\uff1a\u63a5\u53d7\u5230\u5bc6\u6587\u6d88\u606f\u4e3ac\uff0c\u89e3\u5bc6\u660e\u6587\u6d88\u606fm=c^d mod n \u77e5\u8bc6\u70b9 \u00b6 \u6c42\u9006\u5143(\u6b27\u62c9\u5b9a\u7406/\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97) + \u5feb\u901f\u5e42 \u82e5(a*x)%mod=1\uff0c\u5219x\u662f\u6b63\u6574\u6570a\u5728\u6a21mod\u4e0b\u7684\u9006\u5143 \u65b9\u6cd5 \u9650\u5b9a \u65f6\u95f4\u590d\u6742\u5ea6 \u7ebf\u6027\u6253\u8868\u6cd5 \u53ea\u8981\u6c42mod\u662f\u8d28\u6570 O(n) \u8d39\u9a6c\u5c0f\u5b9a\u7406 mod\u662f\u8d28\u6570\u4e14\u4e0ea\u4e92\u8d28\uff0c\u5feb\u901f\u5e42\u4f18\u5316 O(log(n)) \u6b27\u62c9\u5b9a\u7406 \u53ea\u8981\u6c42a\u4e0emod\u4e92\u8d28\uff0c\u9700\u8981\u6b27\u62c9\u51fd\u6570\u4e0e\u5feb\u901f\u5e42 O(sqrt(n)+log(n)) \u62d3\u5c55\u6b27\u51e0\u91cc\u5fb7 \u53ea\u8981\u6c42a\u4e0emod\u4e92\u8d28 O(log(n)) \u62d3\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u00b6 \u4e2d\u56fd\u5269\u4f59\u5b9a\u7406 \u00b6 \u97e9\u4fe1\u70b9\u5175\uff0c\u4e09\u4e2a\u4e09\u4e2a\u4e00\u6392\u5c111\u4e2a\u4eba\uff0c\u4e94\u4e2a\u4e94\u4e2a\u4e00\u6392\u53c8\u5c111\u4e2a\u4eba\uff0c\u4e03\u4e2a\u4e03\u4e2a\u4e00\u6392\u8fd8\u5c111\u4e2a\u4eba \u5bf9\u4e8e\u4e00\u7ec4\u540c\u4f59\u65b9\u7a0b \u5bf9\u4e8e\u4e00\u7ec4\u540c\u4f59\u65b9\u7a0b x\u2261a_1 (mod n_1) x\u2261a_1 (mod n_1) x\u2261a_2 (mod n_2) x\u2261a_2 (mod n_2) ... ... x\u2261a_k (mod n_k) x\u2261a_k (mod n_k) \u6a21\u6570n_1,n_2...n_k\u4e24\u4e24\u4e92\u8d28\uff0c\u6c42\u6700\u5c0f\u7684x \u6a21\u6570n_1,n_2...n_k\u4e24\u4e24\u4e92\u8d28\uff0c\u6c42\u6700\u5c0f\u7684x \u8ba1\u7b97N=n_1\u00d7n_2\u00d7\u22ef\u00d7n_k \u8ba1\u7b97N=n_1\u00d7n_2\u00d7\u22ef\u00d7n_k \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97y_i=\\frac{N}{n_i}=n_1n_2...n_{i-1}n_{i+1}...n_k \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97y_i=\\frac{N}{n_i}=n_1n_2...n_{i-1}n_{i+1}...n_k \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97z_i=y_i^{-1}(modn_i)\uff0c\u5373\u8ba1\u7b97y_i\u5728\u6a21n_i\u4e0b\u7684\u9006\u5143 \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97z_i=y_i^{-1}(modn_i)\uff0c\u5373\u8ba1\u7b97y_i\u5728\u6a21n_i\u4e0b\u7684\u9006\u5143 x=\\sum_{i=1}^ka_iy_iz_i\uff0c\u6700\u540e\u8ba1\u7b97x=x(modN)\u5f97\u5230\u7ed3\u679c x=\\sum_{i=1}^ka_iy_iz_i\uff0c\u6700\u540e\u8ba1\u7b97x=x(modN)\u5f97\u5230\u7ed3\u679c \u6a21\u6570\u4e24\u4e24\u4e0d\u4e92\u8d28 \u00b6 \u601d\u8def \u00b6 \u901a\u8fc7\u5148\u89e3\u51fa\u524d\u4e24\u4e2a\u65b9\u7a0b\u7684\u89e3\uff0c\u5982\u5c06\u524d\u4e24\u4e2a\u65b9\u7a0b \u901a\u8fc7\u5148\u89e3\u51fa\u524d\u4e24\u4e2a\u65b9\u7a0b\u7684\u89e3\uff0c\u5982\u5c06\u524d\u4e24\u4e2a\u65b9\u7a0b x\u2261a_1 (mod n_1)\uff0cx\u2261a_2 (mod n_2)\u5316\u4e3ax\u2261A(mod N) x\u2261a_1 (mod n_1)\uff0cx\u2261a_2 (mod n_2)\u5316\u4e3ax\u2261A(mod N) \u5c06\u6b64\u65b9\u7a0b\u548cx\u2261a_3 (mod n_3) \u5c06\u6b64\u65b9\u7a0b\u548cx\u2261a_3 (mod n_3) \u7ee7\u7eed\u8054\u7acb\u6c42\u89e3\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u65b9\u7a0b\u89e3\u5b8c\u4e3a\u6b62 \u7ee7\u7eed\u8054\u7acb\u6c42\u89e3\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u65b9\u7a0b\u89e3\u5b8c\u4e3a\u6b62 \u6d1b\u8c37 P4777 \u6a21\u677f\u9898 \u6c42\u89e3\u8fc7\u7a0b \u00b6 x\u2261a_1 (mod n_1) x\u2261a_1 (mod n_1) x\u2261a_2 (mod n_2) x\u2261a_2 (mod n_2) \u53ef\u5316\u4e3a x=a_1+k_1*n_1 \u2460; x=a_2+k_2*n_2; \u53ef\u5316\u4e3a x=a_1+k_1*n_1 \u2460; x=a_2+k_2*n_2; \u6d88x\uff0c\u53ef\u5f97a_1+k_1*n_1=a_2+k_2*n_2 \u6d88x\uff0c\u53ef\u5f97a_1+k_1*n_1=a_2+k_2*n_2 \u79fb\u9879\u5f97\u5230k_1*n_1+(-k_2)*n_2=a_2-a_1 \u79fb\u9879\u5f97\u5230k_1*n_1+(-k_2)*n_2=a_2-a_1 \u4ee4d=a_2-a_1, x=k_1, y=-k_2; \u4ee4d=a_2-a_1, x=k_1, y=-k_2; \u4e0a\u5f0f\u5316\u4e3a x*n_1+y*n_2=d \u2462 \u4e0a\u5f0f\u5316\u4e3a x*n_1+y*n_2=d \u2462 \u4ee4g=gcd(n_1,n_2),\u7528\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u89e3\u7ebf\u6027\u65b9\u7a0b \u4ee4g=gcd(n_1,n_2),\u7528\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u89e3\u7ebf\u6027\u65b9\u7a0b (\u6b64\u5904\u6c42\u89e3x_1\uff0cy_1)\uff0cx_1*n_1+y_1*n_2=g (\u6b64\u5904\u6c42\u89e3x_1\uff0cy_1)\uff0cx_1*n_1+y_1*n_2=g \u2462\u5f0f\u53ef\u5316\u4e3a x_1*(d/g)*n_1+y_1*(d/g)*n_2 = g*(d/g) \u2462\u5f0f\u53ef\u5316\u4e3a x_1*(d/g)*n_1+y_1*(d/g)*n_2 = g*(d/g) \u5373x=x_1*(d/g)=k_1 ; y=y_1*(d/g)=-k_2; \u5373x=x_1*(d/g)=k_1 ; y=y_1*(d/g)=-k_2; \u5373k_1=x_1*(d/g); k_2=-y_1*(d/g) \u5373k_1=x_1*(d/g); k_2=-y_1*(d/g) \u4e00\u7ec4\u901a\u89e3\u4e3a k_1=k_1+(n_2/g)*T; k_2=k_2-(n_1/g)*T \u4e00\u7ec4\u901a\u89e3\u4e3a k_1=k_1+(n_2/g)*T; k_2=k_2-(n_1/g)*T \u8981\u6c42\u4f7f\u6240\u6c42\u5f97\u7684\u89e3\u6700\u5c0f\u4e14\u4e3a\u6b63\u6574\u6570\uff0c \u8981\u6c42\u4f7f\u6240\u6c42\u5f97\u7684\u89e3\u6700\u5c0f\u4e14\u4e3a\u6b63\u6574\u6570\uff0c \u5219\u53ef\u4ee5\u6839\u636e k_1\u7684\u901a\u89e3\u5f62\u5f0f\u6c42\u5f97(\u6d88\u6389T\u7684\u5f71\u54cd) \u5219\u53ef\u4ee5\u6839\u636e k_1\u7684\u901a\u89e3\u5f62\u5f0f\u6c42\u5f97(\u6d88\u6389T\u7684\u5f71\u54cd) k_1=(k_1 mod (n_2/g)+(n_2/g)) mod (n_2/g) \u2461\uff0c k_1=(k_1 mod (n_2/g)+(n_2/g)) mod (n_2/g) \u2461\uff0c \u5373k_1=((x_1*(d/g)) mod (n_2/g)+(n_2/g)) mod (n_2/g) \u5373k_1=((x_1*(d/g)) mod (n_2/g)+(n_2/g)) mod (n_2/g) \u5c06\u6c42\u51fa\u7684k_1\u5e26\u5165\u2460\uff0c\u53ef\u5f97x\u7684\u89e3\uff0c \u5c06\u6c42\u51fa\u7684k_1\u5e26\u5165\u2460\uff0c\u53ef\u5f97x\u7684\u89e3\uff0c \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u7684A\uff0cN\u4e3alcm(n1,n2)\uff0c \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u7684A\uff0cN\u4e3alcm(n1,n2)\uff0c \u5373A\u4e3a\u5408\u5e76\u540e\u7684a\uff0cN\u4e3a\u5408\u5e76\u540e\u7684n \u5373A\u4e3a\u5408\u5e76\u540e\u7684a\uff0cN\u4e3a\u5408\u5e76\u540e\u7684n \u6a21\u677f[\u4e0d\u552f\u4e00] \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 typedef long long ll ; ll exgcd ( ll a , ll b , ll & x , ll & y ){ if ( a == 0 && b == 0 ) return -1 ; if ( b == 0 ){ x = 1 ; y = 0 ; return a ;} ll d = exgcd ( b , a % b , y , x ); y -= a / b * x ; return d ; } ll excrt (){ ll a1 = b [ 0 ], n1 = a [ 0 ], a2 , n2 , d , x , y , gcd ; //\u4f59\u6570 b[] \u9664\u6570 a[] // \u8fd4\u56de\u7684\u662f\u6700\u5c0f\u975e\u8d1f\u6574\u6570\u89e3\uff0c\u6709\u4e9b\u9898\u76ee\u9700\u8981\u7279\u5224 //\u82e5\u5f53\u4f59\u6570\u4e3a0\u7684\u65f6\u5019 \u9898\u76ee\u8981\u6c42\u6c42\u6b63\u6574\u6570 \u6240\u4ee50\u4e0d\u7b97\u5728\u5185\uff0c\u5e94\u8be5\u52a0\u4e0a\u4e0b\u9762\u7684\u6ce8\u91ca\uff0c\u5373\u4f59\u6570\u7b49\u4e8e\u9664\u6570\uff0c\u540c\u7406\u540e\u9762\u7684\u677f\u5b50 //if(a1==0)a1=a[0] for ( int i = 1 ; i < n ; i ++ ){ a2 = b [ i ]; n2 = a [ i ]; d = a2 - a1 ; gcd = exgcd ( n1 , n2 , x , y ); if ( d % gcd ) return -1 ; x = (( x * d / gcd ) % ( n2 / gcd ) + ( n2 / gcd )) % ( n2 / gcd ); a1 = x * n1 + a1 ; n1 = n1 * n2 / gcd ; } return a1 ; } \u5b9a\u7406&\u731c\u60f3&\u516c\u5f0f \u00b6 \u8d39\u9a6c\u5927\u5b9a\u7406\uff1a \u5f53\u6574\u6570n >2\u65f6\uff0c \u5f53\u6574\u6570n >2\u65f6\uff0c \u5173\u4e8ex, y, z\u7684\u65b9\u7a0b x^n + y^n = z^n \u6ca1\u6709\u6b63\u6574\u6570\u89e3 \u5173\u4e8ex, y, z\u7684\u65b9\u7a0b x^n + y^n = z^n \u6ca1\u6709\u6b63\u6574\u6570\u89e3 \u5b9e\u6570\u57df\u4e0d\u53ef\u62c6\u5206\u591a\u9879\u5f0f\uff1a \u4e00\u6b21\u591a\u9879\u5f0f\u548c\u4e8c\u6b21\u591a\u9879\u5f0f(b^2<4ac) \u4e00\u6b21\u591a\u9879\u5f0f\u548c\u4e8c\u6b21\u591a\u9879\u5f0f(b^2<4ac) \u827e\u68ee\u65af\u5766\u56e0\u5224\u522b\u6cd5\uff1a\u6709\u7406\u6570\u57df\u4e0d\u53ef\u7ea6\uff0c\u5373\u4e00\u5b9a\u8981\u6574\u6570\u89e3 \u52fe\u80a1\u6570 \u4efb\u610f\u5927\u4e8e2\u7684\u6574\u6570\u90fd\u53ef\u4ee5\u627e\u51fa\u53e6\u5916\u4e24\u4e2a\u6570\u6784\u6210\u52fe\u80a1\u6570 \u672c\u539f\u52fe\u80a1\u6570 \u56db\u8272\u731c\u60f3 \u5eb7\u5a01\u5e38\u6570 \u65e5\u671f\u8f6c\u5316\u6210\u661f\u671f \u8521\u52d2\u516c\u5f0f \u57fa\u59c6\u62c9\u5c14\u68ee\u8ba1\u7b97\u516c\u5f0f \u65af\u7279\u6797\u516c\u5f0f - \u9636\u4e58 \u9ad8\u6b21\u540c\u4f59 \u00b6 BSGS\u7b97\u6cd5 \u00b6 \u7528\u4e8e\u6c42 a^{x} \\equiv b \\pmod{p} a^{x} \\equiv b \\pmod{p} \u9ad8\u6b21\u65b9\u7a0b\u7684\u6700\u5c0f\u6b63\u6574\u6570\u89e3 x x \uff0c\u5176\u4e2d p p \u4e3a\u7d20\u6570\u3002 \u66b4\u529b\uff1f \u590d\u6742\u5ea6 O(\\varphi(p)) O(\\varphi(p)) \u6838\u5fc3\u601d\u60f3 \u7c7b\u4f3c Meet in the middle. \u8bbe x=im-k x=im-k , \u5176\u4e2d 0\\le k\\le m, m=\\lceil \\sqrt p \\rceil 0\\le k\\le m, m=\\lceil \\sqrt p \\rceil \u3002 \u90a3\u4e48\u65b9\u7a0b\u53d8\u4e3a a^{im-k}\\equiv b\\pmod p a^{im-k}\\equiv b\\pmod p \u4e24\u8fb9\u540c\u4e58 a^k a^k a^{im}\\equiv {a^kb}\\pmod p a^{im}\\equiv {a^kb}\\pmod p \u5148\u8ba1\u7b97\u53f3\u8fb9 {a^kb}\\ mod\\ p {a^kb}\\ mod\\ p \u7684\u503c\uff0c\u628a\u4ed6\u653e\u5165\u4e00\u4e2ahash\u8868\u6216\u662fmap\u91cc\u3002\u518d\u8ba1\u7b97\u5de6\u8fb9 a^{im}\\ mod\\ p a^{im}\\ mod\\ p \u7684\u503c\uff0c\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684i\u503c\uff0c\u518d\u5728hash\u8868(map)\u67e5\u8be2\u3002 \u590d\u6742\u5ea6 O(\\sqrt p) O(\\sqrt p) \u77e9\u9635\u4e58\u6cd5 \u00b6 \u77e9\u9635\u5feb\u901f\u5e42 \u00b6 \u539f\u7406\u7c7b\u4f3c\u5feb\u901f\u5e42\uff0c\u4e2d\u95f4\u4f7f\u7528\u77e9\u9635\u4e58\u6cd5\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(m^3\\cdot logn) O(m^3\\cdot logn) \u77e9\u9635\u5feb\u901f\u5e42\u53ef\u7528\u4e8e\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7b2c n n \u9879\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int MOD = 10000 ; struct mat { ll a [ 2 ][ 2 ]; }; mat mat_mul ( mat x , mat y ) { mat res ; memset ( res . a , 0 , sizeof ( res . a )); for ( int i = 0 ; i < 2 ; i ++ ) for ( int j = 0 ; j < 2 ; j ++ ) for ( int k = 0 ; k < 2 ; k ++ ) res . a [ i ][ j ] = ( res . a [ i ][ j ] + x . a [ i ][ k ] * y . a [ k ][ j ]) % MOD ; return res ; } void mat_pow ( int n ) { mat c , res ; c . a [ 0 ][ 0 ] = c . a [ 0 ][ 1 ] = c . a [ 1 ][ 0 ] = 1 ; c . a [ 1 ][ 1 ] = 0 ; memset ( res . a , 0 , sizeof ( res . a )); for ( int i = 0 ; i < 2 ; i ++ ) res . a [ i ][ i ] = 1 ; while ( n ) { if ( n & 1 ) res = mat_mul ( res , c ); c = mat_mul ( c , c ); n = n >> 1 ; } printf ( \"%lld \\n \" , res . a [ 0 ][ 1 ]); } \u9ad8\u65af\u6d88\u5143 \u00b6 \u539f\u7406 \u00b6 \u589e\u5e7f\u77e9\u9635\u884c\u521d\u7b49\u884c\u53d8\u6362\u4e3a\u884c\u6700\u7b80\u5f62\uff1b \u8fd8\u539f\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1b \u6c42\u89e3\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff1b \u8865\u5145\u81ea\u7531\u672a\u77e5\u91cf\uff1b \u8868\u793a\u65b9\u7a0b\u7ec4\u901a\u89e3\u3002 \u5217\u4e3b\u5143\u6d88\u53bb\u6cd5 \u00b6 \u6bcf\u6b21\u5728\u7b2ck\u884c\u6d88\u5143\u7684\u65f6\u5019\uff0c\u5c06\u7b2ck\u884c\u7684\u5143\u7d20\u4e0e\u62e5\u6709\u7b2ck\u5217\u6700\u5927\u5143\u7d20\u7684\u884c\u8fdb\u884c\u4ea4\u6362\uff0c\u518d\u8fdb\u884c\u6d88\u5143\u6765\u51cf\u5c0f\u8bef\u5dee\u3002 \u5b9e\u73b0 \u00b6 https://blog.csdn.net/lzyws739307453/article/details/89816311 \u5bb9\u65a5\u539f\u7406 \u00b6 \u5b9a\u4e49 \u00b6 \u7528\u4e8e\u89e3\u51b3\u6709\u91cd\u53e0\u90e8\u5206\u7684\u8ba1\u6570\u95ee\u9898\uff0c\u53ef\u4ee5\u5148\u4e0d\u8003\u8651\u91cd\u53e0\u90e8\u5206\uff0c\u5c06\u5f97\u5230\u7684\u65b9\u6848\u6570\u7d2f\u52a0\uff0c\u6700\u540e\u518d\u4ece\u7ed3\u679c\u4e2d\u51cf\u53bb\u91cd\u590d\u8ba1\u7b97\u7684\u90e8\u5206\u3002 \u4ece\u96c6\u5408\u7684\u89d2\u5ea6\u6765\u770b\uff1a (\ud835\udc34\u222a\ud835\udc35)=\ud835\udc34+\ud835\udc35\u2212(\ud835\udc34\u2229\ud835\udc35) (\ud835\udc34\u222a\ud835\udc35\u222aC)=\ud835\udc34+\ud835\udc35+\ud835\udc36\u2212(\ud835\udc34\u2229\ud835\udc35)\u2212(\ud835\udc35\u2229C)\u2212(\ud835\udc36\u2229\ud835\udc34)+(\ud835\udc34\u2229\ud835\udc35\u2229\ud835\udc36) \u9519\u4f4d\u6392\u5217 \u00b6 \u4f2f\u52aa\u5229-\u6b27\u62c9\u88c5\u9519\u4fe1\u5c01\u95ee\u9898 \u00b6 n n \u5c01\u4e0d\u540c\u7684\u4fe1\uff0c\u7f16\u53f7\u5206\u522b\u662f 1,2,3,4,5 1,2,3,4,5 \uff0c\u73b0\u5728\u8981\u628a\u8fd9 5 \u5c01\u4fe1\u653e\u5728\u7f16\u53f7 1,2,3,4,5 1,2,3,4,5 \u7684\u4fe1\u5c01\u4e2d\uff0c\u8981\u6c42\u4fe1\u5c01\u7684\u7f16\u53f7\u4e0e\u4fe1\u7684\u7f16\u53f7\u4e0d\u4e00\u6837\u3002\u95ee\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u653e\u7f6e\u65b9\u6cd5\uff1f \u2003\u2003\u5047\u8bbe\u6211\u4eec\u8003\u8651\u5230\u7b2c n n \u4e2a\u4fe1\u5c01\uff0c\u521d\u59cb\u65f6\u6211\u4eec\u6682\u65f6\u628a\u7b2c n \u5c01\u4fe1\u653e\u5728\u7b2c n \u4e2a\u4fe1\u5c01\u4e2d\uff0c\u7136\u540e\u8003\u8651\u4e24\u79cd\u60c5\u51b5\u7684\u9012\u63a8\uff1a \u2003\u20031. \u524d\u9762 n-1 n-1 \u4e2a\u4fe1\u5c01\u5168\u90e8\u88c5\u9519\uff1b \u2003\u20032. \u524d\u9762 n-1 n-1 \u4e2a\u4fe1\u5c01\u6709\u4e00\u4e2a\u6ca1\u6709\u88c5\u9519\u5176\u4f59\u5168\u90e8\u88c5\u9519\u3002 \u2003\u2003\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u524d\u9762 n-1 n-1 \u4e2a\u4fe1\u5c01\u5168\u90e8\u88c5\u9519\uff1a\u56e0\u4e3a\u524d\u9762 n-1 n-1 \u4e2a\u5df2\u7ecf\u5168\u90e8\u88c5\u9519\u4e86\uff0c\u6240\u4ee5\u7b2c n \u5c01\u53ea\u9700\u8981\u4e0e\u524d\u9762\u4efb\u4e00\u4e00\u4e2a\u4f4d\u7f6e\u4ea4\u6362\u5373\u53ef\uff0c\u603b\u5171\u6709 f(n-1)\\cdot (n-1) f(n-1)\\cdot (n-1) \u79cd\u60c5\u51b5\u3002 \u2003\u2003\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u524d\u9762 n-1 n-1 \u4e2a\u4fe1\u5c01\u6709\u4e00\u4e2a\u6ca1\u6709\u88c5\u9519\u5176\u4f59\u5168\u90e8\u88c5\u9519\uff1a\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\u7684\u76ee\u7684\u5728\u4e8e\uff0c\u82e5 n-1 n-1 \u4e2a\u4fe1\u5c01\u4e2d\u5982\u679c\u6709\u4e00\u4e2a\u6ca1\u88c5\u9519\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u90a3\u4e2a\u6ca1\u88c5\u9519\u7684\u4e0e n n \u4ea4\u6362\uff0c\u5373\u53ef\u5f97\u5230\u4e00\u4e2a\u5168\u9519\u4f4d\u6392\u5217\u60c5\u51b5\u3002 \u2003\u2003\u5176\u4ed6\u60c5\u51b5\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u901a\u8fc7\u4e00\u6b21\u64cd\u4f5c\u6765\u628a\u5b83\u53d8\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u9519\u6392\u3002 \u9012\u63a8\u5f0f \u00b6 f(n)=(n-1)(f(n-1)+f(n-2)) f(n)=(n-1)(f(n-1)+f(n-2)) \u5176\u4e2d\uff0c f(1)=0, f(2)=1 f(1)=0, f(2)=1 \u3002 \u516c\u5f0f \u00b6 f_n=n!(1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}) f_n=n!(1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}) \u601d\u8003 \u00b6 \u90e8\u5206\u9519\u6392\uff08\u6070\u597d\u6709 k k \u4e2a\u62ff\u9519\uff09\u600e\u4e48\u529e\uff1f","title":"\u6570\u8bba"},{"location":"math/number-theory/#_1","text":"","title":"\u8d28\u6570"},{"location":"math/number-theory/#-prime-gap","text":"The first 60 prime gaps are: 1, 2, 2, 4, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 14, 4, 6, 2, 10, 2, 6, 6, 4, 6, 6, 2, 10, 2, 4, 2, 12, 12, 4, 2, 4, 6, 2, 10, 6, 6, 6, 2, 6, 4, 2 \u6709\u65e0\u7a77\u5bf9\u7d20\u6570\uff0c\u4e4b\u95f4\u5b58\u5728\u7740\u4e00\u5b9a\u7684\u95f4\u9694\u3002\u95f4\u9694\u4ece\u88ab\u8bc1\u660e\u4e3a7000\u4e07\u4ee5\u5185\uff0c\u4e00\u76f4\u5230\u5982\u4eca\u7684246\u3002\u5982\u679c\u8be5\u5e38\u6570\u6539\u8fdb\u52302\uff0c\u76f8\u5f53\u4e8e\u8bc1\u660e\u5b6a\u751f\u7d20\u6570\u731c\u60f3 \u7d20\u6570\u4e4b\u95f4\u95f4\u9694\u53ef\u4ee5\u6709\u591a\u8fdc\uff0c The 80 known maximal prime gaps","title":"\u7d20\u6570\u95f4\u9694-Prime gap"},{"location":"math/number-theory/#-prime-number-theorem","text":"\u8d28\u6570\u5206\u5e03\u5bc6\u5ea6 \u4e0d\u8d85\u8fc7x\u7684\u8d28\u6570\u7684\u603b\u6570\u03c0(x)\u8fd1\u4f3c\u4e8ex/ln(x) \u03c0(2)=1\uff0c\u03c0(3.5)=2\uff0c\u03c0(10)=4","title":"\u7d20\u6570\u5b9a\u7406-Prime Number Theorem"},{"location":"math/number-theory/#_2","text":"\u6c42 1 1 \u5230 n n \u4e4b\u95f4\u5185\u7684\u6240\u6709\u7d20\u6570 \u65b9\u6cd5 \u65f6\u95f4\u590d\u6742\u5ea6 sqrt(n) sqrt(n) \u7684\u5224\u522b O(n*sqrt(n)) O(n*sqrt(n)) \u666e\u901a\u7b5b / \u57c3\u6c0f\u7b5b\u6cd5 O(nloglogn) O(nloglogn) \u7ebf\u6027\u7b5b / \u6b27\u62c9\u7b5b\u6cd5 O(n) O(n)","title":"\u7d20\u6570\u7b5b\u6cd5"},{"location":"math/number-theory/#-miller-rabin","text":"\u54e5\u5fb7\u5df4\u8d6b\u731c\u60f3\uff1a\u4efb\u4f55\u5927\u4e8e2\u7684\u5076\u6570\u90fd\u80fd\u591f\u5199\u6210\u4e24\u4e2a\u8d28\u6570\u76f8\u52a0\u7684\u5f62\u5f0f \u5f53\u9898\u76ee\u7ed9\u51fa\u7684\u5076\u6570\u8fbe\u5230 10^{18} 10^{18} \uff0c\u6b64\u65f6\u7684\u8d28\u6570\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u7528\u4e0a\u8ff0\u7684\u7b5b\u6cd5\u53ef\u80fd\u4f1a\u8d85\u65f6\uff0c\u7528Miller Rabin\u5feb\u901f\u5224\u65ad\u4e00\u4e2a <2^{63} <2^{63} \u7684\u6570\u662f\u4e0d\u662f\u7d20\u6570 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(klog_2(n)) O(klog_2(n)) \uff0c n n \u4e3a\u68c0\u6d4b\u7684\u6570\u503c\uff0c k k \u4e3a\u81ea\u5df1\u8bbe\u5b9a\u7684\u68c0\u6d4b\u7684\u6b21\u6570 \u4e0d\u786e\u5b9a\u7b97\u6cd5\uff0c\u5355\u6b21\u6d4b\u8bd5\u6709\u4e0d\u8d85\u8fc7 \\frac{1}{4} \\frac{1}{4} \u7684\u6982\u7387\u4f1a\u5c06\u4e00\u4e2a\u5408\u6570\u8bef\u5224\u4e3a\u4e00\u4e2a\u7d20\u6570","title":"\u7d20\u6570\u6d4b\u8bd5-Miller Rabin"},{"location":"math/number-theory/#_3","text":"\u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f0<a<p\uff0c\u6709a^{p\u22121}\u22611(modp) \u8d39\u9a6c\u5c0f\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f0<a<p\uff0c\u6709a^{p\u22121}\u22611(modp) \u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u4e14x^2\u22611(modp)\uff0c\u90a3\u4e48x\u22611 (modp)\u548cx\u2261p\u22121(modp)\u4e2d\u7684\u4e00\u4e2a\u6210\u7acb \u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\uff1a\u82e5p\u662f\u8d28\u6570\uff0c\u4e14x^2\u22611(modp)\uff0c\u90a3\u4e48x\u22611 (modp)\u548cx\u2261p\u22121(modp)\u4e2d\u7684\u4e00\u4e2a\u6210\u7acb","title":"\u4f9d\u636e"},{"location":"math/number-theory/#_4","text":"\u5076\u6570\u30010\u30011\u30012\u76f4\u63a5\u5224\u65ad \u5047\u8bbe\u8981\u6d4b\u8bd5\u7684\u6570\u4e3a n n \uff0c\u9009\u53d6\u6574\u6570 r r \u548c\u5947\u6570 d d \uff0c\u6ee1\u8db3 n-1=2^rd n-1=2^rd \u9009\u53d6 a \\in (1,...,n-1) a \\in (1,...,n-1) \u5982\u679c a^d=1(modn) a^d=1(modn) \u6216\u8005 a^d=n-1(modn) a^d=n-1(modn) \uff0c\u5373\u6ee1\u8db3\u4e8c\u6b21\u63a2\u6d4b\u5b9a\u7406\uff0c\u5219\u8c03\u56deStep 3\u7ee7\u7eed\u9a8c\u8bc1 \u5bf9\u4e8e i=0,...,r-1 i=0,...,r-1 \uff0c\u9a8c\u8bc1 a^{2^id} a^{2^id} \u662f\u5426\u6ee1\u8db3 a^{2^id}=n-1(modn) a^{2^id}=n-1(modn) \uff0c\u6ee1\u8db3\u5219\u8df3\u56deStep 3\u7ee7\u7eed\u9a8c\u8bc1\uff0c\u4e0d\u6ee1\u8db3\u5219 n n \u4e3a\u5408\u6570 \u7ecf\u8fc7 k k \u6b21\u9a8c\u8bc1\u540e\uff0c n n \u53ef\u80fd\u662f\u7d20\u6570 \u5b9e\u9a8c\u7684\u4f2a\u7801\u5982\u4e0b\u6240\u793a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Input #1: n > 3, an odd integer to be tested for primality Input #2: k, the number of rounds of testing to perform Output: \u201ccomposite\u201d if n is found to be composite, \u201cprobably prime\u201d otherwise write n as 2^r\u00b7d + 1 with d odd (by factoring out powers of 2 from n \u2212 1) WitnessLoop: repeat k times: pick a random integer a in the range [2, n \u2212 2] x \u2190 a^d mod n if x = 1 or x = n \u2212 1 then continue WitnessLoop repeat r \u2212 1 times: x \u2190 x^2 mod n if x = n \u2212 1 then continue WitnessLoop return \u201ccomposite\u201d return \u201cprobably prime\u201d video tutorial","title":"\u7b97\u6cd5\u8fc7\u7a0b"},{"location":"math/number-theory/#miller-rabin","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 typedef unsigned long long ll ; //typedef long long ll; //ll*ll\u53ef\u80fd\u4f1a\u6ea2\u51fa\uff0c\u6240\u4ee5\u4e58\u6cd5\u5316\u52a0\u6cd5 /* ************************************************* * Miller_Rabin \u7b97\u6cd5\u8fdb\u884c\u7d20\u6570\u6d4b\u8bd5 * \u901f\u5ea6\u5feb\u53ef\u4ee5\u5224\u65ad\u4e00\u4e2a < 2^63 \u7684\u6570\u662f\u4e0d\u662f\u7d20\u6570 * **************************************************/ #include <time.h> #include <stdlib.h> const int S = 8 ; //\u968f\u673a\u7b97\u6cd5\u5224\u5b9a\u6b21\u6570\u4e00\u822c 8\uff5e10 \u5c31\u591f\u4e86 // \u8ba1\u7b97 ret = (a*b)%c a,b,c < 2^63 ll mult_mod ( ll a , ll b , ll c ){ a %= c ; b %= c ; ll ret = 0 ; ll tmp = a ; while ( b ){ if ( b & 1 ){ ret += tmp ; if ( ret > c ) ret -= c ; //\u76f4\u63a5\u53d6\u6a21\u6162\u5f97\u591a } tmp <<= 1 ; if ( tmp > c ) tmp -= c ; b >>= 1 ; } return ret ; } // \u8ba1\u7b97 ret = (a^n)%mod ll pow_mod ( ll a , ll n , ll mod ){ ll ret = 1 ; ll tmp = a % mod ; while ( n ){ if ( n & 1 ) ret = mult_mod ( ret , tmp , mod ); tmp = mult_mod ( tmp , tmp , mod ); n >>= 1 ; } return ret ; } // \u901a\u8fc7 a^(n-1)=1(modn)\u6765\u5224\u65ad n \u662f\u4e0d\u662f\u7d20\u6570 // n - 1 = x * (2^t) // \u4e2d\u95f4\u4f7f\u7528\u4e8c\u6b21\u5224\u65ad // \u662f\u5408\u6570\u8fd4\u56de true, \u4e0d\u4e00\u5b9a\u662f\u5408\u6570\u8fd4\u56de false bool check ( ll a , ll n , ll x , ll t ){ ll ret = pow_mod ( a , x , n ); ll last = ret ; for ( int i = 1 ; i <= t ; i ++ ){ ret = mult_mod ( ret , ret , n ); if ( ret == 1 && last != 1 && last != n -1 ) return true ; //\u5408\u6570 last = ret ; } if ( ret != 1 ) return true ; // \u8d39\u9a6c\u5c0f\u5b9a\u7406 else return false ; } //************************************************** // Miller_Rabin \u7b97\u6cd5 // \u662f\u7d20\u6570\u8fd4\u56de true,(\u53ef\u80fd\u662f\u4f2a\u7d20\u6570) // \u4e0d\u662f\u7d20\u6570\u8fd4\u56de false //************************************************** bool Miller_Rabin ( ll n ){ if ( n < 2 ) return false ; if ( n == 2 ) return true ; if ( ( n & 1 ) == 0 ) return false ; //\u5076\u6570 ll x = n - 1 ; ll t = 0 ; while ( ( x & 1 ) == 0 ){ x >>= 1 ; t ++ ;} srand ( time ( NULL )); /* *************** */ for ( int i = 0 ; i < S ; i ++ ){ ll a = rand () % ( n -1 ) + 1 ; if ( check ( a , n , x , t ) ) return false ; } return true ; }","title":"Miller Rabin\u6a21\u677f"},{"location":"math/number-theory/#-pollard-rho","text":"O(n^{\\frac{1}{4}}) O(n^{\\frac{1}{4}}) \u7684\u671f\u671b\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u8ba1\u7b97\u5408\u6570 n n \u7684\u67d0\u4e2a\u975e\u5e73\u51e1\u56e0\u5b50(\u5e73\u51e1\u56e0\u5b50\u6307 1 1 \u548c n n \uff0c\u975e\u5e73\u51e1\u56e0\u5b50\u6307 x \\in [2,n-1]\uff0cn mod x=0 x \\in [2,n-1]\uff0cn mod x=0 ) \u8bd5\u9664\u6cd5\uff1a n n \u7684\u56e0\u6570\u5bf9\u79f0\u5206\u5e03\uff0c\u904d\u5386\u533a\u95f4 [1,\\sqrt N] [1,\\sqrt N] \uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(\\sqrt N) O(\\sqrt N) \u4e0d\u76f4\u63a5\u5bfb\u627e\u56e0\u5b50\uff0c\u800c\u662f\u5bfb\u627e\u56e0\u5b50\u7684\u500d\u6570\uff0c\u7136\u540e\u901a\u8fc7GCD\u627e\u5230\u56e0\u5b50\u672c\u8eab","title":"\u5927\u6570\u7684\u8d28\u56e0\u5b50\u5206\u89e3-Pollard-Rho"},{"location":"math/number-theory/#_5","text":"\u5bf9\u4e8e N\u2a7e10^{18} N\u2a7e10^{18} \uff0c\u4f7f\u7528 \u968f\u673a\u7b97\u6cd5 -\u731c\u56e0\u6570 \u7ec4\u5408\u968f\u673a\u91c7\u6837-\u751f\u65e5\u6096\u8bba\uff1a\u6ee1\u8db3\u7b54\u6848\u7684\u7ec4\u5408\u6bd4\u5355\u4e2a\u4e2a\u4f53\u8981\u591a\u4e00\u4e9b \u5047\u5982\u4e00\u4e2a\u73ed\u4e0a\u6709 k k \u4e2a\u4eba\uff0c\u5982\u679c\u627e\u5230\u4e00\u4e2a\u4eba\u7684\u751f\u65e5\u662fx\u6708x\u65e5\uff0c\u8fd9\u4e2a\u6982\u7387\u4f1a\u76f8\u5f53\u4f4e\uff1b\u5982\u679c\u60f3\u627e\u4e24\u4e2a\u751f\u65e5\u76f8\u540c\uff0c\u5f53 k=23 k=23 \uff0c\u4e24\u4e2a\u4eba\u5728\u540c\u4e00\u5929\u751f\u65e5\u7684\u6982\u7387\u81f3\u5c11\u6709 50\\% 50\\% \uff0c k=60 k=60 \u65f6\uff0c\u751f\u65e5\u6709\u91cd\u590d\u7684\u73b0\u8c61\u7684\u6982\u7387 \\text{P}(k) \u22480.9999 \\text{P}(k) \u22480.9999 \u6700\u5927\u516c\u7ea6\u6570\u4e00\u5b9a\u662f\u67d0\u4e2a\u6570\u7684\u7ea6\u6570\u3002\u901a\u8fc7\u9009\u62e9\u9002\u5f53\u7684 k k \u4f7f\u5f97 \\gcd(k,n)>1 \\gcd(k,n)>1 \uff0c\u5219\u6c42\u5f97\u7684 \\gcd(k,n) \\gcd(k,n) \u662f n n \u7684\u7ea6\u6570\u3002\u5219\u9009\u53d6\u4e00\u7ec4\u6570 x_1,x_2,x_3,...x_n x_1,x_2,x_3,...x_n \uff0c\u82e5\u6709 gcd(|x_i-x_j|,n)>1 gcd(|x_i-x_j|,n)>1 \uff0c\u5219\u79f0 gcd(|x_i-x_j|,n) gcd(|x_i-x_j|,n) \u662f n n \u7684\u4e00\u4e2a\u56e0\u5b50\u3002 \u6784\u9020\u4e00\u4e2a \u4f2a\u968f\u673a\u6570\u5e8f\u5217 \uff0c\u7136\u540e\u53d6\u76f8\u90bb\u7684\u4e24\u9879\u6765\u6c42gcd\u3002Pollard\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u51fd\u6570: f(x)=(x^2+c)\\mod N f(x)=(x^2+c)\\mod N \u5176\u4e2dc\u662f\u4e00\u4e2a\u968f\u673a\u7684\u5e38\u6570\u3002\u9009\u53d6 x_1 x_1 \uff0c\u4ee4 x_2=f(x_1),x_3=f(x_2),...,x_i=f(x_{i-1}) x_2=f(x_1),x_3=f(x_2),...,x_i=f(x_{i-1}) Floyd\u5224\u5708\u3002\u5728\u4e00\u5b9a\u8303\u56f4\u5185\uff0c\u8fd9\u4e2a\u6570\u5217\u662f\u968f\u673a\u7684\uff1b\u4f46\u4e5f\u6709\u6b7b\u5faa\u73af\u7684\u60c5\u51b5\u3002\u9f9f\u5154\u8d5b\u8dd1\uff1a\u5154\u5b50\u6bd4\u4e4c\u9f9f\u5feb\u4e00\u500d\uff0c\u540c\u8d77\u70b9\u540c\u65f6\u5f00\u59cb\uff0c\u5f53\u5154\u5b50\u201c\u8ffd\u4e0a\u201d\u4e4c\u9f9f\u65f6\uff0c\u5154\u5b50\u4e00\u5b9a\u8dd1\u4e86\u521a\u597d\u4e00\u5708\u3002 brent\u5224\u73af(\u66f4\u9ad8\u6548)","title":"\u601d\u8def"},{"location":"math/number-theory/#kuangbin","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 //************************************************** // Miller_Rabin \u7b97\u6cd5 // \u662f\u7d20\u6570\u8fd4\u56de true,(\u53ef\u80fd\u662f\u4f2a\u7d20\u6570) // \u4e0d\u662f\u7d20\u6570\u8fd4\u56de false //************************************************** bool Miller_Rabin ( ll n ){ if ( n < 2 ) return false ; if ( n == 2 ) return true ; if ( ( n & 1 ) == 0 ) return false ; //\u5076\u6570 ll x = n - 1 ; ll t = 0 ; while ( ( x & 1 ) == 0 ){ x >>= 1 ; t ++ ;} srand ( time ( NULL )); /* *************** */ for ( int i = 0 ; i < S ; i ++ ){ ll a = rand () % ( n -1 ) + 1 ; if ( check ( a , n , x , t ) ) return false ; } return true ; } //********************************************** // pollard_rho \u7b97\u6cd5\u8fdb\u884c\u8d28\u56e0\u7d20\u5206\u89e3 //********************************************* ll factor [ 100 ]; //\u8d28\u56e0\u7d20\u5206\u89e3\u7ed3\u679c\uff08\u521a\u8fd4\u56de\u65f6\u65f6\u65e0\u5e8f\u7684\uff09 int tol ; //\u8d28\u56e0\u7d20\u7684\u4e2a\u6570\uff0c\u7f16\u53f7 0\uff5etol-1 ll gcd ( ll a , ll b ){ ll t ; while ( b ){ t = a ; a = b ; b = t % b ; } if ( a >= 0 ) return a ; else return - a ; } //\u627e\u51fa\u4e00\u4e2a\u56e0\u5b50 ll pollard_rho ( ll x , ll c ){ ll i = 1 , k = 2 ; srand ( time ( NULL )); ll x0 = rand () % ( x -1 ) + 1 ; ll y = x0 ; while ( 1 ){ i ++ ; x0 = ( mult_mod ( x0 , x0 , x ) + c ) % x ; //\u4e0d\u65ad\u8c03\u6574x2 ll d = gcd ( y - x0 , x ); if ( d != 1 && d != x ) return d ; //\u627e\u5230\u56e0\u5b50\uff0c\u8fd4\u56de if ( y == x0 ) return x ; //\u5224\u5708 \u51fa\u73b0\u5faa\u73af\uff0c\u8fd4\u56de if ( i == k ){ y = x0 ; k += k ;} } } // \u5bf9 n \u8fdb\u884c\u7d20\u56e0\u5b50\u5206\u89e3\uff0c\u5b58\u5165 factor. k \u8bbe\u7f6e\u4e3a 107 \u5de6\u53f3\u5373\u53ef // \u5982\u679cn \u672c\u8eab\u5c31\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5c06 n \u5b58\u653e\u5728 factor \u4fbf\u53ef\u7ed3\u675f\u5e76\u8fd4\u56de // \u5982\u679c n \u4e0d\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u901a\u8fc7 pollard_rho()\u51fd\u6570 \u627e\u5230 n \u7684\u4e00\u4e2a\u56e0\u5b50 p(\u4e0d\u4e00\u5b9a\u662f\u7d20\u56e0\u5b50)\uff0c\u9012\u5f52 findFac(p)\u548c findFac(n/p) void findfac ( ll n , int k ){ if ( n == 1 ) return ; //\u9012\u5f52\u51fa\u53e3 if ( Miller_Rabin ( n )) { factor [ tol ++ ] = n ; return ; } ll p = n ; int c = k ; //\u503c\u53d8\u5316\uff0c\u9632\u6b62\u6b7b\u5faa\u73af while ( p >= n ) // \u6539\u53d8\u5e38\u6570c\uff0c\u4e0d\u65ad\u627e\u56e0\u5b50\uff0c\u8fd4\u56den\u8bf4\u660e\u6ca1\u627e\u5230 p = pollard_rho ( p , c -- ); findfac ( p , k ); findfac ( n / p , k ); } \u6d1b\u8c37 P4718\u3010\u6a21\u677f\u3011Pollard-Rho\u7b97\u6cd5 TLE-\u9898\u89e3\u7684\u535a\u5ba2\u4e2d\u6709\u4e00\u6b65\u6b65\u4f18\u5316\u7684\u8fc7\u7a0b","title":"kuangbin\u7684\u6a21\u677f"},{"location":"math/number-theory/#_6","text":"","title":"\u6b27\u62c9\u964d\u5e42"},{"location":"math/number-theory/#_7","text":"\u7ed9\u4e09\u4e2a\u6b63\u6574\u6570\uff0c a,m,b a,m,b \uff0c\u9700\u8981\u6c42\uff1a a^b mod m a^b mod m \u6570\u636e\u8303\u56f4\uff1a 1\\le a \\le 10^9\uff0c1\\le b \\le 10^{20000000}\uff0c1\\le m \\le 10^8 1\\le a \\le 10^9\uff0c1\\le b \\le 10^{20000000}\uff0c1\\le m \\le 10^8 \u6307\u6570\u7206\u70b8","title":"\u80cc\u666f"},{"location":"math/number-theory/#_8","text":"\u6b27\u62c9\u5b9a\u7406\uff1a a^{\\varphi(p)}\u22611 \\ mod \\ p\uff0ca\u548cp\u4e92\u8d28 a^{\\varphi(p)}\u22611 \\ mod \\ p\uff0ca\u548cp\u4e92\u8d28 \u62d3\u5c55\u6b27\u62c9\u964d\u5e42 a^b\\equiv \\begin{cases} a^{b\\bmod\\varphi(p)},&\\gcd(a,p)=1\\\\ a^b,&\\gcd(a,p)\\ne1,b<\\varphi(p)\\\\ a^{b\\bmod\\varphi(p)+\\varphi(p)},&\\gcd(a,p)\\ne1,b\\ge\\varphi(p) \\end{cases} \\pmod p a^b\\equiv \\begin{cases} a^{b\\bmod\\varphi(p)},&\\gcd(a,p)=1\\\\ a^b,&\\gcd(a,p)\\ne1,b<\\varphi(p)\\\\ a^{b\\bmod\\varphi(p)+\\varphi(p)},&\\gcd(a,p)\\ne1,b\\ge\\varphi(p) \\end{cases} \\pmod p \u5047\u8bbe k=\\frac{b}{\\varphi(p)},h=bmod\\varphi(p) k=\\frac{b}{\\varphi(p)},h=bmod\\varphi(p) \uff0c\u5219 a^b=a^{k*\\varphi(p)+h}=(a^{\\varphi(p)})^k*a^h=a^h(modp) a^b=a^{k*\\varphi(p)+h}=(a^{\\varphi(p)})^k*a^h=a^h(modp) \u6b27\u62c9\u964d\u5e42\u516c\u5f0f\u7684\u8bc1\u660e","title":"\u7406\u8bba\u4f9d\u636e"},{"location":"math/number-theory/#_9","text":"\u6c42\u5355\u4e2a\u6570\u7684\u6b27\u62c9\u51fd\u6570 1 2 3 4 5 6 7 8 9 10 11 long long eular ( long long n ){ long long ans = n ; for ( int i = 2 ; i * i <= n ; i ++ ){ if ( n % i == 0 ){ ans -= ans / i ; while ( n % i == 0 ) n /= i ; } } if ( n > 1 ) ans \u2212 = ans / n ; return ans ; } \u62d3\u5c55\u6b27\u62c9\u51fd\u6570 \u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8bfb\u5165\u5927\u6570\uff0c\u5904\u7406\u5f97\u5230 bmod\\varphi(p) bmod\\varphi(p) \u9700\u8981\u5224\u65ad b b \u548c \\varphi(p) \\varphi(p) \u7684\u5927\u5c0f\uff0c\u5426\u5219\u4f1a\u51fa\u9519 \u6d1b\u8c37 P5091 \u6a21\u677f\u9898 1 2 3 4 5 6 7 8 9 // char b[maxn] ll ans = 0 ; c = eular ( p ); ll len = strlen ( b ); for ( ll i = 0 ; i < len ; i ++ ) ans = ( ans * 10 + b [ i ] - '0' ) % c ; ans += p ; // \u5feb\u901f\u5e42\u8ba1\u7b97 a\u662f\u5e95\u6570\uff0cans\u662f\u6307\u6570\uff0cp\u662f\u6a21\u6570 qPow ( a , ans , p );","title":"\u4ee3\u7801\u6a21\u677f"},{"location":"math/number-theory/#_10","text":"\u5bf9\u4e8e\u8d28\u6570p\uff0c\\varphi(p)=p-1 \u5bf9\u4e8e\u8d28\u6570p\uff0c\\varphi(p)=p-1 \\sum_{d|n}\\varphi(d)=n\\quad\uff0c\u5305\u62ec1\u548cn\u672c\u8eab \\sum_{d|n}\\varphi(d)=n\\quad\uff0c\u5305\u62ec1\u548cn\u672c\u8eab \\sum_{gcd(d,n)==1}d=\\varphi(n)*n/2 \\sum_{gcd(d,n)==1}d=\\varphi(n)*n/2 \\sum_{i=1}^{n-1}gcd(i,n)=\\sum_{d|n}d\\varphi(n|d) \\sum_{i=1}^{n-1}gcd(i,n)=\\sum_{d|n}d\\varphi(n|d) \u82e5p\u4e3a\u8d28\u6570\uff0cn=p^k,\\varphi(n)=p^k-p^{k-1} \u82e5p\u4e3a\u8d28\u6570\uff0cn=p^k,\\varphi(n)=p^k-p^{k-1} \u79ef\u6027\u6027\u8d28\uff1a\u82e5m,n\u4e92\u8d28\uff0c\\varphi(m*n)=\\varphi(m)*\\varphi(n) \u79ef\u6027\u6027\u8d28\uff1a\u82e5m,n\u4e92\u8d28\uff0c\\varphi(m*n)=\\varphi(m)*\\varphi(n)","title":"\u6b27\u62c9\u51fd\u6570\u5e38\u7528\u6027\u8d28\u548c\u516c\u5f0f"},{"location":"math/number-theory/#rsa","text":"","title":"RSA\uff1a\u516c\u94a5\u5bc6\u7801\u7b97\u6cd5"},{"location":"math/number-theory/#_11","text":"\u968f\u673a\u9009\u62e9\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u8d28\u6570p\u548cq \u968f\u673a\u9009\u62e9\u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u8d28\u6570p\u548cq \u8ba1\u7b97p\u548cq\u7684\u4e58\u79efn \u8ba1\u7b97p\u548cq\u7684\u4e58\u79efn \u8ba1\u7b97n\u7684\u6b27\u62c9\u51fd\u6570\u03c6(n)=(p-1)(q-1) \u8ba1\u7b97n\u7684\u6b27\u62c9\u51fd\u6570\u03c6(n)=(p-1)(q-1) \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6574\u6570e\uff0c\u6ee1\u8db31<e<\u03c6(n)\uff0c\u4e14e\u4e0e\u03c6(n)\u4e92\u8d28 \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6574\u6570e\uff0c\u6ee1\u8db31<e<\u03c6(n)\uff0c\u4e14e\u4e0e\u03c6(n)\u4e92\u8d28 \u6c42\u51fa\u6574\u6570d\uff0c\u4f7f\u5f97ed \u2261 1 (mod \u03c6(n)) \u6c42\u51fa\u6574\u6570d\uff0c\u4f7f\u5f97ed \u2261 1 (mod \u03c6(n)) (n,e)\u4e3a\u516c\u94a5\uff0cd\u4e3a\u79c1\u94a5 (n,e)\u4e3a\u516c\u94a5\uff0cd\u4e3a\u79c1\u94a5 \u52a0\u5bc6\uff1a\u660e\u6587\u6d88\u606f\u4e3am\uff0c\u6ee1\u8db30<m<n\uff0c\u8ba1\u7b97\u5bc6\u6587c=m^e mod n \u52a0\u5bc6\uff1a\u660e\u6587\u6d88\u606f\u4e3am\uff0c\u6ee1\u8db30<m<n\uff0c\u8ba1\u7b97\u5bc6\u6587c=m^e mod n \u89e3\u5bc6\uff1a\u63a5\u53d7\u5230\u5bc6\u6587\u6d88\u606f\u4e3ac\uff0c\u89e3\u5bc6\u660e\u6587\u6d88\u606fm=c^d mod n \u89e3\u5bc6\uff1a\u63a5\u53d7\u5230\u5bc6\u6587\u6d88\u606f\u4e3ac\uff0c\u89e3\u5bc6\u660e\u6587\u6d88\u606fm=c^d mod n","title":"\u7b97\u6cd5\u6d41\u7a0b"},{"location":"math/number-theory/#_12","text":"\u6c42\u9006\u5143(\u6b27\u62c9\u5b9a\u7406/\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97) + \u5feb\u901f\u5e42 \u82e5(a*x)%mod=1\uff0c\u5219x\u662f\u6b63\u6574\u6570a\u5728\u6a21mod\u4e0b\u7684\u9006\u5143 \u65b9\u6cd5 \u9650\u5b9a \u65f6\u95f4\u590d\u6742\u5ea6 \u7ebf\u6027\u6253\u8868\u6cd5 \u53ea\u8981\u6c42mod\u662f\u8d28\u6570 O(n) \u8d39\u9a6c\u5c0f\u5b9a\u7406 mod\u662f\u8d28\u6570\u4e14\u4e0ea\u4e92\u8d28\uff0c\u5feb\u901f\u5e42\u4f18\u5316 O(log(n)) \u6b27\u62c9\u5b9a\u7406 \u53ea\u8981\u6c42a\u4e0emod\u4e92\u8d28\uff0c\u9700\u8981\u6b27\u62c9\u51fd\u6570\u4e0e\u5feb\u901f\u5e42 O(sqrt(n)+log(n)) \u62d3\u5c55\u6b27\u51e0\u91cc\u5fb7 \u53ea\u8981\u6c42a\u4e0emod\u4e92\u8d28 O(log(n))","title":"\u77e5\u8bc6\u70b9"},{"location":"math/number-theory/#_13","text":"","title":"\u62d3\u5c55\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"math/number-theory/#_14","text":"\u97e9\u4fe1\u70b9\u5175\uff0c\u4e09\u4e2a\u4e09\u4e2a\u4e00\u6392\u5c111\u4e2a\u4eba\uff0c\u4e94\u4e2a\u4e94\u4e2a\u4e00\u6392\u53c8\u5c111\u4e2a\u4eba\uff0c\u4e03\u4e2a\u4e03\u4e2a\u4e00\u6392\u8fd8\u5c111\u4e2a\u4eba \u5bf9\u4e8e\u4e00\u7ec4\u540c\u4f59\u65b9\u7a0b \u5bf9\u4e8e\u4e00\u7ec4\u540c\u4f59\u65b9\u7a0b x\u2261a_1 (mod n_1) x\u2261a_1 (mod n_1) x\u2261a_2 (mod n_2) x\u2261a_2 (mod n_2) ... ... x\u2261a_k (mod n_k) x\u2261a_k (mod n_k) \u6a21\u6570n_1,n_2...n_k\u4e24\u4e24\u4e92\u8d28\uff0c\u6c42\u6700\u5c0f\u7684x \u6a21\u6570n_1,n_2...n_k\u4e24\u4e24\u4e92\u8d28\uff0c\u6c42\u6700\u5c0f\u7684x \u8ba1\u7b97N=n_1\u00d7n_2\u00d7\u22ef\u00d7n_k \u8ba1\u7b97N=n_1\u00d7n_2\u00d7\u22ef\u00d7n_k \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97y_i=\\frac{N}{n_i}=n_1n_2...n_{i-1}n_{i+1}...n_k \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97y_i=\\frac{N}{n_i}=n_1n_2...n_{i-1}n_{i+1}...n_k \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97z_i=y_i^{-1}(modn_i)\uff0c\u5373\u8ba1\u7b97y_i\u5728\u6a21n_i\u4e0b\u7684\u9006\u5143 \u5bf9\u4e8ei=1,2,\u2026,k\uff0c\u8ba1\u7b97z_i=y_i^{-1}(modn_i)\uff0c\u5373\u8ba1\u7b97y_i\u5728\u6a21n_i\u4e0b\u7684\u9006\u5143 x=\\sum_{i=1}^ka_iy_iz_i\uff0c\u6700\u540e\u8ba1\u7b97x=x(modN)\u5f97\u5230\u7ed3\u679c x=\\sum_{i=1}^ka_iy_iz_i\uff0c\u6700\u540e\u8ba1\u7b97x=x(modN)\u5f97\u5230\u7ed3\u679c","title":"\u4e2d\u56fd\u5269\u4f59\u5b9a\u7406"},{"location":"math/number-theory/#_15","text":"","title":"\u6a21\u6570\u4e24\u4e24\u4e0d\u4e92\u8d28"},{"location":"math/number-theory/#_16","text":"\u901a\u8fc7\u5148\u89e3\u51fa\u524d\u4e24\u4e2a\u65b9\u7a0b\u7684\u89e3\uff0c\u5982\u5c06\u524d\u4e24\u4e2a\u65b9\u7a0b \u901a\u8fc7\u5148\u89e3\u51fa\u524d\u4e24\u4e2a\u65b9\u7a0b\u7684\u89e3\uff0c\u5982\u5c06\u524d\u4e24\u4e2a\u65b9\u7a0b x\u2261a_1 (mod n_1)\uff0cx\u2261a_2 (mod n_2)\u5316\u4e3ax\u2261A(mod N) x\u2261a_1 (mod n_1)\uff0cx\u2261a_2 (mod n_2)\u5316\u4e3ax\u2261A(mod N) \u5c06\u6b64\u65b9\u7a0b\u548cx\u2261a_3 (mod n_3) \u5c06\u6b64\u65b9\u7a0b\u548cx\u2261a_3 (mod n_3) \u7ee7\u7eed\u8054\u7acb\u6c42\u89e3\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u65b9\u7a0b\u89e3\u5b8c\u4e3a\u6b62 \u7ee7\u7eed\u8054\u7acb\u6c42\u89e3\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u65b9\u7a0b\u89e3\u5b8c\u4e3a\u6b62 \u6d1b\u8c37 P4777 \u6a21\u677f\u9898","title":"\u601d\u8def"},{"location":"math/number-theory/#_17","text":"x\u2261a_1 (mod n_1) x\u2261a_1 (mod n_1) x\u2261a_2 (mod n_2) x\u2261a_2 (mod n_2) \u53ef\u5316\u4e3a x=a_1+k_1*n_1 \u2460; x=a_2+k_2*n_2; \u53ef\u5316\u4e3a x=a_1+k_1*n_1 \u2460; x=a_2+k_2*n_2; \u6d88x\uff0c\u53ef\u5f97a_1+k_1*n_1=a_2+k_2*n_2 \u6d88x\uff0c\u53ef\u5f97a_1+k_1*n_1=a_2+k_2*n_2 \u79fb\u9879\u5f97\u5230k_1*n_1+(-k_2)*n_2=a_2-a_1 \u79fb\u9879\u5f97\u5230k_1*n_1+(-k_2)*n_2=a_2-a_1 \u4ee4d=a_2-a_1, x=k_1, y=-k_2; \u4ee4d=a_2-a_1, x=k_1, y=-k_2; \u4e0a\u5f0f\u5316\u4e3a x*n_1+y*n_2=d \u2462 \u4e0a\u5f0f\u5316\u4e3a x*n_1+y*n_2=d \u2462 \u4ee4g=gcd(n_1,n_2),\u7528\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u89e3\u7ebf\u6027\u65b9\u7a0b \u4ee4g=gcd(n_1,n_2),\u7528\u62d3\u5c55\u6b27\u51e0\u91cc\u5f97\u89e3\u7ebf\u6027\u65b9\u7a0b (\u6b64\u5904\u6c42\u89e3x_1\uff0cy_1)\uff0cx_1*n_1+y_1*n_2=g (\u6b64\u5904\u6c42\u89e3x_1\uff0cy_1)\uff0cx_1*n_1+y_1*n_2=g \u2462\u5f0f\u53ef\u5316\u4e3a x_1*(d/g)*n_1+y_1*(d/g)*n_2 = g*(d/g) \u2462\u5f0f\u53ef\u5316\u4e3a x_1*(d/g)*n_1+y_1*(d/g)*n_2 = g*(d/g) \u5373x=x_1*(d/g)=k_1 ; y=y_1*(d/g)=-k_2; \u5373x=x_1*(d/g)=k_1 ; y=y_1*(d/g)=-k_2; \u5373k_1=x_1*(d/g); k_2=-y_1*(d/g) \u5373k_1=x_1*(d/g); k_2=-y_1*(d/g) \u4e00\u7ec4\u901a\u89e3\u4e3a k_1=k_1+(n_2/g)*T; k_2=k_2-(n_1/g)*T \u4e00\u7ec4\u901a\u89e3\u4e3a k_1=k_1+(n_2/g)*T; k_2=k_2-(n_1/g)*T \u8981\u6c42\u4f7f\u6240\u6c42\u5f97\u7684\u89e3\u6700\u5c0f\u4e14\u4e3a\u6b63\u6574\u6570\uff0c \u8981\u6c42\u4f7f\u6240\u6c42\u5f97\u7684\u89e3\u6700\u5c0f\u4e14\u4e3a\u6b63\u6574\u6570\uff0c \u5219\u53ef\u4ee5\u6839\u636e k_1\u7684\u901a\u89e3\u5f62\u5f0f\u6c42\u5f97(\u6d88\u6389T\u7684\u5f71\u54cd) \u5219\u53ef\u4ee5\u6839\u636e k_1\u7684\u901a\u89e3\u5f62\u5f0f\u6c42\u5f97(\u6d88\u6389T\u7684\u5f71\u54cd) k_1=(k_1 mod (n_2/g)+(n_2/g)) mod (n_2/g) \u2461\uff0c k_1=(k_1 mod (n_2/g)+(n_2/g)) mod (n_2/g) \u2461\uff0c \u5373k_1=((x_1*(d/g)) mod (n_2/g)+(n_2/g)) mod (n_2/g) \u5373k_1=((x_1*(d/g)) mod (n_2/g)+(n_2/g)) mod (n_2/g) \u5c06\u6c42\u51fa\u7684k_1\u5e26\u5165\u2460\uff0c\u53ef\u5f97x\u7684\u89e3\uff0c \u5c06\u6c42\u51fa\u7684k_1\u5e26\u5165\u2460\uff0c\u53ef\u5f97x\u7684\u89e3\uff0c \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u7684A\uff0cN\u4e3alcm(n1,n2)\uff0c \u4f5c\u4e3a\u4e0b\u4e00\u6b21\u7684A\uff0cN\u4e3alcm(n1,n2)\uff0c \u5373A\u4e3a\u5408\u5e76\u540e\u7684a\uff0cN\u4e3a\u5408\u5e76\u540e\u7684n \u5373A\u4e3a\u5408\u5e76\u540e\u7684a\uff0cN\u4e3a\u5408\u5e76\u540e\u7684n","title":"\u6c42\u89e3\u8fc7\u7a0b"},{"location":"math/number-theory/#_18","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 typedef long long ll ; ll exgcd ( ll a , ll b , ll & x , ll & y ){ if ( a == 0 && b == 0 ) return -1 ; if ( b == 0 ){ x = 1 ; y = 0 ; return a ;} ll d = exgcd ( b , a % b , y , x ); y -= a / b * x ; return d ; } ll excrt (){ ll a1 = b [ 0 ], n1 = a [ 0 ], a2 , n2 , d , x , y , gcd ; //\u4f59\u6570 b[] \u9664\u6570 a[] // \u8fd4\u56de\u7684\u662f\u6700\u5c0f\u975e\u8d1f\u6574\u6570\u89e3\uff0c\u6709\u4e9b\u9898\u76ee\u9700\u8981\u7279\u5224 //\u82e5\u5f53\u4f59\u6570\u4e3a0\u7684\u65f6\u5019 \u9898\u76ee\u8981\u6c42\u6c42\u6b63\u6574\u6570 \u6240\u4ee50\u4e0d\u7b97\u5728\u5185\uff0c\u5e94\u8be5\u52a0\u4e0a\u4e0b\u9762\u7684\u6ce8\u91ca\uff0c\u5373\u4f59\u6570\u7b49\u4e8e\u9664\u6570\uff0c\u540c\u7406\u540e\u9762\u7684\u677f\u5b50 //if(a1==0)a1=a[0] for ( int i = 1 ; i < n ; i ++ ){ a2 = b [ i ]; n2 = a [ i ]; d = a2 - a1 ; gcd = exgcd ( n1 , n2 , x , y ); if ( d % gcd ) return -1 ; x = (( x * d / gcd ) % ( n2 / gcd ) + ( n2 / gcd )) % ( n2 / gcd ); a1 = x * n1 + a1 ; n1 = n1 * n2 / gcd ; } return a1 ; }","title":"\u6a21\u677f[\u4e0d\u552f\u4e00]"},{"location":"math/number-theory/#_19","text":"\u8d39\u9a6c\u5927\u5b9a\u7406\uff1a \u5f53\u6574\u6570n >2\u65f6\uff0c \u5f53\u6574\u6570n >2\u65f6\uff0c \u5173\u4e8ex, y, z\u7684\u65b9\u7a0b x^n + y^n = z^n \u6ca1\u6709\u6b63\u6574\u6570\u89e3 \u5173\u4e8ex, y, z\u7684\u65b9\u7a0b x^n + y^n = z^n \u6ca1\u6709\u6b63\u6574\u6570\u89e3 \u5b9e\u6570\u57df\u4e0d\u53ef\u62c6\u5206\u591a\u9879\u5f0f\uff1a \u4e00\u6b21\u591a\u9879\u5f0f\u548c\u4e8c\u6b21\u591a\u9879\u5f0f(b^2<4ac) \u4e00\u6b21\u591a\u9879\u5f0f\u548c\u4e8c\u6b21\u591a\u9879\u5f0f(b^2<4ac) \u827e\u68ee\u65af\u5766\u56e0\u5224\u522b\u6cd5\uff1a\u6709\u7406\u6570\u57df\u4e0d\u53ef\u7ea6\uff0c\u5373\u4e00\u5b9a\u8981\u6574\u6570\u89e3 \u52fe\u80a1\u6570 \u4efb\u610f\u5927\u4e8e2\u7684\u6574\u6570\u90fd\u53ef\u4ee5\u627e\u51fa\u53e6\u5916\u4e24\u4e2a\u6570\u6784\u6210\u52fe\u80a1\u6570 \u672c\u539f\u52fe\u80a1\u6570 \u56db\u8272\u731c\u60f3 \u5eb7\u5a01\u5e38\u6570 \u65e5\u671f\u8f6c\u5316\u6210\u661f\u671f \u8521\u52d2\u516c\u5f0f \u57fa\u59c6\u62c9\u5c14\u68ee\u8ba1\u7b97\u516c\u5f0f \u65af\u7279\u6797\u516c\u5f0f - \u9636\u4e58","title":"\u5b9a\u7406&amp;\u731c\u60f3&amp;\u516c\u5f0f"},{"location":"math/number-theory/#_20","text":"","title":"\u9ad8\u6b21\u540c\u4f59"},{"location":"math/number-theory/#bsgs","text":"\u7528\u4e8e\u6c42 a^{x} \\equiv b \\pmod{p} a^{x} \\equiv b \\pmod{p} \u9ad8\u6b21\u65b9\u7a0b\u7684\u6700\u5c0f\u6b63\u6574\u6570\u89e3 x x \uff0c\u5176\u4e2d p p \u4e3a\u7d20\u6570\u3002 \u66b4\u529b\uff1f \u590d\u6742\u5ea6 O(\\varphi(p)) O(\\varphi(p)) \u6838\u5fc3\u601d\u60f3 \u7c7b\u4f3c Meet in the middle. \u8bbe x=im-k x=im-k , \u5176\u4e2d 0\\le k\\le m, m=\\lceil \\sqrt p \\rceil 0\\le k\\le m, m=\\lceil \\sqrt p \\rceil \u3002 \u90a3\u4e48\u65b9\u7a0b\u53d8\u4e3a a^{im-k}\\equiv b\\pmod p a^{im-k}\\equiv b\\pmod p \u4e24\u8fb9\u540c\u4e58 a^k a^k a^{im}\\equiv {a^kb}\\pmod p a^{im}\\equiv {a^kb}\\pmod p \u5148\u8ba1\u7b97\u53f3\u8fb9 {a^kb}\\ mod\\ p {a^kb}\\ mod\\ p \u7684\u503c\uff0c\u628a\u4ed6\u653e\u5165\u4e00\u4e2ahash\u8868\u6216\u662fmap\u91cc\u3002\u518d\u8ba1\u7b97\u5de6\u8fb9 a^{im}\\ mod\\ p a^{im}\\ mod\\ p \u7684\u503c\uff0c\u4ece\u5c0f\u5230\u5927\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684i\u503c\uff0c\u518d\u5728hash\u8868(map)\u67e5\u8be2\u3002 \u590d\u6742\u5ea6 O(\\sqrt p) O(\\sqrt p)","title":"BSGS\u7b97\u6cd5"},{"location":"math/number-theory/#_21","text":"","title":"\u77e9\u9635\u4e58\u6cd5"},{"location":"math/number-theory/#_22","text":"\u539f\u7406\u7c7b\u4f3c\u5feb\u901f\u5e42\uff0c\u4e2d\u95f4\u4f7f\u7528\u77e9\u9635\u4e58\u6cd5\u3002 \u65f6\u95f4\u590d\u6742\u5ea6 O(m^3\\cdot logn) O(m^3\\cdot logn) \u77e9\u9635\u5feb\u901f\u5e42\u53ef\u7528\u4e8e\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7b2c n n \u9879\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <bits/stdc++.h> using namespace std ; typedef long long ll ; const int MOD = 10000 ; struct mat { ll a [ 2 ][ 2 ]; }; mat mat_mul ( mat x , mat y ) { mat res ; memset ( res . a , 0 , sizeof ( res . a )); for ( int i = 0 ; i < 2 ; i ++ ) for ( int j = 0 ; j < 2 ; j ++ ) for ( int k = 0 ; k < 2 ; k ++ ) res . a [ i ][ j ] = ( res . a [ i ][ j ] + x . a [ i ][ k ] * y . a [ k ][ j ]) % MOD ; return res ; } void mat_pow ( int n ) { mat c , res ; c . a [ 0 ][ 0 ] = c . a [ 0 ][ 1 ] = c . a [ 1 ][ 0 ] = 1 ; c . a [ 1 ][ 1 ] = 0 ; memset ( res . a , 0 , sizeof ( res . a )); for ( int i = 0 ; i < 2 ; i ++ ) res . a [ i ][ i ] = 1 ; while ( n ) { if ( n & 1 ) res = mat_mul ( res , c ); c = mat_mul ( c , c ); n = n >> 1 ; } printf ( \"%lld \\n \" , res . a [ 0 ][ 1 ]); }","title":"\u77e9\u9635\u5feb\u901f\u5e42"},{"location":"math/number-theory/#_23","text":"","title":"\u9ad8\u65af\u6d88\u5143"},{"location":"math/number-theory/#_24","text":"\u589e\u5e7f\u77e9\u9635\u884c\u521d\u7b49\u884c\u53d8\u6362\u4e3a\u884c\u6700\u7b80\u5f62\uff1b \u8fd8\u539f\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff1b \u6c42\u89e3\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff1b \u8865\u5145\u81ea\u7531\u672a\u77e5\u91cf\uff1b \u8868\u793a\u65b9\u7a0b\u7ec4\u901a\u89e3\u3002","title":"\u539f\u7406"},{"location":"math/number-theory/#_25","text":"\u6bcf\u6b21\u5728\u7b2ck\u884c\u6d88\u5143\u7684\u65f6\u5019\uff0c\u5c06\u7b2ck\u884c\u7684\u5143\u7d20\u4e0e\u62e5\u6709\u7b2ck\u5217\u6700\u5927\u5143\u7d20\u7684\u884c\u8fdb\u884c\u4ea4\u6362\uff0c\u518d\u8fdb\u884c\u6d88\u5143\u6765\u51cf\u5c0f\u8bef\u5dee\u3002","title":"\u5217\u4e3b\u5143\u6d88\u53bb\u6cd5"},{"location":"math/number-theory/#_26","text":"https://blog.csdn.net/lzyws739307453/article/details/89816311","title":"\u5b9e\u73b0"},{"location":"math/number-theory/#_27","text":"","title":"\u5bb9\u65a5\u539f\u7406"},{"location":"math/number-theory/#_28","text":"\u7528\u4e8e\u89e3\u51b3\u6709\u91cd\u53e0\u90e8\u5206\u7684\u8ba1\u6570\u95ee\u9898\uff0c\u53ef\u4ee5\u5148\u4e0d\u8003\u8651\u91cd\u53e0\u90e8\u5206\uff0c\u5c06\u5f97\u5230\u7684\u65b9\u6848\u6570\u7d2f\u52a0\uff0c\u6700\u540e\u518d\u4ece\u7ed3\u679c\u4e2d\u51cf\u53bb\u91cd\u590d\u8ba1\u7b97\u7684\u90e8\u5206\u3002 \u4ece\u96c6\u5408\u7684\u89d2\u5ea6\u6765\u770b\uff1a (\ud835\udc34\u222a\ud835\udc35)=\ud835\udc34+\ud835\udc35\u2212(\ud835\udc34\u2229\ud835\udc35) (\ud835\udc34\u222a\ud835\udc35\u222aC)=\ud835\udc34+\ud835\udc35+\ud835\udc36\u2212(\ud835\udc34\u2229\ud835\udc35)\u2212(\ud835\udc35\u2229C)\u2212(\ud835\udc36\u2229\ud835\udc34)+(\ud835\udc34\u2229\ud835\udc35\u2229\ud835\udc36)","title":"\u5b9a\u4e49"},{"location":"math/number-theory/#_29","text":"","title":"\u9519\u4f4d\u6392\u5217"},{"location":"math/number-theory/#-","text":"n n \u5c01\u4e0d\u540c\u7684\u4fe1\uff0c\u7f16\u53f7\u5206\u522b\u662f 1,2,3,4,5 1,2,3,4,5 \uff0c\u73b0\u5728\u8981\u628a\u8fd9 5 \u5c01\u4fe1\u653e\u5728\u7f16\u53f7 1,2,3,4,5 1,2,3,4,5 \u7684\u4fe1\u5c01\u4e2d\uff0c\u8981\u6c42\u4fe1\u5c01\u7684\u7f16\u53f7\u4e0e\u4fe1\u7684\u7f16\u53f7\u4e0d\u4e00\u6837\u3002\u95ee\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u653e\u7f6e\u65b9\u6cd5\uff1f \u2003\u2003\u5047\u8bbe\u6211\u4eec\u8003\u8651\u5230\u7b2c n n \u4e2a\u4fe1\u5c01\uff0c\u521d\u59cb\u65f6\u6211\u4eec\u6682\u65f6\u628a\u7b2c n \u5c01\u4fe1\u653e\u5728\u7b2c n \u4e2a\u4fe1\u5c01\u4e2d\uff0c\u7136\u540e\u8003\u8651\u4e24\u79cd\u60c5\u51b5\u7684\u9012\u63a8\uff1a \u2003\u20031. \u524d\u9762 n-1 n-1 \u4e2a\u4fe1\u5c01\u5168\u90e8\u88c5\u9519\uff1b \u2003\u20032. \u524d\u9762 n-1 n-1 \u4e2a\u4fe1\u5c01\u6709\u4e00\u4e2a\u6ca1\u6709\u88c5\u9519\u5176\u4f59\u5168\u90e8\u88c5\u9519\u3002 \u2003\u2003\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u524d\u9762 n-1 n-1 \u4e2a\u4fe1\u5c01\u5168\u90e8\u88c5\u9519\uff1a\u56e0\u4e3a\u524d\u9762 n-1 n-1 \u4e2a\u5df2\u7ecf\u5168\u90e8\u88c5\u9519\u4e86\uff0c\u6240\u4ee5\u7b2c n \u5c01\u53ea\u9700\u8981\u4e0e\u524d\u9762\u4efb\u4e00\u4e00\u4e2a\u4f4d\u7f6e\u4ea4\u6362\u5373\u53ef\uff0c\u603b\u5171\u6709 f(n-1)\\cdot (n-1) f(n-1)\\cdot (n-1) \u79cd\u60c5\u51b5\u3002 \u2003\u2003\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u524d\u9762 n-1 n-1 \u4e2a\u4fe1\u5c01\u6709\u4e00\u4e2a\u6ca1\u6709\u88c5\u9519\u5176\u4f59\u5168\u90e8\u88c5\u9519\uff1a\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\u7684\u76ee\u7684\u5728\u4e8e\uff0c\u82e5 n-1 n-1 \u4e2a\u4fe1\u5c01\u4e2d\u5982\u679c\u6709\u4e00\u4e2a\u6ca1\u88c5\u9519\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u90a3\u4e2a\u6ca1\u88c5\u9519\u7684\u4e0e n n \u4ea4\u6362\uff0c\u5373\u53ef\u5f97\u5230\u4e00\u4e2a\u5168\u9519\u4f4d\u6392\u5217\u60c5\u51b5\u3002 \u2003\u2003\u5176\u4ed6\u60c5\u51b5\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u901a\u8fc7\u4e00\u6b21\u64cd\u4f5c\u6765\u628a\u5b83\u53d8\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u9519\u6392\u3002","title":"\u4f2f\u52aa\u5229-\u6b27\u62c9\u88c5\u9519\u4fe1\u5c01\u95ee\u9898"},{"location":"math/number-theory/#_30","text":"f(n)=(n-1)(f(n-1)+f(n-2)) f(n)=(n-1)(f(n-1)+f(n-2)) \u5176\u4e2d\uff0c f(1)=0, f(2)=1 f(1)=0, f(2)=1 \u3002","title":"\u9012\u63a8\u5f0f"},{"location":"math/number-theory/#_31","text":"f_n=n!(1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!}) f_n=n!(1-\\frac{1}{1!}+\\frac{1}{2!}-\\frac{1}{3!}+...+(-1)^n\\frac{1}{n!})","title":"\u516c\u5f0f"},{"location":"math/number-theory/#_32","text":"\u90e8\u5206\u9519\u6392\uff08\u6070\u597d\u6709 k k \u4e2a\u62ff\u9519\uff09\u600e\u4e48\u529e\uff1f","title":"\u601d\u8003"},{"location":"math/simple-math/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a LyuLumos \uff0c YanhuiJessica \uff0c Zhang1933 \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u7d20\u6570\u4e0e\u5408\u6570 \u00b6 \u7d20\u6570(\u8d28\u6570)\uff1a\u9664\u4e86 1 \u548c\u81ea\u8eab\u5916\uff0c\u4e0d\u80fd\u88ab\u5176\u4ed6\u6570\u6574\u9664\u7684\u6b63\u6574\u6570\u3002\u7d20\u6570\u53ea\u6709\u4e24\u4e2a\u56e0\u5b50\u3002 \u5408\u6570\uff1a\u62e5\u6709\u4e24\u4e2a\u4ee5\u4e0a\u56e0\u5b50\u7684\u6b63\u6574\u6570\u3002 1 \u65e2\u4e0d\u662f\u7d20\u6570\u4e5f\u4e0d\u662f\u5408\u6570\u3002 \u8bd5\u9664\u6cd5\u5224\u65ad\u7d20\u6570 \u00b6 O(\\sqrt n) O(\\sqrt n) 1 2 3 4 5 6 7 8 9 10 11 12 int isPrime ( int n ) { int i ; for ( i = 2 ; i <= sqrt ( n ); i ++ ) { if ( n % i == 0 ) // \u5982\u679c\u4e0d\u4e3a\u7d20\u6570\u8fd4\u56de0 \u3000\u3000 { return 0 ; } } return 1 ; // \u53cd\u4e4b\u5219\u8fd4\u56de1 } \u7d20\u6570\u666e\u901a\u7b5b-\u57c3\u62c9\u6258\u65af\u7279\u5c3c(Eratosthenes)\u7b5b\u6cd5 \u00b6 \u57fa\u672c\u601d\u60f3\uff1a\u521d\u59cb\u5c06\u6240\u6709\u5927\u4e8e\u7b49\u4e8e 2 \u7684\u6570\u653e\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u6bcf\u6b21\u7b5b\u9009\u540e\u96c6\u5408\u4e2d\u5269\u4f59\u6700\u5c0f\u7684\u6570\u662f\u8d28\u6570\uff0c\u5c06\u5b83\u7684\u500d\u6570\u53bb\u6389\u3002 \u7b97\u6cd5\u7ed3\u675f\u65f6\uff0c\u6ca1\u6709\u88ab\u7b5b\u53bb\u7684\u6570\u5c31\u662f\u8d28\u6570\u3002\u6bcf\u4e2a\u6570\u8981\u88ab\u81ea\u5df1\u6240\u6709\u7684\u56e0\u5b50\u6807\u8bb0\u4e00\u904d\uff0c\u6240\u4ee5\u666e\u901a\u7b5b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nloglogn) O(nloglogn) 1 2 3 4 5 6 7 8 9 10 11 const int maxn = 1000 ; bool isPrime [ maxn + 5 ]; void getPrime () { memset ( isPrime , true , sizeof ( isPrime )); isPrime [ 1 ] = false ; // \u5982\u679c\u7528\u4e0d\u52301\u4e5f\u53ef\u4ee5\u4e0d\u7528\u5199 for ( int i = 2 ; i <= maxn ; i ++ ) if ( isPrime [ i ]) for ( int j = i ; i * j <= maxn ; j ++ ) isPrime [ i * j ] = false ; } \u7d20\u6570\u7ebf\u6027\u7b5b (\u6570\u8bba\u90e8\u5206\u4f1a\u6d89\u53ca) \u00b6 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u00b6 \u6590\u6ce2\u90a3\u5951\u6570\u5217\uff08The Fibonacci sequence\uff09\u7684\u9012\u63a8\u5f0f\u5982\u4e0b\uff1a F*0 = 0, F_1 = 1, F_n = F*{n-1} + F\\_{n-2} F*0 = 0, F_1 = 1, F_n = F*{n-1} + F\\_{n-2} \u8be5\u6570\u5217\u7684\u524d\u51e0\u9879\u5982\u4e0b\uff1a 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... \u7b80\u5355\u6027\u8d28 \u00b6 \u6590\u6ce2\u90a3\u5951\u6570\u5217\u589e\u957f\u901f\u5ea6\u8d8b\u8fd1\u4e8e 2^n 2^n \u6590\u6ce2\u90a3\u5951\u6570\u5217\u76f8\u90bb\u4e24\u4e2a\u6570\u4e4b\u95f4\u7684\u6bd4\u503c\u8d8b\u8fd1\u4e8e\u9ec4\u91d1\u5206\u5272\u7387 \u524d n n \u9879\u4e4b\u548c\u52a0\u4e00\u7b49\u4e8e\u7b2c n+2 n+2 \u9879 \u4ee5\u6590\u6ce2\u90a3\u5951\u6570\u5217\u76f8\u90bb\u4e24\u9879\u4f5c\u4e3a\u8f93\u5165\u4f1a\u4f7f\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u8fbe\u5230\u6700\u574f\u590d\u6742\u5ea6 \u62d3\u5c55 \u00b6 CUC ACM-Wiki - \u6570\u5217 \u5361\u7279\u5170\u6570 \u00b6 Catalan \u6570\u5b9a\u4e49\u5982\u4e0b\uff1a f_0=1,\\,\\,f_n = \\sum_{i=0}^{n-1}f(i)\\cdot f(n-i-1), n \\in N_+ f_0=1,\\,\\,f_n = \\sum_{i=0}^{n-1}f(i)\\cdot f(n-i-1), n \\in N_+ \u8be5\u6570\u5217\u7684\u524d\u51e0\u9879\u5982\u4e0b\uff1a 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012 ...... 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012 ...... \u9012\u63a8\u516c\u5f0f \u00b6 f(n) = \\frac{1}{n+1}\\tbinom{2n}{n} f(n) = \\frac{1}{n+1}\\tbinom{2n}{n} f(n) = \\tbinom{2n}{n}-\\tbinom{2n}{n-1} f(n) = \\tbinom{2n}{n}-\\tbinom{2n}{n-1} // \u63a8\u8350 f(n) = \\sum_{i=0}^{n-1}f(i)\u00d7f(n-i-1) f(n) = \\sum_{i=0}^{n-1}f(i)\u00d7f(n-i-1) f(n) = \\frac{f(n-1)\u00d7(4n-2)}{n+1} f(n) = \\frac{f(n-1)\u00d7(4n-2)}{n+1} \u5e94\u7528 \u00b6 \u4e8c\u53c9\u6811\u7684\u8ba1\u6570\u95ee\u9898\uff1a\u5df2\u77e5\u4e8c\u53c9\u6811\u6709 n n \u4e2a\u7ed3\u70b9\uff0c\u6c42\u80fd\u6784\u6210\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u4e8c\u53c9\u6811\u3002 \u62ec\u53f7\u5316\u95ee\u9898\uff1a\u4e00\u4e2a\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f\u7531()\u5305\u56f4\uff0c()\u53ef\u4ee5\u5d4c\u5957\u548c\u8fde\u63a5\uff0c\u5982\uff1a(())()\u4e5f\u662f\u5408\u6cd5\u8868\u8fbe\u5f0f\uff0c\u73b0\u7ed9\u51fa n n \u5bf9\u62ec\u53f7\uff0c\u6c42\u53ef\u4ee5\u7ec4\u6210\u7684\u5408\u6cd5\u8868\u8fbe\u5f0f\u7684\u4e2a\u6570\u3002 \u5212\u5206\u95ee\u9898\uff1a\u5c06\u4e00\u4e2a\u51f8 n+2 n+2 \u591a\u8fb9\u5f62\u533a\u57df\u5206\u6210\u4e09\u89d2\u5f62\u533a\u57df\u7684\u65b9\u6cd5\u6570\u3002 \u51fa\u6808\u95ee\u9898\uff1a\u4e00\u4e2a\u6808\u7684\u8fdb\u6808\u5e8f\u5217\u4e3a 1,2,3,..n 1,2,3,..n \uff0c\u6c42\u4e0d\u540c\u7684\u51fa\u6808\u5e8f\u5217\u6709\u591a\u5c11\u79cd\u3002 \u8def\u5f84\u95ee\u9898\uff1a\u5728 n\\cdot n n\\cdot n \u7684\u65b9\u683c\u5730\u56fe\u4e2d\uff0c\u4ece\u4e00\u4e2a\u89d2\u5230\u53e6\u5916\u4e00\u4e2a\u89d2\uff0c\u6c42\u4e0d\u8de8\u8d8a\u5bf9\u89d2\u7ebf\u7684\u8def\u5f84\u6570\u6709\u591a\u5c11\u79cd\u3002 \u63e1\u624b\u95ee\u9898\uff1a 2n 2n \u4e2a\u4eba\u5747\u5300\u5750\u5728\u4e00\u4e2a\u5706\u684c\u8fb9\u4e0a\uff0c\u67d0\u4e2a\u65f6\u523b\u6240\u6709\u4eba\u540c\u65f6\u4e0e\u53e6\u4e00\u4e2a\u4eba\u63e1\u624b\uff0c\u8981\u6c42\u624b\u4e4b\u95f4\u4e0d\u80fd\u4ea4\u53c9\uff0c\u6c42\u5171\u6709\u591a\u5c11\u79cd\u63e1\u624b\u65b9\u6cd5\u3002 \u6574\u6570\u7684\u6574\u9664 \u00b6 \u6700\u5927\u516c\u56e0\u5b50\u4e0e\u8f97\u8f6c\u76f8\u9664\u6cd5 \u00b6 \u5b9a\u74061: \u8bbea,b,c\u662f\u4efb\u610f3\u4e2a\u6574\u6570\uff0c\u82e5 a=bq+r a=bq+r ,\u5219\u6709 (a,b)=(b,r) (a,b)=(b,r) \u3002 \u8bc1\u660e\uff1a\u56e0\u4e3a (a,b)|r,(a,b)|b (a,b)|r,(a,b)|b ,\u4e00\u5b9a\u6709 (a,b)\\leq (b,r) (a,b)\\leq (b,r) \u540c\u7406 (b,r)|a,(b,r)|b (b,r)|a,(b,r)|b \uff0c\u6240\u4ee5 (b,r)\\leq (a,b) (b,r)\\leq (a,b) \u3002 \u6240\u4ee5\u53ef\u5f97 (b,r)=(a,b) (b,r)=(a,b) \u4e8e\u662f\u5c31\u6709\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5(\u8f97\u8f6c\u76f8\u9664\u6cd5)\u3002 \u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5(\u8f97\u8f6c\u76f8\u9664\u6cd5) \u00b6 \u6c42\u4e24\u4e2a\u6570\u7684gcd,\u5faa\u73af\u4f7f\u7528\u5e26\u4f59\u9664\u6cd5\uff0c\u6709\u5982\u4e0b\u7b49\u5f0f\u7ec4\uff1a \\begin{align} a=& q_0b+r_0,0\\leq r_0 < b \\nonumber \\\\ b=& q_1r_0+r_1 ,0\\leq r_1 < r_0 \\nonumber \\\\ r_0=& q_2r_1+r_2 ,0\\leq r_2 < r_1 \\nonumber \\\\ ... \\nonumber \\\\ r_{n-2}=& q_{n}r_{n-1}+r_{n} ,0\\leq r_{n}< r_{n-1} \\nonumber \\\\ r_{n-1}=& q_{n+1}r_n+r_{n+1} ,r_{n+1}=0 \\nonumber \\end{align} \\begin{align} a=& q_0b+r_0,0\\leq r_0 < b \\nonumber \\\\ b=& q_1r_0+r_1 ,0\\leq r_1 < r_0 \\nonumber \\\\ r_0=& q_2r_1+r_2 ,0\\leq r_2 < r_1 \\nonumber \\\\ ... \\nonumber \\\\ r_{n-2}=& q_{n}r_{n-1}+r_{n} ,0\\leq r_{n}< r_{n-1} \\nonumber \\\\ r_{n-1}=& q_{n+1}r_n+r_{n+1} ,r_{n+1}=0 \\nonumber \\end{align} \u56e0\u4e3a\u6709\u5982\u4e0b\u5927\u5c0f\u5173\u7cfb\uff0c\u4f59\u6570\u662f\u4e25\u683c\u9012\u51cf\u7684: $$ b>r_0>r_1>r_2>...\\geq 0 $$ \u518d\u7531\u6700 \u5927\u516c\u56e0\u5b50\u4e0e\u8f97\u8f6c\u76f8\u9664\u6cd5\u5b9a\u74061 \u53ef\u5f97\u7b49\u5f0f\u94fe\uff1a \\begin{align} (a,b)=& \\nonumber\\\\ (b,r_0)=& \\nonumber\\\\ (r_0,r_1)=& \\nonumber\\\\ (r_1,r_2)=& \\nonumber\\\\ ...& \\nonumber\\\\ (r_n,0)=& r_n \\nonumber \\end{align} \\begin{align} (a,b)=& \\nonumber\\\\ (b,r_0)=& \\nonumber\\\\ (r_0,r_1)=& \\nonumber\\\\ (r_1,r_2)=& \\nonumber\\\\ ...& \\nonumber\\\\ (r_n,0)=& r_n \\nonumber \\end{align} \u6700\u540e r_n r_n \u5373\u4e3a\u6240\u6c42\u3002\u5176\u601d\u60f3\u5c31\u662f\u628a\u4e00\u4e2a\u5927\u7684\u95ee\u9898\u8f6c\u5316\u6210\u4e00\u4e2a\u5c0f\u7684\u95ee\u9898\u6765\u6c42\u89e3\u3002 \u6c42gcd\u7684\u4ee3\u7801\uff1a 1 2 3 int gcd ( int a , int b ){ return b == 0 ? a : gcd ( b , a % b ); } \u88f4\u8700\u5b9a\u7406 \u00b6 \u53c8\u79f0\u8d1d\u7956\u5b9a\u7406,\u4efb\u610fa,b\u4e0d\u5168\u4e3a0\u7684\u6574\u6570,\u5b58\u5728\u6574\u6570x,y\uff0c\u4f7f\u5f97: ax+by=(a,b) ax+by=(a,b) \u53ef\u4ee5\u5c06\u6734\u7d20\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u56de\u5e26\u5e26\u51fax,y\u8bc1\u660e\u5176\u6b63\u786e\u6027\u3002\u8fd9\u91cc\u8bf4\u4e0b\u9762\u9012\u5f52\u4ee3\u7801\u6c42\u89e3x,y\u7684\u539f\u7406\u3002 \u8bc1\u660e\uff1a \u8bbe\u6709 $$ ax_0+by_0=(a,b) $$ \u7ee7\u7eed\u4f7f\u7528\u5e26\u4f59\u9664\u6cd5\u53ef\u5f97: $$ bx_1+(a\\%b)y_1=(b,a\\%b) $$ \u7531 \u5927\u516c\u56e0\u5b50\u4e0e\u8f97\u8f6c\u76f8\u9664\u6cd5\u5b9a\u74061 \u53ef\u5f97\uff1a $$ (a,b)=(b,a\\%b) $$ \u4e8e\u662f\u5e26\u5165\u5f97\u5230\uff1a \\begin{align} ax_0+by_0=& bx_1+(a\\%b)y_1 \\\\ =& bx_1+(a-a/b*b)y_1 \\\\ =& ay_1+b(x_1-a/b*y_1) \\end{align} \\begin{align} ax_0+by_0=& bx_1+(a\\%b)y_1 \\\\ =& bx_1+(a-a/b*b)y_1 \\\\ =& ay_1+b(x_1-a/b*y_1) \\end{align} \u4e8e\u662f\u53ef\u5f97\u9012\u63a8\u5173\u7cfb\uff1a x_0=y_1 \\\\ y_0=x_1-a/b*y_1 x_0=y_1 \\\\ y_0=x_1-a/b*y_1 \u6240\u4ee5\u5c31\u53ef\u4ee5\u5728\u7b97gcd\u56de\u6eaf\u7684\u65f6\u5019\u53cd\u5411\u9012\u63a8\uff0c\u5199\u51fa\u5982\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 ll exgcd ( ll a , ll b , ll & x , ll & y ){ if ( a == 0 && b == 0 ) return -1 ; if ( b == 0 ){ x = 1 ; y = 0 ; return a ; } ll ans = exgcd ( b , a % b , y , x ); y -= a / b * x ; return ans ; } \u53d8\u91cfx\u548cy\u4e2d\u5b58\u50a8\u4e86\u65b9\u7a0b a*x+b*y=(a,b) a*x+b*y=(a,b) \u7684\u4e00\u7ec4\u6574\u6570\u89e3;\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662fgcd(a,b),\u82e5\u8fd4\u56de-1,\u5219\u65e0\u89e3; \u540c\u4f59\u5f0f \u00b6 \u5b9a\u4e49\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 m,\u82e5\u7528 m \u5206\u522b\u53bb\u9664\u4e24\u4e2a\u6574\u6570 a\uff0cb \u6240\u5f97\u7684\u4f59\u6570\u76f8\u540c\uff0c\u5219\u79f0 a \u4e0e b \u6a21 m \u540c\u4f59\uff0c\u8bb0\u4e3a: a \\equiv b\\ (mod\\ m) a \\equiv b\\ (mod\\ m) \u5b9a\u7406 1\uff1a\u6574\u6570 a,b \u6a21 m \u540c\u4f59\u7684\u5145\u8981\u6761\u4ef6\u662f m|(a-b) m|(a-b) \u3002 \u8bc1\u660e: \u8bbe a=k_1m+r_a,b=k_2m+r_b,0\\leq r_a,r_b < m a=k_1m+r_a,b=k_2m+r_b,0\\leq r_a,r_b < m \u3002 1.\u8bc1\uff1a\u82e5 a,b \u6a21 m \u540c\u4f59\uff0c\u5219\u53ef\u4ee5\u63a8\u51fa m|(a-b) m|(a-b) \u3002 \u56e0\u4e3a a,b \u6a21 m \u540c\u4f59\uff0c\u5219 r_a=r_b r_a=r_b ,\u4e8e\u662f a-b=(k_1-k_2)m a-b=(k_1-k_2)m ,\u5373 m|(a-b) m|(a-b) 2.\u8bc1\uff1a\u82e5 m|(a-b) m|(a-b) \uff0c\u5219 a,b \u540c\u4f59\u3002 \u56e0\u4e3a m|(a-b) m|(a-b) \uff0c\u5373 m|[(k_1-k_2)m+(r_a-r_b)] m|[(k_1-k_2)m+(r_a-r_b)] ,\u6240\u4ee5 m|(r_a-r_b) m|(r_a-r_b) \u56e0\u4e3a\u6709 -m<r_a-r_b<m -m<r_a-r_b<m ,\u6240\u4ee5\u53ea\u6709 r_a=r_b r_a=r_b \u3002 \u540c\u4f59\u5f0f\u7684\u4e00\u4e9b\u6027\u8d28\uff1a \u00b6 1. a \\equiv b(mod\\ m), b\\equiv c (mod \\ m), \u5219 a\\equiv c (mod \\ m) a \\equiv b(mod\\ m), b\\equiv c (mod \\ m), \u5219 a\\equiv c (mod \\ m) . 2. \u8bbead\\equiv bd(mod\\ m) \u8bbead\\equiv bd(mod\\ m) ,\u82e5 (d,m)=1 (d,m)=1 \uff0c\u5219 a\\equiv b(mod\\ m) a\\equiv b(mod\\ m) \u3002 \u8bc1\u660e: \u6839\u636e\u540c\u4f59\u5f0f\u5b9a\u7406 1, \u6709 m|d(a-b) m|d(a-b) , \u56e0\u4e3a (d,m)=1 (d,m)=1 ,\u5219 m|(a-b) m|(a-b) \u3002 3.\u8bbe a\\equiv b(mod\\ m) a\\equiv b(mod\\ m) ,\u82e5 d \u662f a,b,m \u7684\u516c\u56e0\u5b50\uff0c\u5219 \\frac{a}{d}\\equiv \\frac{b}{d}(mod\\ \\frac{m}{d}) \\frac{a}{d}\\equiv \\frac{b}{d}(mod\\ \\frac{m}{d}) \u3002 \u8bc1\u660e\uff1a \u82e5 a\\equiv b(mod\\ m) a\\equiv b(mod\\ m) ,\u5219 a=m*k+b a=m*k+b ,d \u662f a,b,m \u7684\u516c\u56e0\u5b50,\u6709 \\frac{a}{d}=\\frac{m}{d}*k+\\frac{b}{d} \\frac{a}{d}=\\frac{m}{d}*k+\\frac{b}{d} ,\u6240\u4ee5 \\frac{a}{d}\\equiv \\frac{b}{d}(mod\\ \\frac{m}{d}) \\frac{a}{d}\\equiv \\frac{b}{d}(mod\\ \\frac{m}{d}) \u3002 4.\u82e5 a \\equiv b(mod\\ m_i),i=1,2,...k a \\equiv b(mod\\ m_i),i=1,2,...k \uff0c\u5219 a \\equiv b(mod [m_1,m_2,..m_k]) a \\equiv b(mod [m_1,m_2,..m_k]) \u3002 \u8bc1\u660e\uff1a \u82e5 a\\equiv b(mod\\ m_i) a\\equiv b(mod\\ m_i) ,\u5373 m_i|(a-b),i=1,2..k m_i|(a-b),i=1,2..k ,\u53ef\u4ee5\u63a8\u51fa a-b a-b \u662f m_i m_i \u7684\u516c\u500d\u6570\uff0c\u6240\u4ee5 [m_1,m_2,...m_k]|(a-b) [m_1,m_2,...m_k]|(a-b) \u3002\u6545 a \\equiv b(mod [m_1,m_2,..m_k]) a \\equiv b(mod [m_1,m_2,..m_k]) \u3002 5.\u82e5 a \\equiv b(mod\\ m) a \\equiv b(mod\\ m) ,\u5219 (a,m)=(b,m) (a,m)=(b,m) \u3002 \u8bc1\u660e\uff1a \u82e5 a\\equiv b(mod\\ m) a\\equiv b(mod\\ m) ,\u5219\u5b58\u5728 k \\in Z k \\in Z ,\u4f7f\u5f97 a=km+b a=km+b \u3002\u56e0\u4e3a (a,m)|a (a,m)|a , (a,m)|m (a,m)|m ,\u56e0\u4e3a b=a-km b=a-km ,\u6240\u4ee5\u6709 (a,m)|b (a,m)|b ,\u5373 (a,m) (a,m) \u662f b \u548c m \u7684\u516c\u56e0\u5b50\uff0c\u6240\u4ee5\u6709 (a,m)\\leq (b,m) (a,m)\\leq (b,m) \u3002\u540c\u7406\u53ef\u8bc1 (b,m)\\leq (a,m) (b,m)\\leq (a,m) \u3002\u6240\u4ee5\u5c31\u5f97\u5230 (a,m)=(b,m) (a,m)=(b,m) \u3002 \u540c\u65f6\u4e0a\u9762\u8bc1\u660e\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6700\u5927\u516c\u56e0\u6570\u7684\u7ed3\u8bba\uff1a \u82e5 a=km+b a=km+b ,\u5219 (a,m)=(b,m) (a,m)=(b,m) \u3002 \u5269\u4f59\u7c7b \u00b6 \u5b9a\u4e49 1:\u8bbe m \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u4efb\u4e00\u4e2a\u6574\u6570\u9664\u4ee5 m \u6240\u5f97\u7684\u4f59\u6570\u662f 0\uff0c1\uff0c2\uff0c...m-1 \u4e2d\u7684\u67d0\u4e00\u4e2a\u3002\u7528\u67d0\u4e00\u4e2a\u96c6\u5408\u7b26\u53f7 [i](0\\leq i \\leq m-1) [i](0\\leq i \\leq m-1) \u8868\u793a\u6240\u6709\u6a21 m \u4f59\u6570\u4e3a i \u7684\u96c6\u5408\uff0c\u8be5\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u5f62\u5f0f\u4e3a a=km+i,k\\in Z a=km+i,k\\in Z \u3002\u4efb\u4f55\u4e00\u4e2a\u6574\u6570\u5fc5\u5c5e\u4e8e\u67d0\u4e2a [i] [i] \u3002 Z Z \u7684\u5b50\u96c6\u5408 [i] [i] \u79f0\u4e3a\u6574\u6570\u6a21 m \u7684\u4e00\u4e2a \u5269\u4f59\u7c7b \u3002\u96c6\u5408 [0],[1],...[m-1] [0],[1],...[m-1] \u6784\u6210\u6a21 m \u7684 \u5b8c\u5168\u5269\u4f59\u7c7b \uff0c\u7528 Z_m=\\{[0],[1],...,[m-1]\\} Z_m=\\{[0],[1],...,[m-1]\\} \u8868\u793a,\u901a\u5e38\u7b80\u8bb0\u4e3a Z_m=\\{0,1...,m-1\\} Z_m=\\{0,1...,m-1\\} \u3002 \u5b9a\u4e49 2: \u5982\u679c\u6a21 m \u7684\u4e00\u4e2a\u5269\u4f59\u7c7b\u4e2d\u7684\u6570\u4e0e m \u4e92\u7d20\uff0c\u5c31\u79f0\u8fd9\u4e2a\u5269\u4f59\u7c7b\u4e3a\u4e0e\u6a21 m \u4e92\u7d20\u7684\u5269\u4f59\u7c7b\u3002\u5728\u4e0e m \u4e92\u7d20\u7684\u6240\u6709\u5269\u4f59\u7c7b\u4e2d\uff0c\u5404\u53d6\u4e00\u6570\u6240\u7ec4\u6210\u7684\u96c6\u5408\u53eb\u505a\u6a21 m \u7684\u4e00\u7ec4 \u7f29\u7cfb (\u65e2\u7ea6\u5269\u4f59\u7cfb)\u3002 \u5b9a\u7406 1:\u53ea\u8981\u67d0\u4e2a\u5269\u4f59\u7c7b\u4e2d\u7684\u4e00\u4e2a\u6570\u4e0e m \u4e92\u7d20\uff0c\u5219\u8be5\u5269\u4f59\u7c7b\u7684\u6240\u6709\u5176\u4ed6\u6570\u4e5f\u4e0e m \u4e92\u7d20\u3002 \u8bc1\u660e:\u540c\u4f59\u5f0f\u6027\u8d28 5\u3002 \u5b9a\u7406 2:\u8bbe a_1,a_2,...a_{\\varphi(m)} a_1,a_2,...a_{\\varphi(m)} \u662f\u6a21 m \u7684\u4e00\u7ec4\u7f29\u7cfb\uff0c\u82e5 (k,m)=1 (k,m)=1 ,\u5219 ka_1,ka_2,...ka_{\\varphi(m)} ka_1,ka_2,...ka_{\\varphi(m)} \u4e5f\u662f\u6a21 m \u7684\u4e00\u7ec4\u7f29\u7cfb\u3002 \\varphi(m) \\varphi(m) \u8868\u793a m \u7684\u6b27\u62c9\u51fd\u6570\uff0c\u5b9a\u4e49\u89c1 \u6b27\u62c9\u51fd\u6570\u8282 \u3002 \u8bc1\u660e\uff1a\u56e0\u4e3a (a_i,m)=1,(k,m)=1 (a_i,m)=1,(k,m)=1 \uff0c\u5219 (ka_i,m)=1,1\\leq i \\leq \\varphi(m) (ka_i,m)=1,1\\leq i \\leq \\varphi(m) \u56e0\u4e3a a_i a_i \u4e0e m \u8d28\u56e0\u5b50\u5206\u89e3\u540e\u4e0d\u5305\u542b\u516c\u5171\u7684\u8d28\u56e0\u5b50\uff0c k k \u4e0e m m \u8d28\u56e0\u5b50\u5206\u89e3\u540e\u4e0d\u5305\u542b\u516c\u5171\u7684\u8d28\u56e0\u5b50\uff0c\u6240\u4ee5\u4e58\u8d77\u6765\u8fd8\u662f\u4e0d\u5305\u542b\u516c\u5171\u7684\u8d28\u56e0\u5b50\u3002 \u56e0\u4e3a m\\nmid (a_i-a_j),i\\neq j m\\nmid (a_i-a_j),i\\neq j \u3002\u6709 m\\nmid k(a_i-a_j) m\\nmid k(a_i-a_j) (\u53ef\u4ee5\u7528\u8d28\u56e0\u5b50\u5206\u89e3\u7684\u89d2\u5ea6\u60f3) \u3002\u6240\u4ee5 ka_i \\not\\equiv ka_j(mod\\ m) ka_i \\not\\equiv ka_j(mod\\ m) \u56e0\u4e3a\u4e2a\u6570\u6ca1\u53d8\uff0c\u6a21\u4e0b\u6765\u4e24\u4e24\u4e4b\u95f4\u7ed3\u679c\u4e0d\u76f8\u540c\u4e14gcd\u4e3a1,\u6240\u4ee5 k_{a_1},k_{a_2},..,k_{a_\\varphi(m)} k_{a_1},k_{a_2},..,k_{a_\\varphi(m)} \u662f\u6a21 m \u7684\u4e00\u7ec4\u7f29\u7cfb\u3002 \u5b9a\u74063: \u8bbem\u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb\u4e3a\uff1a a_1,a_2,...a_{m-1} a_1,a_2,...a_{m-1} ,\u82e5 (k,m)=1 (k,m)=1 ,\u5219 ka_1,ka_2,...,ka_{m-1} ka_1,ka_2,...,ka_{m-1} \u4e5f\u662fm\u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb\u3002 \u8bc1\u660e\uff1a \u7528\u5b9a\u74062\u7684\u7b2c\u4e8c\u6b65\u540c\u7406\u8bc1\u660e\u53ef\u5f97\u3002 \u6b27\u62c9\u51fd\u6570 \u00b6 \u5b9a\u4e49 1:\u6b27\u62c9\u51fd\u6570 \\varphi (m) \\varphi (m) \u8868\u793a\u6574\u6570\u5e8f\u5217 0,1,2,...,m-1 \u4e2d\u4e0e m \u4e92\u7d20\u7684\u6570\u7684\u4e2a\u6570\u3002\u89c4\u5b9a \\varphi (1)=1 \\varphi (1)=1 \u3002\u5f53 m \u7d20\u6570\u65f6\uff0c\u663e\u7136\u6709 \\varphi (m)=m-1 \\varphi (m)=m-1 \u3002 \u6b27\u62c9\u5b9a\u7406 \u00b6 \u8bbe m\\in Z^+,(k,m)=1 m\\in Z^+,(k,m)=1 \uff0c\u5219\uff1a k^{\\varphi (m)}\\equiv 1(mod\\ m) k^{\\varphi (m)}\\equiv 1(mod\\ m) \u8bc1\u660e\uff1a\u8bbe\u6574\u6570 a_1,a_2,...a_{\\varphi(m)} a_1,a_2,...a_{\\varphi(m)} \u662f\u6a21 m \u7684\u4e00\u7ec4\u7f29\u7cfb\uff0c\u56e0\u4e3a (k,m)=1 (k,m)=1 ,\u5219\u7531\u5269\u4f59\u7c7b\u5b9a\u7406 2\uff0c\u77e5 ka_1,ka_2..ka_{\\varphi(m)} ka_1,ka_2..ka_{\\varphi(m)} \u4e5f\u662f\u6a21 m \u7684\u4e00\u7ec4\u7f29\u7cfb\u3002 \u6240\u4ee5\uff1a a_1a_2...a_{\\varphi(m)}\\equiv ka_1ka_2...ka_{\\varphi(m)}(mod\\ m) a_1a_2...a_{\\varphi(m)}\\equiv ka_1ka_2...ka_{\\varphi(m)}(mod\\ m) \u7531\u540c\u4f59\u5f0f\u6027\u8d28 2 \u53ef\u5f97\uff1a k^{\\varphi(m)}\\equiv 1(mod\\ m) k^{\\varphi(m)}\\equiv 1(mod\\ m) \u6839\u636e\u6b27\u62c9\u5b9a\u7406\u53ef\u4ee5\u5f97\u5230 \u8d39\u9a6c\u5c0f\u5b9a\u7406 \uff1a \u8d39\u9a6c\u5c0f\u5b9a\u7406 \u00b6 \u6b27\u62c9\u5b9a\u7406\u7279\u6b8a\u60c5\u51b5\uff1a\u82e5 p \u4e3a\u7d20\u6570\uff0c (a,p)=1 (a,p)=1 ,\u5219 a^{p-1}\\equiv 1(mod\\ p) a^{p-1}\\equiv 1(mod\\ p) \u3002 \u53ef\u5f97\u5230:\u82e5 p \u4e3a\u7d20\u6570\uff0c (a,p)=1 (a,p)=1 ,a \u5728\u6a21 p \u4e0b\u7684 \u9006\u5143 \u4e3a a^{p-2}(mod\\ m) a^{p-2}(mod\\ m) \u3002(\u9006\u5143\u5b9a\u4e49\u89c1 \u9006\u5143\u8282 )\u3002 \u6b27\u62c9\u51fd\u6570\u7684\u4e00\u4e9b\u5b9a\u7406\uff1a \u00b6 \u5b9a\u7406\u4e00: \u5982\u679c p \u662f\u8d28\u6570\uff0c\u5e76\u4e14 k \\geq 1 k \\geq 1 \u5219\u6709\uff1a \\varphi(p^k)=p^k-p^{k-1}=p^{k-1}(p-1)=p^k(1-\\frac{1}{p}) \\varphi(p^k)=p^k-p^{k-1}=p^{k-1}(p-1)=p^k(1-\\frac{1}{p}) \u8bc1\u660e\uff1a \u56e0\u4e3a p \u662f\u8d28\u6570\uff0c\u5bf9\u4e8e 1\\leq m\\leq p^k 1\\leq m\\leq p^k \u80fd\u8ba9 gcd(p^k,m)>1 gcd(p^k,m)>1 \u7684 m \u7684\u6761\u4ef6\u53ea\u6709\u8ba9 m \u662f p \u7684\u500d\u6570\uff0c\u4e5f\u5c31\u662f m \\in \\{p,2p,3p,...p^{k-1}p=p^k\\} m \\in \\{p,2p,3p,...p^{k-1}p=p^k\\} \u3002\u8fd9\u6837\u7684\u6570\u4e00\u5171\u6709 p^{k-1} p^{k-1} \u4e2a\u3002\u6240\u4ee5\u5269\u4e0b\u4e92\u7d20\u7684\u5c31\u6709 p^k-p^{k-1} p^k-p^{k-1} \u4e2a\u3002 \u5b9a\u7406\u4e8c\uff1a \u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\u3002\u5982\u679c m,n \u4e92\u7d20\u5373 gcd(n,m)=1 gcd(n,m)=1 \uff0c\u5219\u6709 \\varphi(m)\\varphi(n)=\\varphi(mn) \\varphi(m)\\varphi(n)=\\varphi(mn) \u8bc1\u660e\uff1a \u5c06 0,1...mn-1 0,1...mn-1 \u5199\u6210\u4e0b\u9762\u8fd9\u79cd\u7c7b\u4f3c\u5269\u4f59\u7c7b\u7684\u5f62\u5f0f\uff1a \\begin{matrix} 0 & m & 2m &...& (n-1)m \\\\ 1 & m+1 & 2m+1 &...& (n-1)m+1 \\\\ 2 & m+2 & 2m+2 &...& (n-1)m+2\\\\ ... \\\\ m-1 & 2m-1 & 3m-1& ...& mn-1 \\end{matrix} \\begin{matrix} 0 & m & 2m &...& (n-1)m \\\\ 1 & m+1 & 2m+1 &...& (n-1)m+1 \\\\ 2 & m+2 & 2m+2 &...& (n-1)m+2\\\\ ... \\\\ m-1 & 2m-1 & 3m-1& ...& mn-1 \\end{matrix} \u7531\u5269\u4f59\u7c7b\u5b9a\u7406 1 \u53ef\u77e5\uff0c\u6709 \\varphi(m) \\varphi(m) \u884c\u4e0e m \u4e92\u7d20\u3002\u7136\u540e\u9700\u8981\u8bc1\u8fd9\u4e9b\u884c\u4e2d\u4e0e n \u4e92\u7d20\u7684\u6570\u6709\u591a\u5c11\u3002 \u56e0\u4e3a 0\uff0c1\uff0c2\uff0c...n-1 0\uff0c1\uff0c2\uff0c...n-1 \u662f\u6a21 n \u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb\u3002\u56e0\u4e3a (m,n)=1 (m,n)=1 ,\u7531 \u5269\u4f59\u7c7b\u5b9a\u7406 2 \u7b2c\u4e8c\u6b65\u7684\u8bc1\u660e\u601d\u8def\u53ef\u8bc1 0\uff0cm\uff0c2m...(n-1)m 0\uff0cm\uff0c2m...(n-1)m \u4e5f\u662f\u6a21 n \u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb\u3002 \u56e0\u4e3a 0+a,m+a,2m+a,...,(n-1)m+a,0\\leq a \\leq n-1 0+a,m+a,2m+a,...,(n-1)m+a,0\\leq a \\leq n-1 \u4e5f\u662f\u6a21 n \u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb(\u76f8\u5f53\u4e8e\u6bcf\u4e2a\u6570\u90fd\u5f80\u540e\u5faa\u73af\u504f\u79fb a \u4e2a\u6570)\u3002 \u6240\u4ee5\u5728\u4e0e m \u4e92\u7d20\u7684\u884c(\u540c\u65f6\u4e5f\u662f\u6240\u6709\u7684\u884c)\u4e2d\u6709 \\varphi(n) \\varphi(n) \u4e2a\u6570\u4e0e n \u4e92\u7d20\u3002 \u6240\u4ee5\u5728 nm \u4e2a\u6570\u4e2d\u4e00\u5171\u6709 \\varphi(m)\\varphi(n) \\varphi(m)\\varphi(n) \u4e2a\u6570\u4e0e nm \u4e92\u7d20\u3002\u5f97\u8bc1\u3002 \u5b9a\u7406\u4e09\uff1a \u5c06 n \u8d28\u56e0\u5b50\u5206\u89e3\u5f97\u5230 n=p_1^{a_1}p_2^{a_2}...p_k^{a_k} n=p_1^{a_1}p_2^{a_2}...p_k^{a_k} \uff0c p_i p_i \u4e3a\u8d28\u6570\uff0c a_i a_i \u4e3a\u6b63\u6574\u6570\uff0c\u5219\u6709\uff1a \\varphi(n)=p_1^{a_1-1}(p_1-1)p_2^{a_2-1}(p_2-1)...p_k^{a_k-1}(p_k-1) \\varphi(n)=p_1^{a_1-1}(p_1-1)p_2^{a_2-1}(p_2-1)...p_k^{a_k-1}(p_k-1) \u8bc1\u660e\uff1a\u7531\u6b27\u62c9\u51fd\u6570\u5b9a\u7406\u4e8c\u53ef\u5f97: \\varphi(n)=\\varphi(p_1^{a_1})\\varphi(p_2^{a_2})...\\varphi(p_k^{a_k}) \\varphi(n)=\\varphi(p_1^{a_1})\\varphi(p_2^{a_2})...\\varphi(p_k^{a_k}) \u518d\u7531\u6b27\u62c9\u51fd\u6570\u5b9a\u7406 1 \u628a \\varphi(p_i^{a_i}) \\varphi(p_i^{a_i}) \u5c55\u5f00\u76f8\u4e58\u53ef\u5f97\u4e0a\u8ff0\u7ed3\u8bba\u3002 \u7ebf\u6027\u540c\u4f59\u65b9\u7a0b \u00b6 \u5f62\u5982 ax\\equiv b(mod\\ m) ax\\equiv b(mod\\ m) \u7684\u7b49\u5f0f\u79f0\u4e3a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u3002 \u5b9a\u7406 1 : \u8bbe a,b\\in Z,m\\geq0 a,b\\in Z,m\\geq0 ,\u82e5 (a,m)=1 (a,m)=1 ,\u5219\u540c\u4f59\u5f0f $$ ax\\equiv b(mod m) $$ \u5728 0 \\leq x \\leq m-1 0 \\leq x \\leq m-1 \u7684\u8303\u56f4\u5185\u6070\u6709\u4e00\u4e2a\u89e3\u3002 \u8bc1\u660e\uff1a \u5728\u6a21m\u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb\u4e2d\uff1a $$ 0,1,2,...m-1 $$ \u6709\u4e00\u4e2a\u6570\u6070\u597d\u4e0eb\u540c\u4f59\u3002 \u7531\u5269\u4f59\u7cfb\u5b9a\u74063\u53ef\u77e5\uff1a $$ 0,a,2a,...a(m-1) $$ \u4e5f\u662f\u6a21m\u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb,\u4e14\u6070\u597d\u6709\u4e00\u4e2a xa xa \u4e0eb\u540c\u4f59\u3002\u90a3\u4e2ax\u5373\u4e3a\u6240\u6c42\u3002 \u5b9a\u7406 2 : \u540c\u4f59\u65b9\u7a0b ax\\equiv b(mod\\ m) ax\\equiv b(mod\\ m) \u6709\u89e3\u7684\u5145\u8981\u6761\u4ef6\u662f (a,m)|b (a,m)|b \u3002 \u8bc1\u660e\uff1a \u8bc1\u660e\u82e5\u540c\u4f59\u65b9\u7a0b ax\\equiv b(mod\\ m) ax\\equiv b(mod\\ m) \u6709\u89e3\uff0c\u5219 gcd(a,m)|b gcd(a,m)|b \u3002 \u8bbe\u540c\u4f59\u65b9\u7a0b ax\\equiv b(mod\\ m) ax\\equiv b(mod\\ m) \u7684\u89e3\u4e3a x_0 x_0 ,\u4e8e\u662f\u5b58\u5728 k\\in Z k\\in Z ,\u6709 b=ax_0+my b=ax_0+my \u3002\u56e0\u4e3a gcd(a,m)|a,gcd(a,m)|m gcd(a,m)|a,gcd(a,m)|m ,\u6240\u4ee5 gcd(a,m)|b gcd(a,m)|b \u3002 \u8bc1\u660e\u82e5 gcd(a,m)|b gcd(a,m)|b ,\u5219\u540c\u4f59\u65b9\u7a0b ax\\equiv b(mod\\ m) ax\\equiv b(mod\\ m) \u6709\u89e3\u3002 \u8bbe d=gcd(a,m) d=gcd(a,m) \u3002\u6709 gcd(\\frac{a}{d},\\frac{m}{d})=1 gcd(\\frac{a}{d},\\frac{m}{d})=1 (\u53ef\u4ee5\u7528\u4e24\u4e2a\u6570\u8d28\u56e0\u5b50\u5206\u89e3\u4e0egcd\u7684\u5173\u7cfb\u7684\u89d2\u5ea6\u6765\u60f3\u5176\u6b63\u786e\u6027) ,\u7531\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u5b9a\u74061\u53ef\u5f97\u540c\u4f59\u5f0f: $$ \\frac{a}{d}x\\equiv \\frac{b}{d}(mod \\frac{m}{d}) \\tag{1} $$ \u6709\u89e3\u3002\u8bbe\u65b9\u7a0b\u7ec4(1)\u7684\u89e3\u4e3a x_0 x_0 , x\\equiv x_0(mod\\ \\frac{m}{d}) x\\equiv x_0(mod\\ \\frac{m}{d}) \u4e5f\u662f(1)\u7684\u89e3\u3002\u5c06(1)\u5199\u6210\u7b49\u5f0f,\u5373\u5b58\u5728 $$ \\frac{a}{d}x_0+\\frac{m}{d}y=\\frac{b}{d} $$ \u4e24\u8fb9\u540c\u4e58d\u6709: $$ ax_0+my=b $$ \u5373\uff1a $$ ax_0\\equiv b( mod m) $$ \u6240\u4ee5 x_0 x_0 \u5373\u4e3a\u6240\u6c42\u3002\u540c\u65f6\uff0c\u4e0a\u8ff0\u8bc1\u660e\u53ef\u4ee5\u8bf4\u660e\uff0c\u5728\u6a21m\u4e0b\uff0c\u65b9\u7a0b\u6709d\u4e2a\u89e3\uff0c\u5176\u5206\u522b\u662f x_0,x_0+\\frac{m}{d},x_0+2\\frac{m}{d},...x_0+(d-1)\\frac{m}{d} x_0,x_0+\\frac{m}{d},x_0+2\\frac{m}{d},...x_0+(d-1)\\frac{m}{d} \u3002 \u6700\u5c0f\u6b63\u6574\u6570\u89e3\u53ef\u4ee5\u901a\u8fc7\u8868\u8fbe\u5f0f x_0=(x\\%\\frac{m}{d}+\\frac{m}{d})\\%\\frac{m}{d} x_0=(x\\%\\frac{m}{d}+\\frac{m}{d})\\%\\frac{m}{d} \u6c42\u51fa\u3002 \u6240\u4ee5\u53ea\u8981\u6211\u4eec\u6709\u529e\u6cd5\u6c42\u51fa\u4e00\u7ec4\u89e3\uff0c\u5c31\u53ef\u4ee5\u6c42\u51fa\u6240\u6709\u7684\u89e3\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u4e0b\u9762\u8fd9\u79cd\u601d\u8def\u3002 \u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u6c42\u89e3\u65b9\u6cd5\uff1a \u7528\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u5b9a\u74061\u6392\u9664\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\u73b0\u5728\u6765\u8003\u8651\u6709\u89e3\u7684\u60c5\u51b5\u3002\u9996\u5148\u5c06 ax\\equiv b(mod\\ m) ax\\equiv b(mod\\ m) \u65b9\u7a0b\u6539\u5199\u4e3a a*x+m*y=b a*x+m*y=b \u7684\u5f62\u5f0f,\u7136\u540e\u4f7f\u7528\u62d3\u5c55\u6b27\u51e0\u91cc\u5fb7\u6c42\u51fa\u4e00\u7ec4\u7279\u89e3 x_1,y_1 x_1,y_1 \u6ee1\u8db3 ax_1+my_1=(a,m) ax_1+my_1=(a,m) \u3002\u7136\u540e\u5728\u539f\u65b9\u7a0b\u4e24\u8fb9\u540c\u65f6\u9664\u4ee5 (a,m) (a,m) \u5e76\u4e58\u4e0ab\u5f97\u5230\uff1a $$ \\frac{abx_1}{(a,m)}+\\frac{mby_1}{(a,m)}=b $$ \u5c31\u5f97\u5230\u4e86\u65b9\u7a0b ax_0+my_0=b ax_0+my_0=b \u7684\u4e00\u7ec4\u89e3\u4e5f\u5c31\u662f\u540c\u4f59\u65b9\u7a0b ax_0\\equiv b(mod\\ m) ax_0\\equiv b(mod\\ m) \u7684\u4e00\u7ec4\u89e3\u3002\u77e5\u9053\u4e86\u4e00\u7ec4\u89e3\uff0c\u5269\u4e0b\u7684\u89e3\u5c31\u53ef\u4ee5\u6839\u636e \u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u5b9a\u74062\u7b2c\u4e8c\u4e2a\u8bc1\u660e \u6c42\u51fa\u5176\u4ed6\u89e3\u4e86\u3002 \u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 //\u89e3\u540c\u4f59\u65b9\u7a0b$ax0\\equiv b(mod m)$\u4e2d\u6700\u5c0f\u7684x0,\u82e5\u65e0\u89e3\u8fd4\u56defalse bool ModularEqu ( int a , int b , int m , int & x0 ){ int x , y , k ; int d = exgcd ( a , m , x , y ); if ( b % d == 0 ){ x0 = x * ( b / d ) % m ; k = m / d ; x0 = ( x0 % k + k ) % k ; return true ; } return false ; } \u9006\u5143 \u00b6 \u7528\u6765\u89e3\u51b3\u53d6\u6a21\u6761\u4ef6\u4e0b\u9664\u6cd5\u7684\u95ee\u9898\u3002 \u5b9a\u4e49 : \u5982\u679c\u4e00\u4e2a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u6709 ax\\equiv 1(mod\\ m) ax\\equiv 1(mod\\ m) \uff0c\u5219\u79f0x\u4e3a a\u5728\u6a21m\u4e0b\u7684\u7684\u9006\u5143\uff0c\u8bb0\u4f5c a^{-1} a^{-1} \u3002 1.\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6c42\u9006\u5143 \uff1a \u4f7f\u7528\u6761\u4ef6\uff1a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u6709\u89e3\u6761\u4ef6\uff0c\u5373: (a,m)=1 (a,m)=1 \u3002 \u548c\u6c42\u89e3\u540c\u4f59\u65b9\u7a0b\u4e3a\u4e00\u4e2a\u539f\u7406\u3002 2.\u5feb\u901f\u5e42\u6c42\u9006\u5143 \uff1a \u4f7f\u7528\u6761\u4ef6\uff1a\u6a21\u6570\u662f\u7d20\u6570\u3002 \u7528\u5f97\u6700\u591a\uff0c\u6c42\u89e3\u539f\u7406\u89c1 \u8d39\u9a6c\u5c0f\u5b9a\u7406\u8282 \u3002 \u4ee3\u7801\u5c31\u662f\u5feb\u901f\u5e42\u7684\u4ee3\u7801\u3002 \u53c2\u8003\u8d44\u6599\uff1a \u59dc\u6b63\u6d9b.\u300a\u4fe1\u606f\u5b89\u5168\u6570\u5b66\u57fa\u7840\u300b[M].\u5317\u4eac:\u7535\u5b50\u5de5\u4e1a\u51fa\u7248\u793e,2017. Euler's totient function - Wikipedia oi wiki \u6570\u5b66\u90e8\u5206 \u7b80\u5355\u6570\u5b66\u5b9e\u6218 \u00b6 \u627e\u89c4\u5f8b \u00b6 1 1 2 3 5 8 13 ... 1 1 2 5 14 ... 1 5 10 10 5 1 1 4 10 20 35 56 ... \u7ed3\u8bba \u00b6 \u6709\u9650\u9879\u6570\u5217\u90fd\u53ef\u4ee5\u7528\u516c\u5f0f\u8868\u793a\uff0c\u6bd4\u5982 Lagrange \u63d2\u503c\u516c\u5f0f\u5c31\u53ef\u4ee5\u6c42\u51fa\u901a\u9879\u3002 \u516c\u5f0f\u663e\u7136\u4e0d\u6b62\u4e00\u4e2a\u3002 \u6240\u4ee5\u731c\u6d4b\u662f\u6709\u98ce\u9669\u7684\u3002 \u4e3e\u4e2a\u6817\u5b50 \u00b6 1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c\uff1f \u663e\u7136\u7b54\u6848\u662f 126\uff0c\u56e0\u4e3a a_n = (n-1)(n-2)(n-3)(n-4)(n-5)+n a_n = (n-1)(n-2)(n-3)(n-4)(n-5)+n \u3002 \u4f46\u5176\u5b9e\u5b83\u6709\u5f88\u591a\u79cd\u7b54\u6848\uff0c\u6bd4\u5982 a_n =C \\cdot (n-1)(n-2)(n-3)(n-4)(n-5)+n, C\u4e3a\u5e38\u6570 a_n =C \\cdot (n-1)(n-2)(n-3)(n-4)(n-5)+n, C\u4e3a\u5e38\u6570 \u3002 \u53cd\u4f8b \u00b6 Codeforces 656A - Da Vinci Powers \u627e\u89c4\u5f8b\uff0c\u8f93\u51653\u8f93\u51fa8\uff0c\u8f93\u516510\u8f93\u51fa1024\uff0c\u8f93\u516513\u8f93\u51fa8092\u3002 \u9700\u8981\u7528\u4e0b\u9762\u4ecb\u7ecd\u7684 OEIS \u89e3\u51b3\u3002 OEIS \u00b6 The On-Line Encyclopedia of Integer Sequences\u00ae (OEIS\u00ae) \u5305\u542b\u4e86\u7edd\u5927\u90e8\u5206\u6570\u5217\uff0c\u53ea\u80fd\u5728\u7f51\u7edc\u6bd4\u8d5b\u4e2d\u4f7f\u7528\u3002 \u4f8b\u9898 \u9898\u76ee\u6765\u6e90\uff1a2020 \u725b\u5ba2\u5bd2\u5047\u7b97\u6cd5\u5c0f\u767d\u8bad\u7ec3\u8425 \u4e00\u4e2a\u6e38\u620f\uff0c\u4eba\u7269\u653b\u51fb\u529b\u4e3a0-10\uff0c\u602a\u7269\u7684\u751f\u547d\u503c\u4e3a10\uff0c\u6bcf\u6b21\u653b\u51fb\u5bf9\u602a\u7269\u4ee5\u5747\u7b49\u76841/11\u7684\u6982\u7387\uff0c\u968f\u673a\u9020\u62100\uff0c1\uff0c2\u2026\u202610\u4e2d\u4e4b\u4e00\u70b9\u6570\u7684\u4f24\u5bb3\uff0c\u602a\u7269\u7684\u4f53\u529b\u8fbe\u52300\u6216\u66f4\u4f4e\u65f6\u89c6\u4e3a\u51fb\u8d25\uff0c\u95ee\u51fb\u8d25\u602a\u7269\u7684\u5e73\u5747\u653b\u51fb\u6b21\u6570\uff1f \u8bbe\u5f53\u602a\u7269\u8840\u5269\u4f59 n n \u65f6\u653b\u51fb\u6b21\u6570\u7684\u671f\u671b\u4e3a a_n a_n \u3002\u5219\u663e\u7136 a_0\uff1d0 a_0\uff1d0 \uff0c\u8003\u8651 n < 1 n < 1 \uff0c\u6b64\u65f6\u80af\u5b9a\u8981\u5148\u6253\u4e00\u6b21\u3002\u6253\u5b8c\u540e\u6709 \\frac{11-n}{11} \\frac{11-n}{11} \u7684\u6982\u7387\u602a\u517d\u6b7b\u4ea1\uff0c\u53e6\u5916\u6709 \\frac{1}{11} \\frac{1}{11} \u7684\u6982\u7387\u56de\u5230 a_1-a_n a_1-a_n \u4e2d\u7684\u4e00\u79cd\u60c5\u51b5\u3002\u6545\u6709 a_n=1+\\frac{1}{11}(a_1+...+a_n) a_n=1+\\frac{1}{11}(a_1+...+a_n) \u3002\u4ee4 Sn=a_1+...a_n Sn=a_1+...a_n \uff0c\u5219\u6709 a_{n}=1+\\frac{1}{11}S_{n} a_{n}=1+\\frac{1}{11}S_{n} \u3002\u89e3\u5f97 a_n=(\\frac{11}{10})^n a_n=(\\frac{11}{10})^n \u3002\u672c\u9898\u7b54\u6848\u4e3a 1.1^{10} 1.1^{10} \u3002 \u5177\u4f53\u8ba1\u7b97\u8fc7\u7a0b a_{n}=1+\\frac{1}{11}S_{n} a_{n}=1+\\frac{1}{11}S_{n} a_{n-1}=1+\\frac{1}{11}S_{n-1} a_{n-1}=1+\\frac{1}{11}S_{n-1} \u76f8\u51cf a_n-a_{n-1}=\\frac{1}{11}*a_n a_n-a_{n-1}=\\frac{1}{11}*a_n a_n=\\frac{11}{10}a_{n-1}(n >0) a_n=\\frac{11}{10}a_{n-1}(n >0) \u5f53\u602a\u7269\u8840\u5269\u4f59 n n \u65f6\u653b\u51fb\u6b21\u6570\u7684\u671f\u671b\u4e3a a_n a_n \u3002\u5219\u663e\u7136 a_0\uff1d0 a_0\uff1d0 n = 1 n = 1 \u4ee3\u5165\u89e3\u5f97 a_1=\\frac{11}{10} a_1=\\frac{11}{10} \u5219 a_n=(\\frac{11}{10})^n a_n=(\\frac{11}{10})^n","title":"\u7b80\u5355\u6570\u5b66"},{"location":"math/simple-math/#_1","text":"\u7d20\u6570(\u8d28\u6570)\uff1a\u9664\u4e86 1 \u548c\u81ea\u8eab\u5916\uff0c\u4e0d\u80fd\u88ab\u5176\u4ed6\u6570\u6574\u9664\u7684\u6b63\u6574\u6570\u3002\u7d20\u6570\u53ea\u6709\u4e24\u4e2a\u56e0\u5b50\u3002 \u5408\u6570\uff1a\u62e5\u6709\u4e24\u4e2a\u4ee5\u4e0a\u56e0\u5b50\u7684\u6b63\u6574\u6570\u3002 1 \u65e2\u4e0d\u662f\u7d20\u6570\u4e5f\u4e0d\u662f\u5408\u6570\u3002","title":"\u7d20\u6570\u4e0e\u5408\u6570"},{"location":"math/simple-math/#_2","text":"O(\\sqrt n) O(\\sqrt n) 1 2 3 4 5 6 7 8 9 10 11 12 int isPrime ( int n ) { int i ; for ( i = 2 ; i <= sqrt ( n ); i ++ ) { if ( n % i == 0 ) // \u5982\u679c\u4e0d\u4e3a\u7d20\u6570\u8fd4\u56de0 \u3000\u3000 { return 0 ; } } return 1 ; // \u53cd\u4e4b\u5219\u8fd4\u56de1 }","title":"\u8bd5\u9664\u6cd5\u5224\u65ad\u7d20\u6570"},{"location":"math/simple-math/#-eratosthenes","text":"\u57fa\u672c\u601d\u60f3\uff1a\u521d\u59cb\u5c06\u6240\u6709\u5927\u4e8e\u7b49\u4e8e 2 \u7684\u6570\u653e\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff0c\u6bcf\u6b21\u7b5b\u9009\u540e\u96c6\u5408\u4e2d\u5269\u4f59\u6700\u5c0f\u7684\u6570\u662f\u8d28\u6570\uff0c\u5c06\u5b83\u7684\u500d\u6570\u53bb\u6389\u3002 \u7b97\u6cd5\u7ed3\u675f\u65f6\uff0c\u6ca1\u6709\u88ab\u7b5b\u53bb\u7684\u6570\u5c31\u662f\u8d28\u6570\u3002\u6bcf\u4e2a\u6570\u8981\u88ab\u81ea\u5df1\u6240\u6709\u7684\u56e0\u5b50\u6807\u8bb0\u4e00\u904d\uff0c\u6240\u4ee5\u666e\u901a\u7b5b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nloglogn) O(nloglogn) 1 2 3 4 5 6 7 8 9 10 11 const int maxn = 1000 ; bool isPrime [ maxn + 5 ]; void getPrime () { memset ( isPrime , true , sizeof ( isPrime )); isPrime [ 1 ] = false ; // \u5982\u679c\u7528\u4e0d\u52301\u4e5f\u53ef\u4ee5\u4e0d\u7528\u5199 for ( int i = 2 ; i <= maxn ; i ++ ) if ( isPrime [ i ]) for ( int j = i ; i * j <= maxn ; j ++ ) isPrime [ i * j ] = false ; }","title":"\u7d20\u6570\u666e\u901a\u7b5b-\u57c3\u62c9\u6258\u65af\u7279\u5c3c(Eratosthenes)\u7b5b\u6cd5"},{"location":"math/simple-math/#_3","text":"","title":"\u7d20\u6570\u7ebf\u6027\u7b5b(\u6570\u8bba\u90e8\u5206\u4f1a\u6d89\u53ca)"},{"location":"math/simple-math/#_4","text":"\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff08The Fibonacci sequence\uff09\u7684\u9012\u63a8\u5f0f\u5982\u4e0b\uff1a F*0 = 0, F_1 = 1, F_n = F*{n-1} + F\\_{n-2} F*0 = 0, F_1 = 1, F_n = F*{n-1} + F\\_{n-2} \u8be5\u6570\u5217\u7684\u524d\u51e0\u9879\u5982\u4e0b\uff1a 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...","title":"\u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"math/simple-math/#_5","text":"\u6590\u6ce2\u90a3\u5951\u6570\u5217\u589e\u957f\u901f\u5ea6\u8d8b\u8fd1\u4e8e 2^n 2^n \u6590\u6ce2\u90a3\u5951\u6570\u5217\u76f8\u90bb\u4e24\u4e2a\u6570\u4e4b\u95f4\u7684\u6bd4\u503c\u8d8b\u8fd1\u4e8e\u9ec4\u91d1\u5206\u5272\u7387 \u524d n n \u9879\u4e4b\u548c\u52a0\u4e00\u7b49\u4e8e\u7b2c n+2 n+2 \u9879 \u4ee5\u6590\u6ce2\u90a3\u5951\u6570\u5217\u76f8\u90bb\u4e24\u9879\u4f5c\u4e3a\u8f93\u5165\u4f1a\u4f7f\u6b27\u51e0\u91cc\u5fb7\u7b97\u6cd5\u8fbe\u5230\u6700\u574f\u590d\u6742\u5ea6","title":"\u7b80\u5355\u6027\u8d28"},{"location":"math/simple-math/#_6","text":"CUC ACM-Wiki - \u6570\u5217","title":"\u62d3\u5c55"},{"location":"math/simple-math/#_7","text":"Catalan \u6570\u5b9a\u4e49\u5982\u4e0b\uff1a f_0=1,\\,\\,f_n = \\sum_{i=0}^{n-1}f(i)\\cdot f(n-i-1), n \\in N_+ f_0=1,\\,\\,f_n = \\sum_{i=0}^{n-1}f(i)\\cdot f(n-i-1), n \\in N_+ \u8be5\u6570\u5217\u7684\u524d\u51e0\u9879\u5982\u4e0b\uff1a 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012 ...... 1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012 ......","title":"\u5361\u7279\u5170\u6570"},{"location":"math/simple-math/#_8","text":"f(n) = \\frac{1}{n+1}\\tbinom{2n}{n} f(n) = \\frac{1}{n+1}\\tbinom{2n}{n} f(n) = \\tbinom{2n}{n}-\\tbinom{2n}{n-1} f(n) = \\tbinom{2n}{n}-\\tbinom{2n}{n-1} // \u63a8\u8350 f(n) = \\sum_{i=0}^{n-1}f(i)\u00d7f(n-i-1) f(n) = \\sum_{i=0}^{n-1}f(i)\u00d7f(n-i-1) f(n) = \\frac{f(n-1)\u00d7(4n-2)}{n+1} f(n) = \\frac{f(n-1)\u00d7(4n-2)}{n+1}","title":"\u9012\u63a8\u516c\u5f0f"},{"location":"math/simple-math/#_9","text":"\u4e8c\u53c9\u6811\u7684\u8ba1\u6570\u95ee\u9898\uff1a\u5df2\u77e5\u4e8c\u53c9\u6811\u6709 n n \u4e2a\u7ed3\u70b9\uff0c\u6c42\u80fd\u6784\u6210\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u4e8c\u53c9\u6811\u3002 \u62ec\u53f7\u5316\u95ee\u9898\uff1a\u4e00\u4e2a\u5408\u6cd5\u7684\u8868\u8fbe\u5f0f\u7531()\u5305\u56f4\uff0c()\u53ef\u4ee5\u5d4c\u5957\u548c\u8fde\u63a5\uff0c\u5982\uff1a(())()\u4e5f\u662f\u5408\u6cd5\u8868\u8fbe\u5f0f\uff0c\u73b0\u7ed9\u51fa n n \u5bf9\u62ec\u53f7\uff0c\u6c42\u53ef\u4ee5\u7ec4\u6210\u7684\u5408\u6cd5\u8868\u8fbe\u5f0f\u7684\u4e2a\u6570\u3002 \u5212\u5206\u95ee\u9898\uff1a\u5c06\u4e00\u4e2a\u51f8 n+2 n+2 \u591a\u8fb9\u5f62\u533a\u57df\u5206\u6210\u4e09\u89d2\u5f62\u533a\u57df\u7684\u65b9\u6cd5\u6570\u3002 \u51fa\u6808\u95ee\u9898\uff1a\u4e00\u4e2a\u6808\u7684\u8fdb\u6808\u5e8f\u5217\u4e3a 1,2,3,..n 1,2,3,..n \uff0c\u6c42\u4e0d\u540c\u7684\u51fa\u6808\u5e8f\u5217\u6709\u591a\u5c11\u79cd\u3002 \u8def\u5f84\u95ee\u9898\uff1a\u5728 n\\cdot n n\\cdot n \u7684\u65b9\u683c\u5730\u56fe\u4e2d\uff0c\u4ece\u4e00\u4e2a\u89d2\u5230\u53e6\u5916\u4e00\u4e2a\u89d2\uff0c\u6c42\u4e0d\u8de8\u8d8a\u5bf9\u89d2\u7ebf\u7684\u8def\u5f84\u6570\u6709\u591a\u5c11\u79cd\u3002 \u63e1\u624b\u95ee\u9898\uff1a 2n 2n \u4e2a\u4eba\u5747\u5300\u5750\u5728\u4e00\u4e2a\u5706\u684c\u8fb9\u4e0a\uff0c\u67d0\u4e2a\u65f6\u523b\u6240\u6709\u4eba\u540c\u65f6\u4e0e\u53e6\u4e00\u4e2a\u4eba\u63e1\u624b\uff0c\u8981\u6c42\u624b\u4e4b\u95f4\u4e0d\u80fd\u4ea4\u53c9\uff0c\u6c42\u5171\u6709\u591a\u5c11\u79cd\u63e1\u624b\u65b9\u6cd5\u3002","title":"\u5e94\u7528"},{"location":"math/simple-math/#_10","text":"","title":"\u6574\u6570\u7684\u6574\u9664"},{"location":"math/simple-math/#_11","text":"\u5b9a\u74061: \u8bbea,b,c\u662f\u4efb\u610f3\u4e2a\u6574\u6570\uff0c\u82e5 a=bq+r a=bq+r ,\u5219\u6709 (a,b)=(b,r) (a,b)=(b,r) \u3002 \u8bc1\u660e\uff1a\u56e0\u4e3a (a,b)|r,(a,b)|b (a,b)|r,(a,b)|b ,\u4e00\u5b9a\u6709 (a,b)\\leq (b,r) (a,b)\\leq (b,r) \u540c\u7406 (b,r)|a,(b,r)|b (b,r)|a,(b,r)|b \uff0c\u6240\u4ee5 (b,r)\\leq (a,b) (b,r)\\leq (a,b) \u3002 \u6240\u4ee5\u53ef\u5f97 (b,r)=(a,b) (b,r)=(a,b) \u4e8e\u662f\u5c31\u6709\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5(\u8f97\u8f6c\u76f8\u9664\u6cd5)\u3002","title":"\u6700\u5927\u516c\u56e0\u5b50\u4e0e\u8f97\u8f6c\u76f8\u9664\u6cd5"},{"location":"math/simple-math/#_12","text":"\u6c42\u4e24\u4e2a\u6570\u7684gcd,\u5faa\u73af\u4f7f\u7528\u5e26\u4f59\u9664\u6cd5\uff0c\u6709\u5982\u4e0b\u7b49\u5f0f\u7ec4\uff1a \\begin{align} a=& q_0b+r_0,0\\leq r_0 < b \\nonumber \\\\ b=& q_1r_0+r_1 ,0\\leq r_1 < r_0 \\nonumber \\\\ r_0=& q_2r_1+r_2 ,0\\leq r_2 < r_1 \\nonumber \\\\ ... \\nonumber \\\\ r_{n-2}=& q_{n}r_{n-1}+r_{n} ,0\\leq r_{n}< r_{n-1} \\nonumber \\\\ r_{n-1}=& q_{n+1}r_n+r_{n+1} ,r_{n+1}=0 \\nonumber \\end{align} \\begin{align} a=& q_0b+r_0,0\\leq r_0 < b \\nonumber \\\\ b=& q_1r_0+r_1 ,0\\leq r_1 < r_0 \\nonumber \\\\ r_0=& q_2r_1+r_2 ,0\\leq r_2 < r_1 \\nonumber \\\\ ... \\nonumber \\\\ r_{n-2}=& q_{n}r_{n-1}+r_{n} ,0\\leq r_{n}< r_{n-1} \\nonumber \\\\ r_{n-1}=& q_{n+1}r_n+r_{n+1} ,r_{n+1}=0 \\nonumber \\end{align} \u56e0\u4e3a\u6709\u5982\u4e0b\u5927\u5c0f\u5173\u7cfb\uff0c\u4f59\u6570\u662f\u4e25\u683c\u9012\u51cf\u7684: $$ b>r_0>r_1>r_2>...\\geq 0 $$ \u518d\u7531\u6700 \u5927\u516c\u56e0\u5b50\u4e0e\u8f97\u8f6c\u76f8\u9664\u6cd5\u5b9a\u74061 \u53ef\u5f97\u7b49\u5f0f\u94fe\uff1a \\begin{align} (a,b)=& \\nonumber\\\\ (b,r_0)=& \\nonumber\\\\ (r_0,r_1)=& \\nonumber\\\\ (r_1,r_2)=& \\nonumber\\\\ ...& \\nonumber\\\\ (r_n,0)=& r_n \\nonumber \\end{align} \\begin{align} (a,b)=& \\nonumber\\\\ (b,r_0)=& \\nonumber\\\\ (r_0,r_1)=& \\nonumber\\\\ (r_1,r_2)=& \\nonumber\\\\ ...& \\nonumber\\\\ (r_n,0)=& r_n \\nonumber \\end{align} \u6700\u540e r_n r_n \u5373\u4e3a\u6240\u6c42\u3002\u5176\u601d\u60f3\u5c31\u662f\u628a\u4e00\u4e2a\u5927\u7684\u95ee\u9898\u8f6c\u5316\u6210\u4e00\u4e2a\u5c0f\u7684\u95ee\u9898\u6765\u6c42\u89e3\u3002 \u6c42gcd\u7684\u4ee3\u7801\uff1a 1 2 3 int gcd ( int a , int b ){ return b == 0 ? a : gcd ( b , a % b ); }","title":"\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5(\u8f97\u8f6c\u76f8\u9664\u6cd5)"},{"location":"math/simple-math/#_13","text":"\u53c8\u79f0\u8d1d\u7956\u5b9a\u7406,\u4efb\u610fa,b\u4e0d\u5168\u4e3a0\u7684\u6574\u6570,\u5b58\u5728\u6574\u6570x,y\uff0c\u4f7f\u5f97: ax+by=(a,b) ax+by=(a,b) \u53ef\u4ee5\u5c06\u6734\u7d20\u6b27\u51e0\u91cc\u5f97\u7b97\u6cd5\u56de\u5e26\u5e26\u51fax,y\u8bc1\u660e\u5176\u6b63\u786e\u6027\u3002\u8fd9\u91cc\u8bf4\u4e0b\u9762\u9012\u5f52\u4ee3\u7801\u6c42\u89e3x,y\u7684\u539f\u7406\u3002 \u8bc1\u660e\uff1a \u8bbe\u6709 $$ ax_0+by_0=(a,b) $$ \u7ee7\u7eed\u4f7f\u7528\u5e26\u4f59\u9664\u6cd5\u53ef\u5f97: $$ bx_1+(a\\%b)y_1=(b,a\\%b) $$ \u7531 \u5927\u516c\u56e0\u5b50\u4e0e\u8f97\u8f6c\u76f8\u9664\u6cd5\u5b9a\u74061 \u53ef\u5f97\uff1a $$ (a,b)=(b,a\\%b) $$ \u4e8e\u662f\u5e26\u5165\u5f97\u5230\uff1a \\begin{align} ax_0+by_0=& bx_1+(a\\%b)y_1 \\\\ =& bx_1+(a-a/b*b)y_1 \\\\ =& ay_1+b(x_1-a/b*y_1) \\end{align} \\begin{align} ax_0+by_0=& bx_1+(a\\%b)y_1 \\\\ =& bx_1+(a-a/b*b)y_1 \\\\ =& ay_1+b(x_1-a/b*y_1) \\end{align} \u4e8e\u662f\u53ef\u5f97\u9012\u63a8\u5173\u7cfb\uff1a x_0=y_1 \\\\ y_0=x_1-a/b*y_1 x_0=y_1 \\\\ y_0=x_1-a/b*y_1 \u6240\u4ee5\u5c31\u53ef\u4ee5\u5728\u7b97gcd\u56de\u6eaf\u7684\u65f6\u5019\u53cd\u5411\u9012\u63a8\uff0c\u5199\u51fa\u5982\u4e0b\u4ee3\u7801\uff1a 1 2 3 4 5 6 7 8 9 10 ll exgcd ( ll a , ll b , ll & x , ll & y ){ if ( a == 0 && b == 0 ) return -1 ; if ( b == 0 ){ x = 1 ; y = 0 ; return a ; } ll ans = exgcd ( b , a % b , y , x ); y -= a / b * x ; return ans ; } \u53d8\u91cfx\u548cy\u4e2d\u5b58\u50a8\u4e86\u65b9\u7a0b a*x+b*y=(a,b) a*x+b*y=(a,b) \u7684\u4e00\u7ec4\u6574\u6570\u89e3;\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662fgcd(a,b),\u82e5\u8fd4\u56de-1,\u5219\u65e0\u89e3;","title":"\u88f4\u8700\u5b9a\u7406"},{"location":"math/simple-math/#_14","text":"\u5b9a\u4e49\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 m,\u82e5\u7528 m \u5206\u522b\u53bb\u9664\u4e24\u4e2a\u6574\u6570 a\uff0cb \u6240\u5f97\u7684\u4f59\u6570\u76f8\u540c\uff0c\u5219\u79f0 a \u4e0e b \u6a21 m \u540c\u4f59\uff0c\u8bb0\u4e3a: a \\equiv b\\ (mod\\ m) a \\equiv b\\ (mod\\ m) \u5b9a\u7406 1\uff1a\u6574\u6570 a,b \u6a21 m \u540c\u4f59\u7684\u5145\u8981\u6761\u4ef6\u662f m|(a-b) m|(a-b) \u3002 \u8bc1\u660e: \u8bbe a=k_1m+r_a,b=k_2m+r_b,0\\leq r_a,r_b < m a=k_1m+r_a,b=k_2m+r_b,0\\leq r_a,r_b < m \u3002 1.\u8bc1\uff1a\u82e5 a,b \u6a21 m \u540c\u4f59\uff0c\u5219\u53ef\u4ee5\u63a8\u51fa m|(a-b) m|(a-b) \u3002 \u56e0\u4e3a a,b \u6a21 m \u540c\u4f59\uff0c\u5219 r_a=r_b r_a=r_b ,\u4e8e\u662f a-b=(k_1-k_2)m a-b=(k_1-k_2)m ,\u5373 m|(a-b) m|(a-b) 2.\u8bc1\uff1a\u82e5 m|(a-b) m|(a-b) \uff0c\u5219 a,b \u540c\u4f59\u3002 \u56e0\u4e3a m|(a-b) m|(a-b) \uff0c\u5373 m|[(k_1-k_2)m+(r_a-r_b)] m|[(k_1-k_2)m+(r_a-r_b)] ,\u6240\u4ee5 m|(r_a-r_b) m|(r_a-r_b) \u56e0\u4e3a\u6709 -m<r_a-r_b<m -m<r_a-r_b<m ,\u6240\u4ee5\u53ea\u6709 r_a=r_b r_a=r_b \u3002","title":"\u540c\u4f59\u5f0f"},{"location":"math/simple-math/#_15","text":"1. a \\equiv b(mod\\ m), b\\equiv c (mod \\ m), \u5219 a\\equiv c (mod \\ m) a \\equiv b(mod\\ m), b\\equiv c (mod \\ m), \u5219 a\\equiv c (mod \\ m) . 2. \u8bbead\\equiv bd(mod\\ m) \u8bbead\\equiv bd(mod\\ m) ,\u82e5 (d,m)=1 (d,m)=1 \uff0c\u5219 a\\equiv b(mod\\ m) a\\equiv b(mod\\ m) \u3002 \u8bc1\u660e: \u6839\u636e\u540c\u4f59\u5f0f\u5b9a\u7406 1, \u6709 m|d(a-b) m|d(a-b) , \u56e0\u4e3a (d,m)=1 (d,m)=1 ,\u5219 m|(a-b) m|(a-b) \u3002 3.\u8bbe a\\equiv b(mod\\ m) a\\equiv b(mod\\ m) ,\u82e5 d \u662f a,b,m \u7684\u516c\u56e0\u5b50\uff0c\u5219 \\frac{a}{d}\\equiv \\frac{b}{d}(mod\\ \\frac{m}{d}) \\frac{a}{d}\\equiv \\frac{b}{d}(mod\\ \\frac{m}{d}) \u3002 \u8bc1\u660e\uff1a \u82e5 a\\equiv b(mod\\ m) a\\equiv b(mod\\ m) ,\u5219 a=m*k+b a=m*k+b ,d \u662f a,b,m \u7684\u516c\u56e0\u5b50,\u6709 \\frac{a}{d}=\\frac{m}{d}*k+\\frac{b}{d} \\frac{a}{d}=\\frac{m}{d}*k+\\frac{b}{d} ,\u6240\u4ee5 \\frac{a}{d}\\equiv \\frac{b}{d}(mod\\ \\frac{m}{d}) \\frac{a}{d}\\equiv \\frac{b}{d}(mod\\ \\frac{m}{d}) \u3002 4.\u82e5 a \\equiv b(mod\\ m_i),i=1,2,...k a \\equiv b(mod\\ m_i),i=1,2,...k \uff0c\u5219 a \\equiv b(mod [m_1,m_2,..m_k]) a \\equiv b(mod [m_1,m_2,..m_k]) \u3002 \u8bc1\u660e\uff1a \u82e5 a\\equiv b(mod\\ m_i) a\\equiv b(mod\\ m_i) ,\u5373 m_i|(a-b),i=1,2..k m_i|(a-b),i=1,2..k ,\u53ef\u4ee5\u63a8\u51fa a-b a-b \u662f m_i m_i \u7684\u516c\u500d\u6570\uff0c\u6240\u4ee5 [m_1,m_2,...m_k]|(a-b) [m_1,m_2,...m_k]|(a-b) \u3002\u6545 a \\equiv b(mod [m_1,m_2,..m_k]) a \\equiv b(mod [m_1,m_2,..m_k]) \u3002 5.\u82e5 a \\equiv b(mod\\ m) a \\equiv b(mod\\ m) ,\u5219 (a,m)=(b,m) (a,m)=(b,m) \u3002 \u8bc1\u660e\uff1a \u82e5 a\\equiv b(mod\\ m) a\\equiv b(mod\\ m) ,\u5219\u5b58\u5728 k \\in Z k \\in Z ,\u4f7f\u5f97 a=km+b a=km+b \u3002\u56e0\u4e3a (a,m)|a (a,m)|a , (a,m)|m (a,m)|m ,\u56e0\u4e3a b=a-km b=a-km ,\u6240\u4ee5\u6709 (a,m)|b (a,m)|b ,\u5373 (a,m) (a,m) \u662f b \u548c m \u7684\u516c\u56e0\u5b50\uff0c\u6240\u4ee5\u6709 (a,m)\\leq (b,m) (a,m)\\leq (b,m) \u3002\u540c\u7406\u53ef\u8bc1 (b,m)\\leq (a,m) (b,m)\\leq (a,m) \u3002\u6240\u4ee5\u5c31\u5f97\u5230 (a,m)=(b,m) (a,m)=(b,m) \u3002 \u540c\u65f6\u4e0a\u9762\u8bc1\u660e\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u6700\u5927\u516c\u56e0\u6570\u7684\u7ed3\u8bba\uff1a \u82e5 a=km+b a=km+b ,\u5219 (a,m)=(b,m) (a,m)=(b,m) \u3002","title":"\u540c\u4f59\u5f0f\u7684\u4e00\u4e9b\u6027\u8d28\uff1a"},{"location":"math/simple-math/#_16","text":"\u5b9a\u4e49 1:\u8bbe m \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u4efb\u4e00\u4e2a\u6574\u6570\u9664\u4ee5 m \u6240\u5f97\u7684\u4f59\u6570\u662f 0\uff0c1\uff0c2\uff0c...m-1 \u4e2d\u7684\u67d0\u4e00\u4e2a\u3002\u7528\u67d0\u4e00\u4e2a\u96c6\u5408\u7b26\u53f7 [i](0\\leq i \\leq m-1) [i](0\\leq i \\leq m-1) \u8868\u793a\u6240\u6709\u6a21 m \u4f59\u6570\u4e3a i \u7684\u96c6\u5408\uff0c\u8be5\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u5f62\u5f0f\u4e3a a=km+i,k\\in Z a=km+i,k\\in Z \u3002\u4efb\u4f55\u4e00\u4e2a\u6574\u6570\u5fc5\u5c5e\u4e8e\u67d0\u4e2a [i] [i] \u3002 Z Z \u7684\u5b50\u96c6\u5408 [i] [i] \u79f0\u4e3a\u6574\u6570\u6a21 m \u7684\u4e00\u4e2a \u5269\u4f59\u7c7b \u3002\u96c6\u5408 [0],[1],...[m-1] [0],[1],...[m-1] \u6784\u6210\u6a21 m \u7684 \u5b8c\u5168\u5269\u4f59\u7c7b \uff0c\u7528 Z_m=\\{[0],[1],...,[m-1]\\} Z_m=\\{[0],[1],...,[m-1]\\} \u8868\u793a,\u901a\u5e38\u7b80\u8bb0\u4e3a Z_m=\\{0,1...,m-1\\} Z_m=\\{0,1...,m-1\\} \u3002 \u5b9a\u4e49 2: \u5982\u679c\u6a21 m \u7684\u4e00\u4e2a\u5269\u4f59\u7c7b\u4e2d\u7684\u6570\u4e0e m \u4e92\u7d20\uff0c\u5c31\u79f0\u8fd9\u4e2a\u5269\u4f59\u7c7b\u4e3a\u4e0e\u6a21 m \u4e92\u7d20\u7684\u5269\u4f59\u7c7b\u3002\u5728\u4e0e m \u4e92\u7d20\u7684\u6240\u6709\u5269\u4f59\u7c7b\u4e2d\uff0c\u5404\u53d6\u4e00\u6570\u6240\u7ec4\u6210\u7684\u96c6\u5408\u53eb\u505a\u6a21 m \u7684\u4e00\u7ec4 \u7f29\u7cfb (\u65e2\u7ea6\u5269\u4f59\u7cfb)\u3002 \u5b9a\u7406 1:\u53ea\u8981\u67d0\u4e2a\u5269\u4f59\u7c7b\u4e2d\u7684\u4e00\u4e2a\u6570\u4e0e m \u4e92\u7d20\uff0c\u5219\u8be5\u5269\u4f59\u7c7b\u7684\u6240\u6709\u5176\u4ed6\u6570\u4e5f\u4e0e m \u4e92\u7d20\u3002 \u8bc1\u660e:\u540c\u4f59\u5f0f\u6027\u8d28 5\u3002 \u5b9a\u7406 2:\u8bbe a_1,a_2,...a_{\\varphi(m)} a_1,a_2,...a_{\\varphi(m)} \u662f\u6a21 m \u7684\u4e00\u7ec4\u7f29\u7cfb\uff0c\u82e5 (k,m)=1 (k,m)=1 ,\u5219 ka_1,ka_2,...ka_{\\varphi(m)} ka_1,ka_2,...ka_{\\varphi(m)} \u4e5f\u662f\u6a21 m \u7684\u4e00\u7ec4\u7f29\u7cfb\u3002 \\varphi(m) \\varphi(m) \u8868\u793a m \u7684\u6b27\u62c9\u51fd\u6570\uff0c\u5b9a\u4e49\u89c1 \u6b27\u62c9\u51fd\u6570\u8282 \u3002 \u8bc1\u660e\uff1a\u56e0\u4e3a (a_i,m)=1,(k,m)=1 (a_i,m)=1,(k,m)=1 \uff0c\u5219 (ka_i,m)=1,1\\leq i \\leq \\varphi(m) (ka_i,m)=1,1\\leq i \\leq \\varphi(m) \u56e0\u4e3a a_i a_i \u4e0e m \u8d28\u56e0\u5b50\u5206\u89e3\u540e\u4e0d\u5305\u542b\u516c\u5171\u7684\u8d28\u56e0\u5b50\uff0c k k \u4e0e m m \u8d28\u56e0\u5b50\u5206\u89e3\u540e\u4e0d\u5305\u542b\u516c\u5171\u7684\u8d28\u56e0\u5b50\uff0c\u6240\u4ee5\u4e58\u8d77\u6765\u8fd8\u662f\u4e0d\u5305\u542b\u516c\u5171\u7684\u8d28\u56e0\u5b50\u3002 \u56e0\u4e3a m\\nmid (a_i-a_j),i\\neq j m\\nmid (a_i-a_j),i\\neq j \u3002\u6709 m\\nmid k(a_i-a_j) m\\nmid k(a_i-a_j) (\u53ef\u4ee5\u7528\u8d28\u56e0\u5b50\u5206\u89e3\u7684\u89d2\u5ea6\u60f3) \u3002\u6240\u4ee5 ka_i \\not\\equiv ka_j(mod\\ m) ka_i \\not\\equiv ka_j(mod\\ m) \u56e0\u4e3a\u4e2a\u6570\u6ca1\u53d8\uff0c\u6a21\u4e0b\u6765\u4e24\u4e24\u4e4b\u95f4\u7ed3\u679c\u4e0d\u76f8\u540c\u4e14gcd\u4e3a1,\u6240\u4ee5 k_{a_1},k_{a_2},..,k_{a_\\varphi(m)} k_{a_1},k_{a_2},..,k_{a_\\varphi(m)} \u662f\u6a21 m \u7684\u4e00\u7ec4\u7f29\u7cfb\u3002 \u5b9a\u74063: \u8bbem\u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb\u4e3a\uff1a a_1,a_2,...a_{m-1} a_1,a_2,...a_{m-1} ,\u82e5 (k,m)=1 (k,m)=1 ,\u5219 ka_1,ka_2,...,ka_{m-1} ka_1,ka_2,...,ka_{m-1} \u4e5f\u662fm\u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb\u3002 \u8bc1\u660e\uff1a \u7528\u5b9a\u74062\u7684\u7b2c\u4e8c\u6b65\u540c\u7406\u8bc1\u660e\u53ef\u5f97\u3002","title":"\u5269\u4f59\u7c7b"},{"location":"math/simple-math/#_17","text":"\u5b9a\u4e49 1:\u6b27\u62c9\u51fd\u6570 \\varphi (m) \\varphi (m) \u8868\u793a\u6574\u6570\u5e8f\u5217 0,1,2,...,m-1 \u4e2d\u4e0e m \u4e92\u7d20\u7684\u6570\u7684\u4e2a\u6570\u3002\u89c4\u5b9a \\varphi (1)=1 \\varphi (1)=1 \u3002\u5f53 m \u7d20\u6570\u65f6\uff0c\u663e\u7136\u6709 \\varphi (m)=m-1 \\varphi (m)=m-1 \u3002","title":"\u6b27\u62c9\u51fd\u6570"},{"location":"math/simple-math/#_18","text":"\u8bbe m\\in Z^+,(k,m)=1 m\\in Z^+,(k,m)=1 \uff0c\u5219\uff1a k^{\\varphi (m)}\\equiv 1(mod\\ m) k^{\\varphi (m)}\\equiv 1(mod\\ m) \u8bc1\u660e\uff1a\u8bbe\u6574\u6570 a_1,a_2,...a_{\\varphi(m)} a_1,a_2,...a_{\\varphi(m)} \u662f\u6a21 m \u7684\u4e00\u7ec4\u7f29\u7cfb\uff0c\u56e0\u4e3a (k,m)=1 (k,m)=1 ,\u5219\u7531\u5269\u4f59\u7c7b\u5b9a\u7406 2\uff0c\u77e5 ka_1,ka_2..ka_{\\varphi(m)} ka_1,ka_2..ka_{\\varphi(m)} \u4e5f\u662f\u6a21 m \u7684\u4e00\u7ec4\u7f29\u7cfb\u3002 \u6240\u4ee5\uff1a a_1a_2...a_{\\varphi(m)}\\equiv ka_1ka_2...ka_{\\varphi(m)}(mod\\ m) a_1a_2...a_{\\varphi(m)}\\equiv ka_1ka_2...ka_{\\varphi(m)}(mod\\ m) \u7531\u540c\u4f59\u5f0f\u6027\u8d28 2 \u53ef\u5f97\uff1a k^{\\varphi(m)}\\equiv 1(mod\\ m) k^{\\varphi(m)}\\equiv 1(mod\\ m) \u6839\u636e\u6b27\u62c9\u5b9a\u7406\u53ef\u4ee5\u5f97\u5230 \u8d39\u9a6c\u5c0f\u5b9a\u7406 \uff1a","title":"\u6b27\u62c9\u5b9a\u7406"},{"location":"math/simple-math/#_19","text":"\u6b27\u62c9\u5b9a\u7406\u7279\u6b8a\u60c5\u51b5\uff1a\u82e5 p \u4e3a\u7d20\u6570\uff0c (a,p)=1 (a,p)=1 ,\u5219 a^{p-1}\\equiv 1(mod\\ p) a^{p-1}\\equiv 1(mod\\ p) \u3002 \u53ef\u5f97\u5230:\u82e5 p \u4e3a\u7d20\u6570\uff0c (a,p)=1 (a,p)=1 ,a \u5728\u6a21 p \u4e0b\u7684 \u9006\u5143 \u4e3a a^{p-2}(mod\\ m) a^{p-2}(mod\\ m) \u3002(\u9006\u5143\u5b9a\u4e49\u89c1 \u9006\u5143\u8282 )\u3002","title":"\u8d39\u9a6c\u5c0f\u5b9a\u7406"},{"location":"math/simple-math/#_20","text":"\u5b9a\u7406\u4e00: \u5982\u679c p \u662f\u8d28\u6570\uff0c\u5e76\u4e14 k \\geq 1 k \\geq 1 \u5219\u6709\uff1a \\varphi(p^k)=p^k-p^{k-1}=p^{k-1}(p-1)=p^k(1-\\frac{1}{p}) \\varphi(p^k)=p^k-p^{k-1}=p^{k-1}(p-1)=p^k(1-\\frac{1}{p}) \u8bc1\u660e\uff1a \u56e0\u4e3a p \u662f\u8d28\u6570\uff0c\u5bf9\u4e8e 1\\leq m\\leq p^k 1\\leq m\\leq p^k \u80fd\u8ba9 gcd(p^k,m)>1 gcd(p^k,m)>1 \u7684 m \u7684\u6761\u4ef6\u53ea\u6709\u8ba9 m \u662f p \u7684\u500d\u6570\uff0c\u4e5f\u5c31\u662f m \\in \\{p,2p,3p,...p^{k-1}p=p^k\\} m \\in \\{p,2p,3p,...p^{k-1}p=p^k\\} \u3002\u8fd9\u6837\u7684\u6570\u4e00\u5171\u6709 p^{k-1} p^{k-1} \u4e2a\u3002\u6240\u4ee5\u5269\u4e0b\u4e92\u7d20\u7684\u5c31\u6709 p^k-p^{k-1} p^k-p^{k-1} \u4e2a\u3002 \u5b9a\u7406\u4e8c\uff1a \u6b27\u62c9\u51fd\u6570\u662f\u79ef\u6027\u51fd\u6570\u3002\u5982\u679c m,n \u4e92\u7d20\u5373 gcd(n,m)=1 gcd(n,m)=1 \uff0c\u5219\u6709 \\varphi(m)\\varphi(n)=\\varphi(mn) \\varphi(m)\\varphi(n)=\\varphi(mn) \u8bc1\u660e\uff1a \u5c06 0,1...mn-1 0,1...mn-1 \u5199\u6210\u4e0b\u9762\u8fd9\u79cd\u7c7b\u4f3c\u5269\u4f59\u7c7b\u7684\u5f62\u5f0f\uff1a \\begin{matrix} 0 & m & 2m &...& (n-1)m \\\\ 1 & m+1 & 2m+1 &...& (n-1)m+1 \\\\ 2 & m+2 & 2m+2 &...& (n-1)m+2\\\\ ... \\\\ m-1 & 2m-1 & 3m-1& ...& mn-1 \\end{matrix} \\begin{matrix} 0 & m & 2m &...& (n-1)m \\\\ 1 & m+1 & 2m+1 &...& (n-1)m+1 \\\\ 2 & m+2 & 2m+2 &...& (n-1)m+2\\\\ ... \\\\ m-1 & 2m-1 & 3m-1& ...& mn-1 \\end{matrix} \u7531\u5269\u4f59\u7c7b\u5b9a\u7406 1 \u53ef\u77e5\uff0c\u6709 \\varphi(m) \\varphi(m) \u884c\u4e0e m \u4e92\u7d20\u3002\u7136\u540e\u9700\u8981\u8bc1\u8fd9\u4e9b\u884c\u4e2d\u4e0e n \u4e92\u7d20\u7684\u6570\u6709\u591a\u5c11\u3002 \u56e0\u4e3a 0\uff0c1\uff0c2\uff0c...n-1 0\uff0c1\uff0c2\uff0c...n-1 \u662f\u6a21 n \u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb\u3002\u56e0\u4e3a (m,n)=1 (m,n)=1 ,\u7531 \u5269\u4f59\u7c7b\u5b9a\u7406 2 \u7b2c\u4e8c\u6b65\u7684\u8bc1\u660e\u601d\u8def\u53ef\u8bc1 0\uff0cm\uff0c2m...(n-1)m 0\uff0cm\uff0c2m...(n-1)m \u4e5f\u662f\u6a21 n \u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb\u3002 \u56e0\u4e3a 0+a,m+a,2m+a,...,(n-1)m+a,0\\leq a \\leq n-1 0+a,m+a,2m+a,...,(n-1)m+a,0\\leq a \\leq n-1 \u4e5f\u662f\u6a21 n \u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb(\u76f8\u5f53\u4e8e\u6bcf\u4e2a\u6570\u90fd\u5f80\u540e\u5faa\u73af\u504f\u79fb a \u4e2a\u6570)\u3002 \u6240\u4ee5\u5728\u4e0e m \u4e92\u7d20\u7684\u884c(\u540c\u65f6\u4e5f\u662f\u6240\u6709\u7684\u884c)\u4e2d\u6709 \\varphi(n) \\varphi(n) \u4e2a\u6570\u4e0e n \u4e92\u7d20\u3002 \u6240\u4ee5\u5728 nm \u4e2a\u6570\u4e2d\u4e00\u5171\u6709 \\varphi(m)\\varphi(n) \\varphi(m)\\varphi(n) \u4e2a\u6570\u4e0e nm \u4e92\u7d20\u3002\u5f97\u8bc1\u3002 \u5b9a\u7406\u4e09\uff1a \u5c06 n \u8d28\u56e0\u5b50\u5206\u89e3\u5f97\u5230 n=p_1^{a_1}p_2^{a_2}...p_k^{a_k} n=p_1^{a_1}p_2^{a_2}...p_k^{a_k} \uff0c p_i p_i \u4e3a\u8d28\u6570\uff0c a_i a_i \u4e3a\u6b63\u6574\u6570\uff0c\u5219\u6709\uff1a \\varphi(n)=p_1^{a_1-1}(p_1-1)p_2^{a_2-1}(p_2-1)...p_k^{a_k-1}(p_k-1) \\varphi(n)=p_1^{a_1-1}(p_1-1)p_2^{a_2-1}(p_2-1)...p_k^{a_k-1}(p_k-1) \u8bc1\u660e\uff1a\u7531\u6b27\u62c9\u51fd\u6570\u5b9a\u7406\u4e8c\u53ef\u5f97: \\varphi(n)=\\varphi(p_1^{a_1})\\varphi(p_2^{a_2})...\\varphi(p_k^{a_k}) \\varphi(n)=\\varphi(p_1^{a_1})\\varphi(p_2^{a_2})...\\varphi(p_k^{a_k}) \u518d\u7531\u6b27\u62c9\u51fd\u6570\u5b9a\u7406 1 \u628a \\varphi(p_i^{a_i}) \\varphi(p_i^{a_i}) \u5c55\u5f00\u76f8\u4e58\u53ef\u5f97\u4e0a\u8ff0\u7ed3\u8bba\u3002","title":"\u6b27\u62c9\u51fd\u6570\u7684\u4e00\u4e9b\u5b9a\u7406\uff1a"},{"location":"math/simple-math/#_21","text":"\u5f62\u5982 ax\\equiv b(mod\\ m) ax\\equiv b(mod\\ m) \u7684\u7b49\u5f0f\u79f0\u4e3a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u3002 \u5b9a\u7406 1 : \u8bbe a,b\\in Z,m\\geq0 a,b\\in Z,m\\geq0 ,\u82e5 (a,m)=1 (a,m)=1 ,\u5219\u540c\u4f59\u5f0f $$ ax\\equiv b(mod m) $$ \u5728 0 \\leq x \\leq m-1 0 \\leq x \\leq m-1 \u7684\u8303\u56f4\u5185\u6070\u6709\u4e00\u4e2a\u89e3\u3002 \u8bc1\u660e\uff1a \u5728\u6a21m\u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb\u4e2d\uff1a $$ 0,1,2,...m-1 $$ \u6709\u4e00\u4e2a\u6570\u6070\u597d\u4e0eb\u540c\u4f59\u3002 \u7531\u5269\u4f59\u7cfb\u5b9a\u74063\u53ef\u77e5\uff1a $$ 0,a,2a,...a(m-1) $$ \u4e5f\u662f\u6a21m\u7684\u4e00\u7ec4\u5b8c\u5168\u5269\u4f59\u7cfb,\u4e14\u6070\u597d\u6709\u4e00\u4e2a xa xa \u4e0eb\u540c\u4f59\u3002\u90a3\u4e2ax\u5373\u4e3a\u6240\u6c42\u3002 \u5b9a\u7406 2 : \u540c\u4f59\u65b9\u7a0b ax\\equiv b(mod\\ m) ax\\equiv b(mod\\ m) \u6709\u89e3\u7684\u5145\u8981\u6761\u4ef6\u662f (a,m)|b (a,m)|b \u3002 \u8bc1\u660e\uff1a \u8bc1\u660e\u82e5\u540c\u4f59\u65b9\u7a0b ax\\equiv b(mod\\ m) ax\\equiv b(mod\\ m) \u6709\u89e3\uff0c\u5219 gcd(a,m)|b gcd(a,m)|b \u3002 \u8bbe\u540c\u4f59\u65b9\u7a0b ax\\equiv b(mod\\ m) ax\\equiv b(mod\\ m) \u7684\u89e3\u4e3a x_0 x_0 ,\u4e8e\u662f\u5b58\u5728 k\\in Z k\\in Z ,\u6709 b=ax_0+my b=ax_0+my \u3002\u56e0\u4e3a gcd(a,m)|a,gcd(a,m)|m gcd(a,m)|a,gcd(a,m)|m ,\u6240\u4ee5 gcd(a,m)|b gcd(a,m)|b \u3002 \u8bc1\u660e\u82e5 gcd(a,m)|b gcd(a,m)|b ,\u5219\u540c\u4f59\u65b9\u7a0b ax\\equiv b(mod\\ m) ax\\equiv b(mod\\ m) \u6709\u89e3\u3002 \u8bbe d=gcd(a,m) d=gcd(a,m) \u3002\u6709 gcd(\\frac{a}{d},\\frac{m}{d})=1 gcd(\\frac{a}{d},\\frac{m}{d})=1 (\u53ef\u4ee5\u7528\u4e24\u4e2a\u6570\u8d28\u56e0\u5b50\u5206\u89e3\u4e0egcd\u7684\u5173\u7cfb\u7684\u89d2\u5ea6\u6765\u60f3\u5176\u6b63\u786e\u6027) ,\u7531\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u5b9a\u74061\u53ef\u5f97\u540c\u4f59\u5f0f: $$ \\frac{a}{d}x\\equiv \\frac{b}{d}(mod \\frac{m}{d}) \\tag{1} $$ \u6709\u89e3\u3002\u8bbe\u65b9\u7a0b\u7ec4(1)\u7684\u89e3\u4e3a x_0 x_0 , x\\equiv x_0(mod\\ \\frac{m}{d}) x\\equiv x_0(mod\\ \\frac{m}{d}) \u4e5f\u662f(1)\u7684\u89e3\u3002\u5c06(1)\u5199\u6210\u7b49\u5f0f,\u5373\u5b58\u5728 $$ \\frac{a}{d}x_0+\\frac{m}{d}y=\\frac{b}{d} $$ \u4e24\u8fb9\u540c\u4e58d\u6709: $$ ax_0+my=b $$ \u5373\uff1a $$ ax_0\\equiv b( mod m) $$ \u6240\u4ee5 x_0 x_0 \u5373\u4e3a\u6240\u6c42\u3002\u540c\u65f6\uff0c\u4e0a\u8ff0\u8bc1\u660e\u53ef\u4ee5\u8bf4\u660e\uff0c\u5728\u6a21m\u4e0b\uff0c\u65b9\u7a0b\u6709d\u4e2a\u89e3\uff0c\u5176\u5206\u522b\u662f x_0,x_0+\\frac{m}{d},x_0+2\\frac{m}{d},...x_0+(d-1)\\frac{m}{d} x_0,x_0+\\frac{m}{d},x_0+2\\frac{m}{d},...x_0+(d-1)\\frac{m}{d} \u3002 \u6700\u5c0f\u6b63\u6574\u6570\u89e3\u53ef\u4ee5\u901a\u8fc7\u8868\u8fbe\u5f0f x_0=(x\\%\\frac{m}{d}+\\frac{m}{d})\\%\\frac{m}{d} x_0=(x\\%\\frac{m}{d}+\\frac{m}{d})\\%\\frac{m}{d} \u6c42\u51fa\u3002 \u6240\u4ee5\u53ea\u8981\u6211\u4eec\u6709\u529e\u6cd5\u6c42\u51fa\u4e00\u7ec4\u89e3\uff0c\u5c31\u53ef\u4ee5\u6c42\u51fa\u6240\u6709\u7684\u89e3\uff0c\u4e8e\u662f\u5c31\u6709\u4e86\u4e0b\u9762\u8fd9\u79cd\u601d\u8def\u3002 \u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u6c42\u89e3\u65b9\u6cd5\uff1a \u7528\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u5b9a\u74061\u6392\u9664\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\u73b0\u5728\u6765\u8003\u8651\u6709\u89e3\u7684\u60c5\u51b5\u3002\u9996\u5148\u5c06 ax\\equiv b(mod\\ m) ax\\equiv b(mod\\ m) \u65b9\u7a0b\u6539\u5199\u4e3a a*x+m*y=b a*x+m*y=b \u7684\u5f62\u5f0f,\u7136\u540e\u4f7f\u7528\u62d3\u5c55\u6b27\u51e0\u91cc\u5fb7\u6c42\u51fa\u4e00\u7ec4\u7279\u89e3 x_1,y_1 x_1,y_1 \u6ee1\u8db3 ax_1+my_1=(a,m) ax_1+my_1=(a,m) \u3002\u7136\u540e\u5728\u539f\u65b9\u7a0b\u4e24\u8fb9\u540c\u65f6\u9664\u4ee5 (a,m) (a,m) \u5e76\u4e58\u4e0ab\u5f97\u5230\uff1a $$ \\frac{abx_1}{(a,m)}+\\frac{mby_1}{(a,m)}=b $$ \u5c31\u5f97\u5230\u4e86\u65b9\u7a0b ax_0+my_0=b ax_0+my_0=b \u7684\u4e00\u7ec4\u89e3\u4e5f\u5c31\u662f\u540c\u4f59\u65b9\u7a0b ax_0\\equiv b(mod\\ m) ax_0\\equiv b(mod\\ m) \u7684\u4e00\u7ec4\u89e3\u3002\u77e5\u9053\u4e86\u4e00\u7ec4\u89e3\uff0c\u5269\u4e0b\u7684\u89e3\u5c31\u53ef\u4ee5\u6839\u636e \u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u5b9a\u74062\u7b2c\u4e8c\u4e2a\u8bc1\u660e \u6c42\u51fa\u5176\u4ed6\u89e3\u4e86\u3002 \u4ee3\u7801: 1 2 3 4 5 6 7 8 9 10 //\u89e3\u540c\u4f59\u65b9\u7a0b$ax0\\equiv b(mod m)$\u4e2d\u6700\u5c0f\u7684x0,\u82e5\u65e0\u89e3\u8fd4\u56defalse bool ModularEqu ( int a , int b , int m , int & x0 ){ int x , y , k ; int d = exgcd ( a , m , x , y ); if ( b % d == 0 ){ x0 = x * ( b / d ) % m ; k = m / d ; x0 = ( x0 % k + k ) % k ; return true ; } return false ; }","title":"\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b"},{"location":"math/simple-math/#_22","text":"\u7528\u6765\u89e3\u51b3\u53d6\u6a21\u6761\u4ef6\u4e0b\u9664\u6cd5\u7684\u95ee\u9898\u3002 \u5b9a\u4e49 : \u5982\u679c\u4e00\u4e2a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u6709 ax\\equiv 1(mod\\ m) ax\\equiv 1(mod\\ m) \uff0c\u5219\u79f0x\u4e3a a\u5728\u6a21m\u4e0b\u7684\u7684\u9006\u5143\uff0c\u8bb0\u4f5c a^{-1} a^{-1} \u3002 1.\u6269\u5c55\u6b27\u51e0\u91cc\u5f97\u6c42\u9006\u5143 \uff1a \u4f7f\u7528\u6761\u4ef6\uff1a\u7ebf\u6027\u540c\u4f59\u65b9\u7a0b\u6709\u89e3\u6761\u4ef6\uff0c\u5373: (a,m)=1 (a,m)=1 \u3002 \u548c\u6c42\u89e3\u540c\u4f59\u65b9\u7a0b\u4e3a\u4e00\u4e2a\u539f\u7406\u3002 2.\u5feb\u901f\u5e42\u6c42\u9006\u5143 \uff1a \u4f7f\u7528\u6761\u4ef6\uff1a\u6a21\u6570\u662f\u7d20\u6570\u3002 \u7528\u5f97\u6700\u591a\uff0c\u6c42\u89e3\u539f\u7406\u89c1 \u8d39\u9a6c\u5c0f\u5b9a\u7406\u8282 \u3002 \u4ee3\u7801\u5c31\u662f\u5feb\u901f\u5e42\u7684\u4ee3\u7801\u3002 \u53c2\u8003\u8d44\u6599\uff1a \u59dc\u6b63\u6d9b.\u300a\u4fe1\u606f\u5b89\u5168\u6570\u5b66\u57fa\u7840\u300b[M].\u5317\u4eac:\u7535\u5b50\u5de5\u4e1a\u51fa\u7248\u793e,2017. Euler's totient function - Wikipedia oi wiki \u6570\u5b66\u90e8\u5206","title":"\u9006\u5143"},{"location":"math/simple-math/#_23","text":"","title":"\u7b80\u5355\u6570\u5b66\u5b9e\u6218"},{"location":"math/simple-math/#_24","text":"1 1 2 3 5 8 13 ... 1 1 2 5 14 ... 1 5 10 10 5 1 1 4 10 20 35 56 ...","title":"\u627e\u89c4\u5f8b"},{"location":"math/simple-math/#_25","text":"\u6709\u9650\u9879\u6570\u5217\u90fd\u53ef\u4ee5\u7528\u516c\u5f0f\u8868\u793a\uff0c\u6bd4\u5982 Lagrange \u63d2\u503c\u516c\u5f0f\u5c31\u53ef\u4ee5\u6c42\u51fa\u901a\u9879\u3002 \u516c\u5f0f\u663e\u7136\u4e0d\u6b62\u4e00\u4e2a\u3002 \u6240\u4ee5\u731c\u6d4b\u662f\u6709\u98ce\u9669\u7684\u3002","title":"\u7ed3\u8bba"},{"location":"math/simple-math/#_26","text":"1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c\uff1f \u663e\u7136\u7b54\u6848\u662f 126\uff0c\u56e0\u4e3a a_n = (n-1)(n-2)(n-3)(n-4)(n-5)+n a_n = (n-1)(n-2)(n-3)(n-4)(n-5)+n \u3002 \u4f46\u5176\u5b9e\u5b83\u6709\u5f88\u591a\u79cd\u7b54\u6848\uff0c\u6bd4\u5982 a_n =C \\cdot (n-1)(n-2)(n-3)(n-4)(n-5)+n, C\u4e3a\u5e38\u6570 a_n =C \\cdot (n-1)(n-2)(n-3)(n-4)(n-5)+n, C\u4e3a\u5e38\u6570 \u3002","title":"\u4e3e\u4e2a\u6817\u5b50"},{"location":"math/simple-math/#_27","text":"Codeforces 656A - Da Vinci Powers \u627e\u89c4\u5f8b\uff0c\u8f93\u51653\u8f93\u51fa8\uff0c\u8f93\u516510\u8f93\u51fa1024\uff0c\u8f93\u516513\u8f93\u51fa8092\u3002 \u9700\u8981\u7528\u4e0b\u9762\u4ecb\u7ecd\u7684 OEIS \u89e3\u51b3\u3002","title":"\u53cd\u4f8b"},{"location":"math/simple-math/#oeis","text":"The On-Line Encyclopedia of Integer Sequences\u00ae (OEIS\u00ae) \u5305\u542b\u4e86\u7edd\u5927\u90e8\u5206\u6570\u5217\uff0c\u53ea\u80fd\u5728\u7f51\u7edc\u6bd4\u8d5b\u4e2d\u4f7f\u7528\u3002 \u4f8b\u9898 \u9898\u76ee\u6765\u6e90\uff1a2020 \u725b\u5ba2\u5bd2\u5047\u7b97\u6cd5\u5c0f\u767d\u8bad\u7ec3\u8425 \u4e00\u4e2a\u6e38\u620f\uff0c\u4eba\u7269\u653b\u51fb\u529b\u4e3a0-10\uff0c\u602a\u7269\u7684\u751f\u547d\u503c\u4e3a10\uff0c\u6bcf\u6b21\u653b\u51fb\u5bf9\u602a\u7269\u4ee5\u5747\u7b49\u76841/11\u7684\u6982\u7387\uff0c\u968f\u673a\u9020\u62100\uff0c1\uff0c2\u2026\u202610\u4e2d\u4e4b\u4e00\u70b9\u6570\u7684\u4f24\u5bb3\uff0c\u602a\u7269\u7684\u4f53\u529b\u8fbe\u52300\u6216\u66f4\u4f4e\u65f6\u89c6\u4e3a\u51fb\u8d25\uff0c\u95ee\u51fb\u8d25\u602a\u7269\u7684\u5e73\u5747\u653b\u51fb\u6b21\u6570\uff1f \u8bbe\u5f53\u602a\u7269\u8840\u5269\u4f59 n n \u65f6\u653b\u51fb\u6b21\u6570\u7684\u671f\u671b\u4e3a a_n a_n \u3002\u5219\u663e\u7136 a_0\uff1d0 a_0\uff1d0 \uff0c\u8003\u8651 n < 1 n < 1 \uff0c\u6b64\u65f6\u80af\u5b9a\u8981\u5148\u6253\u4e00\u6b21\u3002\u6253\u5b8c\u540e\u6709 \\frac{11-n}{11} \\frac{11-n}{11} \u7684\u6982\u7387\u602a\u517d\u6b7b\u4ea1\uff0c\u53e6\u5916\u6709 \\frac{1}{11} \\frac{1}{11} \u7684\u6982\u7387\u56de\u5230 a_1-a_n a_1-a_n \u4e2d\u7684\u4e00\u79cd\u60c5\u51b5\u3002\u6545\u6709 a_n=1+\\frac{1}{11}(a_1+...+a_n) a_n=1+\\frac{1}{11}(a_1+...+a_n) \u3002\u4ee4 Sn=a_1+...a_n Sn=a_1+...a_n \uff0c\u5219\u6709 a_{n}=1+\\frac{1}{11}S_{n} a_{n}=1+\\frac{1}{11}S_{n} \u3002\u89e3\u5f97 a_n=(\\frac{11}{10})^n a_n=(\\frac{11}{10})^n \u3002\u672c\u9898\u7b54\u6848\u4e3a 1.1^{10} 1.1^{10} \u3002 \u5177\u4f53\u8ba1\u7b97\u8fc7\u7a0b a_{n}=1+\\frac{1}{11}S_{n} a_{n}=1+\\frac{1}{11}S_{n} a_{n-1}=1+\\frac{1}{11}S_{n-1} a_{n-1}=1+\\frac{1}{11}S_{n-1} \u76f8\u51cf a_n-a_{n-1}=\\frac{1}{11}*a_n a_n-a_{n-1}=\\frac{1}{11}*a_n a_n=\\frac{11}{10}a_{n-1}(n >0) a_n=\\frac{11}{10}a_{n-1}(n >0) \u5f53\u602a\u7269\u8840\u5269\u4f59 n n \u65f6\u653b\u51fb\u6b21\u6570\u7684\u671f\u671b\u4e3a a_n a_n \u3002\u5219\u663e\u7136 a_0\uff1d0 a_0\uff1d0 n = 1 n = 1 \u4ee3\u5165\u89e3\u5f97 a_1=\\frac{11}{10} a_1=\\frac{11}{10} \u5219 a_n=(\\frac{11}{10})^n a_n=(\\frac{11}{10})^n","title":"OEIS"},{"location":"problems/How-to-use/","text":"\u505a\u9898\u6307\u5357 \u00b6 \u8fd9\u91cc\u6574\u7406\u7684\u662fACM\u96c6\u8bad\u961f\u6210\u5458\u505a\u8fc7\u7684\u9898\u3002\u4ee5\u4fbf\u5927\u5bb6\u5de9\u56fa\u77e5\u8bc6\u70b9\uff0c\u4ee5\u53ca\u65b9\u4fbf\u8bb2\u8bfe\u7684\u540c\u5b66\u627e\u9898\u3002 \u96be\u5ea6\u4e3a\u5206\u4e3a: \u5165\u95e8\uff0c\u7b80\u5355\uff0c\u8f83\u7b80\u5355\uff0c\u4e2d\u7b49\uff0c\u8f83\u96be\uff0c\u96be \u5f53\u7136\u96be\u5ea6\u4e3b\u89c2\u6210\u5206\u8f83\u5927\uff0c\u5982\u679c\u8ba4\u4e3a\u67d0\u4e2a\u9898\u76ee\u96be\u5ea6\u4e0d\u592a\u5408\u7406\uff0c\u4e5f\u53ef\u4ee5\u548c\u8d1f\u8d23\u4eba\u8bf4\u4e00\u4e0b \u9898\u76ee\u63cf\u8ff0\u4e3a\u8fd9\u4e00\u95ee\u9898\u5177\u4f53\u4e3a\u8fd9\u4e2a\u5206\u652f\u4e0b\u7684\u54ea\u4e00\u7c7b\u95ee\u9898\uff0c\u5982\u679c\u8fd9\u4e2a\u9898\u76ee\u6bd4\u8f83\u7ecf\u5178\u7684\u8bdd(\u6bd4\u5982\u516b\u7687\u540e)\u4e5f\u53ef\u4ee5\u5199\u4e0a\u53bb\u3002 \u5982\u4f55\u8d21\u732e \u00b6 \u6b22\u8fce\u5927\u5bb6\u628a\u81ea\u5df1\u5199\u7684\u9898\u89e3\u653e\u5728wiki\u4e0a\u548c\u5927\u5bb6\u5206\u4eab\uff01 \u9898\u76ee\u9875\u9762\u6e90\u6587\u4ef6\u662f\u653e\u5728 docs/problems\u4e2d\u7684 \u6dfb\u52a0\u9898\u76ee \u00b6 \u5728\u76f8\u5e94\u7684\u5206\u7c7b\u9875\u9762\uff0c\u6309\u7167\u4ee5\u5f80\u7684\u683c\u5f0f\uff0c\u5199\u5165\u94fe\u63a5\uff0c\u96be\u5ea6\u5373\u53ef\u3002 \u5efa\u8bae\u96be\u5ea6\u548c\u522b\u7684\u4eba\u8ba8\u8bba\u4e00\u4e0b\u518d\u5b9a\uff0c\u6bd5\u7adf\u4f1a\u8005\u4e0d\u96be\uff0c\u96be\u8005\u4e0d\u4f1a\u3002 \u6dfb\u52a0\u9898\u89e3 \u00b6 \u5728 xxx-solution.md \u4e2d\uff0c\u52a0\u5165\u9898\u76ee\u5e8f\u53f7(\u8bb0\u7740\u6309\u987a\u5e8f\uff0c\u5982\u679c\u5b58\u5728\u5c31\u76f4\u63a5\u653e\u94fe\u63a5\u5c31\u597d)\uff0c\u7136\u540e\u5728\u4e0b\u9762\u653e\u94fe\u63a5\u3002 \u6dfb\u52a0\u65b0\u7684\u5206\u7c7b \u00b6 \u5728/docs/problems \u76ee\u5f55\u4e0b\u6dfb\u52a0markdown\u6587\u4ef6\uff0c\u5e76\u5728mkdocs.yml \u6587\u4ef6\u5185\u5bb9\u91cc\u589e\u52a0\u76f8\u5e94\u7684\u9875\u9762\uff08\u4eff\u7167\u4e4b\u524d\u5df2\u7ecf\u5199\u597d\u7684\uff09\u5373\u53ef\u3002 \u5177\u4f53\u7684\u7f51\u7ad9\u64cd\u4f5c\u53ef\u4ee5\u770b github \u91cc\u7684ReadMe\u90e8\u5206","title":"\u4f7f\u7528\u6307\u5357"},{"location":"problems/How-to-use/#_1","text":"\u8fd9\u91cc\u6574\u7406\u7684\u662fACM\u96c6\u8bad\u961f\u6210\u5458\u505a\u8fc7\u7684\u9898\u3002\u4ee5\u4fbf\u5927\u5bb6\u5de9\u56fa\u77e5\u8bc6\u70b9\uff0c\u4ee5\u53ca\u65b9\u4fbf\u8bb2\u8bfe\u7684\u540c\u5b66\u627e\u9898\u3002 \u96be\u5ea6\u4e3a\u5206\u4e3a: \u5165\u95e8\uff0c\u7b80\u5355\uff0c\u8f83\u7b80\u5355\uff0c\u4e2d\u7b49\uff0c\u8f83\u96be\uff0c\u96be \u5f53\u7136\u96be\u5ea6\u4e3b\u89c2\u6210\u5206\u8f83\u5927\uff0c\u5982\u679c\u8ba4\u4e3a\u67d0\u4e2a\u9898\u76ee\u96be\u5ea6\u4e0d\u592a\u5408\u7406\uff0c\u4e5f\u53ef\u4ee5\u548c\u8d1f\u8d23\u4eba\u8bf4\u4e00\u4e0b \u9898\u76ee\u63cf\u8ff0\u4e3a\u8fd9\u4e00\u95ee\u9898\u5177\u4f53\u4e3a\u8fd9\u4e2a\u5206\u652f\u4e0b\u7684\u54ea\u4e00\u7c7b\u95ee\u9898\uff0c\u5982\u679c\u8fd9\u4e2a\u9898\u76ee\u6bd4\u8f83\u7ecf\u5178\u7684\u8bdd(\u6bd4\u5982\u516b\u7687\u540e)\u4e5f\u53ef\u4ee5\u5199\u4e0a\u53bb\u3002","title":"\u505a\u9898\u6307\u5357"},{"location":"problems/How-to-use/#_2","text":"\u6b22\u8fce\u5927\u5bb6\u628a\u81ea\u5df1\u5199\u7684\u9898\u89e3\u653e\u5728wiki\u4e0a\u548c\u5927\u5bb6\u5206\u4eab\uff01 \u9898\u76ee\u9875\u9762\u6e90\u6587\u4ef6\u662f\u653e\u5728 docs/problems\u4e2d\u7684","title":"\u5982\u4f55\u8d21\u732e"},{"location":"problems/How-to-use/#_3","text":"\u5728\u76f8\u5e94\u7684\u5206\u7c7b\u9875\u9762\uff0c\u6309\u7167\u4ee5\u5f80\u7684\u683c\u5f0f\uff0c\u5199\u5165\u94fe\u63a5\uff0c\u96be\u5ea6\u5373\u53ef\u3002 \u5efa\u8bae\u96be\u5ea6\u548c\u522b\u7684\u4eba\u8ba8\u8bba\u4e00\u4e0b\u518d\u5b9a\uff0c\u6bd5\u7adf\u4f1a\u8005\u4e0d\u96be\uff0c\u96be\u8005\u4e0d\u4f1a\u3002","title":"\u6dfb\u52a0\u9898\u76ee"},{"location":"problems/How-to-use/#_4","text":"\u5728 xxx-solution.md \u4e2d\uff0c\u52a0\u5165\u9898\u76ee\u5e8f\u53f7(\u8bb0\u7740\u6309\u987a\u5e8f\uff0c\u5982\u679c\u5b58\u5728\u5c31\u76f4\u63a5\u653e\u94fe\u63a5\u5c31\u597d)\uff0c\u7136\u540e\u5728\u4e0b\u9762\u653e\u94fe\u63a5\u3002","title":"\u6dfb\u52a0\u9898\u89e3"},{"location":"problems/How-to-use/#_5","text":"\u5728/docs/problems \u76ee\u5f55\u4e0b\u6dfb\u52a0markdown\u6587\u4ef6\uff0c\u5e76\u5728mkdocs.yml \u6587\u4ef6\u5185\u5bb9\u91cc\u589e\u52a0\u76f8\u5e94\u7684\u9875\u9762\uff08\u4eff\u7167\u4e4b\u524d\u5df2\u7ecf\u5199\u597d\u7684\uff09\u5373\u53ef\u3002 \u5177\u4f53\u7684\u7f51\u7ad9\u64cd\u4f5c\u53ef\u4ee5\u770b github \u91cc\u7684ReadMe\u90e8\u5206","title":"\u6dfb\u52a0\u65b0\u7684\u5206\u7c7b"},{"location":"problems/bit-solution/","text":"\u6682\u65f6\u8fd8\u6ca1\uff08\u60b2\uff09","title":"\u9898\u89e3"},{"location":"problems/bit/","text":"\u5e8f\u53f7 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u96be\u5ea6 1 https://codeforces.com/contest/1659/problem/B \u4e2d\u7b49 2 https://acm.hdu.edu.cn/showproblem.php?pid=2817 \u7b80\u5355 3 http://poj.org/problem?id=2453 \u4e2d\u7b49 4 https://codeforces.com/problemset/problem/437/B \u4e2d\u7b49 5 https://acm.hdu.edu.cn/showproblem.php?pid=6702 \u8f83\u7b80\u5355 6 https://codeforces.com/problemset/problem/1017/B \u8f83\u7b80\u5355 7 https://codeforces.com/problemset/problem/1426/C \u8f83\u7b80\u5355 8 https://codeforces.com/problemset/problem/1428/A \u8f83\u7b80\u5355","title":"\u9898\u76ee"},{"location":"problems/construct-solution/","text":"\u6682\u65f6\u8fd8\u6ca1\u6709\u9898\u89e3\uff08\u60b2\uff09","title":"\u9898\u89e3"},{"location":"problems/construct/","text":"\u5e8f\u53f7 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u96be\u5ea6 1 https://codeforces.com/contest/1659/problem/A \u7b80\u5355 2 https://codeforces.com/problemset/problem/1167/B \u4e2d\u7b49","title":"\u9898\u76ee"},{"location":"problems/count-solution/","text":"\u6682\u65f6\u8fd8\u6ca1\uff08\u60b2\uff09","title":"\u9898\u89e3"},{"location":"problems/count/","text":"\u5e8f\u53f7 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u96be\u5ea6 1 https://codeforces.com/problemset/problem/676/B \u8f83\u96be 2 https://codeforces.com/problemset/problem/768/B \u8f83\u96be","title":"\u9898\u76ee"},{"location":"problems/dichotomy-solution/","text":"","title":"\u9898\u89e3"},{"location":"problems/dichotomy/","text":"\u5e8f\u53f7 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u96be\u5ea6 1 http://poj.org/problem?id=2456 \u7b80\u5355 2 http://poj.org/problem?id=3122 3 https://codeforces.com/problemset/problem/670/D1 \u4e2d\u7b49","title":"\u9898\u76ee"},{"location":"problems/difference-solution/","text":"\u8fd8\u6ca1\u6709\u9898\u89e3(\u60b2)","title":"\u9898\u89e3"},{"location":"problems/difference/","text":"\u5e8f\u53f7 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u96be\u5ea6 1 https://codeforces.com/contest/1661/problem/D \u8f83\u96be","title":"\u9898\u76ee"},{"location":"problems/divide-solution/","text":"\u6682\u65f6\u8fd8\u6ca1\u6709\u9898\u89e3(\u60b2)","title":"\u9898\u89e3"},{"location":"problems/divide/","text":"\u5e8f\u53f7 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u96be\u5ea6 1 https://vjudge.net/contest/485207#problem/C \u4e2d\u7b49","title":"\u9898\u76ee"},{"location":"problems/dp-solution/","text":"\u6682\u65f6\u8fd8\u6ca1\u6709\u9898\u89e3\uff08\u60b2\uff09","title":"\u9898\u89e3"},{"location":"problems/dp/","text":"\u5e8f\u53f7 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u96be\u5ea6 1 https://acm.hdu.edu.cn/showproblem.php?pid=1159 \u677f\u5b50 \u5165\u95e8 2 http://poj.org/problem?id=1384 \u5165\u95e8 3 https://acm.hdu.edu.cn/showproblem.php?pid=1864 \u4e2d\u7b49 4 https://acm.hdu.edu.cn/showproblem.php?pid=1231 \u4e2d\u7b49 5 https://acm.hdu.edu.cn/showproblem.php?pid=2159 \u4e2d\u7b49 6 https://codeforces.com/contest/1519/problem/D \u8f83\u96be 7 http://bailian.openjudge.cn/practice/4147?lang=en_US \u6c49\u8bfa\u5854 \u7b80\u5355 8 https://acm.hdu.edu.cn/showproblem.php?pid=1207 4\u67f1\u5b50\u6c49\u8bfa\u5854 \u8f83\u7b80\u5355 9 https://acm.hdu.edu.cn/showproblem.php?pid=2044 \u7b80\u5355 10 https://acm.hdu.edu.cn/showproblem.php?pid=2047 \u8f83\u7b80\u5355","title":"\u9898\u76ee"},{"location":"problems/greedy-solution/","text":"\u6682\u65f6\u8fd8\u6ca1\uff08\u60b2\uff09","title":"\u9898\u89e3"},{"location":"problems/greedy/","text":"\u5e8f\u53f7 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u96be\u5ea6 1 https://codeforces.com/problemset/problem/1108/D \u7b80\u5355 2 https://acm.hdu.edu.cn/showproblem.php?pid=5240 \u8f83\u7b80\u5355 3 http://poj.org/problem?id=1328 \u8f83\u7b80\u5355 4 https://codeforces.com/problemset/problem/720/A \u4e2d\u7b49","title":"\u9898\u76ee"},{"location":"problems/math-solution/","text":"","title":"\u9898\u89e3"},{"location":"problems/math/","text":"\u5e8f\u53f7 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u96be\u5ea6 1 https://codeforces.com/problemset/problem/485/D \u4e2d\u7b49 2 https://codeforces.com/problemset/problem/459/B \u7b80\u5355 3 https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1917 \u8f83\u7b80\u5355 4 https://codeforces.com/problemset/problem/526/C \u4e2d\u7b49 5 https://acm.hdu.edu.cn/showproblem.php?pid=5719 \u8f83\u96be 6 http://poj.org/problem?id=1152 \u4e2d\u7b49 7 http://poj.org/problem?id=1061 exgcd\u677f\u5b50\u9898 \u4e2d\u7b49 8 http://bailian.openjudge.cn/practice/4117?lang=en_US \u6574\u6570\u5212\u5206\u677f\u5b50 \u8f83\u7b80\u5355 9 http://poj.org/problem?id=1664 \u653e\u62bd\u5c49\u95ee\u9898\u677f\u5b50 \u8f83\u7b80\u5355 10 https://www.51nod.com/Challenge/Problem.html#problemId=1073 \u7ea6\u745f\u592b\u95ee\u9898\u6570\u5b66\u89e3 \u8f83\u7b80\u5355 11 https://acm.hdu.edu.cn/showproblem.php?pid=2032 \u8f93\u51fa\u6768\u8f89\u4e09\u89d2 \u7b80\u5355 12 https://acm.hdu.edu.cn/showproblem.php?pid=2050 \u5361\u7279\u5170\u6570\u677f\u5b50\u9898 \u8f83\u7b80\u5355","title":"\u9898\u76ee"},{"location":"problems/op-solution/","text":"\u6682\u65f6\u8fd8\u6ca1\uff08\u60b2\uff09","title":"\u9898\u89e3"},{"location":"problems/op/","text":"\u5c31\u662f\u76f4\u63a5\u679a\u4e3e\uff0c\u4f46\u662f\u9700\u8981\u4f18\u5316\u7684\u4e00\u4e9b\u9898\u76ee \u5e8f\u53f7 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u96be\u5ea6 1 https://codeforces.com/problemset/problem/437/B \u4e2d\u7b49 2 http://poj.org/problem?id=1068 \u6808 \u4e2d\u7b49 3 http://poj.org/problem?id=3250 \u5355\u8c03\u961f\u5217 \u4e2d\u7b49","title":"\u9898\u76ee"},{"location":"problems/presum-solution/","text":"Problem 1 \u00b6 https://blog.csdn.net/SGDBS233/article/details/124750782?spm=1001.2014.3001.5501 BY \u6768\u5b87\u68ee","title":"\u9898\u89e3"},{"location":"problems/presum-solution/#problem-1","text":"https://blog.csdn.net/SGDBS233/article/details/124750782?spm=1001.2014.3001.5501 BY \u6768\u5b87\u68ee","title":"Problem 1"},{"location":"problems/presum/","text":"\u5e8f\u53f7 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u96be\u5ea6 1 https://codeforces.com/contest/1659/problem/C \u8f83\u96be","title":"\u9898\u76ee"},{"location":"problems/recursion-solution/","text":"Problem 11 \u00b6 https://blog.csdn.net/SGDBS233/article/details/124399800?spm=1001.2014.3001.5501 BY \u6768\u5b87\u68ee","title":"\u9898\u89e3"},{"location":"problems/recursion-solution/#problem-11","text":"https://blog.csdn.net/SGDBS233/article/details/124399800?spm=1001.2014.3001.5501 BY \u6768\u5b87\u68ee","title":"Problem 11"},{"location":"problems/recursion/","text":"\u5e8f\u53f7 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u96be\u5ea6 1 http://poj.org/problem?id=1664 \u6570\u5b66\uff0c\u9012\u5f52 \u4e2d\u7b49 2 http://poj.org/problem?id=2247 \u9012\u5f52 \u8f83\u7b80\u5355 3 https://codeforces.com/problemset/problem/676/B \u9012\u63a8 \u4e2d\u7b49 4 https://acm.hdu.edu.cn/showproblem.php?pid=2553 \u7b80\u5355 5 https://codeforces.com/problemset/problem/124/B \u4e2d\u7b49 6 https://codeforces.com/problemset/problem/908/B \u8f83\u7b80\u5355 7 https://acm.hdu.edu.cn/showproblem.php?pid=6351 \u4e2d\u7b49 8 https://codeforces.com/problemset/problem/550/B \u679a\u4e3e\u5b50\u96c6 \u7b80\u5355 9 https://acm.hdu.edu.cn/showproblem.php?pid=1557 \u679a\u4e3e\u5b50\u96c6 \u7b80\u5355 10 https://codeforces.com/problemset/problem/336/C \u679a\u4e3e\u5b50\u96c6 \u4e2d\u7b49 11 https://acm.hdu.edu.cn/showproblem.php?pid=6435 \u591a\u7ef4\u66fc\u54c8\u987f\u8ddd\u79bb\u677f\u5b50\u9898 \u8f83\u96be 12 http://poj.org/problem?id=3984 \u641c\u7d22\u677f\u5b50\u9898 \u5165\u95e8 13 https://acm.hdu.edu.cn/showproblem.php?pid=1548 \u8f83\u7b80\u5355 14 https://codeforces.com/problemset/problem/198/B \u641c\u7d22 \u4e2d\u7b49 15 https://acm.hdu.edu.cn/showproblem.php?pid=1253 \u641c\u7d22 \u7b80\u5355 16 https://acm.hdu.edu.cn/showproblem.php?pid=1241 \u641c\u7d22 \u7b80\u5355 17 https://acm.hdu.edu.cn/showproblem.php?pid=6708 \u8f83\u7b80\u5355","title":"\u9898\u76ee"},{"location":"problems/sort-solution/","text":"\u6682\u65f6\u8fd8\u6ca1\u6709\uff08\u60b2\uff09","title":"\u9898\u89e3"},{"location":"problems/sort/","text":"\u5e8f\u53f7 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u96be\u5ea6 1 https://codeforces.com/problemset/problem/978/C \u7b80\u5355 2 https://codeforces.com/problemset/problem/1015/C \u7b80\u5355 3 https://codeforces.com/problemset/problem/99/B \u7b80\u5355 4 https://codeforces.com/problemset/problem/192/A 5 https://www.51nod.com/Challenge/Problem.html#problemId=2138 \u8f83\u7b80\u5355 6 https://acm.hdu.edu.cn/showproblem.php?pid=5702 \u7b80\u5355","title":"\u9898\u76ee"},{"location":"problems/ta-solution/","text":"Problem.2 \u00b6 https://blog.csdn.net/SGDBS233/article/details/124764391?spm=1001.2014.3001.5501 BY \u6768\u5b87\u68ee","title":"\u9898\u89e3"},{"location":"problems/ta-solution/#problem2","text":"https://blog.csdn.net/SGDBS233/article/details/124764391?spm=1001.2014.3001.5501 BY \u6768\u5b87\u68ee","title":"Problem.2"},{"location":"problems/ta/","text":"\u5e8f\u53f7 \u94fe\u63a5 \u9898\u76ee\u63cf\u8ff0 \u96be\u5ea6 1 https://www.51nod.com/Challenge/Problem.html#problemId=2134 \u9006\u5e8f\u5bf9\u677f\u5b50 \u7b80\u5355 2 https://codeforces.com/contest/1668/problem/D","title":"\u9898\u76ee"},{"location":"search/dfs/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a lengwind , HBlade \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u6808 \u00b6 \u4e00\u79cd\u6570\u636e\u7ed3\u6784 \u7279\u6027\uff1a\u540e\u8fdb\u5148\u51fa\uff08\u5982\u540c\u5b50\u5f39\u5f39\u5323\u4e0a\u5b50\u5f39\u4e00\u6837\uff0c\u5148\u653e\u8fdb\u53bb\u7684\u5b50\u5f39\u662f\u5728\u6700\u4e0b\u5c42\u7684\uff0c\u6700\u540e\u624d\u4f1a\u88ab\u6253\u51fa\u6765\uff1b\u800c\u6700\u540e\u653e\u8fdb\u53bb\u7684\u5b50\u5f39\u662f\u6700\u4e0a\u5c42\u7684\uff0c\u4f1a\u6700\u5148\u6253\u51fa\u6765\uff09 \u6808\u7684\u76f8\u5173\u6982\u5ff5\uff1a \u00b6 \u6808\u9876\u4e0e\u6808\u5e95\uff1a\u5141\u8bb8\u5143\u7d20\u63d2\u5165\u4e0e\u5220\u9664\u7684\u4e00\u7aef\u79f0\u4e3a\u6808\u9876\uff0c\u53e6\u4e00\u7aef\u79f0\u4e3a\u6808\u5e95\u3002 \u538b\u6808\uff1a\u6808\u7684\u63d2\u5165\u64cd\u4f5c\uff0c\u53eb\u505a\u8fdb\u6808\uff0c\u4e5f\u79f0\u538b\u6808\u3001\u5165\u6808\u3002 \u5f39\u6808\uff1a\u6808\u7684\u5220\u9664\u64cd\u4f5c\uff0c\u4e5f\u53eb\u505a\u51fa\u6808\u3002 \u4f8b\u5982\u6211\u4eec\u6709\u4e00\u4e2a\u5b58\u50a8\u6574\u578b\u5143\u7d20\u7684\u6808\uff0c\u6211\u4eec\u4f9d\u6b21\u538b\u6808\uff1a{1,2,3} \u5728\u538b\u6808\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6808\u9876\u7684\u4f4d\u7f6e\u4e00\u76f4\u5728\u201c\u5411\u4e0a\u201d\u79fb\u52a8\uff0c\u800c\u6808\u5e95\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684\u3002 \u5982\u679c\u6211\u4eec\u8981\u628a\u6808\u4e2d\u7684\u5143\u7d20\u5f39\u51fa\u6765\uff1a STL\u5c31\u6709\u6808\uff0c\u4e0d\u9700\u8981\u5927\u5bb6\u91cd\u65b0\u624b\u5199\u4e00\u4e2a\u6808\u3002\u5934\u6587\u4ef6\uff1a 1 #include <stack> \u8c03\u7528\uff1a 1 2 stack < int > s ; stack < char > s ; \u4e00\u4e9b\u5e38\u7528\u7684\u5173\u4e8e\u6808\u7684\u51fd\u6570\uff1a top() \u8fd4\u56de\u6808\u9876\u90e8\u7684\u5143\u7d20 push(x)\u63d2\u5165\u5143\u7d20x\u5230\u9876\u90e8 pop()\u5f39\u51fa\u9876\u90e8\u5143\u7d20 size()\u8fd4\u56de\u6808\u4e2d\u5143\u7d20\u4e2a\u6570 empty() bool\u7c7b\u578b\uff0c\u5982\u679c\u6808\u4e3a\u7a7a\u8fd4\u56detrue,\u5426\u5219\u8fd4\u56defalse \u8c03\u7528\u53ea\u9700\u8981\u628a\u5b9a\u4e49\u51fa\u6765\u7684\u6808\u5bf9\u8c61\u5982s\uff0c\u4f7f\u7528 s.top() , s.push(1) , while(!s.empty()) \u2026\u2026\u5373\u53ef \u6808\u7684\u5e94\u7528 \u00b6 1.\u62ec\u53f7\u5339\u914d \u00b6 \u901a\u8fc7\u4f7f\u7528\u6808\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u53bb\u5224\u65ad\u4e00\u4e2a\u62ec\u53f7\u8868\u8fbe\u5f0f\u662f\u5426\u5408\u6cd5 () , (()) , )() \u5177\u4f53\u6b65\u9aa4: 1). \u9996\u5148\u65b0\u5efa\u4e00\u4e2a\u7a7a\u6808\uff0c\u904d\u5386\u6574\u4e2a\u8868\u8fbe\u5f0f 2). \u9047\u5230\u5de6\u62ec\u53f7\u65f6\uff0c\u5c06\u5bf9\u5e94\u4e0b\u6807\u5165\u6808 3). \u9047\u5230\u53f3\u62ec\u53f7\u65f6\uff0c\u68c0\u67e5\u6808\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\u90a3\u4e48\u5f39\u51fa\u6808\u9876\uff0c\u5426\u5219\u8868\u8fbe\u5f0f\u4e0d\u5408\u6cd5 2.\u540e\u7f00\u8868\u8fbe\u5f0f \u00b6 \u6211\u4eec\u65e5\u5e38\u89c1\u5230\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\u5982 a + b , a * (b + c) \u7b49\u90fd\u662f\u4e2d\u7f00\u8868\u8fbe\u5f0f \u800c a b + , a b c + *\u662f\u5bf9\u5e94\u7684\u540e\u7f00\u8868\u8fbe\u5f0f \u901a\u8fc7\u6808 \u53ef\u4ee5\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u5316\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u5f88\u65b9\u4fbf\u7684\u5f97\u5230\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u901a\u8fc7\u8fd9\u4e2a\u539f\u7406\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u7b80\u6613\u7684\u8ba1\u7b97\u5668 \u5177\u4f53\u5b9e\u73b0\u7b97\u6cd5\uff1a 1). \u521d\u59cb\u5316\u4e24\u4e2a\u7a7a\u6808\uff1a\u8fd0\u7b97\u6570\u6808A\uff0c\u8fd0\u7b97\u7b26\u6808B\uff0c\u904d\u5386\u6574\u4e2a\u4e2d\u7f00\u8868\u8fbe\u5f0f 2). \u9047\u5230\u8fd0\u7b97\u6570 a \u76f4\u63a5\u5165\u8fd0\u7b97\u6570\u6808A (a -> A) 3). \u9047\u5230\u8fd0\u7b97\u7b26\u53f7 $ \u5224\u65ad \u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 > \u6808\u9876\u7684\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 \uff0c \u200b \u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u5165\u6808\uff0c\u5426\u5219\u5c06B\u6808\u9876\u7b26\u53f7\u51fa\u6808\uff0c\u5e76\u53d6\u8fd0\u7b97\u6570\u6808A\u7684\u6808\u9876\u5143\u7d20a\u548c\u6b21\u6808\u9876\u5143\u7d20b\uff08\u4e5f\u5c31\u662f\u524d\u4e24\u4e2a\u5143\u7d20\uff09\uff0c\u8fdb\u884c\u76f8\u5e94\u7684\u8fd0\u7b97a$b,\u5e76\u5c06\u8fd0\u7b97\u7ed3\u679c\u5165\u6808A 4). \u5982\u679c\u904d\u5386\u5b8c\u8868\u8fbe\u5f0f\u4e86\uff0c\u800c\u8fd0\u7b97\u7b26\u6808B\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5c06B\u6808\u9876\u7b26\u53f7\u51fa\u6808\uff0c\u5e76\u53d6\u8fd0\u7b97\u6570\u6808A\u7684\u6808\u9876\u5143\u7d20a\u548c\u6b21\u6808\u9876\u5143\u7d20b\uff08\u4e5f\u5c31\u662f\u524d\u4e24\u4e2a\u5143\u7d20\uff09\uff0c\u8fdb\u884c\u76f8\u5e94\u7684\u8fd0\u7b97a$b,\u5e76\u5c06\u8fd0\u7b97\u7ed3\u679c\u5165\u6808A \u6700\u7ec8\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u7ed3\u679c\u5c31\u662f\u6808A\u7684\u6808\u9876\u5143\u7d20 \u6ce8\u610f: \u5982\u679c\u662f\u5de6\u62ec\u53f7\u90a3\u4e48\u4e0d\u7528\u5224\u65ad\u4f18\u5148\u7ea7\u76f4\u63a5\u5165\u6808\uff0c\u662f\u53f3\u62ec\u53f7\u90a3\u4e48\u4e00\u76f4\u5f39\u51fa\u6808\u9876\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u5c06\u5de6\u62ec\u53f7\u4e5f\u5f39\u51fa\uff0c\u7ed3\u675f\u3002 \u5982\u679c\u9047\u5230\u8fd0\u7b97\u7b26\u800c\u6808\u9876\u662f\u62ec\u53f7\uff0c\u90a3\u4e48\u76f4\u63a5\u4e0d\u7528\u5224\u65ad\u4f18\u5148\u7ea7\u76f4\u63a5\u5165\u6808\u3002 3.\u4e2d\u65ad\uff0c\u5b50\u7a0b\u5e8f\u8c03\u7528\u7b49\u7b49\u65b9\u9762\u5e94\u7528\u5e7f\u6cdb \u00b6 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 DFS \u00b6 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\uff08\u82f1\u8bed\uff1aDepth-First-Search\uff0c\u7b80\u79f0DFS\uff09 \u5b9a\u4e49\uff1a\u662fACM\u4e2d\u4e00\u79cd\u5341\u5206\u5e38\u89c1\u548c\u5e38\u7528\u7684\u641c\u7d22\u7b97\u6cd5 \u65b9\u5f0f\uff1a\u4e00\u822c\u901a\u8fc7\u9012\u5f52\u51fd\u6570\u7684\u65b9\u5f0f\uff0c\u6765\u641c\u7d22\u6bcf\u4e00\u4e2a\u9700\u8981\u7684\u72b6\u6001\uff0c\u53bb\u5f97\u5230\u6709\u7528\u7684\u4fe1\u606f\uff0c\u8fdb\u800c\u66f4\u65b0\u7b54\u6848\u3002 \u4e00\u822c\u7684\u641c\u7d22\u51fd\u6570\u5305\u62ec\uff1a 1.\u8fb9\u754c\u6761\u4ef6\uff08\u641c\u7d22\u7ec8\u6b62\u7684\u6761\u4ef6\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u8bbe\u7f6e\u597d\u8fb9\u754c\u6761\u4ef6\u4e0d\u7136\u5bb9\u6613\u6b7b\u9012\u5f52\uff09 2.\u9012\u5f52\u4e3b\u4f53 3.\u9012\u5f52\u5206\u652f 1 2 3 4 5 6 void dfs ( int u , int dep ) { if ( u == dep ) return ; ///\u8fb9\u754c\u6761\u4ef6 xxx ///\u641c\u7d22\u7684\u4e3b\u8981\u5185\u5bb9 dfs ( u + 1 , dep ); ///\u641c\u7d22\u7684\u5206\u652f } DFS\u641c\u7d22\u7684\u8fc7\u7a0b\u5176\u5b9e\u662f\u4e00\u79cd\u6811\u578b\u7ed3\u6784\uff0c\u4e00\u822c\u79f0\u4e3aDFS\u6811\u3002 DFS\u4e3e\u4f8b \u00b6 1. DFS\u679a\u4e3e\u5b50\u96c6 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <bits/stdc++.h> using namespace std ; const int N = 20 ; bool used [ N ]; int a [ N ]; int n ; vector < int > v ; void DFS ( int u ) //u\u8868\u793a\u73b0\u5728\u641c\u7684\u662f\u7b2cu\u4e2a\u5143\u7d20(\u7f16\u53f70~n-1) { if ( u == n ) ///\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 { for ( int i : v ) cout << i + 1 << ' ' ; cout << endl ; return ; } //\u641c\u7d22\u7684\u5206\u652f\u6709\u4e24\u4e2a ///\u4e0d\u9009\u7b2cu\u4e2a\u5143\u7d20 DFS ( u + 1 ); ///\u9009\u7b2cu\u4e2a\u5143\u7d20 v . push_back ( u ); //\u8fdb\u884c\u64cd\u4f5c DFS ( u + 1 ); v . pop_back (); //\u56de\u6eaf\u8fd8\u539f\u73b0\u573a } int main () { cin >> n ; DFS ( 0 ); } -- 2.DFS\u679a\u4e3e\u5168\u6392\u5217 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <iostream> #include <algorithm> using namespace std ; const int N = 20 ; bool used [ N ]; //\u5168\u5c40bool\u6570\u7ec4\u8bb0\u5f55\u67d0\u4e2a\u6570\u662f\u5426\u88ab\u9009\u8fc7 int a [ N ]; int n ; void DFS ( int u ) //u\u8868\u793a\u73b0\u5728\u641c\u7684\u662f\u7b2cu\u4e2a\u5143\u7d20(\u7f16\u53f70~n-1) { if ( u == n ) //\u8fb9\u754c\u6761\u4ef6 \u6b64\u65f6\u8bf4\u660e\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6392\u5217\u5df2\u7ecf\u679a\u4e3e\u51fa\u6765\u4e86 { //\u76f4\u63a5\u8f93\u51fa\u679a\u4e3e\u7684\u6392\u5217\u5373\u53ef for ( int i = 0 ; i < n ; ++ i ) cout << a [ i ] + 1 << ' ' ; cout << endl ; return ; } for ( int i = 0 ; i < n ; ++ i ) { if ( ! used [ i ]) { used [ i ] = 1 , a [ u ] = i ; //\u6807\u8bb0 DFS ( u + 1 ); used [ i ] = 0 , a [ u ] = 0 ; //\u56de\u6eaf\u8fd8\u539f\u73b0\u573a } } } /* dfs(0): used[0] = 1, a[0] = 0; dfs(1): used[1] = 1, a[1] = 1; dfs(2): used[2] = 1, a[2] = 2; dfs(3) > 0 1 2 */ int main () { cin >> n ; DFS ( 0 ); } 3.\u516b\u7687\u540e\u95ee\u9898 \u00b6 \u516b\u7687\u540e\u95ee\u9898 \uff08\u82f1\u6587\uff1a Eight queens \uff09\uff0c\u662f\u56de\u6eaf\u7b97\u6cd5\u7684\u5178\u578b\u6848\u4f8b\u3002 \u95ee\u9898\u8868\u8ff0\u4e3a\uff1a\u57288\u00d78\u683c\u7684\u56fd\u9645\u8c61\u68cb\u4e0a\u6446\u653e8\u4e2a\u7687\u540e\u68cb\u5b50\uff0c\u4f7f\u5176\u4e0d\u80fd\u4e92\u76f8\u653b\u51fb\uff0c\u5373\u4efb\u610f\u4e24\u4e2a\u7687\u540e\u90fd\u4e0d\u80fd\u5904\u4e8e\u540c\u4e00\u884c\u3001\u540c\u4e00\u5217\u6216\u540c\u4e00\u659c\u7ebf\u4e0a\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u6446\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int n , ans ; int col [ N ], djx [ N ], ndjx [ N ]; void DFS ( int u ) //DFS\u8bb0\u5f55\u7684\u72b6\u6001\u662f\u884c\u53f7 { if ( u == n ) //\u5982\u679c\u6df1\u641c\u5230\u4e86\u7b2cn\u884c\uff0c\u8bf4\u660e0~n-1\u884c\u90fd\u653e\u7f6e\u4e86\u7687\u540e { //\u90a3\u4e48\u53ef\u884c\u89e3+1 ++ ans ; return ; } //\u679a\u4e3e\u5f53\u524d\u884cu\u7684\u5217\u53f7\u4ece0~n-1 for ( int i = 0 ; i < n ; ++ i ) { if ( ! col [ i ] && ! djx [ i + u ] && ! ndjx [ i - u + n ]) //\u5982\u679c\u5f53\u524d\u5217\uff0c\u5f53\u524d\u4f4d\u7f6e\u7684\u4e3b\u5bf9\u89d2\u7ebf\u548c\u526f\u5bf9\u89d2\u7ebf\u90fd\u6ca1\u6709\u7687\u540e { col [ i ] = djx [ i + u ] = ndjx [ i - u + n ] = 1 ; //\u6807\u8bb0\u653e\u7f6e\u4e86\u7687\u540e DFS ( u + 1 ); //\u7ee7\u7eed\u5f80\u4e0b\u6df1\u641c col [ i ] = djx [ i + u ] = ndjx [ i - u + n ] = 0 ; //\u56de\u6eaf\u8fd8\u539f\u73b0\u573a } } } 4. \u8fde\u901a\u95ee\u9898 \u00b6 \u4e8c\u7ef4\u5730\u56feDFS,\u5047\u8bbe\u7ed9\u4f60\u4e00\u7247\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u8349\u5730\uff0c\u5176\u4e2d'#'\u8868\u793a\u8349\uff0c'.'\u8868\u793a\u8352\u5730\uff0c\u8bf7\u4f60\u53bb\u6c42\u6240\u6709\u8fde\u901a\u7684\u8349\u5730\u6570\u76ee\uff0c\u4e0a\u4e0b\u5de6\u53f3\u5728\u4e00\u8d77\u7684\u8349\u5730\u7b97\u8fde\u901a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 const int N = 204 ; char mp [ N ][ N ]; bool st [ N ][ N ]; int n , m ; //n\u884cm\u5217\u7684\u5730\u56fe int go [ 4 ][ 2 ] = //\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411 { { -1 , 0 }, { 1 , 0 }, { 0 , -1 }, { 0 , 1 } }; bool check ( int x , int y ) { return x >= 1 && x <= n && y >= 1 && y <= m ; } void DFS ( int x , int y ) { if ( ! check ( x , y )) return ; //\u8d8a\u754c\u5224\u65ad for ( int i = 0 ; i < 4 ; ++ i ) { int nx = x + go [ i ][ 0 ], ny = y + go [ i ][ 1 ]; if ( check ( nx , ny ) && ! st [ nx ][ ny ] && ( mp [ nx ][ ny ] == '#' ) ) { st [ nx ][ ny ] = 1 ; DFS ( nx , ny ); } } } \u62d3\u5c55\u77e5\u8bc6\uff1a C++ STL","title":"\u6808\u548c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"},{"location":"search/dfs/#_1","text":"\u4e00\u79cd\u6570\u636e\u7ed3\u6784 \u7279\u6027\uff1a\u540e\u8fdb\u5148\u51fa\uff08\u5982\u540c\u5b50\u5f39\u5f39\u5323\u4e0a\u5b50\u5f39\u4e00\u6837\uff0c\u5148\u653e\u8fdb\u53bb\u7684\u5b50\u5f39\u662f\u5728\u6700\u4e0b\u5c42\u7684\uff0c\u6700\u540e\u624d\u4f1a\u88ab\u6253\u51fa\u6765\uff1b\u800c\u6700\u540e\u653e\u8fdb\u53bb\u7684\u5b50\u5f39\u662f\u6700\u4e0a\u5c42\u7684\uff0c\u4f1a\u6700\u5148\u6253\u51fa\u6765\uff09","title":"\u6808"},{"location":"search/dfs/#_2","text":"\u6808\u9876\u4e0e\u6808\u5e95\uff1a\u5141\u8bb8\u5143\u7d20\u63d2\u5165\u4e0e\u5220\u9664\u7684\u4e00\u7aef\u79f0\u4e3a\u6808\u9876\uff0c\u53e6\u4e00\u7aef\u79f0\u4e3a\u6808\u5e95\u3002 \u538b\u6808\uff1a\u6808\u7684\u63d2\u5165\u64cd\u4f5c\uff0c\u53eb\u505a\u8fdb\u6808\uff0c\u4e5f\u79f0\u538b\u6808\u3001\u5165\u6808\u3002 \u5f39\u6808\uff1a\u6808\u7684\u5220\u9664\u64cd\u4f5c\uff0c\u4e5f\u53eb\u505a\u51fa\u6808\u3002 \u4f8b\u5982\u6211\u4eec\u6709\u4e00\u4e2a\u5b58\u50a8\u6574\u578b\u5143\u7d20\u7684\u6808\uff0c\u6211\u4eec\u4f9d\u6b21\u538b\u6808\uff1a{1,2,3} \u5728\u538b\u6808\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6808\u9876\u7684\u4f4d\u7f6e\u4e00\u76f4\u5728\u201c\u5411\u4e0a\u201d\u79fb\u52a8\uff0c\u800c\u6808\u5e95\u662f\u56fa\u5b9a\u4e0d\u53d8\u7684\u3002 \u5982\u679c\u6211\u4eec\u8981\u628a\u6808\u4e2d\u7684\u5143\u7d20\u5f39\u51fa\u6765\uff1a STL\u5c31\u6709\u6808\uff0c\u4e0d\u9700\u8981\u5927\u5bb6\u91cd\u65b0\u624b\u5199\u4e00\u4e2a\u6808\u3002\u5934\u6587\u4ef6\uff1a 1 #include <stack> \u8c03\u7528\uff1a 1 2 stack < int > s ; stack < char > s ; \u4e00\u4e9b\u5e38\u7528\u7684\u5173\u4e8e\u6808\u7684\u51fd\u6570\uff1a top() \u8fd4\u56de\u6808\u9876\u90e8\u7684\u5143\u7d20 push(x)\u63d2\u5165\u5143\u7d20x\u5230\u9876\u90e8 pop()\u5f39\u51fa\u9876\u90e8\u5143\u7d20 size()\u8fd4\u56de\u6808\u4e2d\u5143\u7d20\u4e2a\u6570 empty() bool\u7c7b\u578b\uff0c\u5982\u679c\u6808\u4e3a\u7a7a\u8fd4\u56detrue,\u5426\u5219\u8fd4\u56defalse \u8c03\u7528\u53ea\u9700\u8981\u628a\u5b9a\u4e49\u51fa\u6765\u7684\u6808\u5bf9\u8c61\u5982s\uff0c\u4f7f\u7528 s.top() , s.push(1) , while(!s.empty()) \u2026\u2026\u5373\u53ef","title":"\u6808\u7684\u76f8\u5173\u6982\u5ff5\uff1a"},{"location":"search/dfs/#_3","text":"","title":"\u6808\u7684\u5e94\u7528"},{"location":"search/dfs/#1","text":"\u901a\u8fc7\u4f7f\u7528\u6808\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u53bb\u5224\u65ad\u4e00\u4e2a\u62ec\u53f7\u8868\u8fbe\u5f0f\u662f\u5426\u5408\u6cd5 () , (()) , )() \u5177\u4f53\u6b65\u9aa4: 1). \u9996\u5148\u65b0\u5efa\u4e00\u4e2a\u7a7a\u6808\uff0c\u904d\u5386\u6574\u4e2a\u8868\u8fbe\u5f0f 2). \u9047\u5230\u5de6\u62ec\u53f7\u65f6\uff0c\u5c06\u5bf9\u5e94\u4e0b\u6807\u5165\u6808 3). \u9047\u5230\u53f3\u62ec\u53f7\u65f6\uff0c\u68c0\u67e5\u6808\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\u90a3\u4e48\u5f39\u51fa\u6808\u9876\uff0c\u5426\u5219\u8868\u8fbe\u5f0f\u4e0d\u5408\u6cd5","title":"1.\u62ec\u53f7\u5339\u914d"},{"location":"search/dfs/#2","text":"\u6211\u4eec\u65e5\u5e38\u89c1\u5230\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\u5982 a + b , a * (b + c) \u7b49\u90fd\u662f\u4e2d\u7f00\u8868\u8fbe\u5f0f \u800c a b + , a b c + *\u662f\u5bf9\u5e94\u7684\u540e\u7f00\u8868\u8fbe\u5f0f \u901a\u8fc7\u6808 \u53ef\u4ee5\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u5316\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\uff0c\u5f88\u65b9\u4fbf\u7684\u5f97\u5230\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u901a\u8fc7\u8fd9\u4e2a\u539f\u7406\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u7b80\u6613\u7684\u8ba1\u7b97\u5668 \u5177\u4f53\u5b9e\u73b0\u7b97\u6cd5\uff1a 1). \u521d\u59cb\u5316\u4e24\u4e2a\u7a7a\u6808\uff1a\u8fd0\u7b97\u6570\u6808A\uff0c\u8fd0\u7b97\u7b26\u6808B\uff0c\u904d\u5386\u6574\u4e2a\u4e2d\u7f00\u8868\u8fbe\u5f0f 2). \u9047\u5230\u8fd0\u7b97\u6570 a \u76f4\u63a5\u5165\u8fd0\u7b97\u6570\u6808A (a -> A) 3). \u9047\u5230\u8fd0\u7b97\u7b26\u53f7 $ \u5224\u65ad \u5f53\u524d\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 > \u6808\u9876\u7684\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7 \uff0c \u200b \u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5c31\u5165\u6808\uff0c\u5426\u5219\u5c06B\u6808\u9876\u7b26\u53f7\u51fa\u6808\uff0c\u5e76\u53d6\u8fd0\u7b97\u6570\u6808A\u7684\u6808\u9876\u5143\u7d20a\u548c\u6b21\u6808\u9876\u5143\u7d20b\uff08\u4e5f\u5c31\u662f\u524d\u4e24\u4e2a\u5143\u7d20\uff09\uff0c\u8fdb\u884c\u76f8\u5e94\u7684\u8fd0\u7b97a$b,\u5e76\u5c06\u8fd0\u7b97\u7ed3\u679c\u5165\u6808A 4). \u5982\u679c\u904d\u5386\u5b8c\u8868\u8fbe\u5f0f\u4e86\uff0c\u800c\u8fd0\u7b97\u7b26\u6808B\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5c06B\u6808\u9876\u7b26\u53f7\u51fa\u6808\uff0c\u5e76\u53d6\u8fd0\u7b97\u6570\u6808A\u7684\u6808\u9876\u5143\u7d20a\u548c\u6b21\u6808\u9876\u5143\u7d20b\uff08\u4e5f\u5c31\u662f\u524d\u4e24\u4e2a\u5143\u7d20\uff09\uff0c\u8fdb\u884c\u76f8\u5e94\u7684\u8fd0\u7b97a$b,\u5e76\u5c06\u8fd0\u7b97\u7ed3\u679c\u5165\u6808A \u6700\u7ec8\u8868\u8fbe\u5f0f\u7684\u8fd0\u7b97\u7ed3\u679c\u5c31\u662f\u6808A\u7684\u6808\u9876\u5143\u7d20 \u6ce8\u610f: \u5982\u679c\u662f\u5de6\u62ec\u53f7\u90a3\u4e48\u4e0d\u7528\u5224\u65ad\u4f18\u5148\u7ea7\u76f4\u63a5\u5165\u6808\uff0c\u662f\u53f3\u62ec\u53f7\u90a3\u4e48\u4e00\u76f4\u5f39\u51fa\u6808\u9876\u76f4\u5230\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u5c06\u5de6\u62ec\u53f7\u4e5f\u5f39\u51fa\uff0c\u7ed3\u675f\u3002 \u5982\u679c\u9047\u5230\u8fd0\u7b97\u7b26\u800c\u6808\u9876\u662f\u62ec\u53f7\uff0c\u90a3\u4e48\u76f4\u63a5\u4e0d\u7528\u5224\u65ad\u4f18\u5148\u7ea7\u76f4\u63a5\u5165\u6808\u3002","title":"2.\u540e\u7f00\u8868\u8fbe\u5f0f"},{"location":"search/dfs/#3","text":"","title":"3.\u4e2d\u65ad\uff0c\u5b50\u7a0b\u5e8f\u8c03\u7528\u7b49\u7b49\u65b9\u9762\u5e94\u7528\u5e7f\u6cdb"},{"location":"search/dfs/#dfs","text":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\uff08\u82f1\u8bed\uff1aDepth-First-Search\uff0c\u7b80\u79f0DFS\uff09 \u5b9a\u4e49\uff1a\u662fACM\u4e2d\u4e00\u79cd\u5341\u5206\u5e38\u89c1\u548c\u5e38\u7528\u7684\u641c\u7d22\u7b97\u6cd5 \u65b9\u5f0f\uff1a\u4e00\u822c\u901a\u8fc7\u9012\u5f52\u51fd\u6570\u7684\u65b9\u5f0f\uff0c\u6765\u641c\u7d22\u6bcf\u4e00\u4e2a\u9700\u8981\u7684\u72b6\u6001\uff0c\u53bb\u5f97\u5230\u6709\u7528\u7684\u4fe1\u606f\uff0c\u8fdb\u800c\u66f4\u65b0\u7b54\u6848\u3002 \u4e00\u822c\u7684\u641c\u7d22\u51fd\u6570\u5305\u62ec\uff1a 1.\u8fb9\u754c\u6761\u4ef6\uff08\u641c\u7d22\u7ec8\u6b62\u7684\u6761\u4ef6\uff0c\u4e00\u5b9a\u8981\u6ce8\u610f\u8bbe\u7f6e\u597d\u8fb9\u754c\u6761\u4ef6\u4e0d\u7136\u5bb9\u6613\u6b7b\u9012\u5f52\uff09 2.\u9012\u5f52\u4e3b\u4f53 3.\u9012\u5f52\u5206\u652f 1 2 3 4 5 6 void dfs ( int u , int dep ) { if ( u == dep ) return ; ///\u8fb9\u754c\u6761\u4ef6 xxx ///\u641c\u7d22\u7684\u4e3b\u8981\u5185\u5bb9 dfs ( u + 1 , dep ); ///\u641c\u7d22\u7684\u5206\u652f } DFS\u641c\u7d22\u7684\u8fc7\u7a0b\u5176\u5b9e\u662f\u4e00\u79cd\u6811\u578b\u7ed3\u6784\uff0c\u4e00\u822c\u79f0\u4e3aDFS\u6811\u3002","title":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22 DFS"},{"location":"search/dfs/#dfs_1","text":"","title":"DFS\u4e3e\u4f8b"},{"location":"search/dfs/#1-dfs","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <bits/stdc++.h> using namespace std ; const int N = 20 ; bool used [ N ]; int a [ N ]; int n ; vector < int > v ; void DFS ( int u ) //u\u8868\u793a\u73b0\u5728\u641c\u7684\u662f\u7b2cu\u4e2a\u5143\u7d20(\u7f16\u53f70~n-1) { if ( u == n ) ///\u9012\u5f52\u7ec8\u6b62\u6761\u4ef6 { for ( int i : v ) cout << i + 1 << ' ' ; cout << endl ; return ; } //\u641c\u7d22\u7684\u5206\u652f\u6709\u4e24\u4e2a ///\u4e0d\u9009\u7b2cu\u4e2a\u5143\u7d20 DFS ( u + 1 ); ///\u9009\u7b2cu\u4e2a\u5143\u7d20 v . push_back ( u ); //\u8fdb\u884c\u64cd\u4f5c DFS ( u + 1 ); v . pop_back (); //\u56de\u6eaf\u8fd8\u539f\u73b0\u573a } int main () { cin >> n ; DFS ( 0 ); } --","title":"1. DFS\u679a\u4e3e\u5b50\u96c6"},{"location":"search/dfs/#2dfs","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <iostream> #include <algorithm> using namespace std ; const int N = 20 ; bool used [ N ]; //\u5168\u5c40bool\u6570\u7ec4\u8bb0\u5f55\u67d0\u4e2a\u6570\u662f\u5426\u88ab\u9009\u8fc7 int a [ N ]; int n ; void DFS ( int u ) //u\u8868\u793a\u73b0\u5728\u641c\u7684\u662f\u7b2cu\u4e2a\u5143\u7d20(\u7f16\u53f70~n-1) { if ( u == n ) //\u8fb9\u754c\u6761\u4ef6 \u6b64\u65f6\u8bf4\u660e\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6392\u5217\u5df2\u7ecf\u679a\u4e3e\u51fa\u6765\u4e86 { //\u76f4\u63a5\u8f93\u51fa\u679a\u4e3e\u7684\u6392\u5217\u5373\u53ef for ( int i = 0 ; i < n ; ++ i ) cout << a [ i ] + 1 << ' ' ; cout << endl ; return ; } for ( int i = 0 ; i < n ; ++ i ) { if ( ! used [ i ]) { used [ i ] = 1 , a [ u ] = i ; //\u6807\u8bb0 DFS ( u + 1 ); used [ i ] = 0 , a [ u ] = 0 ; //\u56de\u6eaf\u8fd8\u539f\u73b0\u573a } } } /* dfs(0): used[0] = 1, a[0] = 0; dfs(1): used[1] = 1, a[1] = 1; dfs(2): used[2] = 1, a[2] = 2; dfs(3) > 0 1 2 */ int main () { cin >> n ; DFS ( 0 ); }","title":"2.DFS\u679a\u4e3e\u5168\u6392\u5217"},{"location":"search/dfs/#3_1","text":"\u516b\u7687\u540e\u95ee\u9898 \uff08\u82f1\u6587\uff1a Eight queens \uff09\uff0c\u662f\u56de\u6eaf\u7b97\u6cd5\u7684\u5178\u578b\u6848\u4f8b\u3002 \u95ee\u9898\u8868\u8ff0\u4e3a\uff1a\u57288\u00d78\u683c\u7684\u56fd\u9645\u8c61\u68cb\u4e0a\u6446\u653e8\u4e2a\u7687\u540e\u68cb\u5b50\uff0c\u4f7f\u5176\u4e0d\u80fd\u4e92\u76f8\u653b\u51fb\uff0c\u5373\u4efb\u610f\u4e24\u4e2a\u7687\u540e\u90fd\u4e0d\u80fd\u5904\u4e8e\u540c\u4e00\u884c\u3001\u540c\u4e00\u5217\u6216\u540c\u4e00\u659c\u7ebf\u4e0a\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u6446\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 int n , ans ; int col [ N ], djx [ N ], ndjx [ N ]; void DFS ( int u ) //DFS\u8bb0\u5f55\u7684\u72b6\u6001\u662f\u884c\u53f7 { if ( u == n ) //\u5982\u679c\u6df1\u641c\u5230\u4e86\u7b2cn\u884c\uff0c\u8bf4\u660e0~n-1\u884c\u90fd\u653e\u7f6e\u4e86\u7687\u540e { //\u90a3\u4e48\u53ef\u884c\u89e3+1 ++ ans ; return ; } //\u679a\u4e3e\u5f53\u524d\u884cu\u7684\u5217\u53f7\u4ece0~n-1 for ( int i = 0 ; i < n ; ++ i ) { if ( ! col [ i ] && ! djx [ i + u ] && ! ndjx [ i - u + n ]) //\u5982\u679c\u5f53\u524d\u5217\uff0c\u5f53\u524d\u4f4d\u7f6e\u7684\u4e3b\u5bf9\u89d2\u7ebf\u548c\u526f\u5bf9\u89d2\u7ebf\u90fd\u6ca1\u6709\u7687\u540e { col [ i ] = djx [ i + u ] = ndjx [ i - u + n ] = 1 ; //\u6807\u8bb0\u653e\u7f6e\u4e86\u7687\u540e DFS ( u + 1 ); //\u7ee7\u7eed\u5f80\u4e0b\u6df1\u641c col [ i ] = djx [ i + u ] = ndjx [ i - u + n ] = 0 ; //\u56de\u6eaf\u8fd8\u539f\u73b0\u573a } } }","title":"3.\u516b\u7687\u540e\u95ee\u9898"},{"location":"search/dfs/#4","text":"\u4e8c\u7ef4\u5730\u56feDFS,\u5047\u8bbe\u7ed9\u4f60\u4e00\u7247\u4e8c\u7ef4\u5e73\u9762\u4e0a\u7684\u8349\u5730\uff0c\u5176\u4e2d'#'\u8868\u793a\u8349\uff0c'.'\u8868\u793a\u8352\u5730\uff0c\u8bf7\u4f60\u53bb\u6c42\u6240\u6709\u8fde\u901a\u7684\u8349\u5730\u6570\u76ee\uff0c\u4e0a\u4e0b\u5de6\u53f3\u5728\u4e00\u8d77\u7684\u8349\u5730\u7b97\u8fde\u901a\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 const int N = 204 ; char mp [ N ][ N ]; bool st [ N ][ N ]; int n , m ; //n\u884cm\u5217\u7684\u5730\u56fe int go [ 4 ][ 2 ] = //\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411 { { -1 , 0 }, { 1 , 0 }, { 0 , -1 }, { 0 , 1 } }; bool check ( int x , int y ) { return x >= 1 && x <= n && y >= 1 && y <= m ; } void DFS ( int x , int y ) { if ( ! check ( x , y )) return ; //\u8d8a\u754c\u5224\u65ad for ( int i = 0 ; i < 4 ; ++ i ) { int nx = x + go [ i ][ 0 ], ny = y + go [ i ][ 1 ]; if ( check ( nx , ny ) && ! st [ nx ][ ny ] && ( mp [ nx ][ ny ] == '#' ) ) { st [ nx ][ ny ] = 1 ; DFS ( nx , ny ); } } } \u62d3\u5c55\u77e5\u8bc6\uff1a C++ STL","title":"4. \u8fde\u901a\u95ee\u9898"},{"location":"search/enumeration/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a lengwind \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u4e00.\u679a\u4e3e\u6392\u5217 \u00b6 \u4ec0\u4e48\u662f\u6392\u5217 ? \u957f\u5ea6\u4e3a n n \u7684\u6392\u5217\u6307 1\\sim n 1\\sim n \u4e0d\u91cd\u4e0d\u6f0f\u7684\u6070\u597d\u90fd\u51fa\u73b0\u4e00\u6b21 \u5982\uff1a [1 2 5 3 4] \uff0c [5 4 3 2 1] \u90fd\u662f\u6392\u5217 \u800c [1 1 2 3] \uff08\u51fa\u73b0\u91cd\u590d\u7684\u5143\u7d20\uff09\uff0c[1 3 4] (\u7f3a\u5c11\u5143\u7d202)\u4e0d\u662f\u6392\u5217 \u4ec0\u4e48\u662f\u6392\u5217\u7684\u987a\u5e8f ? \u6392\u5217\u662f\u6709\u987a\u5e8f\u7684\uff0c\u6bd4\u5982\u957f\u5ea6\u4e3a3\u7684\u6392\u5217\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u4e3a [1 2 3] [1 3 2] [2 1 3] [2 3 1] [3 1 2] [3 2 1] \u5b9a\u7406\uff1a \u957f\u5ea6\u4e3an\u7684\u6392\u5217\u4e00\u5171\u6709 n! n! \u79cd \u987e\u540d\u601d\u4e49\u5c31\u662f\u4ece\u5c0f\u5230\u5927\u53bb\u679a\u4e3e\u6392\u5217\uff0c\u4e00\u822c\u8981\u6c42\u6392\u5217\u7684\u957f\u5ea6\u4e0d\u80fd\u8fc7\u5927\uff08 n\\leq11 n\\leq11 \uff09 \u56e0\u4e3a 11!< 1e8, 12! > 1e8 11!< 1e8, 12! > 1e8 \u679a\u4e3e\u6392\u5217\u7684\u65b9\u6cd5\uff1a 1.next_permutation \u4e0e prev_permutation \u5305\u542b\u5934\u6587\u4ef6 #include<algorithm> \u7528\u6cd5\uff1a next_permutation(\u8fed\u4ee3\u56681\uff0c\u8fed\u4ee3\u56682) \uff08\u7c7b\u4f3c sort \uff0c\u5bf9[\u8fed\u4ee3\u56681\uff0c\u8fed\u4ee3\u56682\uff09\u8fdb\u884c\u64cd\u4f5c \uff09\uff0c \u5982 next_permutation(a,a+n) \uff08\u4ece [0,n) [0,n) \uff09\u6216\u8005 next_permutation(a+1,a+1+n) \uff08 [1,n+1) [1,n+1) \uff09 2.DFS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <iostream> #include <algorithm> using namespace std ; const int N = 20 ; bool used [ N ]; int a [ N ]; int n ; void DFS ( int u ) { if ( u == n ) { for ( int i = 0 ; i < n ; ++ i ) cout << a [ i ] + 1 << ' ' ; cout << endl ; return ; } for ( int i = 0 ; i < n ; ++ i ) { if ( ! used [ i ]) { used [ i ] = 1 , a [ u ] = i ; DFS ( u + 1 ); used [ i ] = 0 , a [ u ] = 0 ; } } } int main () { cin >> n ; DFS ( 0 ); } next_permutation \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> #include <algorithm> using namespace std ; int main () { int a [] = { 1 , 2 , 3 }; int n = 3 ; do { for ( int i = 0 ; i < 3 ; ++ i ) cout << a [ i ] << ' ' ; cout << endl ; } while ( next_permutation ( a , a + n )); } prev_permutation \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> #include <algorithm> using namespace std ; int main () { int a [] = { 3 , 2 , 1 }; int n = 3 ; do { for ( int i = 0 ; i < 3 ; ++ i ) cout << a [ i ] << ' ' ; cout << endl ; } while ( prev_permutation ( a , a + n )); } \u4e8c.\u679a\u4e3e\u5b50\u96c6 \u00b6 \u4ec0\u4e48\u662f\u5b50\u96c6 ? \u00b6 \u5b50\u96c6\u662f\u4e00\u4e2a\u6570\u5b66\u6982\u5ff5\uff1a\u5982\u679c\u96c6\u5408A\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u96c6\u5408B\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u96c6\u5408A\u79f0\u4e3a\u96c6\u5408B\u7684\u5b50\u96c6\u3002 \u7b26\u53f7\u8bed\u8a00\uff1a \u82e5\\forall a \\in A, \u5747\u6709 a \\in B, \u5219A\\subseteq B \u82e5\\forall a \\in A, \u5747\u6709 a \\in B, \u5219A\\subseteq B \u3002 \u5927\u5c0f\u4e3an\u7684\u96c6\u5408\u6709\u591a\u5c11\u4e2a\u5b50\u96c6? \u00b6 \u5927\u5c0f\u4e3a n n \u7684\u96c6\u5408\u6709 2^n 2^n \u4e2a\u5b50\u96c6\uff08\u5176\u4e2d\u5305\u62ec\u4e00\u4e2a\u7a7a\u96c6\uff0c\u4e00\u4e2a\u81ea\u8eab\uff09 \u679a\u4e3e\u5b50\u96c6\u65b9\u6cd5: \u00b6 1.\u4f4d\u8fd0\u7b97 \u00b6 \u5bf9\u4e8e\u96c6\u5408\u4e2d\u7b2c i i \u4e2a\u5143\u7d20\uff08 i i \u4ece0\u5f00\u59cb\u7f16\u53f7\uff090\u8868\u793a\u9009\u8fd9\u4e2a\u5143\u7d20\uff0c1\u8868\u793a\u4e0d\u9009\u8fd9\u4e2a\u5143\u7d20 \u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u5927\u5c0f\u4e3a4\u7684\u96c6\u5408\u6765\u8bf4 3 2 1 0 \uff08\u4e0b\u6807\uff09 0 1 0 1 \uff08\u679a\u4e3e\u503c\u7684\u4e8c\u8fdb\u52360101\u9009\u7b2c0\u4f4d\u548c\u7b2c2\u4f4d\uff0c\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u65705\uff09 \u5f97\u5230\u542f\u53d1\uff0c\u679a\u4e3e\u5927\u5c0f\u4e3a4\u7684\u5b50\u96c6\u53ea\u9700\u8981\u4ece 0000_{(2)}\\sim 1111_{(2)} 0000_{(2)}\\sim 1111_{(2)} \u90fd\u679a\u4e3e\u4e00\u904d\u5373\u53ef\uff0c\u5bf9\u5e94\u5341\u8fdb\u5236\u5373 0_{(10)}\\sim 15_{(10)} 0_{(10)}\\sim 15_{(10)} \u3002 \u89c4\u5f8b\uff1a\u679a\u4e3e\u5927\u5c0f\u4e3a n n \u7684\u96c6\u5408\u53ea\u9700\u8981\u679a\u4e3e 0\\sim2^n-1 0\\sim2^n-1 \uff08\u4e00\u5171 2^n 2^n \u79cd\u60c5\u51b5\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <iostream> #include <algorithm> using namespace std ; int main () { int n = 4 ; ///\u96c6\u5408\u5927\u5c0f5 for ( int i = 0 ; i < ( 1 << n ); ++ i ) ///\u4ece0 ~ 2^n - 1\u679a\u4e3e { ///\u6bcf\u4e00\u4e2ai\u7684\u4e8c\u8fdb\u5236\u5bf9\u5e94\u4e00\u79cd\u60c5\u51b5 for ( int j = 0 ; j < n ; ++ j ) { ///\u5982\u679ci\u7684\u4e8c\u8fdb\u5236\u7684\u7b2cj\u4f4d\u4e3a1 \u8bf4\u660e\u9009\u8fd9\u4e2a\u6570 if ( i >> j & 1 ) { cout << j << ' ' ; } } cout << endl ; } } 2.DFS \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <bits/stdc++.h> using namespace std ; const int N = 20 ; bool used [ N ]; int a [ N ]; int n ; vector < int > v ; void DFS ( int u ) { if ( u == n ) { for ( int i : v ) cout << i + 1 << ' ' ; cout << endl ; return ; } ///\u4e0d\u9009\u7b2cu\u4e2a\u5143\u7d20 DFS ( u + 1 ); ///\u9009\u7b2cu\u4e2a\u5143\u7d20 v . push_back ( u ); DFS ( u + 1 ); v . pop_back (); } int main () { cin >> n ; DFS ( 0 ); }","title":"\u679a\u4e3e\u6392\u5217\u548c\u679a\u4e3e\u5b50\u96c6"},{"location":"search/enumeration/#_1","text":"\u4ec0\u4e48\u662f\u6392\u5217 ? \u957f\u5ea6\u4e3a n n \u7684\u6392\u5217\u6307 1\\sim n 1\\sim n \u4e0d\u91cd\u4e0d\u6f0f\u7684\u6070\u597d\u90fd\u51fa\u73b0\u4e00\u6b21 \u5982\uff1a [1 2 5 3 4] \uff0c [5 4 3 2 1] \u90fd\u662f\u6392\u5217 \u800c [1 1 2 3] \uff08\u51fa\u73b0\u91cd\u590d\u7684\u5143\u7d20\uff09\uff0c[1 3 4] (\u7f3a\u5c11\u5143\u7d202)\u4e0d\u662f\u6392\u5217 \u4ec0\u4e48\u662f\u6392\u5217\u7684\u987a\u5e8f ? \u6392\u5217\u662f\u6709\u987a\u5e8f\u7684\uff0c\u6bd4\u5982\u957f\u5ea6\u4e3a3\u7684\u6392\u5217\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u4e3a [1 2 3] [1 3 2] [2 1 3] [2 3 1] [3 1 2] [3 2 1] \u5b9a\u7406\uff1a \u957f\u5ea6\u4e3an\u7684\u6392\u5217\u4e00\u5171\u6709 n! n! \u79cd \u987e\u540d\u601d\u4e49\u5c31\u662f\u4ece\u5c0f\u5230\u5927\u53bb\u679a\u4e3e\u6392\u5217\uff0c\u4e00\u822c\u8981\u6c42\u6392\u5217\u7684\u957f\u5ea6\u4e0d\u80fd\u8fc7\u5927\uff08 n\\leq11 n\\leq11 \uff09 \u56e0\u4e3a 11!< 1e8, 12! > 1e8 11!< 1e8, 12! > 1e8 \u679a\u4e3e\u6392\u5217\u7684\u65b9\u6cd5\uff1a 1.next_permutation \u4e0e prev_permutation \u5305\u542b\u5934\u6587\u4ef6 #include<algorithm> \u7528\u6cd5\uff1a next_permutation(\u8fed\u4ee3\u56681\uff0c\u8fed\u4ee3\u56682) \uff08\u7c7b\u4f3c sort \uff0c\u5bf9[\u8fed\u4ee3\u56681\uff0c\u8fed\u4ee3\u56682\uff09\u8fdb\u884c\u64cd\u4f5c \uff09\uff0c \u5982 next_permutation(a,a+n) \uff08\u4ece [0,n) [0,n) \uff09\u6216\u8005 next_permutation(a+1,a+1+n) \uff08 [1,n+1) [1,n+1) \uff09 2.DFS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <iostream> #include <algorithm> using namespace std ; const int N = 20 ; bool used [ N ]; int a [ N ]; int n ; void DFS ( int u ) { if ( u == n ) { for ( int i = 0 ; i < n ; ++ i ) cout << a [ i ] + 1 << ' ' ; cout << endl ; return ; } for ( int i = 0 ; i < n ; ++ i ) { if ( ! used [ i ]) { used [ i ] = 1 , a [ u ] = i ; DFS ( u + 1 ); used [ i ] = 0 , a [ u ] = 0 ; } } } int main () { cin >> n ; DFS ( 0 ); }","title":"\u4e00.\u679a\u4e3e\u6392\u5217"},{"location":"search/enumeration/#next_permutation","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> #include <algorithm> using namespace std ; int main () { int a [] = { 1 , 2 , 3 }; int n = 3 ; do { for ( int i = 0 ; i < 3 ; ++ i ) cout << a [ i ] << ' ' ; cout << endl ; } while ( next_permutation ( a , a + n )); }","title":"next_permutation"},{"location":"search/enumeration/#prev_permutation","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> #include <algorithm> using namespace std ; int main () { int a [] = { 3 , 2 , 1 }; int n = 3 ; do { for ( int i = 0 ; i < 3 ; ++ i ) cout << a [ i ] << ' ' ; cout << endl ; } while ( prev_permutation ( a , a + n )); }","title":"prev_permutation"},{"location":"search/enumeration/#_2","text":"","title":"\u4e8c.\u679a\u4e3e\u5b50\u96c6"},{"location":"search/enumeration/#_3","text":"\u5b50\u96c6\u662f\u4e00\u4e2a\u6570\u5b66\u6982\u5ff5\uff1a\u5982\u679c\u96c6\u5408A\u7684\u4efb\u610f\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u96c6\u5408B\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u96c6\u5408A\u79f0\u4e3a\u96c6\u5408B\u7684\u5b50\u96c6\u3002 \u7b26\u53f7\u8bed\u8a00\uff1a \u82e5\\forall a \\in A, \u5747\u6709 a \\in B, \u5219A\\subseteq B \u82e5\\forall a \\in A, \u5747\u6709 a \\in B, \u5219A\\subseteq B \u3002","title":"\u4ec0\u4e48\u662f\u5b50\u96c6 ?"},{"location":"search/enumeration/#n","text":"\u5927\u5c0f\u4e3a n n \u7684\u96c6\u5408\u6709 2^n 2^n \u4e2a\u5b50\u96c6\uff08\u5176\u4e2d\u5305\u62ec\u4e00\u4e2a\u7a7a\u96c6\uff0c\u4e00\u4e2a\u81ea\u8eab\uff09","title":"\u5927\u5c0f\u4e3an\u7684\u96c6\u5408\u6709\u591a\u5c11\u4e2a\u5b50\u96c6?"},{"location":"search/enumeration/#_4","text":"","title":"\u679a\u4e3e\u5b50\u96c6\u65b9\u6cd5:"},{"location":"search/enumeration/#1","text":"\u5bf9\u4e8e\u96c6\u5408\u4e2d\u7b2c i i \u4e2a\u5143\u7d20\uff08 i i \u4ece0\u5f00\u59cb\u7f16\u53f7\uff090\u8868\u793a\u9009\u8fd9\u4e2a\u5143\u7d20\uff0c1\u8868\u793a\u4e0d\u9009\u8fd9\u4e2a\u5143\u7d20 \u90a3\u4e48\u5bf9\u4e8e\u4e00\u4e2a\u5927\u5c0f\u4e3a4\u7684\u96c6\u5408\u6765\u8bf4 3 2 1 0 \uff08\u4e0b\u6807\uff09 0 1 0 1 \uff08\u679a\u4e3e\u503c\u7684\u4e8c\u8fdb\u52360101\u9009\u7b2c0\u4f4d\u548c\u7b2c2\u4f4d\uff0c\u4e5f\u5c31\u662f\u5341\u8fdb\u5236\u65705\uff09 \u5f97\u5230\u542f\u53d1\uff0c\u679a\u4e3e\u5927\u5c0f\u4e3a4\u7684\u5b50\u96c6\u53ea\u9700\u8981\u4ece 0000_{(2)}\\sim 1111_{(2)} 0000_{(2)}\\sim 1111_{(2)} \u90fd\u679a\u4e3e\u4e00\u904d\u5373\u53ef\uff0c\u5bf9\u5e94\u5341\u8fdb\u5236\u5373 0_{(10)}\\sim 15_{(10)} 0_{(10)}\\sim 15_{(10)} \u3002 \u89c4\u5f8b\uff1a\u679a\u4e3e\u5927\u5c0f\u4e3a n n \u7684\u96c6\u5408\u53ea\u9700\u8981\u679a\u4e3e 0\\sim2^n-1 0\\sim2^n-1 \uff08\u4e00\u5171 2^n 2^n \u79cd\u60c5\u51b5\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include <iostream> #include <algorithm> using namespace std ; int main () { int n = 4 ; ///\u96c6\u5408\u5927\u5c0f5 for ( int i = 0 ; i < ( 1 << n ); ++ i ) ///\u4ece0 ~ 2^n - 1\u679a\u4e3e { ///\u6bcf\u4e00\u4e2ai\u7684\u4e8c\u8fdb\u5236\u5bf9\u5e94\u4e00\u79cd\u60c5\u51b5 for ( int j = 0 ; j < n ; ++ j ) { ///\u5982\u679ci\u7684\u4e8c\u8fdb\u5236\u7684\u7b2cj\u4f4d\u4e3a1 \u8bf4\u660e\u9009\u8fd9\u4e2a\u6570 if ( i >> j & 1 ) { cout << j << ' ' ; } } cout << endl ; } }","title":"1.\u4f4d\u8fd0\u7b97"},{"location":"search/enumeration/#2dfs","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <bits/stdc++.h> using namespace std ; const int N = 20 ; bool used [ N ]; int a [ N ]; int n ; vector < int > v ; void DFS ( int u ) { if ( u == n ) { for ( int i : v ) cout << i + 1 << ' ' ; cout << endl ; return ; } ///\u4e0d\u9009\u7b2cu\u4e2a\u5143\u7d20 DFS ( u + 1 ); ///\u9009\u7b2cu\u4e2a\u5143\u7d20 v . push_back ( u ); DFS ( u + 1 ); v . pop_back (); } int main () { cin >> n ; DFS ( 0 ); }","title":"2.DFS"},{"location":"search/simple-enum-reduction/","text":"Copyright \u672c\u9875\u9762\u8d21\u732e\u8005\uff1a LyuLumos \uff0c YanhuiJessica \u3002 \u672c\u9875\u9762\u5185\u5bb9\u9075\u5faa MIT \u534f\u8bae\uff0c\u8f6c\u8f7d\u8bf7\u9644\u4e0a\u539f\u6587\u51fa\u5904\u94fe\u63a5\u548c\u672c\u58f0\u660e\u3002 \u679a\u4e3e\u7ea6\u7b80\u7684\u57fa\u672c\u539f\u5219 \u00b6 \u63d0\u53d6\u6709\u6548\u4fe1\u606f \u51cf\u5c11\u91cd\u590d\u8ba1\u7b97 \u5c06\u539f\u95ee\u9898\u8f6c\u5316\u4e3a\u66f4\u5c0f\u7684\u95ee\u9898 \u6839\u636e\u95ee\u9898\u7684\u6027\u8d28\u8fdb\u884c\u641c\u7d22\u526a\u679d \u5f15\u5165\u5176\u4ed6\u7b97\u6cd5 \u4f8b\u9898 \u9898\u76ee\u6765\u6e90\uff1a\u300a\u554a\u54c8\u7b97\u6cd5\u300b \u25a1\u25a1\u25a1+\u25a1\u25a1\u25a1=\u25a1\u25a1\u25a1\uff0c\u5c06\u6570\u5b571~9\u5206\u522b\u586b\u51659\u4e2a\u25a1\u4e2d\uff0c \u6bcf\u4e2a\u6570\u5b57\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u4f7f\u5f97\u7b49\u5f0f\u6210\u7acb\u3002 \u4f8b\u5982173+286=459\u5c31\u662f\u4e00\u4e2a\u5408\u7406\u7684\u7ec4\u5408\uff0c \u8bf7\u95ee\u4e00\u5171\u6709\u591a\u5c11\u79cd\u5408\u7406\u7684\u7ec4\u5408\u5462\uff1f \u6ce8\u610f\uff1a173+286=459 \u4e0e 286+173=459 \u662f\u540c\u4e00\u79cd\u7ec4\u5408\u3002 \u679a\u4e3e\u6bcf\u4e00\u4f4d\u4e0a\u6240\u6709\u53ef\u80fd\u7684\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <stdio.h> int main () { int a , b , c , d , e , f , g , h , i , total = 0 ; for ( a = 1 ; a <= 9 ; a ++ ) //\u7b2c1\u4e2a\u6570\u7684\u767e\u4f4d for ( b = 1 ; b <= 9 ; b ++ ) //\u7b2c1\u4e2a\u6570\u7684\u5341\u4f4d for ( c = 1 ; c <= 9 ; c ++ ) //\u7b2c1\u4e2a\u6570\u7684\u4e2a\u4f4d for ( d = 1 ; d <= 9 ; d ++ ) //\u7b2c2\u4e2a\u6570\u7684\u767e\u4f4d for ( e = 1 ; e <= 9 ; e ++ ) //\u7b2c2\u4e2a\u6570\u7684\u5341\u4f4d for ( f = 1 ; f <= 9 ; f ++ ) //\u7b2c2\u4e2a\u6570\u7684\u4e2a\u4f4d for ( g = 1 ; g <= 9 ; g ++ ) //\u7b2c3\u4e2a\u6570\u7684\u767e\u4f4d for ( h = 1 ; h <= 9 ; h ++ ) //\u7b2c3\u4e2a\u6570\u7684\u5341\u4f4d for ( i = 1 ; i <= 9 ; i ++ ) //\u7b2c3\u4e2a\u6570\u7684\u4e2a\u4f4d { //\u63a5\u4e0b\u6765\u8981\u5224\u65ad\u6bcf\u4e00\u4f4d\u4e0a\u7684\u6570\u4e92\u4e0d\u76f8\u7b49 if ( a != b && a != c && a != d && a != e && a != f && a != g && a != h && a != i && b != c && b != d && b != e && b != f && b != g && b != h && b != i && c != d && c != e && c != f && c != g && c != h && c != i && d != e && d != f && d != g && d != h && d != i && e != f && e != g && e != h && e != i && f != g && f != h && f != i && g != h && g != i && h != i && a * 100 + b * 10 + c + d * 100 + e * 10 + f == g * 100 + h * 10 + i ) { total ++ ; printf ( \"%d%d%d+%d%d%d=%d%d%d \\n \" , a , b , c , d , e , f , g , h , i ); } } printf ( \"total=%d\" , total / 2 ); //\u8bf7\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\u8981\u9664\u4ee52 return 0 ; } \u4e0a\u9762\u7684\u7a0b\u5e8f\u8ba1\u7b97\u91cf\u662f 9^9=387 420 489 9^9=387 420 489 \uff0c\u54ea\u91cc\u8fd8\u80fd\u5316\u7b80\uff1f","title":"\u679a\u4e3e\u7ea6\u7b80"},{"location":"search/simple-enum-reduction/#_1","text":"\u63d0\u53d6\u6709\u6548\u4fe1\u606f \u51cf\u5c11\u91cd\u590d\u8ba1\u7b97 \u5c06\u539f\u95ee\u9898\u8f6c\u5316\u4e3a\u66f4\u5c0f\u7684\u95ee\u9898 \u6839\u636e\u95ee\u9898\u7684\u6027\u8d28\u8fdb\u884c\u641c\u7d22\u526a\u679d \u5f15\u5165\u5176\u4ed6\u7b97\u6cd5 \u4f8b\u9898 \u9898\u76ee\u6765\u6e90\uff1a\u300a\u554a\u54c8\u7b97\u6cd5\u300b \u25a1\u25a1\u25a1+\u25a1\u25a1\u25a1=\u25a1\u25a1\u25a1\uff0c\u5c06\u6570\u5b571~9\u5206\u522b\u586b\u51659\u4e2a\u25a1\u4e2d\uff0c \u6bcf\u4e2a\u6570\u5b57\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u4f7f\u5f97\u7b49\u5f0f\u6210\u7acb\u3002 \u4f8b\u5982173+286=459\u5c31\u662f\u4e00\u4e2a\u5408\u7406\u7684\u7ec4\u5408\uff0c \u8bf7\u95ee\u4e00\u5171\u6709\u591a\u5c11\u79cd\u5408\u7406\u7684\u7ec4\u5408\u5462\uff1f \u6ce8\u610f\uff1a173+286=459 \u4e0e 286+173=459 \u662f\u540c\u4e00\u79cd\u7ec4\u5408\u3002 \u679a\u4e3e\u6bcf\u4e00\u4f4d\u4e0a\u6240\u6709\u53ef\u80fd\u7684\u6570 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #include <stdio.h> int main () { int a , b , c , d , e , f , g , h , i , total = 0 ; for ( a = 1 ; a <= 9 ; a ++ ) //\u7b2c1\u4e2a\u6570\u7684\u767e\u4f4d for ( b = 1 ; b <= 9 ; b ++ ) //\u7b2c1\u4e2a\u6570\u7684\u5341\u4f4d for ( c = 1 ; c <= 9 ; c ++ ) //\u7b2c1\u4e2a\u6570\u7684\u4e2a\u4f4d for ( d = 1 ; d <= 9 ; d ++ ) //\u7b2c2\u4e2a\u6570\u7684\u767e\u4f4d for ( e = 1 ; e <= 9 ; e ++ ) //\u7b2c2\u4e2a\u6570\u7684\u5341\u4f4d for ( f = 1 ; f <= 9 ; f ++ ) //\u7b2c2\u4e2a\u6570\u7684\u4e2a\u4f4d for ( g = 1 ; g <= 9 ; g ++ ) //\u7b2c3\u4e2a\u6570\u7684\u767e\u4f4d for ( h = 1 ; h <= 9 ; h ++ ) //\u7b2c3\u4e2a\u6570\u7684\u5341\u4f4d for ( i = 1 ; i <= 9 ; i ++ ) //\u7b2c3\u4e2a\u6570\u7684\u4e2a\u4f4d { //\u63a5\u4e0b\u6765\u8981\u5224\u65ad\u6bcf\u4e00\u4f4d\u4e0a\u7684\u6570\u4e92\u4e0d\u76f8\u7b49 if ( a != b && a != c && a != d && a != e && a != f && a != g && a != h && a != i && b != c && b != d && b != e && b != f && b != g && b != h && b != i && c != d && c != e && c != f && c != g && c != h && c != i && d != e && d != f && d != g && d != h && d != i && e != f && e != g && e != h && e != i && f != g && f != h && f != i && g != h && g != i && h != i && a * 100 + b * 10 + c + d * 100 + e * 10 + f == g * 100 + h * 10 + i ) { total ++ ; printf ( \"%d%d%d+%d%d%d=%d%d%d \\n \" , a , b , c , d , e , f , g , h , i ); } } printf ( \"total=%d\" , total / 2 ); //\u8bf7\u60f3\u4e00\u60f3\u4e3a\u4ec0\u4e48\u8981\u9664\u4ee52 return 0 ; } \u4e0a\u9762\u7684\u7a0b\u5e8f\u8ba1\u7b97\u91cf\u662f 9^9=387 420 489 9^9=387 420 489 \uff0c\u54ea\u91cc\u8fd8\u80fd\u5316\u7b80\uff1f","title":"\u679a\u4e3e\u7ea6\u7b80\u7684\u57fa\u672c\u539f\u5219"},{"location":"training/2020Autumn/","text":"\u8bad\u7ec3\u5185\u5bb9 \u00b6 \u5e8f\u53f7 \u65f6\u95f4 \u8bfe\u7a0b \u8bb2\u5e08 1 \u7a0b\u5e8f\u8bbe\u8ba1\u5165\u95e8 Qi Zelu 2 \u5faa\u73af\u7ed3\u6784\u7a0b\u5e8f\u8bbe\u8ba1 Zhang Huarui 3 \u7efc\u5408\u7ec3\u4e60 Gao Chang 4 \u6570\u7ec4 Gao Chang 5 \u5b57\u7b26\u6570\u7ec4\u548c\u5b57\u7b26\u4e32 Xiao Zimeng 6 \u51fd\u6570 Lyu Jiuyang 7 \u719f\u6089vjudge\u5728\u7ebf\u8bc4\u6d4b\u7cfb\u7edf Li Shengrun 8 vjudge\u7efc\u5408\u7ec3\u4e60 Yang Yixin 9 \u7b97\u6cd5\u57fa\u7840 Wang Mingyue 10 \u4f4d\u8fd0\u7b97 Zhao Runze \u4e34\u65f6\u8c03\u8bfe 10\u670831\u65e5 \u5468\u516d \u524d\u7f6e\u77e5\u8bc6\u56de\u987e\u4e0e\u7ec3\u4e60 Lyu Jiuyang 11 11\u67084\u65e5 \u5468\u4e09 \u9012\u5f52\u548c\u9012\u63a8 Zhang Huarui 12 11\u67087\u65e5 \u5468\u516d \u6392\u5e8f Wang Chengrui 13 11\u670811\u65e5 \u5468\u4e09 \u5206\u6cbb\u4e0e\u4e8c\u5206 Qi Zelu 14 11\u670814\u65e5 \u5468\u516d \u8d2a\u5fc3 Xu Ke 15 11\u670818\u65e5 \u5468\u4e09 \u52a8\u6001\u89c4\u5212\u5165\u95e8 Huang Biao 16 11\u670821\u65e5 \u5468\u516d \u7b80\u5355\u6570\u5b66\u548c\u679a\u4e3e\u7ea6\u7b80 Lyu Jiuyang 17 11\u670825\u65e5 \u5468\u4e09 \u679a\u4e3e\u6392\u5217\u548c\u679a\u4e3e\u5b50\u96c6 Leng Linfu 18 11\u670828\u65e5 \u5468\u516d \u6808\u548c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5DFS Leng Linfu 19 12\u67082\u65e5 \u5468\u4e09 \u961f\u5217\u548c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5BFS Li Shengrun 20 12\u67085\u65e5 \u5468\u516d \u6570\u8bba Yang Yixin","title":"2020\u79cb\u5b63\u96c6\u8bad"},{"location":"training/2020Autumn/#_1","text":"\u5e8f\u53f7 \u65f6\u95f4 \u8bfe\u7a0b \u8bb2\u5e08 1 \u7a0b\u5e8f\u8bbe\u8ba1\u5165\u95e8 Qi Zelu 2 \u5faa\u73af\u7ed3\u6784\u7a0b\u5e8f\u8bbe\u8ba1 Zhang Huarui 3 \u7efc\u5408\u7ec3\u4e60 Gao Chang 4 \u6570\u7ec4 Gao Chang 5 \u5b57\u7b26\u6570\u7ec4\u548c\u5b57\u7b26\u4e32 Xiao Zimeng 6 \u51fd\u6570 Lyu Jiuyang 7 \u719f\u6089vjudge\u5728\u7ebf\u8bc4\u6d4b\u7cfb\u7edf Li Shengrun 8 vjudge\u7efc\u5408\u7ec3\u4e60 Yang Yixin 9 \u7b97\u6cd5\u57fa\u7840 Wang Mingyue 10 \u4f4d\u8fd0\u7b97 Zhao Runze \u4e34\u65f6\u8c03\u8bfe 10\u670831\u65e5 \u5468\u516d \u524d\u7f6e\u77e5\u8bc6\u56de\u987e\u4e0e\u7ec3\u4e60 Lyu Jiuyang 11 11\u67084\u65e5 \u5468\u4e09 \u9012\u5f52\u548c\u9012\u63a8 Zhang Huarui 12 11\u67087\u65e5 \u5468\u516d \u6392\u5e8f Wang Chengrui 13 11\u670811\u65e5 \u5468\u4e09 \u5206\u6cbb\u4e0e\u4e8c\u5206 Qi Zelu 14 11\u670814\u65e5 \u5468\u516d \u8d2a\u5fc3 Xu Ke 15 11\u670818\u65e5 \u5468\u4e09 \u52a8\u6001\u89c4\u5212\u5165\u95e8 Huang Biao 16 11\u670821\u65e5 \u5468\u516d \u7b80\u5355\u6570\u5b66\u548c\u679a\u4e3e\u7ea6\u7b80 Lyu Jiuyang 17 11\u670825\u65e5 \u5468\u4e09 \u679a\u4e3e\u6392\u5217\u548c\u679a\u4e3e\u5b50\u96c6 Leng Linfu 18 11\u670828\u65e5 \u5468\u516d \u6808\u548c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5DFS Leng Linfu 19 12\u67082\u65e5 \u5468\u4e09 \u961f\u5217\u548c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5BFS Li Shengrun 20 12\u67085\u65e5 \u5468\u516d \u6570\u8bba Yang Yixin","title":"\u8bad\u7ec3\u5185\u5bb9"},{"location":"training/2020Spring/","text":"\u4f7f\u7528\u5e73\u53f0 \u00b6 \u505a\u9898\u4ecd\u4f7f\u7528 Virtual Judge \uff0c\u8bad\u7ec3\u540d\u79f0\u524d\u7f00\u4e3a\u201cCUC-2020-Spring Training\u201d\u3002\u79ef\u5206\u89c4\u5219\u540c\u4e0a\u5b66\u671f\u3002 \u6388\u8bfe\u4f7f\u7528 Bilibili \u76f4\u64ad\u6216\u63d0\u524d\u5236\u4f5c\u597d\u89c6\u9891\u4e0a\u4f20\uff0c\u6bcf\u6b21\u4e0a\u8bfe\u524d\u4f1a\u5728QQ\u7fa4\u91cc\u63d0\u524d\u901a\u77e5\u623f\u95f4\u53f7\u6216\u89c6\u9891\u5730\u5740\u3002 \u8bb2\u5e08\u540d\u5355 \u00b6 \u65f6\u95f4 \u5185\u5bb9\u5b89\u6392 \u8bb2\u5e08 2\u670826\u65e5 14:00-18:00 2020\u6625\u5b63\u8bad\u7ec3\u5f00\u8425\u4eea\u5f0f Teacher, Huang Wei 2\u670826\u65e5 14:00-18:00 \u65f6\u95f4\u590d\u6742\u5ea6\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u3001\u7ed3\u6784\u4f53\u3001\u9ad8\u7cbe\u5ea6\u8fd0\u7b97\u3001INT128\u3001sort\u7684\u5e94\u7528 Wang Mingyue, Lyu Jiuyang 2\u670829\u65e5 14:00-18:00 STL\u7b80\u5355\u7ed3\u6784\u548c\u7528\u6cd5\uff08map,set,multiset,\u4f18\u5148\u961f\u5217\uff0c\u54c8\u5e0c\u8868\uff09\u3001bitset Liu Zongxin 3\u67084\u65e5 14:00-18:00 \u5c3a\u53d6\u3001\u4e8c\u5206\u3001STL\u91cc\u7684\u4e8c\u5206\u3001\u500d\u589e Li Chenxi 3\u67087\u65e5 14:00-18:00 \u6811\u548c\u56fe\u7684\u7ed3\u6784\u3001\u5b58\u50a8\u3001\u904d\u5386\u3001\u7b80\u5355\u4ecb\u7ecd\u5e76\u67e5\u96c6 Wang Dongxia , Zong Ziyu 3\u670811\u65e5\uff08\u5468\u4e09\uff0913:30-17:00 \u6811\u548c\u56fe\u7684DFS\u3001BFS\u3001\u961f\u5217\u3001\u6808\uff08STL\uff09 Jing Wei 3\u670814\u65e5\uff08\u5468\u516d\uff0913:30-17:00 \u6700\u5c0f\u751f\u6210\u6811\u3001\u6700\u77ed\u8def\u5f84 Jing Wei \u7b2c4\u5468 \u5dee\u5206\u7ea6\u675f\u3001\u4e8c\u5206\u56fe\u3001\u4e8c\u5206\u56fe\u5339\u914d Deng Chumeng \u62d3\u6251\u6392\u5e8f\u3001\u5f3a\u8fde\u901a\u5206\u91cf Li Shengrun \u7b2c5\u5468 LCA\u6700\u8fd1\u516c\u5171\u7956\u5148\u3001\u6811\u4e0a\u5dee\u5206\u3001RMQ Liu Liming \u56fe\u8bba\u7684\u4e13\u9898\u6bd4\u8d5b Zong Ziyu \u7b2c6\u5468 \u80cc\u5305DP\u3001\u6811\u4e0aDP Huang Biao \u72b6\u6001\u538b\u7f29DP\u3001\u533a\u95f4DP Huang Biao \u7b2c7\u5468 \u6570\u4f4dDP\u3001\u6982\u7387DP\u3001\u8ba1\u6570DP Cao Keyi DP\u7684\u4e13\u9898\u6bd4\u8d5b Cao Keyi \u7b2c8\u5468 \u6570\u8bba\u4e00 Zhao Ziru \u6570\u8bba\u4e8c\u3001\u7ec4\u5408\u6570\u5b66\u3001\u7ecf\u5178\u6570\u5217 Lyu Jiuyang \u7b2c9\u5468 \u535a\u5f08 Lyu Jiuyang \u6570\u5b66\u535a\u5f08\u7684\u4e13\u9898\u6bd4\u8d5b Zhao Ziru 5\u67082\u65e5 \u5468\u516d \u6811\u72b6\u6570\u7ec4\u3001\u7ebf\u6bb5\u6811\u57fa\u7840 Jie Qingying 5\u67086\u65e5 \u5468\u4e09 \u4e94\u4e00\u6b22\u4e50\u8d5b Lyu Jiuyang 5\u670813\u65e5 \u5468\u4e09 \u5355\u8c03\u6808\u548c\u5355\u8c03\u961f\u5217\u3001\u5e76\u67e5\u96c6 Liu Zongxin 5\u670816\u65e5 \u5468\u516d \u70b9\u5206\u6cbb Li Chenxi 5\u670820\u65e5 \u5468\u4e09 \u6811\u94fe\u5256\u5206\u3001\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784 Jie Qingying 5\u670823\u65e5 \u5468\u516d \u7ebf\u6bb5\u6811\u8fdb\u9636 Chen Shibo 5\u670827\u65e5 \u5468\u4e09 \u6570\u636e\u7ed3\u6784\u4e13\u9898\u6bd4\u8d5b Chen Shibo 5\u670830\u65e5 \u5468\u516d Trie\u3001KMP Deng Chumeng 6\u67083\u65e5 \u5468\u4e09 \u5b57\u7b26\u54c8\u5e0c\u3001\u56de\u6587\u4e32\u3001AC\u81ea\u52a8\u673a Deng Chumeng \u5b66\u5458\u540d\u5355 \u00b6 \uff08\u6392\u540d\u4e0d\u5206\u5148\u540e\uff09 \u59d3\u540d Fan Long Leng Linfu Gan Yuhui Qi Zelu Li Shengrun Zhang Huarui Zhao Runze Yang Yixin Pang Yuxuan Wang Boxiang He Jingqian Wang Ming Xu Ke Chen Keyue Xiao Zimeng Gao Chang Zeng Rui Wang Chengrui Wang Mingyue Wang Dongxia Li Meiying Song Zelin Chen Aidi He Qianhui Guo Xikun Wei Chaoyang Zeng Xianghao Yu Mengli Kang Xiaohan Meng Shen Gao Jiayi Duan Jiashuai Liu Siyuan Lan Yuanxin Xu Zelin Guo Zhencheng Li Jinghe Song Chunying","title":"2020\u6625\u5b63\u96c6\u8bad"},{"location":"training/2020Spring/#_1","text":"\u505a\u9898\u4ecd\u4f7f\u7528 Virtual Judge \uff0c\u8bad\u7ec3\u540d\u79f0\u524d\u7f00\u4e3a\u201cCUC-2020-Spring Training\u201d\u3002\u79ef\u5206\u89c4\u5219\u540c\u4e0a\u5b66\u671f\u3002 \u6388\u8bfe\u4f7f\u7528 Bilibili \u76f4\u64ad\u6216\u63d0\u524d\u5236\u4f5c\u597d\u89c6\u9891\u4e0a\u4f20\uff0c\u6bcf\u6b21\u4e0a\u8bfe\u524d\u4f1a\u5728QQ\u7fa4\u91cc\u63d0\u524d\u901a\u77e5\u623f\u95f4\u53f7\u6216\u89c6\u9891\u5730\u5740\u3002","title":"\u4f7f\u7528\u5e73\u53f0"},{"location":"training/2020Spring/#_2","text":"\u65f6\u95f4 \u5185\u5bb9\u5b89\u6392 \u8bb2\u5e08 2\u670826\u65e5 14:00-18:00 2020\u6625\u5b63\u8bad\u7ec3\u5f00\u8425\u4eea\u5f0f Teacher, Huang Wei 2\u670826\u65e5 14:00-18:00 \u65f6\u95f4\u590d\u6742\u5ea6\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u3001\u7ed3\u6784\u4f53\u3001\u9ad8\u7cbe\u5ea6\u8fd0\u7b97\u3001INT128\u3001sort\u7684\u5e94\u7528 Wang Mingyue, Lyu Jiuyang 2\u670829\u65e5 14:00-18:00 STL\u7b80\u5355\u7ed3\u6784\u548c\u7528\u6cd5\uff08map,set,multiset,\u4f18\u5148\u961f\u5217\uff0c\u54c8\u5e0c\u8868\uff09\u3001bitset Liu Zongxin 3\u67084\u65e5 14:00-18:00 \u5c3a\u53d6\u3001\u4e8c\u5206\u3001STL\u91cc\u7684\u4e8c\u5206\u3001\u500d\u589e Li Chenxi 3\u67087\u65e5 14:00-18:00 \u6811\u548c\u56fe\u7684\u7ed3\u6784\u3001\u5b58\u50a8\u3001\u904d\u5386\u3001\u7b80\u5355\u4ecb\u7ecd\u5e76\u67e5\u96c6 Wang Dongxia , Zong Ziyu 3\u670811\u65e5\uff08\u5468\u4e09\uff0913:30-17:00 \u6811\u548c\u56fe\u7684DFS\u3001BFS\u3001\u961f\u5217\u3001\u6808\uff08STL\uff09 Jing Wei 3\u670814\u65e5\uff08\u5468\u516d\uff0913:30-17:00 \u6700\u5c0f\u751f\u6210\u6811\u3001\u6700\u77ed\u8def\u5f84 Jing Wei \u7b2c4\u5468 \u5dee\u5206\u7ea6\u675f\u3001\u4e8c\u5206\u56fe\u3001\u4e8c\u5206\u56fe\u5339\u914d Deng Chumeng \u62d3\u6251\u6392\u5e8f\u3001\u5f3a\u8fde\u901a\u5206\u91cf Li Shengrun \u7b2c5\u5468 LCA\u6700\u8fd1\u516c\u5171\u7956\u5148\u3001\u6811\u4e0a\u5dee\u5206\u3001RMQ Liu Liming \u56fe\u8bba\u7684\u4e13\u9898\u6bd4\u8d5b Zong Ziyu \u7b2c6\u5468 \u80cc\u5305DP\u3001\u6811\u4e0aDP Huang Biao \u72b6\u6001\u538b\u7f29DP\u3001\u533a\u95f4DP Huang Biao \u7b2c7\u5468 \u6570\u4f4dDP\u3001\u6982\u7387DP\u3001\u8ba1\u6570DP Cao Keyi DP\u7684\u4e13\u9898\u6bd4\u8d5b Cao Keyi \u7b2c8\u5468 \u6570\u8bba\u4e00 Zhao Ziru \u6570\u8bba\u4e8c\u3001\u7ec4\u5408\u6570\u5b66\u3001\u7ecf\u5178\u6570\u5217 Lyu Jiuyang \u7b2c9\u5468 \u535a\u5f08 Lyu Jiuyang \u6570\u5b66\u535a\u5f08\u7684\u4e13\u9898\u6bd4\u8d5b Zhao Ziru 5\u67082\u65e5 \u5468\u516d \u6811\u72b6\u6570\u7ec4\u3001\u7ebf\u6bb5\u6811\u57fa\u7840 Jie Qingying 5\u67086\u65e5 \u5468\u4e09 \u4e94\u4e00\u6b22\u4e50\u8d5b Lyu Jiuyang 5\u670813\u65e5 \u5468\u4e09 \u5355\u8c03\u6808\u548c\u5355\u8c03\u961f\u5217\u3001\u5e76\u67e5\u96c6 Liu Zongxin 5\u670816\u65e5 \u5468\u516d \u70b9\u5206\u6cbb Li Chenxi 5\u670820\u65e5 \u5468\u4e09 \u6811\u94fe\u5256\u5206\u3001\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784 Jie Qingying 5\u670823\u65e5 \u5468\u516d \u7ebf\u6bb5\u6811\u8fdb\u9636 Chen Shibo 5\u670827\u65e5 \u5468\u4e09 \u6570\u636e\u7ed3\u6784\u4e13\u9898\u6bd4\u8d5b Chen Shibo 5\u670830\u65e5 \u5468\u516d Trie\u3001KMP Deng Chumeng 6\u67083\u65e5 \u5468\u4e09 \u5b57\u7b26\u54c8\u5e0c\u3001\u56de\u6587\u4e32\u3001AC\u81ea\u52a8\u673a Deng Chumeng","title":"\u8bb2\u5e08\u540d\u5355"},{"location":"training/2020Spring/#_3","text":"\uff08\u6392\u540d\u4e0d\u5206\u5148\u540e\uff09 \u59d3\u540d Fan Long Leng Linfu Gan Yuhui Qi Zelu Li Shengrun Zhang Huarui Zhao Runze Yang Yixin Pang Yuxuan Wang Boxiang He Jingqian Wang Ming Xu Ke Chen Keyue Xiao Zimeng Gao Chang Zeng Rui Wang Chengrui Wang Mingyue Wang Dongxia Li Meiying Song Zelin Chen Aidi He Qianhui Guo Xikun Wei Chaoyang Zeng Xianghao Yu Mengli Kang Xiaohan Meng Shen Gao Jiayi Duan Jiashuai Liu Siyuan Lan Yuanxin Xu Zelin Guo Zhencheng Li Jinghe Song Chunying","title":"\u5b66\u5458\u540d\u5355"},{"location":"training/2021Autumn/","text":"\u5e8f\u53f7 \u65f6\u95f4 \u8bfe\u7a0b \u8bb2\u5e08 1 2021\u5e7410\u670813\u65e5 \u7a0b\u5e8f\u8bbe\u8ba1\u5165\u95e8\uff08C/C++\u4ecb\u7ecd\u3001\u8f93\u5165\u8f93\u51fa\u3001\u6761\u4ef6\u8bed\u53e5\uff09 \u4e93\u6cfd\u9c81 2 2021\u5e7410\u670816\u65e5 \u5faa\u73af\u7ed3\u6784\u7a0b\u5e8f\u8bbe\u8ba1 \u5f20\u534e\u777f 3 2021\u5e7410\u670820\u65e5 \u7efc\u5408\u7ec3\u4e60 \u8d75\u6da6\u6cfd 4 2021\u5e7410\u670823\u65e5 \u6570\u7ec4 \u8c2d\u661f\u8bed 5 2021\u5e7410\u670827\u65e5 \u5b57\u7b26\u6570\u7ec4\u548c\u5b57\u7b26\u4e32 \u6768\u5b87\u68ee 6 2021\u5e7410\u670830\u65e5 \u51fd\u6570 \u6731\u4fca\u6770 7 2021\u5e7411\u67083\u65e5 \u719f\u6089vjudge\u5728\u7ebf\u8bc4\u6d4b\u7cfb\u7edf \u4e93\u6cfd\u9c81 8 2021\u5e7411\u67086\u65e5 vjudge\u7efc\u5408\u7ec3\u4e60 \u738b\u777f 9 2021\u5e7411\u670810\u65e5 \u7b97\u6cd5\u57fa\u7840\uff08\u524d\u7f00\u548c + \u5dee\u5206 + \u7ed3\u6784\u4f53\u5e94\u7528\uff09 \u5b98\u6615 10 2021\u5e7411\u670813\u65e5 \u4f4d\u8fd0\u7b97 \u80e1\u9732\u5764 11 2021\u5e7411\u670817\u65e5 \u9012\u5f52\u548c\u9012\u63a8 \u6731\u4fca\u6770 12 2021\u5e7411\u670820\u65e5 \u6392\u5e8f \u6768\u5b87\u68ee 13 2021\u5e7411\u670824\u65e5 \u5206\u6cbb\u4e0e\u4e8c\u5206 \u6f58\u4e1c\u9038\u6770 14 2021\u5e7411\u670827\u65e5 \u201cHello, CUC-ACMers\u201d \u65b0\u751f\u8d5b\u4e13\u573a \u6768\u5b87\u68ee 15 2021\u5e7412\u67081\u65e5 C++\u4e2dSTL\u7684\u7b80\u5355\u5e94\u7528\uff08\u6808\u3001\u961f\u5217\uff09 \u8d75\u6da6\u6cfd 16 2021\u5e7412\u67084\u65e5 \u8d2a\u5fc3 \u6f58\u4e1c\u9038\u6770 17 2021\u5e7412\u67088\u65e5 \u52a8\u6001\u89c4\u5212\u5165\u95e8 \u6b27\u8283\u8283 18 2021\u5e7412\u670811\u65e5 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5DFS \u5b98\u6615 19 2021\u5e7412\u670815\u65e5 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5BFS \u6768\u96ea\u5a77 20 2021\u5e7412\u670818\u65e5 \u6570\u8bba\u5165\u95e8\uff08\u8d28\u6570\u7b5b\u3001\u5feb\u901f\u5e42\u3001\u9006\u5143\u3001\u5feb\u901f\u4e58\uff09 \u674e\u7f8e\u83b9 21 2021\u5e7412\u670822\u65e5 \u7ec4\u5408\u6570\u5b66\u5165\u95e8\uff08\u7ec4\u5408\u6570\u6c42\u6cd5\uff0c\u679a\u4e3e\u5b50\u96c6\uff0c\u679a\u4e3e\u6392\u5217\uff09 \u5f20\u534e\u777f","title":"2021\u79cb\u5b63\u96c6\u8bad"},{"location":"training/2021Spring/","text":"\u5e8f\u53f7 \u65f6\u95f4 \u5185\u5bb9\u9884\u5b89\u6392 \u8bb2\u5e08 1 3\u67083\u65e5 \u5468\u4e09 2021\u6625\u5b63\u8bad\u7ec3\u5f00\u8425\u4eea\u5f0f Huang Wei 2 3\u67083\u65e5 \u5468\u4e09 \u65f6\u95f4\u590d\u6742\u5ea6\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u3001\u7ed3\u6784\u4f53\u3001\u9ad8\u7cbe\u5ea6\u8fd0\u7b97\u3001INT128\u3001sort\u7684\u5e94\u7528 Leng Linfu 3 3\u67086\u65e5 \u5468\u516d STL\u7b80\u5355\u7ed3\u6784\u548c\u7528\u6cd5\uff08map,set,multiset,\u4f18\u5148\u961f\u5217\uff0c\u54c8\u5e0c\u8868\uff09\u3001bitset Lyu Jiuyang 4 3\u670810\u65e5 \u5468\u4e09 \u5c3a\u53d6\u3001\u4e8c\u5206\u3001STL\u91cc\u7684\u4e8c\u5206\u3001\u500d\u589e Zhang Huarui 5 3\u670813\u65e5 \u5468\u516d \u6811\u548c\u56fe\u7684\u7ed3\u6784\u3001\u5b58\u50a8\u3001\u904d\u5386\u3001\u7b80\u5355\u4ecb\u7ecd\u5e76\u67e5\u96c6 Zhao Runze 6 3\u670817\u65e5 \u5468\u4e09 \u6811\u548c\u56fe\u7684DFS\u3001BFS\u3001\u961f\u5217\u3001\u6808\uff08STL\uff09 Xu Ke 7 3\u670824\u65e5 \u5468\u4e09 \u6700\u5c0f\u751f\u6210\u6811\u3001\u6700\u77ed\u8def\u5f84 Wang Chengrui 8 3\u670827\u65e5 \u5468\u516d \u5dee\u5206\u7ea6\u675f\u3001\u4e8c\u5206\u56fe\u3001\u4e8c\u5206\u56fe\u5339\u914d Li Shengrun 9 3\u670831\u65e5 \u5468\u4e09 \u62d3\u6251\u6392\u5e8f\u3001\u5f3a\u8fde\u901a\u5206\u91cf Zhao Runze 10 4\u67087\u65e5 \u5468\u4e09 LCA\u6700\u8fd1\u516c\u5171\u7956\u5148\u3001\u6811\u4e0a\u5dee\u5206\u3001RMQ Xu Ke 11 4\u670810\u65e5 \u5468\u516d \u80cc\u5305DP\u3001\u6811\u4e0aDP Xiao Zimeng 12 4\u670814\u65e5 \u5468\u4e09 \u72b6\u6001\u538b\u7f29DP\u3001\u533a\u95f4DP Li Meiying 13 4\u670817\u65e5 \u5468\u516d \u6570\u4f4dDP\u3001\u6982\u7387DP\u3001\u8ba1\u6570DP Li Meiying 14 4\u670821\u65e5 \u5468\u4e09 \u6570\u8bba\u4e00 Gao Chang 15 4\u670824\u65e5 \u5468\u516d \u6570\u8bba\u4e8c\u3001\u7ec4\u5408\u6570\u5b66\u3001\u7ecf\u5178\u6570\u5217 Lyu Jiuyang 16 4\u670828\u65e5 \u5468\u4e09 \u535a\u5f08 Zhang Huarui 17 5\u67085\u65e5 \u5468\u4e09 \u6811\u72b6\u6570\u7ec4\u3001\u7ebf\u6bb5\u6811\u57fa\u7840 Yang Yixin 18 5\u67088\u65e5 \u5468\u516d \u5355\u8c03\u6808\u548c\u5355\u8c03\u961f\u5217\u3001\u5e76\u67e5\u96c6 Yang Yixin 19 5\u670812\u65e5 \u5468\u4e09 \u70b9\u5206\u6cbb Li Shengrun 20 5\u670815\u65e5 \u5468\u516d \u6811\u94fe\u5256\u5206\u3001\u53ef\u6301\u4e45\u5316\u6570\u636e\u7ed3\u6784 Jie Qingying 21 5\u670819\u65e5 \u5468\u4e09 \u7ebf\u6bb5\u6811\u8fdb\u9636 Xia Yewei 22 5\u670822\u65e5 \u5468\u516d Trie\u3001KMP Qi Zelu 23 5\u670826\u65e5 \u5468\u4e09 \u5b57\u7b26\u54c8\u5e0c\u3001\u56de\u6587\u4e32\u3001AC\u81ea\u52a8\u673a Qi Zelu","title":"2021\u6625\u5b63\u96c6\u8bad"},{"location":"training/2022Autumn/","text":"\u5e8f\u53f7 \u65f6\u95f4 \u5185\u5bb9\u9884\u5b89\u6392 \u8bb2\u5e08 1 2022\u5e749\u670821\u65e5\u5468\u4e09 C/C++\u4ecb\u7ecd\u3001\u8f93\u5165\u8f93\u51fa\u3001\u6761\u4ef6\u8bed\u53e5 \u6768\u5b87\u68ee 2 2022\u5e749\u670824\u65e5\u5468\u516d \u5faa\u73af\u7ed3\u6784\u7a0b\u5e8f\u8bbe\u8ba1 \u6f58\u4e1c\u9038\u6770 3 2022\u5e749\u670828\u65e5\u5468\u4e09 \u6570\u7ec4 \u9093\u4f55\u5176 4 2022\u5e7410\u67081\u65e5\u5468\u516d \u5b57\u7b26\u6570\u7ec4\u548c\u5b57\u7b26\u4e32 \u674e\u660e\u8431 5 2022\u5e7410\u67085\u65e5\u5468\u4e09 \u51fd\u6570 \u5b98\u6615 6 2022\u5e7410\u67088\u65e5\u5468\u516d \u719f\u6089vjudge\u5728\u7ebf\u8bc4\u6d4b\u7cfb\u7edf \u674e\u660e 7 2022\u5e7410\u670812\u65e5\u5468\u4e09 vjudge\u7efc\u5408\u7ec3\u4e60 \u8bb8\u5b89\u8d85 8 2022\u5e7410\u670815\u65e5\u5468\u516d \u65b0\u751f\u4e13\u573a1 \u5170\u6df3\u67ab 9 2022\u5e7410\u670819\u65e5\u5468\u4e09 \u524d\u7f00\u548c + \u5dee\u5206 + \u7ed3\u6784\u4f53 \u8499\u4f73\u5065 10 2022\u5e7410\u670822\u65e5\u5468\u516d \u4f4d\u8fd0\u7b97 \u90d1\u534e\u5e86 11 2022\u5e7410\u670826\u65e5\u5468\u4e09 \u9012\u5f52\u548c\u9012\u63a8 \u6d82\u7136 12 2022\u5e7410\u670829\u65e5\u5468\u516d \u6392\u5e8f\uff08\u5192\u6ce1\u3001\u6876\u6392\u5e8f\u3001\u5feb\u6392\u3001\u5f52\u5e76\u6392\u5e8f\uff09 \u80e1\u9732\u5764 13 2022\u5e7411\u67082\u65e5\u5468\u4e09 \u5206\u6cbb\u4e0e\u4e8c\u5206 \u51cc\u6d77 14 2022\u5e7411\u67085\u65e5\u5468\u516d C++\u4e2dSTL\u7684\u7b80\u5355\u5e94\u7528\uff08\u6808\u3001\u961f\u5217\uff09 \u8521\u96e8\u8587 15 2022\u5e7411\u67089\u65e5\u5468\u4e09 \u8d2a\u5fc3 \u4f59\u5065 16 2022\u5e7411\u670812\u65e5\u5468\u516d \u65b0\u751f\u4e13\u573a2 \u674e\u660e 15 2022\u5e7411\u670816\u65e5\u5468\u4e09 \u52a8\u6001\u89c4\u5212\u5165\u95e8 \u6768\u5b87\u68ee 16 2022\u5e7411\u670819\u65e5\u5468\u516d \u52a8\u6001\u89c4\u5212\u5165\u95e8 \u674e\u660e\u8431 17 2022\u5e7411\u670823\u65e5\u5468\u4e09 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5DFS \u674e\u747e\u71a0 18 2022\u5e7411\u670826\u65e5\u5468\u516d \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5BFS \u5b98\u6615 19 2022\u5e7411\u670830\u65e5\u5468\u4e09 \u6570\u8bba\u5165\u95e8\uff08gcd\u3001\u5feb\u901f\u5e42\u3001\u5feb\u901f\u4e58\uff09 \u8c2d\u661f\u8bed 20 2022\u5e7412\u67083\u65e5\u5468\u516d \u6570\u8bba\u5165\u95e8\uff08\u8d28\u6570\u7b5b\u3001\u552f\u4e00\u5206\u89e3\u5b9a\u7406\u3001\u540c\u4f59\u3001\u9006\u5143\uff09 \u8c2d\u661f\u8bed 21 2022\u5e7412\u67087\u65e5\u5468\u4e09 \u7b2c\u516d\u5c4a\u4e2d\u56fd\u4f20\u5a92\u5927\u5b66\u7a0b\u5e8f\u8bbe\u8ba1\u5927\u8d5b\uff08ACM\u6821\u8d5b\uff09 22 2022\u5e7412\u670810\u65e5\u5468\u516d \u7ec4\u5408\u6570\u5b66\u5165\u95e8\uff08\u7ec4\u5408\u6570\u6c42\u6cd5\uff0c\u679a\u4e3e\u6392\u5217\uff09 \u6d82\u7136 23 2022\u5e7412\u670814\u65e5\u5468\u4e09 \u679a\u4e3e\u5b50\u96c6 \u5170\u6df3\u67ab(\u6682\u5b9a\u4e0b\u5b66\u671f\u8bb2) 24 2022\u5e7412\u670817\u65e5\u5468\u516d \u9ad8\u7cbe\u5ea6\u8fd0\u7b97 \u6c88\u94b0\u6b23\uff08\u6682\u5b9a\u4e0b\u5b66\u671f\u8bb2\uff09","title":"2022\u79cb\u5b63\u96c6\u8bad"},{"location":"training/2022Spring/","text":"\u5e8f\u53f7 \u65f6\u95f4 \u8bfe\u7a0b \u8bb2\u5e08 1 2022\u5e742\u670823\u65e5 \u9ad8\u7cbe\u5ea6\u8fd0\u7b97 \u5b98\u6615 2 2022\u5e742\u670826\u65e5 STL \u4e93\u6cfd\u9c81 3 2022\u5e743\u67082\u65e5 \u5c3a\u53d6\uff0c\u4e8c\u5206\uff0c\u500d\u589e \u80e1\u9732\u5764 4 2022\u5e743\u67085\u65e5 \u5e76\u67e5\u96c6 \u738b\u777f 5 2022\u5e743\u67089\u65e5 \u6811\u548c\u56fe\u7684\u7ed3\u6784\uff0c\u5b58\u50a8\uff0c\u4ee5\u53ca\u904d\u5386 \u8c2d\u661f\u8bed 6 2022\u5e743\u670812\u65e5 \u6700\u5c0f\u751f\u6210\u6811\uff0c\u6700\u77ed\u8def\u5f84 \u6768\u96ea\u5a77 7 2022\u5e743\u670816\u65e5 \u62d3\u6251\u6392\u5e8f\uff0c\u5f3a\u8fde\u901a\u5206\u91cf \u8d75\u6da6\u6cfd 8 2022\u5e743\u670819\u65e5 \u5dee\u5206\u7ea6\u675f\uff0c\u4e8c\u5206\u56fe\uff0c\u4e8c\u5206\u56fe\u5339\u914d \u8d75\u6da6\u6cfd 9 2022\u5e743\u670823\u65e5 \u6811\u548c\u56fe\u7684\u7efc\u5408\u8bad\u7ec3 \u8c2d\u661f\u8bed 10 2022\u5e743\u670826\u65e5 LCA \u6768\u96ea\u5a77 11 2022\u5e743\u670830\u65e5 \u6811\u4e0a\u5dee\u5206 \u6768\u96ea\u5a77 12 2022\u5e744\u67082\u65e5 \u7efc\u5408\u8bad\u7ec3 \u6768\u5b87\u68ee 13 2022\u5e744\u67086\u65e5 \u80cc\u5305DP\uff0c\u6811\u4e0aDP\uff08\u6811\u4e0a\u80cc\u5305\uff09 \u6b27\u8283\u8283 14 2022\u5e744\u67089\u65e5 \u72b6\u6001\u538b\u7f29DP\uff0c\u533a\u95f4DP \u674e\u7f8e\u83b9 15 2022\u5e744\u670820\u65e5 dp\u7efc\u5408\u7ec3\u4e60 \u6768\u5b87\u68ee 16 2022\u5e744\u670823\u65e5 \u6811\u72b6\u6570\u7ec4\uff0c\u7ebf\u6bb5\u6811 \u6731\u4fca\u6770 17 2022\u5e744\u670827\u65e5 \u7ebf\u6bb5\u6811\u8fdb\u9636 \u6768\u5b87\u68ee 18 2022\u5e744\u670830\u65e5 \u7efc\u5408\u8bad\u7ec3 \u6731\u4fca\u6770 19 2022\u5e745\u67084\u65e5 \u6570\u8bba\u57fa\u7840\u90e8\u5206 \u5f20\u534e\u777f 20 2022\u5e745\u67087\u65e5 trie\uff0ckmp\uff0c\u5b57\u7b26\u54c8\u5e0c \u6f58\u4e1c\u9038\u6770 21 2022\u5e745\u670811\u65e5 \u535a\u5f08\u57fa\u7840 \u5f20\u534e\u777f 22 2022\u5e745\u670814\u65e5 \u7efc\u5408\u8bad\u7ec3 \u5f20\u534e\u777f/\u6f58\u4e1c\u9038\u6770","title":"2022\u6625\u5b63\u96c6\u8bad"},{"location":"training/2020Summer/nowcoder/","text":"\u725b\u5ba2\u9898\u89e3 \u00b6 \u9752\u9752\u8349\u539f\u4e09\u952e\u5ba2 \u7b2c\u4e09\u573a \u7b2c\u56db\u573a \u7b2c\u4e94\u573a \u7b2c\u516d\u573a \u7b2c\u4e03\u573a \u7b2c\u516b\u573a \u7b2c\u4e5d\u573a \u7b2c\u5341\u573a \u62ff\u94c1\u5c31\u518d\u4e5f\u4e0d\u559d\u62ff\u94c1\uff01 \u7b2c\u4e09\u573a \u7b2c\u56db\u573a \u7b2c\u4e94\u573a \u7b2c\u516d\u573a \u7b2c\u4e03\u573a \u7b2c\u516b\u573a \u7b2c\u4e5d\u573a \u7b2c\u5341\u573a \u590f\u65e5\u957f\u5403\u5c0f\u8089\u4e32\u559d\u674f\u4ec1\u8336 \u7b2c\u4e09\u573a \u7b2c\u56db\u573a \u7b2c\u4e94\u573a \u7b2c\u516d\u573a \u7b2c\u4e03\u573a \u7b2c\u516b\u573a \u7b2c\u4e5d\u573a \u7b2c\u5341\u573a \u4e09\u7f3a\u4e00 \u7b2c\u4e09\u573a \u7b2c\u56db\u573a \u7b2c\u4e94\u573a \u7b2c\u516d\u573a \u7b2c\u4e03\u573a \u7b2c\u516b\u573a \u7b2c\u4e5d\u573a \u7b2c\u5341\u573a Wow404 \u7b2c\u4e09\u573a \u7b2c\u56db\u573a \u7b2c\u4e94\u573a \u7b2c\u516d\u573a \u7b2c\u4e03\u573a \u7b2c\u516b\u573a \u7b2c\u4e5d\u573a \u7b2c\u5341\u573a \u961f\u5185\u8bad\u7ec3 \u00b6 \u9752\u9752\u8349\u539f\u4e09\u952e\u5ba2 \u00b6 Codeforces Round #661 (Div. 3) Codeforces Round #661 (Div. 3) Codeforces Round #662 (Div. 2) Educational Codeforces Round 93 (Rated for Div. 2) Educational Codeforces Round 93 (Rated for Div. 2) AC\u81ea\u52a8\u673a\u4e13\u9898\u603b\u7ed3 - \u662f\u90a3\u4e2a\u592a\u9633 Codeforces Global Round 10 Codeforces Global Round 10 Codeforces Round #663 (Div. 2) Codeforces Round #663 (Div. 2) Codeforces Round #664 (Div. 2) Codeforces Round #665 (Div. 2) \u590f\u65e5\u957f\u5403\u5c0f\u8089\u4e32\u559d\u674f\u4ec1\u8336 \u00b6 Codeforces Round #659 (Div. 2) Codeforces Round #660 (Div. 2) Codeforces Round #661 (Div. 3) Codeforces Round #662 (Div. 2) Codeforces Round #663 (Div. 2) Codeforces Round #664 (Div. 2) \u4e09\u7f3a\u4e00 \u00b6 Codeforces Global Round 10 Educational Codeforces Round 93 (Rated for Div. 2) Codeforces Round #664 (Div. 2) Codeforces Round #660 (Div. 2) Codeforces Round #665 (Div. 2) Codeforces Round #654 (Div. 2) \u62ff\u94c1\u5c31\u518d\u4e5f\u4e0d\u559d\u62ff\u94c1\uff01 \u00b6 Codeforces Round #657 (Div. 2) Codeforces Round #659 (Div. 2) Codeforces Round #662 (Div. 2) Codeforces Round #663 (Div. 2) Codeforces Round #664 (Div. 2) Codeforces Round #665 (Div. 2) Wow404 \u00b6 \u7b2c\u4e00\u6b21\u8bad\u7ec3 \u7b2c\u4e8c\u6b21\u8bad\u7ec3 \u7b2c\u4e09\u6b21\u8bad\u7ec3 \u7b2c\u56db\u6b21\u8bad\u7ec3 \u7b2c\u4e94\u6b21\u8bad\u7ec3 \u7b2c\u516d\u6b21\u8bad\u7ec3","title":"2020\u725b\u5ba2\u591a\u6821\u9898\u89e3/\u603b\u7ed3"},{"location":"training/2020Summer/nowcoder/#_1","text":"\u9752\u9752\u8349\u539f\u4e09\u952e\u5ba2 \u7b2c\u4e09\u573a \u7b2c\u56db\u573a \u7b2c\u4e94\u573a \u7b2c\u516d\u573a \u7b2c\u4e03\u573a \u7b2c\u516b\u573a \u7b2c\u4e5d\u573a \u7b2c\u5341\u573a \u62ff\u94c1\u5c31\u518d\u4e5f\u4e0d\u559d\u62ff\u94c1\uff01 \u7b2c\u4e09\u573a \u7b2c\u56db\u573a \u7b2c\u4e94\u573a \u7b2c\u516d\u573a \u7b2c\u4e03\u573a \u7b2c\u516b\u573a \u7b2c\u4e5d\u573a \u7b2c\u5341\u573a \u590f\u65e5\u957f\u5403\u5c0f\u8089\u4e32\u559d\u674f\u4ec1\u8336 \u7b2c\u4e09\u573a \u7b2c\u56db\u573a \u7b2c\u4e94\u573a \u7b2c\u516d\u573a \u7b2c\u4e03\u573a \u7b2c\u516b\u573a \u7b2c\u4e5d\u573a \u7b2c\u5341\u573a \u4e09\u7f3a\u4e00 \u7b2c\u4e09\u573a \u7b2c\u56db\u573a \u7b2c\u4e94\u573a \u7b2c\u516d\u573a \u7b2c\u4e03\u573a \u7b2c\u516b\u573a \u7b2c\u4e5d\u573a \u7b2c\u5341\u573a Wow404 \u7b2c\u4e09\u573a \u7b2c\u56db\u573a \u7b2c\u4e94\u573a \u7b2c\u516d\u573a \u7b2c\u4e03\u573a \u7b2c\u516b\u573a \u7b2c\u4e5d\u573a \u7b2c\u5341\u573a","title":"\u725b\u5ba2\u9898\u89e3"},{"location":"training/2020Summer/nowcoder/#_2","text":"","title":"\u961f\u5185\u8bad\u7ec3"},{"location":"training/2020Summer/nowcoder/#_3","text":"Codeforces Round #661 (Div. 3) Codeforces Round #661 (Div. 3) Codeforces Round #662 (Div. 2) Educational Codeforces Round 93 (Rated for Div. 2) Educational Codeforces Round 93 (Rated for Div. 2) AC\u81ea\u52a8\u673a\u4e13\u9898\u603b\u7ed3 - \u662f\u90a3\u4e2a\u592a\u9633 Codeforces Global Round 10 Codeforces Global Round 10 Codeforces Round #663 (Div. 2) Codeforces Round #663 (Div. 2) Codeforces Round #664 (Div. 2) Codeforces Round #665 (Div. 2)","title":"\u9752\u9752\u8349\u539f\u4e09\u952e\u5ba2"},{"location":"training/2020Summer/nowcoder/#_4","text":"Codeforces Round #659 (Div. 2) Codeforces Round #660 (Div. 2) Codeforces Round #661 (Div. 3) Codeforces Round #662 (Div. 2) Codeforces Round #663 (Div. 2) Codeforces Round #664 (Div. 2)","title":"\u590f\u65e5\u957f\u5403\u5c0f\u8089\u4e32\u559d\u674f\u4ec1\u8336"},{"location":"training/2020Summer/nowcoder/#_5","text":"Codeforces Global Round 10 Educational Codeforces Round 93 (Rated for Div. 2) Codeforces Round #664 (Div. 2) Codeforces Round #660 (Div. 2) Codeforces Round #665 (Div. 2) Codeforces Round #654 (Div. 2)","title":"\u4e09\u7f3a\u4e00"},{"location":"training/2020Summer/nowcoder/#_6","text":"Codeforces Round #657 (Div. 2) Codeforces Round #659 (Div. 2) Codeforces Round #662 (Div. 2) Codeforces Round #663 (Div. 2) Codeforces Round #664 (Div. 2) Codeforces Round #665 (Div. 2)","title":"\u62ff\u94c1\u5c31\u518d\u4e5f\u4e0d\u559d\u62ff\u94c1\uff01"},{"location":"training/2020Summer/nowcoder/#wow404","text":"\u7b2c\u4e00\u6b21\u8bad\u7ec3 \u7b2c\u4e8c\u6b21\u8bad\u7ec3 \u7b2c\u4e09\u6b21\u8bad\u7ec3 \u7b2c\u56db\u6b21\u8bad\u7ec3 \u7b2c\u4e94\u6b21\u8bad\u7ec3 \u7b2c\u516d\u6b21\u8bad\u7ec3","title":"Wow404"},{"location":"training/2020Summer/official/","text":"2020 \u6691\u671f\u8bad\u7ec3\u4eba\u5458\u540d\u5355\uff08\u6392\u540d\u4e0d\u5206\u5148\u540e\uff09 \u00b6 \u961f\u540d \u4eba\u5458 \u9752\u9752\u8349\u539f\u4e09\u952e\u5ba2 Lyu Jiuyang , Leng Linfu, Gan Yuhui \u62ff\u94c1\u5c31\u518d\u4e5f\u4e0d\u559d\u62ff\u94c1\uff01 Li Shengrun , Xiao Zimeng, Xu Ke \u590f\u65e5\u957f\u5403\u5c0f\u8089\u4e32\u559d\u674f\u4ec1\u8336 Gao Chang , Yang Yixin, Wang Chengrui \u4e09\u7f3a\u4e00 Qi Zelu , Zhang Huarui, Zhao Runze Wow404 Wang Mingyue , Yu Mengli, Li Meiying, Zeng Xianghao \u8bad\u7ec3\u65f6\u95f4 \u00b6 2020\u5e747\u670818\u65e5 \u81f3 2020\u5e748\u670822\u65e5\uff0c\u5468\u65e5\u4f11\u606f\u3002 \u6bcf\u65e5\u8bad\u7ec3\u65f6\u95f4\u4e3a\u65e99\u70b9\u81f3\u665a5\u70b9\uff0c\u961f\u5185\u53ef\u4ee5\u9002\u5f53\u8c03\u6574\u3002 \u591a\u6821\u8bad\u7ec3\u6ce8\u610f\u4e8b\u9879 \u00b6 \u6240\u6709\u961f\u4f0d\u5fc5\u987b\u9075\u5b88\u7684\u7eaa\u5f8b \u00b6 \u4e0d\u5f97\u65e0\u6545\u7f3a\u5e2d\u3001\u8fdf\u5230\uff0c\u65e9\u9000\u4efb\u4f55\u62a5\u540d\u53c2\u4e0e\u7684\u6bd4\u8d5b\u3002 \u6bd4\u8d5b\u4e2d\u4e0d\u80fd\u6284\u88ad\u5176\u4ed6\u961f\u4f0d\u7684\u4ee3\u7801\u3002 \u6bd4\u8d5b\u4e2d\u4e0d\u80fd\u6076\u610f\u5361\u8bc4\u6d4b\u3002 \u4e0d\u5f97\u5bf9\u5916\u63d0\u4f9b\u6bd4\u8d5b\u6570\u636e\u548c\u6807\u7a0b\uff0c\u4ec5\u7528\u4e8e\u7528\u6237\u81ea\u6d4b\u4f7f\u7528\u3002 \u6bd4\u8d5b\u8d26\u53f7\u4e0d\u80fd\u5916\u4f20\u3002 \u6bd4\u8d5b\u671f\u95f4\u4e0d\u5f97\u5bf9\u5916\u53d1\u9001\u672c\u573a\u6bd4\u8d5b\u535a\u5ba2\u9898\u89e3\u3002 2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425 \u00b6 \u65f6\u95f4 \u00b6 2020\u5e747\u670818\u65e5 \u81f3 2020\u5e748\u670810\u65e5 \u6bcf\u5468\u4e00\u3001\u516d12:00-17:00 \u6bd4\u8d5b\u7ed3\u679c \u00b6 \u7b2c\u4e09\u573a \u7b2c\u56db\u573a \u7b2c\u4e94\u573a \u7b2c\u516d\u573a \u7b2c\u4e03\u573a \u7b2c\u516b\u573a \u7b2c\u4e5d\u573a \u7b2c\u5341\u573a \u961f\u540d \u603b\u8fc7\u9898\u6570 \u603b\u7f5a\u65f6 \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9752\u9752\u8349\u539f\u4e09\u952e\u5ba2 19 47:49:33 3 3:28:11 788 2 2:50:49 648 3 7:04:12 544 2 7:38:11 869 3 8:35:16 407 1 5:23:53 608 3 11:00:04 676 2 1:48:57 219 \u590f\u65e5\u5e38\u5403\u5c0f\u8089\u4e32\u559d\u674f\u4ec1\u8336 14 33:11:04 3 6:42:13 859 2 3:06:53 673 1 2:24:45 1073 2 3:20:28 668 1 1:00:29 862 0 685 3 6:26:32 563 2 10:09:44 764 \u4e09\u7f3a\u4e00 14 42:41:16 3 11:02:18 956 2 6:16:29 875 2 2:23:12 690 2 5:06:57 769 1 4:01:27 1056 0 685 2 8:15:13 842 2 5:35:40 628 \u62ff\u94c1\u5c31\u518d\u4e5f\u4e0d\u559d\u62ff\u94c1\uff01 12 30:32:34 3 12:53:51 972 1 0:33:45 999 1 0:32:17 989 2 5:41:17 800 1 1:04:59 872 0 685 3 6:25:24 562 1 3:21:01 864 Wow404 9 30:21:16 1 1:10:01 1148 1 2:21:16 1052 1 5:39:15 1112 2 9:05:27 903 1 1:12:25 889 1 6:27:35 974 2 4:25:17 531 2020\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66\u6691\u671f\u591a\u6821\u8054\u5408\u8bad\u7ec3 \u00b6 \u7b80\u4ecb \u00b6 \u9898\u76ee\u4e3a\u82f1\u6587\uff0c\u56fd\u5185ACM\u9876\u5c16\u9009\u624b\u3001World Final\u540d\u6821\u547d\u9898\u3002 \u9898\u76ee\u96be\u5ea6 \u63a5\u8fd1\u6b63\u5f0fICPC/CCPC\u7684\u533a\u57df\u8d5b\u548cFinal\uff0c\u9ad8\u4e8e\u725b\u5ba2\u591a\u6821\uff0c\u62a5\u540d\u524d\u8bf7\u614e\u91cd\u8003\u8651 \u3002 \u5f00\u653e\u89e3\u9898\u62a5\u544a\uff0c\u6807\u7a0b\u548c\u6d4b\u8bd5\u6570\u636e\u3002 \u6bd4\u8d5b\u65f6\u95f4 \u00b6 Contest Time 2020 Multi-University Training Contest 10 2020-08-20 12:00:00 2020 Multi-University Training Contest 9 2020-08-18 12:00:00 2020 Multi-University Training Contest 8 2020-08-13 12:00:00 2020 Multi-University Training Contest 7 2020-08-11 12:00:00 2020 Multi-University Training Contest 6 2020-08-06 12:00:00 2020 Multi-University Training Contest 5 2020-08-04 12:00:00 2020 Multi-University Training Contest 4 2020-07-30 12:00:00 2020 Multi-University Training Contest 3 2020-07-28 12:00:00 2020 Multi-University Training Contest 2 2020-07-23 12:00:00 2020 Multi-University Training Contest 1 2020-07-21 12:00:00","title":"\u6691\u671f\u591a\u6821\u8bad\u7ec3"},{"location":"training/2020Summer/official/#2020","text":"\u961f\u540d \u4eba\u5458 \u9752\u9752\u8349\u539f\u4e09\u952e\u5ba2 Lyu Jiuyang , Leng Linfu, Gan Yuhui \u62ff\u94c1\u5c31\u518d\u4e5f\u4e0d\u559d\u62ff\u94c1\uff01 Li Shengrun , Xiao Zimeng, Xu Ke \u590f\u65e5\u957f\u5403\u5c0f\u8089\u4e32\u559d\u674f\u4ec1\u8336 Gao Chang , Yang Yixin, Wang Chengrui \u4e09\u7f3a\u4e00 Qi Zelu , Zhang Huarui, Zhao Runze Wow404 Wang Mingyue , Yu Mengli, Li Meiying, Zeng Xianghao","title":"2020 \u6691\u671f\u8bad\u7ec3\u4eba\u5458\u540d\u5355\uff08\u6392\u540d\u4e0d\u5206\u5148\u540e\uff09"},{"location":"training/2020Summer/official/#_1","text":"2020\u5e747\u670818\u65e5 \u81f3 2020\u5e748\u670822\u65e5\uff0c\u5468\u65e5\u4f11\u606f\u3002 \u6bcf\u65e5\u8bad\u7ec3\u65f6\u95f4\u4e3a\u65e99\u70b9\u81f3\u665a5\u70b9\uff0c\u961f\u5185\u53ef\u4ee5\u9002\u5f53\u8c03\u6574\u3002","title":"\u8bad\u7ec3\u65f6\u95f4"},{"location":"training/2020Summer/official/#_2","text":"","title":"\u591a\u6821\u8bad\u7ec3\u6ce8\u610f\u4e8b\u9879"},{"location":"training/2020Summer/official/#_3","text":"\u4e0d\u5f97\u65e0\u6545\u7f3a\u5e2d\u3001\u8fdf\u5230\uff0c\u65e9\u9000\u4efb\u4f55\u62a5\u540d\u53c2\u4e0e\u7684\u6bd4\u8d5b\u3002 \u6bd4\u8d5b\u4e2d\u4e0d\u80fd\u6284\u88ad\u5176\u4ed6\u961f\u4f0d\u7684\u4ee3\u7801\u3002 \u6bd4\u8d5b\u4e2d\u4e0d\u80fd\u6076\u610f\u5361\u8bc4\u6d4b\u3002 \u4e0d\u5f97\u5bf9\u5916\u63d0\u4f9b\u6bd4\u8d5b\u6570\u636e\u548c\u6807\u7a0b\uff0c\u4ec5\u7528\u4e8e\u7528\u6237\u81ea\u6d4b\u4f7f\u7528\u3002 \u6bd4\u8d5b\u8d26\u53f7\u4e0d\u80fd\u5916\u4f20\u3002 \u6bd4\u8d5b\u671f\u95f4\u4e0d\u5f97\u5bf9\u5916\u53d1\u9001\u672c\u573a\u6bd4\u8d5b\u535a\u5ba2\u9898\u89e3\u3002","title":"\u6240\u6709\u961f\u4f0d\u5fc5\u987b\u9075\u5b88\u7684\u7eaa\u5f8b"},{"location":"training/2020Summer/official/#2020_1","text":"","title":"2020\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425"},{"location":"training/2020Summer/official/#_4","text":"2020\u5e747\u670818\u65e5 \u81f3 2020\u5e748\u670810\u65e5 \u6bcf\u5468\u4e00\u3001\u516d12:00-17:00","title":"\u65f6\u95f4"},{"location":"training/2020Summer/official/#_5","text":"\u7b2c\u4e09\u573a \u7b2c\u56db\u573a \u7b2c\u4e94\u573a \u7b2c\u516d\u573a \u7b2c\u4e03\u573a \u7b2c\u516b\u573a \u7b2c\u4e5d\u573a \u7b2c\u5341\u573a \u961f\u540d \u603b\u8fc7\u9898\u6570 \u603b\u7f5a\u65f6 \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9898\u6570 \u7f5a\u65f6 \u672c\u573a\u6392\u540d \u9752\u9752\u8349\u539f\u4e09\u952e\u5ba2 19 47:49:33 3 3:28:11 788 2 2:50:49 648 3 7:04:12 544 2 7:38:11 869 3 8:35:16 407 1 5:23:53 608 3 11:00:04 676 2 1:48:57 219 \u590f\u65e5\u5e38\u5403\u5c0f\u8089\u4e32\u559d\u674f\u4ec1\u8336 14 33:11:04 3 6:42:13 859 2 3:06:53 673 1 2:24:45 1073 2 3:20:28 668 1 1:00:29 862 0 685 3 6:26:32 563 2 10:09:44 764 \u4e09\u7f3a\u4e00 14 42:41:16 3 11:02:18 956 2 6:16:29 875 2 2:23:12 690 2 5:06:57 769 1 4:01:27 1056 0 685 2 8:15:13 842 2 5:35:40 628 \u62ff\u94c1\u5c31\u518d\u4e5f\u4e0d\u559d\u62ff\u94c1\uff01 12 30:32:34 3 12:53:51 972 1 0:33:45 999 1 0:32:17 989 2 5:41:17 800 1 1:04:59 872 0 685 3 6:25:24 562 1 3:21:01 864 Wow404 9 30:21:16 1 1:10:01 1148 1 2:21:16 1052 1 5:39:15 1112 2 9:05:27 903 1 1:12:25 889 1 6:27:35 974 2 4:25:17 531","title":"\u6bd4\u8d5b\u7ed3\u679c"},{"location":"training/2020Summer/official/#2020_2","text":"","title":"2020\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66\u6691\u671f\u591a\u6821\u8054\u5408\u8bad\u7ec3"},{"location":"training/2020Summer/official/#_6","text":"\u9898\u76ee\u4e3a\u82f1\u6587\uff0c\u56fd\u5185ACM\u9876\u5c16\u9009\u624b\u3001World Final\u540d\u6821\u547d\u9898\u3002 \u9898\u76ee\u96be\u5ea6 \u63a5\u8fd1\u6b63\u5f0fICPC/CCPC\u7684\u533a\u57df\u8d5b\u548cFinal\uff0c\u9ad8\u4e8e\u725b\u5ba2\u591a\u6821\uff0c\u62a5\u540d\u524d\u8bf7\u614e\u91cd\u8003\u8651 \u3002 \u5f00\u653e\u89e3\u9898\u62a5\u544a\uff0c\u6807\u7a0b\u548c\u6d4b\u8bd5\u6570\u636e\u3002","title":"\u7b80\u4ecb"},{"location":"training/2020Summer/official/#_7","text":"Contest Time 2020 Multi-University Training Contest 10 2020-08-20 12:00:00 2020 Multi-University Training Contest 9 2020-08-18 12:00:00 2020 Multi-University Training Contest 8 2020-08-13 12:00:00 2020 Multi-University Training Contest 7 2020-08-11 12:00:00 2020 Multi-University Training Contest 6 2020-08-06 12:00:00 2020 Multi-University Training Contest 5 2020-08-04 12:00:00 2020 Multi-University Training Contest 4 2020-07-30 12:00:00 2020 Multi-University Training Contest 3 2020-07-28 12:00:00 2020 Multi-University Training Contest 2 2020-07-23 12:00:00 2020 Multi-University Training Contest 1 2020-07-21 12:00:00","title":"\u6bd4\u8d5b\u65f6\u95f4"},{"location":"training/2021Summer/nowcoder/","text":"Nowcoder\u591a\u6821\u8bad\u7ec3\u5404\u961f\u9898\u89e3\u603b\u7ed3 \u00b6 \u4e09\u7f3a\u4e00 \u00b6 \u725b\u5ba2\u591a\u6821\u7b2c\u56db\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e94\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e03\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516b\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e5d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u5341\u573a \u60f3\u4e0d\u51fa\u961f\u540d\u5c31\u53ea\u597d\u8fd9\u6837\u4e86 \u00b6 \u725b\u5ba2\u591a\u6821\u7b2c\u56db\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e94\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e03\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516b\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e5d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u5341\u573a \u4e0d\u7206\u96f6\u5c31\u7b97\u80dc\u5229 \u00b6 \u725b\u5ba2\u591a\u6821\u7b2c\u56db\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e94\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e03\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516b\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e5d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u5341\u573a \u961f\u540d\u6682\u5b9a \u00b6 \u725b\u5ba2\u591a\u6821\u7b2c\u56db\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e94\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e03\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516b\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e5d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u5341\u573a \u6848\u677f\u54b8\u9c7c \u00b6 \u725b\u5ba2\u591a\u6821\u7b2c\u56db\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e94\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e03\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516b\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e5d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u5341\u573a \u603b\u699c \u00b6 \u79ef\u5206\u89c4\u5219\uff1a \u5355\u573a\u5f97\u5206 = 100 \\times(solved_{team}/solved_{winner})\\times (2 \\times N_{teams}-2)/(N_{teams}+team_{place}-2) 100 \\times(solved_{team}/solved_{winner})\\times (2 \\times N_{teams}-2)/(N_{teams}+team_{place}-2) \u961f\u540d \u725b\u5ba2\u79ef\u5206 HDU\u79ef\u5206 \u603b\u79ef\u5206 Rank \u4e09\u7f3a\u4e00 169.326 36.470 205.796 1 \u4e0d\u7206\u96f6\u5c31\u7b97\u80dc\u5229 133.224 66.253 199.476 2 \u961f\u540d\u6682\u5b9a 171.775 13.161 184.936 3 \u60f3\u4e0d\u51fa\u961f\u540d\u5c31\u53ea\u597d\u8fd9\u6837\u4e86 155.141 0.0000 155.141 4 \u6848\u677f\u54b8\u9c7c 82.089 0.0000 82.089 5","title":"\u725b\u5ba2\u591a\u6821\u603b\u7ed3"},{"location":"training/2021Summer/nowcoder/#nowcoder","text":"","title":"Nowcoder\u591a\u6821\u8bad\u7ec3\u5404\u961f\u9898\u89e3\u603b\u7ed3"},{"location":"training/2021Summer/nowcoder/#_1","text":"\u725b\u5ba2\u591a\u6821\u7b2c\u56db\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e94\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e03\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516b\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e5d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u5341\u573a","title":"\u4e09\u7f3a\u4e00"},{"location":"training/2021Summer/nowcoder/#_2","text":"\u725b\u5ba2\u591a\u6821\u7b2c\u56db\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e94\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e03\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516b\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e5d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u5341\u573a","title":"\u60f3\u4e0d\u51fa\u961f\u540d\u5c31\u53ea\u597d\u8fd9\u6837\u4e86"},{"location":"training/2021Summer/nowcoder/#_3","text":"\u725b\u5ba2\u591a\u6821\u7b2c\u56db\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e94\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e03\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516b\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e5d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u5341\u573a","title":"\u4e0d\u7206\u96f6\u5c31\u7b97\u80dc\u5229"},{"location":"training/2021Summer/nowcoder/#_4","text":"\u725b\u5ba2\u591a\u6821\u7b2c\u56db\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e94\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e03\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516b\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e5d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u5341\u573a","title":"\u961f\u540d\u6682\u5b9a"},{"location":"training/2021Summer/nowcoder/#_5","text":"\u725b\u5ba2\u591a\u6821\u7b2c\u56db\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e94\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e03\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u516b\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u4e5d\u573a \u725b\u5ba2\u591a\u6821\u7b2c\u5341\u573a","title":"\u6848\u677f\u54b8\u9c7c"},{"location":"training/2021Summer/nowcoder/#_6","text":"\u79ef\u5206\u89c4\u5219\uff1a \u5355\u573a\u5f97\u5206 = 100 \\times(solved_{team}/solved_{winner})\\times (2 \\times N_{teams}-2)/(N_{teams}+team_{place}-2) 100 \\times(solved_{team}/solved_{winner})\\times (2 \\times N_{teams}-2)/(N_{teams}+team_{place}-2) \u961f\u540d \u725b\u5ba2\u79ef\u5206 HDU\u79ef\u5206 \u603b\u79ef\u5206 Rank \u4e09\u7f3a\u4e00 169.326 36.470 205.796 1 \u4e0d\u7206\u96f6\u5c31\u7b97\u80dc\u5229 133.224 66.253 199.476 2 \u961f\u540d\u6682\u5b9a 171.775 13.161 184.936 3 \u60f3\u4e0d\u51fa\u961f\u540d\u5c31\u53ea\u597d\u8fd9\u6837\u4e86 155.141 0.0000 155.141 4 \u6848\u677f\u54b8\u9c7c 82.089 0.0000 82.089 5","title":"\u603b\u699c"},{"location":"training/2021Summer/official/","text":"2021 \u6691\u671f\u8bad\u7ec3\u4eba\u5458\u540d\u5355\uff08\u6392\u540d\u4e0d\u5206\u5148\u540e\uff09 \u00b6 \u961f\u540d \u4eba\u5458 \u4e09\u7f3a\u4e00 Qi Zelu , Zhang Huarui, Zhao Runze \u961f\u540d\u6682\u5b9a Pan Dongyijie , Yang Xueting, Ou Pengpeng \u4e0d\u7206\u96f6\u5c31\u7b97\u80dc\u5229 Li Meiying , Yang Yusen, Guan Xin \u6848\u677f\u54b8\u9c7c Tan Xingyu , Hu Lukun \u60f3\u4e0d\u51fa\u961f\u540d\u5c31\u53ea\u597d\u8fd9\u6837\u4e86 Zhu Junjie , Wang Rui, Tian Yibin \u8bad\u7ec3\u65f6\u95f4 \u00b6 2021\u5e747\u670819\u65e5 \u81f3 2021\u5e748\u670821\u65e5\uff0c\u5468\u65e5\u4f11\u606f\u3002 \u6bcf\u65e5\u8bad\u7ec3\u65f6\u95f4\u4e3a\u65e99\u70b9\u81f3\u665a5\u70b9\uff0c\u961f\u5185\u53ef\u4ee5\u9002\u5f53\u8c03\u6574\u3002 Nowcoder\u591a\u6821\u8bad\u7ec3\u6ce8\u610f\u4e8b\u9879 \u00b6 \u6240\u6709\u961f\u4f0d\u5fc5\u987b\u9075\u5b88\u7684\u7eaa\u5f8b \u00b6 \u4e0d\u5f97\u65e0\u6545\u7f3a\u5e2d\u3001\u8fdf\u5230\uff0c\u65e9\u9000\u4efb\u4f55\u62a5\u540d\u53c2\u4e0e\u7684\u6bd4\u8d5b\u3002 \u6bd4\u8d5b\u4e2d\u4e0d\u80fd\u6284\u88ad\u5176\u4ed6\u961f\u4f0d\u7684\u4ee3\u7801\u3002 \u6bd4\u8d5b\u4e2d\u4e0d\u80fd\u6076\u610f\u5361\u8bc4\u6d4b\u3002 \u4e0d\u5f97\u5bf9\u5916\u63d0\u4f9b\u6bd4\u8d5b\u6570\u636e\u548c\u6807\u7a0b\uff0c\u4ec5\u7528\u4e8e\u7528\u6237\u81ea\u6d4b\u4f7f\u7528\u3002 \u6bd4\u8d5b\u8d26\u53f7\u4e0d\u80fd\u5916\u4f20\u3002 \u6bd4\u8d5b\u671f\u95f4\u4e0d\u5f97\u5bf9\u5916\u53d1\u9001\u672c\u573a\u6bd4\u8d5b\u535a\u5ba2\u9898\u89e3\u3002 2021\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425 \u00b6 \u65f6\u95f4 \u00b6 2021\u5e747\u670819\u65e5 \u81f3 2021\u5e748\u670816\u65e5 \u6bcf\u5468\u4e00\u3001\u516d12:00-17:00 2021\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66\u6691\u671f\u591a\u6821\u8054\u5408\u8bad\u7ec3 \u00b6 \u7b80\u4ecb \u00b6 \u9898\u76ee\u4e3a\u82f1\u6587\uff0c\u56fd\u5185ACM\u9876\u5c16\u9009\u624b\u3001World Final\u540d\u6821\u547d\u9898\u3002 \u9898\u76ee\u96be\u5ea6 \u63a5\u8fd1\u6b63\u5f0fICPC/CCPC\u7684\u533a\u57df\u8d5b\u548cFinal\uff0c\u9ad8\u4e8e\u725b\u5ba2\u591a\u6821\uff0c\u62a5\u540d\u524d\u8bf7\u614e\u91cd\u8003\u8651 \u3002 \u5f00\u653e\u89e3\u9898\u62a5\u544a\uff0c\u6807\u7a0b\u548c\u6d4b\u8bd5\u6570\u636e\u3002 \u6bd4\u8d5b\u65f6\u95f4 \u00b6 Contest Time 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff0810\uff09 2020-08-19 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff089\uff09 2020-08-17 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff088\uff09 2020-08-12 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff087\uff09 2020-08-10 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff086\uff09 2020-08-05 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff085\uff09 2020-08-03 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff084\uff09 2020-07-29 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff083\uff09 2020-07-27 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff082\uff09 2020-07-22 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff081\uff09 2020-07-20 12:00:00","title":"\u6691\u671f\u591a\u6821\u8bad\u7ec3"},{"location":"training/2021Summer/official/#2021","text":"\u961f\u540d \u4eba\u5458 \u4e09\u7f3a\u4e00 Qi Zelu , Zhang Huarui, Zhao Runze \u961f\u540d\u6682\u5b9a Pan Dongyijie , Yang Xueting, Ou Pengpeng \u4e0d\u7206\u96f6\u5c31\u7b97\u80dc\u5229 Li Meiying , Yang Yusen, Guan Xin \u6848\u677f\u54b8\u9c7c Tan Xingyu , Hu Lukun \u60f3\u4e0d\u51fa\u961f\u540d\u5c31\u53ea\u597d\u8fd9\u6837\u4e86 Zhu Junjie , Wang Rui, Tian Yibin","title":"2021 \u6691\u671f\u8bad\u7ec3\u4eba\u5458\u540d\u5355\uff08\u6392\u540d\u4e0d\u5206\u5148\u540e\uff09"},{"location":"training/2021Summer/official/#_1","text":"2021\u5e747\u670819\u65e5 \u81f3 2021\u5e748\u670821\u65e5\uff0c\u5468\u65e5\u4f11\u606f\u3002 \u6bcf\u65e5\u8bad\u7ec3\u65f6\u95f4\u4e3a\u65e99\u70b9\u81f3\u665a5\u70b9\uff0c\u961f\u5185\u53ef\u4ee5\u9002\u5f53\u8c03\u6574\u3002","title":"\u8bad\u7ec3\u65f6\u95f4"},{"location":"training/2021Summer/official/#nowcoder","text":"","title":"Nowcoder\u591a\u6821\u8bad\u7ec3\u6ce8\u610f\u4e8b\u9879"},{"location":"training/2021Summer/official/#_2","text":"\u4e0d\u5f97\u65e0\u6545\u7f3a\u5e2d\u3001\u8fdf\u5230\uff0c\u65e9\u9000\u4efb\u4f55\u62a5\u540d\u53c2\u4e0e\u7684\u6bd4\u8d5b\u3002 \u6bd4\u8d5b\u4e2d\u4e0d\u80fd\u6284\u88ad\u5176\u4ed6\u961f\u4f0d\u7684\u4ee3\u7801\u3002 \u6bd4\u8d5b\u4e2d\u4e0d\u80fd\u6076\u610f\u5361\u8bc4\u6d4b\u3002 \u4e0d\u5f97\u5bf9\u5916\u63d0\u4f9b\u6bd4\u8d5b\u6570\u636e\u548c\u6807\u7a0b\uff0c\u4ec5\u7528\u4e8e\u7528\u6237\u81ea\u6d4b\u4f7f\u7528\u3002 \u6bd4\u8d5b\u8d26\u53f7\u4e0d\u80fd\u5916\u4f20\u3002 \u6bd4\u8d5b\u671f\u95f4\u4e0d\u5f97\u5bf9\u5916\u53d1\u9001\u672c\u573a\u6bd4\u8d5b\u535a\u5ba2\u9898\u89e3\u3002","title":"\u6240\u6709\u961f\u4f0d\u5fc5\u987b\u9075\u5b88\u7684\u7eaa\u5f8b"},{"location":"training/2021Summer/official/#2021_1","text":"","title":"2021\u725b\u5ba2\u6691\u671f\u591a\u6821\u8bad\u7ec3\u8425"},{"location":"training/2021Summer/official/#_3","text":"2021\u5e747\u670819\u65e5 \u81f3 2021\u5e748\u670816\u65e5 \u6bcf\u5468\u4e00\u3001\u516d12:00-17:00","title":"\u65f6\u95f4"},{"location":"training/2021Summer/official/#2021_2","text":"","title":"2021\u676d\u5dde\u7535\u5b50\u79d1\u6280\u5927\u5b66\u6691\u671f\u591a\u6821\u8054\u5408\u8bad\u7ec3"},{"location":"training/2021Summer/official/#_4","text":"\u9898\u76ee\u4e3a\u82f1\u6587\uff0c\u56fd\u5185ACM\u9876\u5c16\u9009\u624b\u3001World Final\u540d\u6821\u547d\u9898\u3002 \u9898\u76ee\u96be\u5ea6 \u63a5\u8fd1\u6b63\u5f0fICPC/CCPC\u7684\u533a\u57df\u8d5b\u548cFinal\uff0c\u9ad8\u4e8e\u725b\u5ba2\u591a\u6821\uff0c\u62a5\u540d\u524d\u8bf7\u614e\u91cd\u8003\u8651 \u3002 \u5f00\u653e\u89e3\u9898\u62a5\u544a\uff0c\u6807\u7a0b\u548c\u6d4b\u8bd5\u6570\u636e\u3002","title":"\u7b80\u4ecb"},{"location":"training/2021Summer/official/#_5","text":"Contest Time 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff0810\uff09 2020-08-19 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff089\uff09 2020-08-17 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff088\uff09 2020-08-12 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff087\uff09 2020-08-10 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff086\uff09 2020-08-05 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff085\uff09 2020-08-03 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff084\uff09 2020-07-29 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff083\uff09 2020-07-27 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff082\uff09 2020-07-22 12:00:00 2021\u201cMINIEYE\u676f\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u8d85\u7ea7\u8054\u8d5b\uff081\uff09 2020-07-20 12:00:00","title":"\u6bd4\u8d5b\u65f6\u95f4"},{"location":"videos/videos/","text":"\u7a0b\u5e8f\u8bbe\u8ba1\u5165\u95e8 \u5faa\u73af\u7ed3\u6784\u7a0b\u5e8f\u8bbe\u8ba1 \u7efc\u5408\u7ec3\u4e60 \u65f6\u95f4\u590d\u6742\u5ea6\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u3001\u7ed3\u6784\u4f53\u3001\u9ad8\u7cbe\u5ea6\u8fd0\u7b97\u3001INT128\u3001sort\u7684\u5e94\u7528 \u6811\u548c\u56fe\u7684\u7ed3\u6784\u3001\u5b58\u50a8\u3001\u904d\u5386\u3001\u7b80\u5355\u4ecb\u7ecd\u5e76\u67e5\u96c6 \u6811\u548c\u56fe\u7684DFS\u3001BFS\u3001\u961f\u5217\u3001\u6808\uff08STL\uff09 \u6700\u5c0f\u751f\u6210\u6811\u3001\u6700\u77ed\u8def\u5f84 \u62d3\u6251\u6392\u5e8f\u3001\u5f3a\u8fde\u901a\u5206\u91cf LCA\u6700\u8fd1\u516c\u5171\u7956\u5148\u3001\u6811\u4e0a\u5dee\u5206\u3001RMQ \u6570\u8bba\uff08\u4e00\uff09 \u70b9\u5206\u6cbb \u7ebf\u6bb5\u6811\u8fdb\u9636","title":"\u89c6\u9891\u8d44\u6e90"}]}